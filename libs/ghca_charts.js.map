{"version":3,"sources":["webpack:///webpack/bootstrap d8c9acabc79251af73e4","webpack:///./src/entry.js","webpack:///./src/effet/Effet.js","webpack:///external \"d3\"","webpack:///./src/effet/eraserEffet.js","webpack:///./src/events/BaseEvent.js","webpack:///./src/global.js","webpack:///./src/layout/barLayout.js","webpack:///./src/layout/calendarLayout.js","webpack:///./src/layout/horizontalLayout.js","webpack:///./src/layout/layout.js","webpack:///./src/layout/layoutFeatures.js","webpack:///./src/layout/model/sankeyModel.js","webpack:///./src/layout/packLayout.js","webpack:///./src/layout/pieLayout.js","webpack:///./src/layout/progressBarLayout.js","webpack:///./src/layout/sankeyLayout.js","webpack:///./src/layout/scatterLayout.js","webpack:///./src/layout/sunburstLayout.js","webpack:///./src/layout/topoLayout.js","webpack:///./src/layout/treelayout.js","webpack:///./src/layout/treemapLayout.js","webpack:///./src/layout/verticalLayout.js","webpack:///./src/view/component/baseComponent.js","webpack:///./src/view/component/chartMap.js","webpack:///./src/view/component/charts/area.js","webpack:///./src/view/component/charts/axis.js","webpack:///./src/view/component/charts/bar.js","webpack:///./src/view/component/charts/baseAxis.js","webpack:///./src/view/component/charts/baseChart.js","webpack:///./src/view/component/charts/bizTopology.js","webpack:///./src/view/component/charts/calendar.js","webpack:///./src/view/component/charts/chart.js","webpack:///./src/view/component/charts/editorTopology.js","webpack:///./src/view/component/charts/heading.js","webpack:///./src/view/component/charts/horAxis.js","webpack:///./src/view/component/charts/legend.js","webpack:///./src/view/component/charts/legendItem.js","webpack:///./src/view/component/charts/line.js","webpack:///./src/view/component/charts/pack.js","webpack:///./src/view/component/charts/pie.js","webpack:///./src/view/component/charts/progressBar.js","webpack:///./src/view/component/charts/sankey.js","webpack:///./src/view/component/charts/scatter.js","webpack:///./src/view/component/charts/sunburst.js","webpack:///./src/view/component/charts/topology.js","webpack:///./src/view/component/charts/tree.js","webpack:///./src/view/component/charts/treemap.js","webpack:///./src/view/component/charts/verAxis.js","webpack:///./src/view/component/eagleEye.js","webpack:///./src/view/component/eagleEyeContainer.js","webpack:///./src/view/component/gis/gisMap.js","webpack:///./src/view/component/importcomponents/comboBox.js","webpack:///./src/view/component/importcomponents/dateTimeBox.js","webpack:///./src/view/component/importcomponents/iFrame.js","webpack:///./src/view/component/importcomponents/linkButton.js","webpack:///./src/view/component/importcomponents/multiTextLabel.js","webpack:///./src/view/component/importcomponents/textLabel.js","webpack:///./src/view/component/svg.js","webpack:///./src/view/component/svgCanvas.js","webpack:///./src/view/component/table.js","webpack:///./src/view/component/tagContainer.js","webpack:///./src/view/component/utilcomponents/evDataDispatcher.js","webpack:///./src/view/component/utilcomponents/timer.js","webpack:///./src/view/elements/baseElement.js","webpack:///./src/view/elements/circleElement.js","webpack:///./src/view/elements/imageElement.js","webpack:///./src/view/elements/mulitextElement.js","webpack:///./src/view/elements/pathElement.js","webpack:///./src/view/elements/plugins/imageTag.js","webpack:///./src/view/elements/plugins/label/baseLabel.js","webpack:///./src/view/elements/plugins/label/groupLabel.js","webpack:///./src/view/elements/plugins/label/label.js","webpack:///./src/view/elements/plugins/label/packLabel.js","webpack:///./src/view/elements/plugins/label/pieLabel.js","webpack:///./src/view/elements/plugins/label/topoLabel.js","webpack:///./src/view/elements/plugins/linkMap.js","webpack:///./src/view/elements/plugins/links/baseLink.js","webpack:///./src/view/elements/plugins/links/configLink.js","webpack:///./src/view/elements/plugins/links/curveLink.js","webpack:///./src/view/elements/plugins/links/link.js","webpack:///./src/view/elements/plugins/links/parallelLink.js","webpack:///./src/view/elements/plugins/links/sankeyLink.js","webpack:///./src/view/elements/plugins/nodeMap.js","webpack:///./src/view/elements/plugins/nodes/arcClass.js","webpack:///./src/view/elements/plugins/nodes/baseNode.js","webpack:///./src/view/elements/plugins/nodes/circle.js","webpack:///./src/view/elements/plugins/nodes/configGroupNode.js","webpack:///./src/view/elements/plugins/nodes/demoImageNode.js","webpack:///./src/view/elements/plugins/nodes/expandTool.js","webpack:///./src/view/elements/plugins/nodes/groupNode.js","webpack:///./src/view/elements/plugins/nodes/hBarNode.js","webpack:///./src/view/elements/plugins/nodes/hProgressBarNode.js","webpack:///./src/view/elements/plugins/nodes/IconNode.js","webpack:///./src/view/elements/plugins/nodes/imageNode.js","webpack:///./src/view/elements/plugins/nodes/lineNode.js","webpack:///./src/view/elements/plugins/nodes/moreTool.js","webpack:///./src/view/elements/plugins/nodes/node.js","webpack:///./src/view/elements/plugins/nodes/packNode.js","webpack:///./src/view/elements/plugins/nodes/pathNode.js","webpack:///./src/view/elements/plugins/nodes/rect.js","webpack:///./src/view/elements/plugins/nodes/sankeyNode.js","webpack:///./src/view/elements/plugins/nodes/sunburstNode.js","webpack:///./src/view/elements/plugins/nodes/treemapNode.js","webpack:///./src/view/elements/plugins/nodes/usePlugin.js","webpack:///./src/view/elements/plugins/nodes/vBarNode.js","webpack:///./src/view/elements/plugins/nodes/verTool.js","webpack:///./src/view/elements/plugins/plugin.js","webpack:///./src/view/elements/plugins/pluginMap.js","webpack:///./src/view/elements/plugins/tool/percentageInfo.js","webpack:///./src/view/elements/plugins/tool/toolTip.js","webpack:///./src/view/elements/rectElement.js","webpack:///./src/view/elements/shape/baseShape.js","webpack:///./src/view/elements/shape/circleShape.js","webpack:///./src/view/elements/shape/rectShape.js","webpack:///./src/view/graph.js","webpack:///./src/view/util/classFactory.js","webpack:///./src/view/util/colorUtil.js","webpack:///./src/view/util/commonUtil.js","webpack:///./src/view/util/constant.js","webpack:///./src/view/util/dataParser.js","webpack:///./src/view/util/elementUtil.js","webpack:///./src/view/util/eventUtil.js","webpack:///./src/view/util/fileUtil.js","webpack:///./src/view/util/math.js","webpack:///./src/view/util/mouseUtil.js","webpack:///./src/view/util/objectUtil.js","webpack:///./src/view/util/regexUtil.js","webpack:///./src/view/util/selectUtil.js","webpack:///./src/view/util/stringUtil.js","webpack:///./src/view/util/svgUtil.js","webpack:///./src/view/util/tableColFormatterUtil.js","webpack:///./src/view/util/UUIDUtil.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtjLA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,wB;;;;;;;ACxDA,qB;;;;;;ACAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAsB,MAAM;AAC5B;AACA,MAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8B;;;;;;AC3CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yDAAwD;AACxD,sDAAqD;AACrD,uDAAsD;AACtD,sDAAqD;AACrD,mDAAkD;AAClD,mDAAkD;;AAElD,sDAAqD;AACrD,wDAAuD;AACvD,qDAAoD;AACpD,qDAAoD;AACpD,uDAAsD;AACtD,oDAAmD;AACnD,kDAAiD;AACjD,yDAAwD;AACxD,kDAAiD;AACjD,mDAAkD;AAClD,6DAA4D;AAC5D,yDAAwD;AACxD,2DAA0D;AAC1D,qDAAoD;AACpD,gEAA+D;AAC/D,oDAAmD;AACnD,0DAAyD;AACzD,yDAAwD;AACxD,yDAAwD;AACxD,2DAA0D;AAC1D,qDAAoD;AACpD,gEAA+D;AAC/D,6DAA4D;AAC5D,mDAAkD;AAClD;;AAEA,sDAAqD,kCAAkC;AACvF,oDAAmD;AACnD,oDAAmD;AACnD,mDAAkD;;AAElD,yDAAwD;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAwC;AACxC,iDAAgD;;AAEhD;AACA,6CAA4C;AAC5C,6CAA4C;;AAE5C;AACA,yDAAwD;AACxD,wDAAuD;AACvD;;AAEA;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB,aAAY;AACZ,cAAa;AACb,cAAa;AACb,YAAW;AACX;AACA;;AAEA,yB;;;;;;ACvBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0EAAyE;AACzE,qDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,4DAA2D;AAC3D,mDAAkD;AAClD;AACA,4DAA2D,UAAU;AACrE;AACA;AACA,2CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAgD,UAAU;AAC1D;AACA,kDAAiD,UAAU;AAC3D;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,iDAAgD,UAAU;AAC1D;AACA,wDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qEAAoE;AACpE;AACA,kBAAiB;AACjB;AACA,qEAAoE;AACpE;AACA;AACA;;AAEA;AACA;AACA,+BAA8B,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA4C,SAAS;AACrD;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAa,8CAA8C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wFAAuF;AACvF;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA,cAAa,kFAAkF;AAC/F;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,c;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAwE;AACxE,wBAAuB;AACvB;AACA,yEAAwE;AACxE;AACA;AACA;AACA,aAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAoE;AACpE;AACA,kBAAiB;AACjB;AACA,qEAAoE;AACpE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxbA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,U;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iC;;;;;;;ACvaA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAkB,SAAS;AAC3B;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3PA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACvsBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL,KAAI;;AAEJ;AACA;AACA,KAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,KAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,KAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA,KAAI;AACJ,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC1cA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C,UAAS;AACT;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;;ACngC;AACA;AACA,OAAM;AACN;AACA,gC;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA,0C;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iCAAgC;AAChC,wCAAuC;;AAEvC;;;;;;;;ACnRA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3RA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChQA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9JA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,4DAA2D;AAC3D,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAmE;AACnE,UAAS;AACT;AACA,oEAAmE;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iC;;;;;;;ACnoCAAmC;AACnC;AACA;AACA;AACA,iC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA0G,OAAO;AACjH;AACA;AACA,cAAa;AACb;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oD;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACldA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAmD,iDAAiD,EAAE,EAAE;AACxG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AChuDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;AACA;AACA,wF;AACA,cAAa;AACb;AACA,mC;AACA,iE;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACpbA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAkB,SAAS;AAC3B;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iC;;;;;;AC3PA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAgC;AAChC,mBAAkB;;AAElB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA0B,MAAM,8BAA8B,UAAU;AACxE,0BAAyB,SAAS;AACleAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,SAAS;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,0CAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA,kHAAiH,wCAAwC;AACzJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,8EAA6E,wCAAwC;AACrH,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA2E,SAAS;AACpF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAuE,SAAS;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,2CAA2C;AAClG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,SAAS,mBAAmB,GAAG;AAC1D;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;;AAEA,2BAA0B;;AAE1B;AACA,wCAAuC,GAAG,gBAAgB,GAAG;AAC7D,YAAW,GAAG;AACd;AACA;AACA,uCAAsC,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD,mDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,qDAAoD,2CAA2C;AAC/F,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gC;;;;;;;AC7mEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACvCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,0BAA0B;AACjD;AACA,kBAAiB,KAAK;AACtB,kBAAiB,KAAK;AACtB,kBAAiB,kBAAkB;AACnC,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA,iDAAgD;AAChD;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA4B,YAAY,EAAE;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA,2DAA0D,YAAY,EAAE,G;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,2DAA0D,YAAY,EAAE;;AAExE;AACA;AACA;AACA,iCAAgC,YAAY,EAAE;AAC9C;AACA;AACA;AACA,kF;AACA,sC;AACA,kBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB;AACA,gDAA+C,YAAY,EAAE;AAC7D;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA,kBAAiB,E;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,gDAA+C,YAAY,EAAE;AAC7D;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;AC7cA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0CAAyC,EAAE,IAAI,EAAE,IAAI,EAAE;AACvD;AACA,8CAA6C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;;AAEX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD,gEAA+D;AAC/D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACreA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;;AClPA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB,UAAS;AACT,6BAA4B,OAAO,0BAA0B;AAC7D;AACA,uBAAsB,mBAAmB,8BAA8B;AACvE,wBAAuB,6BAA6B;AACpD,UAAS;AACT,6BAA4B,2BAA2B;;AAEvgDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClvBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAiE,8BAA8B;AAC/F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjmDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACzggKAA+J;AAC/J;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA8E,SAAS;AACvF;AACA;AACA;AACA;AACA,mE;AACA,+F;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,yDAAwD,SAAS;AACjE;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA,qDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA,qE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA4D,SAAS;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD;AACzD;AACA;AACA,6EAA4E,SAAS;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAgF,SAAS;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAgF,SAAS;AACzF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,SAAS;AACnC;AACA;AACA;AACA,sC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;AACA;AACA,cAAa;AACb,0DAAyD,SAAS;AAClE;AACA;AACA;AACA,sC;AACA;AACA;AACA;AACA;AACA,6CAA4C,eAAe;AAC3D;AACA;AACA,8BAA6B;AAC7B;AACA,8B;;AAEA;AACA,sB;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oC;AACA;AACA;AACA,8HAA6H,aAAa;AAC1I,U;AACA;AACA;AACA;AACA,8HAA6H,YAAY;AACzI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,uBAAuB;AAChF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA,UAAS;AACT;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS,6CAA6C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,qCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA,2DAA0D,QAAQ;AAClE;AACA;AACA,4BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;;AAEA;AACA,qBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,6BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,sC;AACA;AACA,U;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6C;AACA;AACA;AACA,U;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA4F;AAC5F;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,8B;;;;;;;AC5qEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,2BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,4BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,oBAAmB;AACniDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6B;AACA,cAAa;AACb,qC;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,gC;AACA;AACA,cAAa;AACb,qC;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA,kBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA,kBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA,kBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA,kBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6E;AACA,+C;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA,wE;AACA,6C;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA4B,SAAS,oBAAoB,EAAE,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC,EAAE;AACvC;AACA;AACA,UAAS;AACT;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;ACroBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,SAAS;AACtcAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0DAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;;AAEA,UAAS;AACT;AACA;AACA;AACA,eAAc;AACd;AACA;AACA,cAAa;AACb;AACA;AACA,eAAc;AACd;AACA;AACA,cAAa,2BAA2B;AACxC;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA,gCAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA,mCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA8C,GAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sHAAqH;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAqC,kCAAkC,oCAAoC;AAC3G;AACA,sCAAqC,kCAAkC,oCAAoC;AAC3G;AACA,sCAAqC,qBAAqB,wCAAwC;AAClG;AACA,sCAAqC,qBAAqB,wCAAwC;;AAElG;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4EAA2E,SAAS;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA4C,WAAW,qBAAqB;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA4C,WAAW,qBAAqB;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;;AAExB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,wCAAwC;AACrG,+DAA8D,wCAAwC;;AAEtG;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iD;;AAEA;AACA;AACA;AACA;AACA,iC;;;AAGA;AACA;AACA;AACA,6F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wB;AACA;AACA,iD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,kBAAiB;AACjgCAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACvxEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB,yBAAwB;AACxB,0BAAyB;AACzB;AACA;AACA;AACA,oBAAmB,QAAQ,YAAY;AACvC,oBAAmB,QAAQ,YAAY;AACvC,qBAAoB,QAAQ;AAC5B,WAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gKAA+J;AAC/J;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA8E,SAAS;AACvF;AACA;AACA;AACA;AACA;AACA,mE;AACA,+F;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,yDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,iDAAgD;AAChD,wB;AACA;AACA,+CAA8C,MAAM;AACpD;AACA,6EAA4E;AAC5E;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA,wDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,mBAAmB;AAC1C;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6HAA4H;AAC5H;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA,wE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D,SAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAY;AACZ;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAoB,mBAAmB;AACvC;AACA;AACA,cAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;;;AAGT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvkBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAgE,SAAS;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD;AACzD;AACA;AACA,6EAA4E,SAAS;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAgF,SAAS;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAgF,SAAS;AACzF;AACA;AACA;AACA;AACA;;;AAGA;AACA,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,SAAS;AAClE;AACA;AACA;AACA,sC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;AACA;AACA,cAAa;AACb,0DAAyD,SAAS;AAClE;AACA;AACA;AACA,sC;AACA;AACA;AACA;AACA;AACA,6CAA4C,eAAe;AAC3D;AACA;AACA,8BAA6B;AAC7B;AACA,8B;;AAEA;AACA,sB;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oC;AACA;AACA;AACA,8HAA6H,aAAa;AAC1I,U;AACA;AACA;AACA;AACA;AACA,8HAA6H,YAAY;AACzI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT,sCAAqC;AACrC;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB,eAAe;AACnC;AACA;AACA;AACA,kEAAiE,SAAS;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;;AAEA;AACA;AACA,iEAAgE,SAAS;AACzE;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA,2DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,uBAAuB;AAChF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA,UAAS;AACT;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;;;AAGb;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS,6CAA6C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,qCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA,2DAA0D,QAAQ;AAClE;AACA;AACA,4BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA,0CAAyC;AACzC;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;;;AAGA,qBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,6BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,sC;AACA;AACA,U;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6C;AACA;AACA;AACA,U;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA2E;AAC3E;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iC;;;;;;;ACrnGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAW,4CAA4C;AACvD,iCAAgC;AAChC;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D;AAC7D,8DAA6D;AAC7D;AACA;;AAEA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS,OAAO;AAChB;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA4D;AAC5D;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;;ACtbA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT,kC;AACA,UAAS;AACT,mD;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,2BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,sBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,oCAAmC,cAAc;AACjD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC5QA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAAyB,EAAE,GAAG,EAAE;AAChkBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,QAAO;AACP;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D;AAC3D,4DAA2D;AAC3D;AACA;;AAEA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS,OAAO;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA4B,SAAS,oBAAoB,EAAE,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,EAAE;AACpC;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yB;;;;;;;ACv0BA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,oEAAmE,8BAA8B;AACjG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAoC,8CAA8C;AAClF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6B;;;;;;;AC7WA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA,iDAAgD;AAChD;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B,YAAY,EAAE;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA,4CAA2C,YAAY,EAAE;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,4CAA2C,YAAY,EAAE;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;ACnVA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;;AAEf;AACA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,uC;AACA,uE;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;ACxTA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,+BAA+B;AAC5C;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,+BAA+B;AAC5C;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;;ACxRA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;AC1MA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kD;AACA,oC;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA,kDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,8CAA8C;AAC1F,6CAA4C,eAAe,EAAE;AAC7D;AACA;AACA;AACA,wCAAuC,eAAe,EAAE;AACxD,0CAAyC,+BAA+B,EAAE;AAC1E,6CAA4C,kEAAkE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,qCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA,uCAAsC,QAAQ;AAC9C;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yB;;;;;;;AClyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB,UAAS;AACT;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA,yDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAkE,SAAS;AAC3E;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;;ACtwGAAuG,oBAAoB;AAC3H,uEAAsE,SAAS;AAC/E;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0CAAyC;;AAEzC;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,2EAA0E,SAAS;AACnF;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,uBAAuB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,IAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA,2CAA0C,kBAAkB,EAAE;;AAE9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,wBAAwB;AACpD;AACA;AACA;AACA,cAAa;AACb,yCAAwC,2BAA2B,EAAE;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb,8CAA6C;AAC7C;AACA;AACA,UAAS;;AAET;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;AC9iBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB,yBAAwB;AACxB,0BAAyB;AACzB;AACA;AACA;AACA,oBAAmB,QAAQ,YAAY;AACvC,oBAAmB,QAAQ,YAAY;AACvC,qBAAoB,QAAQ;AAC5B,WAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA8E,SAAS;AACvF;AACA;AACA;AACA;AACA;AACA,mE;AACA,+F;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,yDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iEAAgE,SAAS;AACzE;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA,uDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAgE,SAAS;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2DAA0D,SAAS;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD;AACzD;AACA;AACA,6EAA4E,SAAS;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAgF,SAAS;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAgF,SAAS;AACzF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA,4DAA2D,UAAU;AACrE;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA,4DAA2D,UAAU;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,UAAU;AACvE;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8HAA6H,aAAa;AAC1I,U;AACA;AACA;AACA;AACA;AACA;AACA,8HAA6H,YAAY;AACzI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,uBAAuB;AAChF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA,UAAS;AACT;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS,6CAA6C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,qCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA,2DAA0D,QAAQ;AAClE;AACA;AACA,4BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,SAAS;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,U;AACA;AACA;AACA;AACA,uDAAsD,SAAS;AAC/D;AACA,4DAA2D,UAAU;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iC;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA4F;AAC5F;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB,qBAAoB;AACpqDAAoD,SAAS;AAC7D;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,2B;;;;;;;ACzgFA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA6G;AAC7G,2DAA0D;AAC1D,oCAAmC;AACnC,kBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA,UAAS;AACT;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa,yB;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,qBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA,UAAS;AACT;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA,UAAS;;AAET;AACA,2DAA0D,4BAA4B;AACtF;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;ACnlBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yC;AACA,6E;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6C;AACA,+E;AACA,cAAa;;AAEb;AACA,yC;AACA;AACA,cAAa;AACb,0C;AACA,2C;AACA,cAAa;;AAEb,oE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;;AC7TA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,iD;AACA,UAAS;AACT,mC;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS,OAAO;AAChB;AACA;AACA;AACA;AACA,UAAS,OAAO;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA,2BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,sBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,oCAAmC,cAAc;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACnRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D,MAAM,WAAW,MAAM,WAAW,OAAO;AACpG,iDAAgD,QAAQ,YAAY,MAAM,YAAY,yBAAyB,OAAO,UAAU,MAAM;AACtI;AACA,oCAAmC,OAAO;AAC1C,wCAAuC,UAAU,UAAU,SAAS;AACpE;AACA;AACA,0CAAyC,OAAO,EAAE;AAClD,iCAAgC,OAAO;AACvC,qCAAoC,OAAO,UAAU,MAAM;AAC3D;AACA,2CAA0C,OAAO;AACjD,+CAA8C,MAAM,gBAAgB,WAAW,UAAU,UAAU,SAAS;AAC5G,2CAA0C,QAAQ;AAClD,mDAAkD,OAAO,QAAQ,UAAU;AAC3E;AACA,6BAA4B,kBAAkB,uCAAuC,QAAQ,sBAAsB,OAAO,sBAAsB;AAChoDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA,aAAY;;AAEZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,YAAY;AAC/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAoH,oIAAoI;AACxP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kHAAiH,sCAAsC;AACvJ;;AAEA;;AAEA;AACA,2B;;;;;;;ACtSA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA,4DAA2D,mDAAmD;AAC9G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oC;;;;;;;ACxFA;AACA;AACA;AACA,6B;AACA,kE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8B;AACA;;AAEA;AACA;AACA;AACA;AACA,wEAAuE;AACvE,UAAS;AACT;AACA,yCAAwC;AACxC;AACA;AACA,cAAa;AACb,U;AACA;;AAEA;AACA,mCAAkC,sBAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D,mCAAmC,E;AAC7F;AACA,sCAAqC;AACrC;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAsC,+BAA+B,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA2B,wBAAwB;AACnD;AACA;AACA;AACA,wC;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA4B,6CAA6C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8EAA6E;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;;;AAGA;AACA,yBAAwB,iBAAiB;AACzC;AACA;AACA,UAAS;AACT;AACA,U;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,8E;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA,cAAa;AACb,uC;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,G;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,EAAE;AACjB;AACA;AACA,iGAAgG,WAAW,aAAa;AACxH,uFAAsF,eAAe,UAAU;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD;AACjD,kDAAiD;AACjD,iDAAgD;AAChD,kDAAiD;AACjD,iDAAgD;AAChD,iDAAgD;AAChD,kDAAiD;AACjD,kDAAiD;AACjD;AACA;AACA;;AAEA,yB;;;;;;;ACvZA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA,cAAa;AACb;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;ACjTA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA,cAAa;AACb,UAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;AClPA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,yB;;;;;;;AC3RA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;;ACtOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA,kDAAiD;AACjD;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,QAAO;AACP;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA4B,SAAS,oBAAoB,EAAE,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACnPA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAkC;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,QAAO;AACP;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA4B,SAAS,oBAAoB,EAAE,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,EAAE;AACpC;AACA;AACA,UAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAwD;AACxD,gDAA+C;AAC/C,+CAA8C;AAC9C,6CAA4C;AAC5C,4CAA2C;AAC3C,wCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;;AC/OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,qDAAqD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpoBAAoB;AAC9B;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,YAAY;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+FAA8F,WAAW;AACzG;AACA,wCAAuC,YAAY,eAAe,gBAAgB;AAClF;AACA;AACA,+FAA8F,WAAW;AACzG;AACA,wCAAuC,YAAY,eAAe,gBAAgB;AAClF;AACA;AACA,oGAAmG,WAAW;AAC9G;AACA,wCAAuC,YAAY,eAAe,gBAAgB;AAClF;AACA;AACA,oGAAmG,WAAW;AAC9G;AACA,wCAAuC,YAAY,eAAe,gBAAgB;AAClF;AACA;AACA,sGAAqG,WAAW;AAChH;AACA,wCAAuC,YAAY,eAAe,gBAAgB;AAClF;;AAEA;AACA,wGAAuG,WAAW;AAClH;AACA,4CAA2C,gBAAgB;AAC3D;AACA;AACA,sGAAqG,WAAW;AAChH;AACA,4CAA2C,gBAAgB;AAC3D;AACA;AACA,qGAAoG,WAAW;AAC/G;AACA,4CAA2C,gBAAgB;AAC3D;AACA;AACA,wGAAuG,WAAW;AAClH;AACA,4CAA2C,gBAAgB;AAC3D;;AAEA;AACA,6FAA4F,eAAe,WAAW;AACtH,+HAA8H,YAAY;AAC1I;AACA,6CAA4C;AAC5C;;AAEA;AACA,+FAA8F,eAAe,WAAW;AACxH,mIAAkI,YAAY;AAC9I;AACA,6CAA4C;AAC5C;;AAEA;AACA,8FAA6F,WAAW;AACxG;AACA,wCAAuC,YAAY,eAAe,gBAAgB;AAClF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,yDAAyD;AAClF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D,SAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA,+DAA8D,uBAAuB;AACrF;AACA,iDAAgD;AAChD,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,2DAA0D,YAAY;AACtE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA,6B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA,sDAAqD,iBAAiB;AACtE,qCAAoC,WAAW,gEAAgE,YAAY,iBAAiB,mBAAmB;AAC/J,qCAAoC,WAAW,oDAAoD,0BAA0B,mBAAmB;AAChJ,qCAAoC,WAAW,kDAAkD,0BAA0B;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAqD,iBAAiB;AACtE,yEAAwE,YAAY,iBAAiB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxmDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2D;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;;AC5OA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,sEAAsE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;;;;;;AC1CA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mC;;;;;;ACjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kCAAiC;AACjC,+BAA8B;AAC9B,gC;AACA,woCAAmC,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wB;;;;;;AC3YA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAwE,WAAW;AACnF;AACA;AACA,wCAAuC;AACvC;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8B;;;;;;;AC9GA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gC;;;;;;AC5KA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;;;;;;ACpFA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kC;;;;;;ACrJA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;AC3IA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAgB;AAChB;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;ACvDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,2DAA2D;AAC9G,oDAAmD,qCAAqC;AACxF,UAAS,EAAE;AACX;AACA;AACA;AACA,gDAA+C,qCAAqC;AACpF;AACA;AACA;AACA,gDAA+C,2DAA2D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,qCAAqC;AACpF;AACA;AACA;AACA;AACA,gDAA+C,2DAA2D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;AClGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,2DAA2D;AAC9G,oDAAmD,qCAAqC;AACxF,UAAS,EAAE;AACX;AACA;AACA;AACA,gDAA+C,qCAAqC;AACpF;AACA;AACA;AACA,gDAA+C,2DAA2D;AAC1G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,qCAAqC;AACpF;AACA;AACA;AACA;AACA,gDAA+C,2DAA2D;AAC1G;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;AC7EA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;AACA,UAAS;AACT;AACA;AACA;AACA,+BAA8B,wJAAwJ;AACtL;AACA,2BAA0B,4GAA4G;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,0CAAyC,4GAA4G;AACrJ;AACA,kDAAiD,wJAAwJ;AACzM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;AC7FA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAuC,qEAAqE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,wCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA2C,qEAAqE;AAChH;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;AClSA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAuC,qEAAqE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,wCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA2C,qEAAqE;AAChH;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;AClRA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAgD;AAChD;AACA,UAAS;AACT;AACA;AACA,2DAA0D;AAC1D;AACA,UAAS;AACT;AACA;AACA,uEAAsE;AACtE;AACA,UAAS;AACT;AACA;AACA,2EAA0E;AAC1E;AACA,UAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAAyC,4GAA4G;AACrJ;;AAEA,kDAAiD,wJAAwJ;AACzM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,M;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;ACjJA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0B;;;;;;AC5BA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,gBAAgB;AACzE;AACA,0DAAyD,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,wEAAuE,mBAAmB;AAC1F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA2C,6BAA6B;AACxE;AACA;AACA,2DAA0D,qBAAqB;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,gFAAgF;AAClI;;AAEA;AACA;AACA,2C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;AAEA,+C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAkE,2BAA2B;AAC7F;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;AC1PA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA,wBAAuB;AACvB,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB,OAAO;AACzB,mBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,yBAAwB,KAAK,EAAE,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA,4DAA2D;;AAE3D;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA,yCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAsG;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;;AC3tBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC,6BAA6B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD,kBAAkB;AACxE;AACA;AACA;AACA;AACA,mDAAkD;AAClD,8DAA6D;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;ACnDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAoB;AACpB,wBAAuB;AACvB,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,OAAO;AACxB,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,wBAAuB,KAAK,EAAE,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wEAAuE,mBAAmB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA,qCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,mFAAkF,OAAO;AACzF;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,2C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wG;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAuF;AACvF,UAAS;AACT,+DAA8D;AAC9D;;AAEA;AACA;AACA;AACA,kF;AACA,kF;AACA,UAAS;AACT,uE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;ACjpBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,6BAA6B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD,kBAAkB;AACxE;AACA;AACA;AACA;AACA,mDAAkD;AAClD,8DAA6D;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;ACxcAAa;AACb;AACA;AACA,cAAa;AACb;AACA,mDAAkD,QAAQ,mBAAmB;AAC7E;AACA;AACA;AACA,cAAa;AACb;AACA,mDAAkD,qBAAqB;AACvE;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,uDAAuD;AACzG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,SAAS,mBAAmB,GAAG;AAC1D;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;;ACrMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0B;;;;;;ACxCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,2EAA2E;AACpG,0BAAyB,oDAAoD,oCAAoC,EAAE;AACncAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA,2DAA0D,wCAAwC;AAClG;AACA;AACA;AACA,sBAAqB;;AAErB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA,2DAA0D,2CAA2C;AACrG;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,uDAAsD,qEAAqE;AAC3H;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA8G,6BAA6B;AAC3I;AACA;AACA;AACA;AACA,+GAA8G,qBAAqB;AACnI;;AAEA;AACA;AACA;AACA,+FAA8F,6CAA6C;AAC3I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA;;AAEA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;;ACheA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,wEAAuE,mBAAmB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D,+BAA+B;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,oBAAoB;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;ACzKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,yB;;;;;;ACrEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,4DAA2D;AAC3D,6BAA4B;AAC5B;AACA;AACA,UAAS,mDAAmD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,kDAAiD;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kC;;;;;;ACvRA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gC;;;;;;AC/HA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAoB,eAAe;AACnC,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAsD,uCAAuC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D,kFAAkF;AAC7I,qDAAoD,kDAAkD;AACtG;AACA;AACA;AACA;AACA,aAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,6B;;;;;;;ACzFA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,4CAA2C;AAC3C,6BAA4B;AAC5B;AACA;AACA,UAAS,mDAAmD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAiD;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2F;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,gDAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;ACpQA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;AChNA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;;AAEA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjmC;;;;;;AC5RA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;ACpEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;AClEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;ACzNA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,wBAAuB,cAAc;AACrC,sBAAqB,iBAAiB;AACtC;AACA,wBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wEAAuE,mBAAmB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAiF,gDAAgD;AACjI,iCAAgC;AAChC,6BAA4B;AAC5B;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uB;;;;;;;ACzTA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB,6DAA6D;AACtF,0BAAyB,oDAAoD,SAAS,EAAE;AACxgEAA+D,6BAA6B;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB,4CAA2C,eAAe;;AAE1D,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB,4CAA2C,eAAe;AAC1D;;AAEA;AACA;AACA;;AAEA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB,wCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA4D,2BAA2B;AACvF;AACA;AACA;AACA;AACA,0DAAyD,uBAAuB;AAChF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA;;AAEA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;AClhBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;AC9HA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;AC7EA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gEAA+D,yBAAyB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,gCAAgC,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,gCAAgC,EAAE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,cAAc,EAAE;AACxD,0CAAyC,aAAa,EAAE;AACxD,0CAAyC,gCAAgC,EAAE;AAC3E;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;;ACzGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB,6DAA6D;AACtF,0BAAyB,oDAAoD,SAAS,EAAE;AACxgEAA+D,6BAA6B;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA,2DAA0D,wCAAwC;AAClG;AACA;AACA;AACA,sBAAqB;;AAErB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA,2DAA0D,2CAA2C;AACrG;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,uDAAsD,qEAAqE;AAC3H;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA;;AAEA;AACA;AACA,2CAA0C,qEAAqE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;;;;;;;ACxeA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;AC1OA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,WAAW;AAC9B,mBAAkB,gBAAgB;AAClC,oBAAmB,iBAAiB;AACpC,MAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;ACjDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,4GAA4G;;AAE7H;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;ACxNA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAkB,MAAM;AACxB,mBAAkB,MAAM;AACxB,oBAAmB,OAAO;AAC1B,kBAAiB,MAAM;AACvB,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;;ACnEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,2DAA0D,gBAAgB;AAC1E;AACA,2DAA0D,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB,SAAS,mBAAmB,GAAG;AACxD;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA,yB;;;;;;AC/NA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4B;;;;;;ACpCA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iC;;;;;;AClEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,KAAK,EAAE,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA0C,UAAU,EAAE;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,2CAA0C,UAAU,EAAE;AACtD,iDAAgD,UAAU,EAAE;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;;AChGA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;AC/MA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA,aAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4B;;;;;;;ACrPA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;AC9EA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;AC/EA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,uDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,sEAAsE;AACpF;AACA;AACA,gDAA+C,SAAS;AACxD,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA,gDAA+C,SAAS;AACxD,gDAA+C,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA8B,QAAQ,GAAG,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACvrBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA,+B;;;;;;;AC/JA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;;;;;;;ACpGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC;AACxC;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0CAAyC;AACzC,yCAAwC;AACxC,yCAAwC;AACxC,yCAAwC;AACxC,yCAAwC;;AAExC,iCAAgC;AAChC,iCAAgC;AAChC,kCAAiC;AACjC,iCAAgC;AAChC;AACA;AACA;;AAEA,0BAAyB;AACzB,yBAAwB;AACxB,0BAAyB;;AAEzB,wB;;;;;;AC3BA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,SAAS;AACvD;AACA,yEAAwE,QAAQ,EAAE,QAAQ;AAC1F;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAY,4BAA4B;AACxC,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;ACnPA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;ACtCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAsC,oDAAoD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,GAAE;AACF;AACA;AACA,UAAS;AACT,4CAA2C,qDAAqD;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAgC,qCAAqC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA,UAAS;AACT,sCAAqC,sCAAsC;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnFA;AACA;AACA,gBAAe;AACf,kBAAiB;AACjB,mBAAkB;AAClB,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kC;AACA;AACA;;AAEA,MAAK;AACL,iC;AACA,MAAK;AACL,kC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,8B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA2B;AAC3B,oC;AACA,mC;AACA;AACA;AACA;AACA,UAAS,OAAO;AAChB;AACA;AACA;AACA;;AAEA;AACA,iDAAgD;AAChD,qCAAoC;AACpC,oCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iC;AACA,8BAA6B;AAC7B,4BAA2B;AAC3B;AACA;AACA;;AAEA,yB;;;;;;ACjNA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,+BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA,yBAAwB,wBAAwB,EAAE,wBAAwB;AAC1E;;AAEA;AACA;AACA;AACA,+BAA8B,wBAAwB,EAAE,wBAAwB;AAChF;;AAEA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAoB;AACpB,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,UAAS;AACT;;AAEA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,WAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA,GAAE;AACF;AACA;AACA,GAAE;AACF;AACA;AACA,GAAE;AACF;AACA;AACA,GAAE;AACF;AACA;AACA,GAAE;AACF;AACA;AACA,oBAAmB;AACnB,sBAAqB;AACrB,mBAAkB,IAAI;AACtB;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU,wBAAwB,EAAE,gDAAgD,EAAE,wBAAwB;AAC9G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kDAAiD,gBAAgB;AACjE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA,iDAAgD,gCAAgC,EAAE;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,yCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,EAAE;AACb,YAAW,EAAE;AACb,YAAW,EAAE;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;;;AAIA;AACA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA,2B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;;AAEA;AACA,qCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA2B;AAC3B;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA,sCAAqC,SAAS;AAC9C;AACA;AACA;;AAEA,YAAW,mBAAmB;AAC9B,YAAW,gCAAgC;AAC3C,YAAW,8CAA8C;AACzD,YAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACltBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4B;;;;;;;AC1DA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,kCAAiC;AACjC,MAAK;AACL;AACA,gF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACxFA;;AAEA,kCAAiC,UAAU;AAC3C,iCAAgC,QAAQ,OAAO,IAAI,0BAA0B,MAAM;AACnF,mDAAkD;AAClD,+CAA8C;AAC9C,wCAAuC;AACvC,sDAAqD;AACrD,oDAAmD;AACnD,gDAA+C;AAC/C,iDAAgD;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,QAAQ;AAChC;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,QAAQ;AAChC;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;;AAEA,4B;;;;;;ACrGA;;AAEA;AACA,qBAAoB;AACpB,wBAAuB;;AAEvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B,QAAQ,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,MAAK,2BAA2B;AAChC;AACA,MAAK,2BAA2B;AAChC;AACA,MAAK,2BAA2B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAsC,SAAS;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,GAAE,OAAO;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA,MAAK,OAAO;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iIAAgI;AAChI;AACA,mNAAkN;AAClN,mNAAkN;AAClN,mNAAkN;AAClN,mNAAkN;AAClN,8NAA6N;AAC7N,8NAA6N;AAC7N,8NAA6N;AAC7N,8NAA6N;AAC7N,0MAAyM;AACzM;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAkD;AAClD,sDAAqD;AACrD,sDAAqD;AACrD,sDAAqD;AACrD,qDAAoD;AACpD,qDAAoD;AACpD,qDAAoD;AACpD,qDAAoD;AACpD;;AAEA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA0F;AAC1F,sDAAqD;AACrD,sDAAqD;AACrD,sDAAqD;AACrD,sDAAqD;AACrD,kEAAiE;AACjE,kEAAiE;AACjE,kEAAiE;AACjE,kEAAiE;AACjE,gFAA+E;AAC/E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA8G;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA,wDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;;AAEA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/yCA;;AAEA;;AAEA,+CAA8C;AAC9C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,iDAAgD;AAChD,0CAAyC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;AC9IA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,mC;AACA,qD;AACA,U;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,SAAS;AACpB,YAAW,WAAW;AACtB,aAAY;AACZ;AACA;AACA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA,GAAE;AACF;AACA;AACA,4CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,EAAE;AACb,YAAW,EAAE;AACb,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA,aAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAW,KAAK;AAChB,YAAW,EAAE;AACb,YAAW,EAAE;AACb,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA,aAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;AC3QA;AACA;;AAEA,kE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAoB,MAAM;AAC1B;AACA;AACA,0EAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA,kDAAiD;AACjD;AACA;AACA,MAAK;AACL;AACA;;AAEA,wC;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA,uB","file":"js/ghca_charts.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d8c9acabc79251af73e4","var ghca_charts = {};\n\n//create folder object\nghca_charts.effet = {};\nghca_charts.events = {};\nghca_charts.layout = {};\nghca_charts.layout.model = {};\nghca_charts.view = {};\nghca_charts.view.component = {};\nghca_charts.view.component.charts = {};\nghca_charts.view.component.gis = {};\nghca_charts.view.component.importcomponents = {};\nghca_charts.view.component.utilcomponents = {};\nghca_charts.view.elements = {};\nghca_charts.view.elements.plugins = {};\nghca_charts.view.elements.plugins.label = {};\nghca_charts.view.elements.plugins.links = {};\nghca_charts.view.elements.plugins.nodes = {};\nghca_charts.view.elements.plugins.tool = {};\nghca_charts.view.elements.shape = {};\nghca_charts.view.util = {};\n\n//sava folder object\nvar folders = [];\nfunction saveFolders(obj) {\n    for(var key in obj) {\n        folders.push(obj[key]);\n        saveFolders(obj[key]);\n    }\n}\nsaveFolders(ghca_charts);\n\n//import js files\nghca_charts.effet.Effet = require(\"./effet/Effet\");\nghca_charts.effet.eraserEffet = require(\"./effet/eraserEffet\");\nghca_charts.events.BaseEvent = require(\"./events/BaseEvent\");\nghca_charts.global = require(\"./global\");\nghca_charts.layout.barLayout = require(\"./layout/barLayout\");\nghca_charts.layout.calendarLayout = require(\"./layout/calendarLayout\");\nghca_charts.layout.horizontalLayout = require(\"./layout/horizontalLayout\");\nghca_charts.layout.layout = require(\"./layout/layout\");\nghca_charts.layout.layoutFeatures = require(\"./layout/layoutFeatures\");\nghca_charts.layout.model.sankeyModel = require(\"./layout/model/sankeyModel\");\nghca_charts.layout.packLayout = require(\"./layout/packLayout\");\nghca_charts.layout.pieLayout = require(\"./layout/pieLayout\");\nghca_charts.layout.progressBarLayout = require(\"./layout/progressBarLayout\");\nghca_charts.layout.sankeyLayout = require(\"./layout/sankeyLayout\");\nghca_charts.layout.scatterLayout = require(\"./layout/scatterLayout\");\nghca_charts.layout.sunburstLayout = require(\"./layout/sunburstLayout\");\nghca_charts.layout.topoLayout = require(\"./layout/topoLayout\");\nghca_charts.layout.treelayout = require(\"./layout/treelayout\");\nghca_charts.layout.treemapLayout = require(\"./layout/treemapLayout\");\nghca_charts.layout.verticalLayout = require(\"./layout/verticalLayout\");\nghca_charts.view.component.baseComponent = require(\"./view/component/baseComponent\");\nghca_charts.view.component.chartMap = require(\"./view/component/chartMap\");\nghca_charts.view.component.charts.area = require(\"./view/component/charts/area\");\nghca_charts.view.component.charts.axis = require(\"./view/component/charts/axis\");\nghca_charts.view.component.charts.bar = require(\"./view/component/charts/bar\");\nghca_charts.view.component.charts.baseAxis = require(\"./view/component/charts/baseAxis\");\nghca_charts.view.component.charts.baseChart = require(\"./view/component/charts/baseChart\");\nghca_charts.view.component.charts.bizTopology = require(\"./view/component/charts/bizTopology\");\nghca_charts.view.component.charts.calendar = require(\"./view/component/charts/calendar\");\nghca_charts.view.component.charts.chart = require(\"./view/component/charts/chart\");\nghca_charts.view.component.charts.editorTopology = require(\"./view/component/charts/editorTopology\");\nghca_charts.view.component.charts.heading = require(\"./view/component/charts/heading\");\nghca_charts.view.component.charts.horAxis = require(\"./view/component/charts/horAxis\");\nghca_charts.view.component.charts.legend = require(\"./view/component/charts/legend\");\nghca_charts.view.component.charts.legendItem = require(\"./view/component/charts/legendItem\");\nghca_charts.view.component.charts.line = require(\"./view/component/charts/line\");\nghca_charts.view.component.charts.pack = require(\"./view/component/charts/pack\");\nghca_charts.view.component.charts.pie = require(\"./view/component/charts/pie\");\nghca_charts.view.component.charts.progressBar = require(\"./view/component/charts/progressBar\");\nghca_charts.view.component.charts.sankey = require(\"./view/component/charts/sankey\");\nghca_charts.view.component.charts.scatter = require(\"./view/component/charts/scatter\");\nghca_charts.view.component.charts.sunburst = require(\"./view/component/charts/sunburst\");\nghca_charts.view.component.charts.topology = require(\"./view/component/charts/topology\");\nghca_charts.view.component.charts.tree = require(\"./view/component/charts/tree\");\nghca_charts.view.component.charts.treemap = require(\"./view/component/charts/treemap\");\nghca_charts.view.component.charts.verAxis = require(\"./view/component/charts/verAxis\");\nghca_charts.view.component.eagleEye = require(\"./view/component/eagleEye\");\nghca_charts.view.component.eagleEyeContainer = require(\"./view/component/eagleEyeContainer\");\nghca_charts.view.component.gis.gisMap = require(\"./view/component/gis/gisMap\");\nghca_charts.view.component.importcomponents.comboBox = require(\"./view/component/importcomponents/comboBox\");\nghca_charts.view.component.importcomponents.dateTimeBox = require(\"./view/component/importcomponents/dateTimeBox\");\nghca_charts.view.component.importcomponents.iFrame = require(\"./view/component/importcomponents/iFrame\");\nghca_charts.view.component.importcomponents.linkButton = require(\"./view/component/importcomponents/linkButton\");\nghca_charts.view.component.importcomponents.multiTextLabel = require(\"./view/component/importcomponents/multiTextLabel\");\nghca_charts.view.component.importcomponents.textLabel = require(\"./view/component/importcomponents/textLabel\");\nghca_charts.view.component.svg = require(\"./view/component/svg\");\nghca_charts.view.component.svgCanvas = require(\"./view/component/svgCanvas\");\nghca_charts.view.component.table = require(\"./view/component/table\");\nghca_charts.view.component.tagContainer = require(\"./view/component/tagContainer\");\nghca_charts.view.component.utilcomponents.evDataDispatcher = require(\"./view/component/utilcomponents/evDataDispatcher\");\nghca_charts.view.component.utilcomponents.timer = require(\"./view/component/utilcomponents/timer\");\nghca_charts.view.elements.baseElement = require(\"./view/elements/baseElement\");\nghca_charts.view.elements.circleElement = require(\"./view/elements/circleElement\");\nghca_charts.view.elements.imageElement = require(\"./view/elements/imageElement\");\nghca_charts.view.elements.mulitextElement = require(\"./view/elements/mulitextElement\");\nghca_charts.view.elements.pathElement = require(\"./view/elements/pathElement\");\nghca_charts.view.elements.plugins.imageTag = require(\"./view/elements/plugins/imageTag\");\nghca_charts.view.elements.plugins.label.baseLabel = require(\"./view/elements/plugins/label/baseLabel\");\nghca_charts.view.elements.plugins.label.groupLabel = require(\"./view/elements/plugins/label/groupLabel\");\nghca_charts.view.elements.plugins.label.label = require(\"./view/elements/plugins/label/label\");\nghca_charts.view.elements.plugins.label.packLabel = require(\"./view/elements/plugins/label/packLabel\");\nghca_charts.view.elements.plugins.label.pieLabel = require(\"./view/elements/plugins/label/pieLabel\");\nghca_charts.view.elements.plugins.label.topoLabel = require(\"./view/elements/plugins/label/topoLabel\");\nghca_charts.view.elements.plugins.linkMap = require(\"./view/elements/plugins/linkMap\");\nghca_charts.view.elements.plugins.links.baseLink = require(\"./view/elements/plugins/links/baseLink\");\nghca_charts.view.elements.plugins.links.configLink = require(\"./view/elements/plugins/links/configLink\");\nghca_charts.view.elements.plugins.links.curveLink = require(\"./view/elements/plugins/links/curveLink\");\nghca_charts.view.elements.plugins.links.link = require(\"./view/elements/plugins/links/link\");\nghca_charts.view.elements.plugins.links.parallelLink = require(\"./view/elements/plugins/links/parallelLink\");\nghca_charts.view.elements.plugins.links.sankeyLink = require(\"./view/elements/plugins/links/sankeyLink\");\nghca_charts.view.elements.plugins.nodeMap = require(\"./view/elements/plugins/nodeMap\");\nghca_charts.view.elements.plugins.nodes.arcClass = require(\"./view/elements/plugins/nodes/arcClass\");\nghca_charts.view.elements.plugins.nodes.baseNode = require(\"./view/elements/plugins/nodes/baseNode\");\nghca_charts.view.elements.plugins.nodes.circle = require(\"./view/elements/plugins/nodes/circle\");\nghca_charts.view.elements.plugins.nodes.configGroupNode = require(\"./view/elements/plugins/nodes/configGroupNode\");\nghca_charts.view.elements.plugins.nodes.demoImageNode = require(\"./view/elements/plugins/nodes/demoImageNode\");\nghca_charts.view.elements.plugins.nodes.expandTool = require(\"./view/elements/plugins/nodes/expandTool\");\nghca_charts.view.elements.plugins.nodes.groupNode = require(\"./view/elements/plugins/nodes/groupNode\");\nghca_charts.view.elements.plugins.nodes.hBarNode = require(\"./view/elements/plugins/nodes/hBarNode\");\nghca_charts.view.elements.plugins.nodes.hProgressBarNode = require(\"./view/elements/plugins/nodes/hProgressBarNode\");\nghca_charts.view.elements.plugins.nodes.IconNode = require(\"./view/elements/plugins/nodes/IconNode\");\nghca_charts.view.elements.plugins.nodes.imageNode = require(\"./view/elements/plugins/nodes/imageNode\");\nghca_charts.view.elements.plugins.nodes.lineNode = require(\"./view/elements/plugins/nodes/lineNode\");\nghca_charts.view.elements.plugins.nodes.moreTool = require(\"./view/elements/plugins/nodes/moreTool\");\nghca_charts.view.elements.plugins.nodes.node = require(\"./view/elements/plugins/nodes/node\");\nghca_charts.view.elements.plugins.nodes.packNode = require(\"./view/elements/plugins/nodes/packNode\");\nghca_charts.view.elements.plugins.nodes.pathNode = require(\"./view/elements/plugins/nodes/pathNode\");\nghca_charts.view.elements.plugins.nodes.rect = require(\"./view/elements/plugins/nodes/rect\");\nghca_charts.view.elements.plugins.nodes.sankeyNode = require(\"./view/elements/plugins/nodes/sankeyNode\");\nghca_charts.view.elements.plugins.nodes.sunburstNode = require(\"./view/elements/plugins/nodes/sunburstNode\");\nghca_charts.view.elements.plugins.nodes.treemapNode = require(\"./view/elements/plugins/nodes/treemapNode\");\nghca_charts.view.elements.plugins.nodes.usePlugin = require(\"./view/elements/plugins/nodes/usePlugin\");\nghca_charts.view.elements.plugins.nodes.vBarNode = require(\"./view/elements/plugins/nodes/vBarNode\");\nghca_charts.view.elements.plugins.nodes.verTool = require(\"./view/elements/plugins/nodes/verTool\");\nghca_charts.view.elements.plugins.plugin = require(\"./view/elements/plugins/plugin\");\nghca_charts.view.elements.plugins.pluginMap = require(\"./view/elements/plugins/pluginMap\");\nghca_charts.view.elements.plugins.tool.percentageInfo = require(\"./view/elements/plugins/tool/percentageInfo\");\nghca_charts.view.elements.plugins.tool.toolTip = require(\"./view/elements/plugins/tool/toolTip\");\nghca_charts.view.elements.rectElement = require(\"./view/elements/rectElement\");\nghca_charts.view.elements.shape.baseShape = require(\"./view/elements/shape/baseShape\");\nghca_charts.view.elements.shape.circleShape = require(\"./view/elements/shape/circleShape\");\nghca_charts.view.elements.shape.rectShape = require(\"./view/elements/shape/rectShape\");\nghca_charts.view.graph = require(\"./view/graph\");\nghca_charts.view.util.classFactory = require(\"./view/util/classFactory\");\nghca_charts.view.util.colorUtil = require(\"./view/util/colorUtil\");\nghca_charts.view.util.commonUtil = require(\"./view/util/commonUtil\");\nghca_charts.view.util.constant = require(\"./view/util/constant\");\nghca_charts.view.util.dataParser = require(\"./view/util/dataParser\");\nghca_charts.view.util.elementUtil = require(\"./view/util/elementUtil\");\nghca_charts.view.util.eventUtil = require(\"./view/util/eventUtil\");\nghca_charts.view.util.fileUtil = require(\"./view/util/fileUtil\");\nghca_charts.view.util.math = require(\"./view/util/math\");\nghca_charts.view.util.mouseUtil = require(\"./view/util/mouseUtil\");\nghca_charts.view.util.objectUtil = require(\"./view/util/objectUtil\");\nghca_charts.view.util.regexUtil = require(\"./view/util/regexUtil\");\nghca_charts.view.util.selectUtil = require(\"./view/util/selectUtil\");\nghca_charts.view.util.stringUtil = require(\"./view/util/stringUtil\");\nghca_charts.view.util.svgUtil = require(\"./view/util/svgUtil\");\nghca_charts.view.util.tableColFormatterUtil = require(\"./view/util/tableColFormatterUtil\");\nghca_charts.view.util.UUIDUtil = require(\"./view/util/UUIDUtil\");\n\n//call struct function\nfunction callStruct(obj) {\n    for(var key in obj) {\n        var value = obj[key];\n        if(value instanceof Function && value.hasOwnProperty('struct')) {\n            value.struct(ghca_charts);\n        } else if(folders.indexOf(value) !== -1) {\n            callStruct(value);\n        }\n    }\n}\ncallStruct(ghca_charts);\n\nmodule.exports = ghca_charts;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/entry.js\n// module id = 0\n// module chunks = 0","var Effet = function () {\r\n    var self = this;\r\n    self.dispatch = d3.dispatch(\"play\",\"end\",\"stop\");\r\n\r\n    /**\r\n     * 配置\r\n     * @returns {string}\r\n     */\r\n    var config = {};\r\n    this.config = function(value){\r\n        if(!arguments.length)return config;\r\n        config = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 目标对象\r\n     */\r\n    var target;\r\n    this.target = function(value){\r\n        if(!arguments.length)return target;\r\n        target = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 开始播放效果\r\n     */\r\n    this.play = function(){\r\n\r\n    }\r\n    /**\r\n     * 停止播放效果\r\n     */\r\n    this.stop = function(){\r\n\r\n    }\r\n\r\n    /**\r\n     * 播放结束效果\r\n     */\r\n    this.end = function(){\r\n\r\n    }\r\n    /**\r\n     * 添加事件监听\r\n     */\r\n    this.addEventListener = function() {\r\n        var value = self.dispatch.on.apply(self.dispatch, arguments);\r\n        return value === self.dispatch ? self : value;\r\n    };\r\n};\r\n\r\n\r\nEffet.struct = function(ghca_charts) {\r\n    Effet.prototype.constructor = Effet;\r\n};\r\n\r\nmodule.exports = Effet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/effet/Effet.js\n// module id = 1\n// module chunks = 0","module.exports = d3;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3\"\n// module id = 2\n// module chunks = 0","var EraserEffet = function () {\r\n\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const UUIDUtil = ghca_charts.view.util.UUIDUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    var self = this;\r\n    self.config({\r\n        dasharray:\"5,5\",\r\n        borderWidth:2,\r\n        borderColor:\"{color}\",\r\n        borderOpacity:.6,\r\n    });\r\n\r\n    var templete =     \"<clipPath class='eraserEffet'>\"+\r\n    \"<path ></path>\"+\r\n    \"</clipPath>\";\r\n\r\n    this.play = function(){\r\n\r\n    }\r\n\r\n    this.stop = function(){\r\n\r\n    }\r\n\r\n    this.end = function(){\r\n\r\n    }\r\n\r\n};\r\n\r\nEraserEffet.struct = function(ghca_charts) {\r\n    var Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    Plugin.struct(ghca_charts);\r\n    EraserEffet.prototype = Object.create(Plugin.prototype);\r\n    EraserEffet.prototype.constructor = EraserEffet;\r\n};\r\nmodule.exports = EraserEffet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/effet/eraserEffet.js\n// module id = 3\n// module chunks = 0","var BaseEvent = function (_target,_data) {\r\n    var self = this;\r\n    self.data = _data;\r\n    self.target = _target;\r\n};\r\n\r\nBaseEvent.struct = function(ghca_charts) {\r\n\tBaseEvent.prototype.constructor = BaseEvent;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nBaseEvent.LEGEND_ITEM_CLICK         = \"legendItemClick\";            //图例项鼠标点击事件\r\nBaseEvent.CHART_VISIBLE             = \"chartVisible\";               //图表显示或者隐藏\r\nBaseEvent.NODE_MOUSE_OVER           = \"nodeMouseOver\";              //鼠标经过节点\r\nBaseEvent.NODE_MOUSE_OUT            = \"nodeMouseOut\";               //鼠标移出节点\r\nBaseEvent.NODE_CLICK                = \"nodeClick\";                  //鼠标单击节点\r\nBaseEvent.LINK_CLICK                = \"linkClick\";                  //鼠标单击连线\r\n\r\nBaseEvent.SELECT_CHANGE             = \"selectChange\";               //选项更改\r\nBaseEvent.RING_LABEL_CLICK          = \"ringLabelClick\";             //鼠标单击环标签\r\nBaseEvent.SHOW_TOOL_TIP             = \"showToolTip\";                //显示tooltip\r\nBaseEvent.HIDE_TOOL_TIP             = \"hideToolTip\";                //隐藏tooltip\r\nBaseEvent.UPDATE_TOOL_TIP           = \"updateToolTip\";              //更新tooltip内容\r\nBaseEvent.MODE_CHANGE               = \"modeChange\";                 //变更图表当前模式\r\nBaseEvent.ADD_ITEMS                 = \"addItems\";                   //变更图表当前模式\r\n//BaseEvent.OPERATION_TYPE            = \"operationType\";              //变更图表操作类型\r\nBaseEvent.OPEN_FLUX_TYPE            = \"openFlux\";                   //开启流量\r\nBaseEvent.OPEN_ALARM_TYPE           = \"openAlarm\";                  //开启告警\r\nBaseEvent.TOPO_EDIT_POSITON           = \"topo_edit_positon\";                  //拓扑图编辑位置\r\n// BaseEvent.OPERATION_END             = \"operationEnd\";               //操作完成\r\n// BaseEvent.OPERATION_CLEAR           = \"operationClear\";          //清除操作状态\r\nBaseEvent.REMOVE_ITEMS              = \"removeItems\";                //变更图表当前模式\r\nBaseEvent.REOMVE_ALL_SELECTED_ITEMS = \"removeAllSelectedItems\";     //变更图表当前模式\r\nBaseEvent.SEARCH_TEXT               = \"searchText\";                 //搜索字符串\r\nBaseEvent.UPDATE_PROPERTIES         = \"updateProperties\";           //更新属性\r\nBaseEvent.HIDDEN_PROPERTIES         = \"hiddeProperties\";            //隐藏属性\r\nBaseEvent.TOPO_NODE_FOCUS_IN        = \"topoNodeFocusIn\";            //拓扑节点凸显\r\nBaseEvent.SLIDER_RANGE_CHANGE       = \"sliderRangeChange\";          //范围选择组件范围改变\r\nBaseEvent.SLIDER_MOVE_END       = \"slider_move_end\";          //范围选择组件范围改变\r\nBaseEvent.EV_EVENT_DATA_STORAGE     = \"chart_eventDataStorage\";     //保存数据\r\nBaseEvent.EV_EVENT_OPEN_EDIT        = \"chart_eventOpenEdit\";        //可编辑组件开始编辑\r\nBaseEvent.SET_CON_CSS               = \"setConCss\";                  //设置外层容器css\r\nBaseEvent.SCALE_CHANGE  \t\t\t= \"scale_change\";\r\n\r\nBaseEvent.TIMER_CONTROL             = \"timerControl\";               //命令计时器执行行为，需传行为类型{action:start|stop|reset}\r\nBaseEvent.TIMER_STRAT               = \"timerStart\";                 //计时器开始抛出事件\r\nBaseEvent.TIMER_EVENT               = \"timerEvent\";                 //计时器心跳抛出事件\r\nBaseEvent.TIMER_STOP               \t= \"timerStop\";                 \t//计时器停止抛出事件\r\n\r\nBaseEvent.REQ_DATA_COMPLETE         = \"reqDataComplete\";            //请求数据完毕抛出事件\r\n\r\n//------------------------ eagleEye event start -----------------------------\r\n//主视图位置变更事件\r\nBaseEvent.POSITION_CHANGE  = \"positionChange\";\r\n//视图可视大小变更事件\r\nBaseEvent.SIZE_CHANGE      = \"sizeChange\";\r\n//视图内容变更事件\r\nBaseEvent.CONTENT_CHANGE   = \"contentChange\";\r\n//鹰眼拖动事件\r\nBaseEvent.EAGLE_EYE_DRAG   = \"eagleEyeDrag\";\r\n//鹰眼是否可操控\r\nBaseEvent.EAGLE_EYE_DRAG_CHANGE      = \"eagleEyeDragChange\";\r\n//------------------------ eagleEye event end -----------------------------\r\n\r\n//------------------------ notice event start -----------------------------\r\nBaseEvent.CUSTOM_EVENT_PREFIX   = \"ev_\";            //通知graph外层事件中的自定义事件名称前缀\r\nBaseEvent.NOTICE_EVENT_NAME     = \"eventNotice\";    //通知graph外层事件名称\r\n\r\n//type\r\nBaseEvent.NOTICE_EVENT_TYPE_TRIGGER     = 1;    //触发\r\nBaseEvent.NOTICE_EVENT_TYPE_RESPONSE    = 2;    //响应\r\n\r\n//bindEvent\r\nBaseEvent.NOTICE_REFRESH_DATA     = \"noticeRefreshData\";         //刷新数据\r\nBaseEvent.NOTICE_SYN_TOOL_TIP     = \"noticeSynToolTip\";          //同步悬浮提示\r\n//------------------------ notice event end -----------------------------\r\n\r\nmodule.exports = BaseEvent;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/events/BaseEvent.js\n// module id = 4\n// module chunks = 0","//全局对象\r\nvar Global = {};\r\n\r\n//---release config start\r\n//是否测试版本，发布时注意更改\r\nGlobal.isDebug = false;\r\n//是否用于ev可视化平台，发布时注意更改\r\nGlobal.isUseByEVPlatform = true;\r\n//---release config end\r\n\r\n//可视化平台编辑器中，当前是否处于编辑页面\r\nGlobal.isEVPlatformEditPage = window.location.href.indexOf('visual/stage') !== -1;\r\n\r\n//外部插件映射关系\r\nGlobal.outerPlugins = {\r\n\tcomponentMap:{},\r\n\tchartMap:{},\r\n\tlayoutMap:{},\r\n\tpluginMap:{},\r\n\tnodeMap:{},\r\n\tlinkMap:{}\r\n};\r\n\r\nmodule.exports = Global;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/global.js\n// module id = 5\n// module chunks = 0","//柱状图默认布局类，继承自Layout，有normal|stack|percentStack|overlap等类型\r\n    \r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar BarLayout = function (_target, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  items\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 项数据数组\r\n     */\r\n    var items = [];\r\n    this.items = function(value) {\r\n        if (!arguments.length)\r\n            return items;\r\n        items = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  barType\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 柱状图类型 normal|stack|percentStack|overlap\r\n     */\r\n    var barType = \"normal\";\r\n    this.barType = function(value) {\r\n        if (!arguments.length) return barType;                \r\n        barType = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isReverse\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 柱状图是否倒置显示\r\n     */\r\n    var isReverse = false;\r\n    this.isReverse = function(value) {\r\n        if (!arguments.length) return isReverse;                \r\n        isReverse = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  stackName\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 柱状图stack名称，仅当barType为stack|percentStack时有效\r\n     */\r\n    var stackName = null;\r\n    this.stackName = function(value) {\r\n        if (!arguments.length) return stackName;                \r\n        stackName = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  padding\r\n    //------------------------------\r\n    \r\n    /**\r\n     * enum类型坐标轴bar间隔距离，为bandWidth的百分比小数, 范围[0-1]\r\n     */\r\n    var padding = 0.1;\r\n    this.padding = function(value) {\r\n        if (!arguments.length) return padding;   \r\n        padding = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  maxBarSize\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直柱的最大宽度，水平柱的最大高度\r\n     */\r\n    var maxBarSize = NaN;\r\n    this.maxBarSize = function(value) {\r\n        if (!arguments.length) return maxBarSize;                \r\n        maxBarSize = value;\r\n        return this;\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function(isResize) {\r\n    \tvar xScale, yScale, xKey, yKey, xType, yType, horAxis, verAxis, childScale,\r\n            barNum = 0,//一个枚举刻度对应的柱个数\r\n    \t    target = self.target(),\r\n    \t    seriesData = target.seriesData();\r\n    \t\r\n        if(target.horAxis()) {\r\n            horAxis = target.horAxis();\r\n            xScale = horAxis.scaleIns();\r\n            xScale = xScale.rangeRound(xScale.range());\r\n            xKey = horAxis.key();\r\n            xType = horAxis.type();\r\n        }\r\n        if(target.verAxis()) {\r\n            verAxis = target.verAxis();\r\n            yScale = verAxis.scaleIns();\r\n            yScale = yScale.rangeRound(yScale.range());\r\n            yKey = verAxis.key();\r\n            yType = verAxis.type();\r\n        }\r\n        var horInterval = horAxis.interval(), \r\n            verInterval = verAxis.interval(), \r\n            data = target.visibleItems(),\r\n            isVerBar = xType === \"enum\" && yType !== \"enum\",\r\n            valueKey = isVerBar ? yKey : xKey;\r\n            \r\n        //统计所有series中bar的信息\r\n        if(seriesData && seriesData.length > 0) {\r\n            var seriesIndex = target.seriesIndex();\r\n            var selfData = seriesData[seriesIndex];\r\n            var stackIndex, stackNum, barKey, barIndex = NaN, stacks = {}, barKeys = [];\r\n            for(var i = 0, len1 = seriesData.length; i < len1; i++) {\r\n            \tvar chartData = seriesData[i];\r\n            \tvar items = chartData.data;\r\n            \tvar visibleItems = items.filter(function(d) {\r\n            \t\treturn !d.hasOwnProperty(\"visible\") || d.visible;\r\n            \t});\r\n            \tif(visibleItems.length === 0) {\r\n            \t\tcontinue;\r\n            \t}\r\n                var layout = chartData.layout;\r\n                stackNum = 0;\r\n                if(layout.type.toLowerCase() === \"barlayout\") {\r\n                \tvar barType = layout.barType;\r\n                \tbarKey = getBarKey(layout, i);\r\n                    if(barKeys.indexOf(barKey) === -1) {\r\n                        barKeys.push(barKey);\r\n                    }\r\n                    if(!layout.hasOwnProperty(\"barType\") || barType === \"normal\") {\r\n                        barNum++;\r\n                    } else if(barType === \"stack\" || barType === \"percentStack\") {\r\n                    \tif(!stacks.hasOwnProperty(barKey)) {\r\n                    \t\tstacks[barKey] = [];\r\n                            barNum++;\r\n                    \t}\r\n                    \tstacks[barKey].push(items);\r\n                    \tstackNum = stacks[barKey].length;\r\n                    } else if(barType === \"overlap\") {\r\n                    \tbarNum = 1;\r\n                    }\r\n                    if(seriesIndex === i) {\r\n                        barIndex = barKeys.indexOf(barKey);//本seriechart所在所有柱队列的索引值\r\n                        stackIndex = stackNum - 1;//本seriechart所在柱中栈的索引值\r\n                        var stack = stacks[barKey];\r\n                        for(var j = 0, len2 = items.length; j < len2; j++) {\r\n                            var item = items[j];\r\n                            var stackValue = 0;\r\n                            for(var k = 0; k < stackIndex; k++) {\r\n                            \tstackValue += stack[k][j][valueKey];\r\n                            }\r\n                            item.stackValue = stackValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(barNum === 0) {\r\n                return;\r\n            }\r\n            \r\n            //计算total\r\n            var stack, items, item, totals = [];\r\n            for(var key in stacks) {\r\n            \ttotals.length = 0;\r\n            \tstack = stacks[key];\r\n            \tfor(var i = 0, len1 = stack.length; i < len1; i++) {\r\n            \t\titems = stack[i];\r\n            \t\tfor(var j = 0, len2 = items.length; j < len2; j++) {\r\n                        item = items[j];\r\n                        if(i === 0) {\r\n                        \ttotals.push(item[valueKey]);\r\n                        } else {\r\n                        \ttotals[j] += item[valueKey];\r\n                        }\r\n                    }\r\n            \t}\r\n            \tfor(var i = 0, len1 = stack.length; i < len1; i++) {\r\n                    items = stack[i];\r\n                    for(var j = 0, len2 = items.length; j < len2; j++) {\r\n                        item = items[j];\r\n                        item.total = totals[j];\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(barNum > 0) {\r\n            \tvar axis = target.parent().axis();\r\n            \tvar rect = axis.getAxisContentArea();\r\n                if(isVerBar && xScale) {\r\n                    xScale.padding(self.padding());\r\n                    //horAxis.axisContainer.call(horAxis.axisIns());//刷新坐标轴\r\n                    horAxis.renderGridLine(rect);\r\n                } else if(!isVerBar && yScale) {\r\n                    yScale.padding(self.padding());\r\n                    //verAxis.axisContainer.call(verAxis.axisIns());//刷新坐标轴\r\n                    verAxis.renderGridLine(rect);\r\n                }\r\n            }\r\n            \r\n            if(barNum > 1) {\r\n            \tvar childDomain = [];\r\n                for(var i = 0; i < barNum; i++) {\r\n                    childDomain.push(i);\r\n                }\r\n            \tchildScale = d3.scaleBand().domain(childDomain).padding(self.padding());\r\n            \tif(isVerBar) {\r\n            \t\tchildScale = childScale.rangeRound([0, xScale.bandwidth()]);\r\n            \t} else {\r\n            \t\tchildScale = childScale.rangeRound([0, yScale.bandwidth()]);\r\n            \t}\r\n            }\r\n        }\r\n        \r\n    \tvar axis = isVerBar ? verAxis : horAxis\r\n    \tif(axis) {\r\n    \t\t//直接修改配置数据，update方法会重新从配置中读取所有的属性\r\n    \t\tvar axisData = axis.data();\r\n    \t\tif(!axisData.tick) {\r\n                axisData.tick = {};\r\n            }\r\n    \t\tvar barType = self.barType();\r\n    \t\t//百分比stack修改坐标轴刻度\r\n            if(barType === \"percentStack\") {\r\n        \t\taxisData.useDomain = true;\r\n        \t\taxisData.domain = [0, 1];\r\n        \t\taxisData.tick.tickArguments = [10, \"%\"];\r\n            } else {\r\n            \t//非百分比stack还原坐标轴刻度默认设置\r\n            \taxisData.useDomain = false;\r\n            \tvar tickArguments = axisData.tick.tickArguments;\r\n                if(tickArguments && tickArguments.toString() === [10, \"%\"].toString()) {\r\n                \taxisData.tick.tickArguments = [5];\r\n                }\r\n            }\r\n    \t\taxis.update();\r\n    \t}\r\n        \r\n        //计算bar矩形相关数据\r\n        var innerPadding, startX, startY, vx, vy;\r\n        for(var d, i = 0, len = data.length; i < len; i++) {\r\n            d = data[i];\r\n            vx = d[xKey];\r\n            vy = d[yKey];\r\n            if(xScale && xKey && xType === \"enum\") {//垂直柱状\r\n            \td.x = (isVerBar && childScale) ? xScale(vx) + childScale(barIndex) : xScale(vx);\r\n                d.dx = childScale ? childScale.bandwidth() : xScale.bandwidth();\r\n                if(yScale && yKey) {\r\n                \tif(barType === \"normal\" || barType === \"stack\" || barType === \"overlap\") {\r\n                \t\tif(isReverse) {\r\n                \t\t\td.y = yScale(d.total);\r\n                \t\t} else {\r\n                \t\t\td.y = yScale(vy) - (verAxis.height() - yScale(d.stackValue));\r\n                \t\t}\r\n                        d.dy = verAxis.height() - yScale(vy);\r\n                \t} else if(barType === \"percentStack\") {\r\n                        d.y = d.stackValue / d.total * verAxis.height();\r\n                        d.dy = vy / d.total * verAxis.height();\r\n                \t}\r\n                }\r\n            } else if(yScale && yKey && yType === \"enum\") {//水平柱状\r\n                d.y = (!isVerBar && childScale) ? yScale(vy) + childScale(barIndex) : yScale(vy);\r\n                d.dy = childScale ? childScale.bandwidth() : yScale.bandwidth();\r\n                if(xScale && xKey) {\r\n                \tif(barType === \"normal\" || barType === \"stack\" || barType === \"overlap\") {\r\n                \t\tif(isReverse) {\r\n                            d.x = xScale(d.total) - xScale(vx);\r\n                        } else {\r\n                        \td.x = 1 + xScale(d.stackValue);\r\n                        }\r\n                        d.dx = xScale(vx);\r\n                    } else if(barType === \"percentStack\") {\r\n                    \td.x = 1 + d.stackValue / d.total * horAxis.width();\r\n                        d.dx = vx / d.total * horAxis.width();\r\n                    }\r\n                }\r\n            }\r\n            //bar矩形边界判断\r\n            if(isVerBar && !isNaN(maxBarSize) && d.dx > maxBarSize && xScale && xKey) {//垂直bar矩形边界判断\r\n            \tif(childScale) {\r\n            \t\tinnerPadding = childScale.step() * childScale.padding();\r\n            \t\tstartX = (xScale.bandwidth() - maxBarSize * barNum - innerPadding * (barNum - 1)) / 2;\r\n            \t\td.x = xScale(vx) + startX + (maxBarSize + innerPadding) * barIndex;\r\n            \t} else {\r\n            \t\td.x += (d.dx - maxBarSize) / 2\r\n            \t}\r\n                d.dx = maxBarSize;\r\n            } else if(!isVerBar && !isNaN(maxBarSize) && d.dy > maxBarSize && yScale && yKey) {//水平bar矩形边界判断\r\n                if(childScale) {\r\n                    innerPadding = childScale.step() * childScale.padding();\r\n                    startY = (yScale.bandwidth() - maxBarSize * barNum - innerPadding * (barNum - 1)) / 2;\r\n                    d.y = yScale(vy) + startY + (maxBarSize + innerPadding) * barIndex;\r\n                } else {\r\n                    d.y += (d.dy - maxBarSize) / 2\r\n                }\r\n                d.dy = maxBarSize;\r\n            } \r\n        }\r\n        \r\n        //这里再刷新一次是因为layout.measure方法在baseChart.update()中调用，调用之后才会有最新的total数据在bar图表中，根据该total数据值刷新坐标轴刻度才正确\r\n        if((barType === \"stack\" || barType === \"percentStack\" || barType === \"overlap\") && \r\n        isResize !== true && target.parent() && target.parent().axis()) {\r\n//        \t//优化只在最后update axis一次，以替代每个baseChart都update axis一次\r\n//        \tif(BarLayout.prototype.barTimer) {\r\n//        \t\tclearTimeout(BarLayout.prototype.barTimer);\r\n//        \t}\r\n//        \tBarLayout.prototype.barTimer = setTimeout(function() {\r\n//        \t\tclearTimeout(BarLayout.prototype.barTimer);\r\n//        \t\tdelete BarLayout.prototype.barTimer;\r\n//                target.parent().axis().update();\r\n//                if(barNum > 0) {\r\n//                    if(target.horAxis()) {\r\n//                        horAxis = target.horAxis();\r\n//                        xScale = horAxis.scaleIns();\r\n//                    }\r\n//                    if(target.verAxis()) {\r\n//                        verAxis = target.verAxis();\r\n//                        yScale = verAxis.scaleIns();\r\n//                    }\r\n//                    if(isVerBar && xScale) {\r\n//                        xScale.padding(self.padding());\r\n//                        horAxis.axisContainer.call(horAxis.axisIns());//刷新坐标轴\r\n//                    } else if(!isVerBar && yScale) {\r\n//                        yScale.padding(self.padding());\r\n//                        verAxis.axisContainer.call(verAxis.axisIns());//刷新坐标轴\r\n//                    }\r\n//                }\r\n//                target.parent().resize();\r\n//        \t}, 0);\r\n        \t\r\n        \tvar axis = target.parent().axis();\r\n            axis.update();\r\n            if(barNum > 0) {\r\n                if(target.horAxis()) {\r\n                    horAxis = target.horAxis();\r\n                    xScale = horAxis.scaleIns();\r\n                }\r\n                if(target.verAxis()) {\r\n                    verAxis = target.verAxis();\r\n                    yScale = verAxis.scaleIns();\r\n                }\r\n                var rect = axis.getAxisContentArea();\r\n                if(isVerBar && xScale) {\r\n                    xScale.padding(self.padding());\r\n                    //horAxis.axisContainer.call(horAxis.axisIns());//刷新坐标轴\r\n                    horAxis.renderGridLine(rect);\r\n                } else if(!isVerBar && yScale) {\r\n                    yScale.padding(self.padding());\r\n                    //verAxis.axisContainer.call(verAxis.axisIns());//刷新坐标轴\r\n                    verAxis.renderGridLine(rect);\r\n                }\r\n            }\r\n        }\r\n                \r\n        Global.isDebug && console.log(\"BarLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"BarLayout info: \"   +\r\n                \"\\n   size:\"         + this.target().width() + \",\" + this.target().height());\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  private Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    var getBarKey = function(layout, index) {\r\n    \tif(layout.barType !== \"stack\" && layout.barType !== \"percentStack\") {\r\n    \t\treturn \"bar\" + index;\r\n    \t}\r\n    \tvar stackName = layout.stackName;\r\n    \tif(stackName === null || stackName === undefined || stackName === \"\") {\r\n    \t\treturn \"bar\" + index;\r\n    \t}\r\n    \treturn stackName;\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nBarLayout.struct = function(ghca_charts) {\r\n    var Layout = ghca_charts.layout.layout;\r\n    Layout.struct(ghca_charts);\r\n    BarLayout.prototype = Object.create(Layout.prototype);\r\n    BarLayout.prototype.constructor = BarLayout;\r\n};\r\n\r\nmodule.exports = BarLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/barLayout.js\n// module id = 6\n// module chunks = 0","//Calendar布局类，继承自Layout\r\n\r\nvar CalendarLayout = function (_target, _data) {\r\n       \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    \r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  horizontalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平对齐方式，left|center|right(默认值left)\r\n     */\r\n    var horizontalAlign = \"left\";\r\n    this.horizontalAlign = function(value) {\r\n        if (!arguments.length) return horizontalAlign;                \r\n        horizontalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  verticalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直对齐方式，top|middle|bottom(默认值top)\r\n     */\r\n    var verticalAlign = \"top\";\r\n    this.verticalAlign = function(value) {\r\n        if (!arguments.length) return verticalAlign;                \r\n        verticalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  fit\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 自动撑满父容器，根据实际高宽计算gap(默认值false)\r\n     */\r\n    var fit = false;\r\n    this.fit = function(value) {\r\n        if (!arguments.length) return fit;\r\n        fit = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingBottom\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项底边距离(默认值0)\r\n     */\r\n    var paddingBottom = 0;\r\n    this.paddingBottom = function(value) {\r\n        if (!arguments.length) return paddingBottom;                \r\n        paddingBottom = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingLeft\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项左边距离(默认值0)\r\n     */\r\n    var paddingLeft = 0;\r\n    this.paddingLeft = function(value) {\r\n        if (!arguments.length) return paddingLeft;                \r\n        paddingLeft = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingRight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项右边距离(默认值0)\r\n     */\r\n    var paddingRight = 0;\r\n    this.paddingRight = function(value) {\r\n        if (!arguments.length) return paddingRight;                \r\n        paddingRight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingTop\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项顶边距离(默认值0)\r\n     */\r\n    var paddingTop = 0;\r\n    this.paddingTop = function(value) {\r\n        if (!arguments.length) return paddingTop;                \r\n        paddingTop = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  gap\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项间距(默认值40)\r\n     */\r\n    var gap = 40;\r\n    this.gap = function(value) {\r\n        if (!arguments.length) return gap;                \r\n        gap = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  cellWidth\r\n    //------------------------------\r\n\r\n    /**\r\n     * 单元格宽度(默认值17)\r\n     */\r\n    var cellWidth = 17;\r\n    this.cellWidth = function() {\r\n        if(!arguments.length) return cellWidth;\r\n        cellWidth = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  cellHeight\r\n    //------------------------------\r\n\r\n    /**\r\n     * 单元格高度(默认值17)\r\n     */\r\n    var cellHeight = 17;\r\n    this.cellHeight = function() {\r\n        if(!arguments.length) return cellHeight;\r\n        cellHeight = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  range\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 时间范围，字符串类型日期或者\"auto\"(根据数据中的时间范围自动生成)，或者一个数组[beginDate, endDate](默认值\"auto\")\r\n     */\r\n    var range = \"auto\";\r\n    this.range = function() {\r\n        if(!arguments.length) return range;\r\n        range = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  beginDate\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 开始时间\r\n     */\r\n    var beginDate;\r\n    this.beginDate = function() {\r\n        if(!arguments.length) return beginDate;\r\n        beginDate = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  endDate\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 结束时间\r\n     */\r\n    var endDate;\r\n    this.endDate = function() {\r\n        if(!arguments.length) return endDate;\r\n        endDate = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  dateKey\r\n    //------------------------------\r\n\r\n    /**\r\n     * 数据中日期属性名称(默认值\"date\")\r\n     */\r\n    var dateKey = \"date\";\r\n    this.dateKey = function() {\r\n        if(!arguments.length) return dateKey;\r\n        dateKey = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  yearSort\r\n    //------------------------------\r\n\r\n    /**\r\n     * 年份排序，asc|desc|function(a, b){return a-b;}(默认值\"desc\")\r\n     */\r\n    var yearSort = \"desc\";\r\n    this.yearSort = function() {\r\n        if(!arguments.length) return yearSort;\r\n        yearSort = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  mode\r\n    //------------------------------\r\n\r\n    /**\r\n     * 显示模式，normal|fullYear(默认值\"normal\")\r\n     */\r\n    var mode = CalendarLayout.MODE_NORMAL;\r\n    this.mode = function() {\r\n        if(!arguments.length) return mode;\r\n        mode = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  yearsData\r\n    //------------------------------\r\n\r\n    /**\r\n     * 用来渲染的年份数据。\r\n     */\r\n    var yearsData = [];\r\n    this.yearsData = function() {\r\n        return yearsData;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  monthsData\r\n    //------------------------------\r\n\r\n    /**\r\n     * 用来渲染的月份数据。\r\n     */\r\n    var monthsData = [];\r\n    this.monthsData = function() {\r\n        return monthsData;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  daysData\r\n    //------------------------------\r\n\r\n    /**\r\n     * 用来渲染的天数据。\r\n     */\r\n    var daysData = [];\r\n    this.daysData = function() {\r\n        return daysData;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.getDateRange = function(year) {\r\n        var beginTime = new Date(self.beginDate()).getTime();\r\n        var endTime = new Date(self.endDate()).getTime();\r\n        var yearBeginTime = new Date(year, 0, 1).getTime();\r\n        var yearEndTime = new Date(year + 1, 0, 1).getTime();\r\n        beginTime = beginTime > yearBeginTime ? beginTime : yearBeginTime;\r\n        endTime = endTime < yearEndTime ? endTime : yearEndTime;\r\n        var beginDate = new Date(beginTime);\r\n        var endDate = new Date(endTime);\r\n        beginDate = new Date(beginDate.getFullYear(), beginDate.getMonth(), 1);\r\n        endDate = new Date(endDate.getFullYear(), endDate.getFullYear() !== year ? endDate.getMonth() : endDate.getMonth()+1, 1);\r\n        return [beginDate, endDate];\r\n    };\r\n\r\n    //override\r\n    this.measure = function() {\r\n        var target = self.target();\r\n        var visibleItems = target.visibleItems();\r\n        \r\n        //sort all items by date\r\n        visibleItems.sort(function(a, b) {\r\n            return new Date(a[dateKey]) - new Date(b[dateKey]);\r\n        });\r\n        \r\n        //find date range\r\n        if(range === \"auto\" && visibleItems.length > 0) {\r\n        \tbeginDate = visibleItems[0][dateKey];\r\n        \tendDate = visibleItems[visibleItems.length-1][dateKey];\r\n        } else if(ObjectUtil.isArray(range)) {\r\n        \tif(range.length === 1) {\r\n        \t\tbeginDate = new String(range[0]);\r\n                endDate = new String(range[0]);\r\n        \t} else if(range.length > 1) {\r\n        \t\tbeginDate = new String(range[0]);\r\n                endDate = new String(range[1]);\r\n        \t}\r\n        } else if(range) {\r\n            beginDate = new String(range);\r\n            endDate = new String(range);\r\n        } \r\n        \r\n        //create years data\r\n        yearsData.length = 0;\r\n        var yearSortFn = ObjectUtil.isFunction(yearSort) ? yearSortFn : \r\n            yearSort === \"desc\" ? function(a, b) {\r\n            \treturn b - a;\r\n            } : function(a, b) {\r\n                return a - b;\r\n            };\r\n        var children = d3.range(new Date(beginDate).getFullYear(), new Date(endDate).getFullYear() + 1)\r\n            .sort(yearSortFn);\r\n            \r\n        if(!target || !children || children.length === 0) {\r\n            return;\r\n        }\r\n            \r\n        var paddingTop = self.paddingTop(),\r\n            paddingLeft = self.paddingLeft(),\r\n            paddingRight = self.paddingRight(),\r\n            paddingBottom = self.paddingBottom(),\r\n            horAlign = self.horizontalAlign(),\r\n            verAlign = self.verticalAlign(),\r\n            gap = self.gap(),\r\n            targetW = target.width() - paddingLeft - paddingRight,\r\n            targetH = target.height() - paddingTop - paddingBottom;\r\n        \r\n        var x, y, child, rangeDate, len= children.length, totalH = 0, i = 0, childW = self.cellWidth() * 53, childH = self.cellHeight() * 7;\r\n        \r\n        if(fit || verAlign === \"middle\") {\r\n            for(i = 0; i < len; i++) {\r\n                child = children[i];\r\n                totalH += childH;\r\n            };\r\n            if(fit) {\r\n                gap = len > 1 ? (targetH - totalH)/(len - 1) : 0;\r\n            }\r\n            totalH += gap * (len - 1);\r\n        }\r\n        \r\n        for(i = 0; i < len; i++) {\r\n            child = children[i];\r\n            if(self.mode() === CalendarLayout.MODE_NORMAL) {\r\n            \trangeDate = self.getDateRange(child);\r\n                childW = d3.timeWeek.count(rangeDate[0], rangeDate[1]) * self.cellWidth();\r\n            }\r\n            if(horAlign === \"left\") {\r\n                x = paddingLeft;\r\n            } else if(horAlign === \"center\") {\r\n                x = paddingLeft + (targetW - childW) / 2;\r\n            } else if(horAlign === \"right\") {\r\n                x = paddingLeft + targetW - childW;\r\n            }\r\n            \r\n            if(fit || verAlign === \"middle\") {\r\n                y = paddingTop + (targetH - totalH) / 2 + (childH + gap) * i;\r\n            } else if(verAlign === \"top\") {\r\n                y = paddingTop + (childH + gap) * i;\r\n            } else if(verAlign === \"bottom\") {\r\n                y = paddingTop + targetH - childH * (i + 1) - gap * i;\r\n            }\r\n            yearsData.push({\r\n                year:child, \r\n                x:x,\r\n                y:y\r\n            });\r\n        }\r\n        target.renderPosition();\r\n    };\r\n    \r\n    init();\r\n};\r\n\r\nCalendarLayout.struct = function(ghca_charts) {\r\n    var Layout = ghca_charts.layout.layout;\r\n    Layout.struct(ghca_charts);\r\n    CalendarLayout.prototype = Object.create(Layout.prototype);\r\n    CalendarLayout.prototype.constructor = CalendarLayout;\r\n};\r\n\r\nCalendarLayout.MODE_NORMAL   = \"normal\";\r\nCalendarLayout.MODE_FULLYEAR = \"fullYear\";\r\n\r\nmodule.exports = CalendarLayout;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/calendarLayout.js\n// module id = 7\n// module chunks = 0","//水平布局类，继承自Layout\r\n\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar HorizontalLayout = function (_target, _data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    self.isChartLayout(false);\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平布局模型\r\n     */\r\n    var model = null;\r\n    this.model = function(){\r\n        return model;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  horizontalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平对齐方式，left|center|right(默认值left)\r\n     */\r\n    var horizontalAlign = \"left\";\r\n    this.horizontalAlign = function(value) {\r\n        if (!arguments.length) return horizontalAlign;                \r\n        horizontalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  verticalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直对齐方式，top|middle|bottom(默认值top)\r\n     */\r\n    var verticalAlign = \"top\";\r\n    this.verticalAlign = function(value) {\r\n        if (!arguments.length) return verticalAlign;                \r\n        verticalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  gap\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项间距(默认值6)\r\n     */\r\n    var gap = 6;\r\n    this.gap = function(value) {\r\n        if (!arguments.length) return gap;                \r\n        gap = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  fit\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 自动撑满父容器，根据实际高宽计算gap(默认值false)\r\n     */\r\n    var fit = false;\r\n    this.fit = function(value) {\r\n        if (!arguments.length) return fit;\r\n        fit = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingBottom\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项底边距离(默认值0)\r\n     */\r\n    var paddingBottom = 0;\r\n    this.paddingBottom = function(value) {\r\n        if (!arguments.length) return paddingBottom;                \r\n        paddingBottom = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingLeft\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项左边距离(默认值0)\r\n     */\r\n    var paddingLeft = 0;\r\n    this.paddingLeft = function(value) {\r\n        if (!arguments.length) return paddingLeft;                \r\n        paddingLeft = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingRight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项右边距离(默认值0)\r\n     */\r\n    var paddingRight = 0;\r\n    this.paddingRight = function(value) {\r\n        if (!arguments.length) return paddingRight;                \r\n        paddingRight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingTop\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项顶边距离(默认值0)\r\n     */\r\n    var paddingTop = 0;\r\n    this.paddingTop = function(value) {\r\n        if (!arguments.length) return paddingTop;                \r\n        paddingTop = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n        var self = this, \r\n            target = self.target(),\r\n            children = target.children();\r\n            \r\n        if(!target || !children || children.length === 0) {\r\n            return;\r\n        }\r\n            \r\n        var paddingTop = self.paddingTop(),\r\n            paddingLeft = self.paddingLeft(),\r\n            paddingRight = self.paddingRight(),\r\n            paddingBottom = self.paddingBottom(),\r\n            horAlign = self.horizontalAlign(),\r\n            verAlign = self.verticalAlign(),\r\n            gap = self.gap(),\r\n            targetW = target.width() - paddingLeft - paddingRight,\r\n            targetH = target.height() - paddingTop - paddingBottom;\r\n        \r\n        var x, y, child, len = children.length, totalW = 0, i = 0;\r\n        \r\n        if(fit || horAlign === \"center\") {\r\n            for(i = 0; i < len; i++) {\r\n                child = children[i];\r\n                totalW += child.width();\r\n            }\r\n            if(fit) {\r\n                gap = len > 1 ? (targetW - totalW)/(len - 1) : 0;\r\n            }\r\n            totalW += gap * (len - 1);\r\n        }\r\n        \r\n        for(i = 0; i < len; i++) {\r\n        \tchild = children[i];\r\n        \tif(fit || horAlign === \"center\") {\r\n                x = paddingLeft + (targetW - totalW) / 2 + (child.width() + gap) * i;\r\n            } else if(horAlign === \"left\") {\r\n                x = paddingLeft + (child.width() + gap) * i;\r\n            } else if(horAlign === \"right\") {\r\n                x = paddingLeft + targetW - child.width() * (i + 1) - gap * i;\r\n            }\r\n            \r\n            if(verAlign === \"top\") {\r\n                y = paddingTop;\r\n            } else if(verAlign === \"middle\") {\r\n                y = paddingTop + (targetH - child.height()) / 2;\r\n            } else if(verAlign === \"bottom\") {\r\n                y = paddingTop + targetH - child.height();\r\n            }\r\n            child.x(x);\r\n            child.y(y);\r\n            \r\n            //渲染子组件位置\r\n            child.renderTransform();\r\n        }\r\n        \r\n        Global.isDebug && console.log(\"HorizontalLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"HorizontalLayout info: \");\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nHorizontalLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    HorizontalLayout.prototype = Object.create(Layout.prototype);\r\n    HorizontalLayout.prototype.constructor = HorizontalLayout;\r\n};\r\n\r\nmodule.exports = HorizontalLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/horizontalLayout.js\n// module id = 8\n// module chunks = 0","//布局基类\r\n\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar Layout = function (_target, _data) {\r\n\t   \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Const = ghca_charts.view.util.constant;\r\n\r\n\tif(arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",应至少传入1个参数\");\r\n    }\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  target\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 要使用该布局的容器或者组件对象引用\r\n     */\r\n    var target = _target;\r\n    this.target = function(value) {\r\n        if (!arguments.length) return target;\r\n        target = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // data\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 布局配置数据\r\n     */\r\n    var data = _data;\r\n    this.data = function(value) {\r\n        if (!arguments.length)\r\n            return data;\r\n        data = value;\r\n        self.refreshData(data);\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局算法模型\r\n     */\r\n    var model = null;\r\n    this.model = function(value) {\r\n        if (!arguments.length) return model;\r\n        model = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scale\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 布局关系缩放系数(默认值1)\r\n     */\r\n    var scale = 1;\r\n    this.scale = function(value) {\r\n        if (!arguments.length)\r\n            return scale;\r\n        scale = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // maxScale\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 布局关系最大缩放系数(默认值3)\r\n     */\r\n    var maxScale = 3;\r\n    this.maxScale = function(value) {\r\n        if (!arguments.length)\r\n            return maxScale;\r\n        maxScale = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // minScale\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 布局关系最小缩放系数(默认值0.3)\r\n     */\r\n    var minScale = 0.3;\r\n    this.minScale = function(value) {\r\n        if (!arguments.length)\r\n            return minScale;\r\n        minScale = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleDelta\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 布局关系最大缩放系数(默认值3)\r\n     */\r\n    var scaleDelta = 0.05;\r\n    this.scaleDelta = function(value) {\r\n        if (!arguments.length)\r\n            return scaleDelta;\r\n        scaleDelta = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // isChartLayout\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 是否是图表布局\r\n     */\r\n    var isChartLayout = true;\r\n    this.isChartLayout = function(value) {\r\n        if (!arguments.length)\r\n            return isChartLayout;\r\n        isChartLayout = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // useSeriesConfig\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 是否使用seriesConfig\r\n     */\r\n    var useSeriesConfig = false;\r\n    this.useSeriesConfig = function(value) {\r\n        if (!arguments.length)\r\n            return useSeriesConfig;\r\n        useSeriesConfig = value;\r\n        return this;\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 更新布局\r\n     * @isResize 是否在resize中调用本方法\r\n     */\r\n    this.update = function(isResize) {\r\n    \t//判断是否有seriesConfig，若有则需重新设置data,因为每次刷新layout的data都是从seriesConfig.layout中克隆的\r\n        if(self.isChartLayout() && target && target.data() && target.data().useSeriesConfig !== false \r\n        && target.parent() && target.parent().data().seriesConfig && target.parent().data().seriesConfig.layout) {\r\n            _data = target.parent().data().seriesConfig.layout;\r\n            self.data(_data);\r\n            self.useSeriesConfig(true);\r\n        } else {\r\n        \tself.useSeriesConfig(false);\r\n        \tself.refreshData(_data);\r\n        }\r\n    \tself.measure(isResize);\r\n    };\r\n    \r\n    /**\r\n     * 度量方法,在子类中具体实现\r\n     */\r\n    this.measure = function() {\r\n    };\r\n    \r\n    /**\r\n     * 布局关系缩放方法,在子类中具体实现\r\n     * @param isEnlarge 是否放大\r\n     */\r\n    this.zoom = function(isEnlarge) {\r\n         \r\n    };\r\n    \r\n    /**\r\n     * 刷新传入配置数据到相应布局参数的方法\r\n     * @param data 布局配置数据\r\n     */\r\n    this.refreshData = function(data) {\r\n        if(data) {\r\n           for(var key in data) {\r\n                if(self.hasOwnProperty(key)) {\r\n                    self[key](data[key]);\r\n                    \r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    this.toString = function () {\r\n         return (\"Layout info: \"    +\r\n                \"\\n   target:\"      + this.target()    + \r\n                \"\\n   data:\"        + this.data()      + \r\n                \"\\n   tx:\"          + this.tx()        + \r\n                \"\\n   ty:\"          + this.ty()        + \r\n                \"\\n   scale:\"       + this.scale()     + \r\n                \"\\n   minScale:\"    + this.minScale()  + \r\n                \"\\n   maxScale:\"    + this.maxScale()  + \r\n                \"\\n   scaleDelta:\"  + this.scaleDelta());\r\n    };\r\n};\r\n\r\nLayout.struct = function(ghca_charts) {\r\n    Layout.prototype.constructor = Layout;\r\n};\r\n\r\nmodule.exports = Layout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/layout.js\n// module id = 9\n// module chunks = 0","/** \r\n * 布局特征类\r\n * 用于记录父容器布局计算出的本容器的相关特征记录类实例，包括记录本容器的x,y,width,height等属性，\r\n * 渲染和容器返回的相关x,y,width,height等属性值都为该类实例的对应属性值，而忽略容器自身的相关属性设置。\r\n */\r\n\r\n/**\r\n * 构造方法\r\n */\r\nvar LayoutFeatures = function () {\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  x\r\n    //------------------------------\r\n    \r\n    var x = 0;\r\n    this.x = function(value) {\r\n        if (!arguments.length) return x;\r\n        x = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  y\r\n    //------------------------------\r\n    \r\n    var y = 0;\r\n    this.y = function(value) {\r\n        if (!arguments.length) return y;\r\n        y = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  z\r\n    //------------------------------\r\n    \r\n    var z = 0;\r\n    this.z = function(value) {\r\n        if (!arguments.length) return z;\r\n        z = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  width\r\n    //------------------------------\r\n    \r\n    var width = 0;\r\n    this.width = function(value) {\r\n        if (!arguments.length) return width;\r\n        width = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  height\r\n    //------------------------------\r\n    \r\n    var height = 0;\r\n    this.height = function(value) {\r\n        if (!arguments.length) return height;\r\n        height = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  scaleX\r\n    //------------------------------\r\n    \r\n    var scaleX = 1;\r\n    this.scaleX = function(value) {\r\n        if (!arguments.length) return scaleX;\r\n        scaleX = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  scaleY\r\n    //------------------------------\r\n    \r\n    var scaleY = 1;\r\n    this.scaleY = function(value) {\r\n        if (!arguments.length) return scaleY;\r\n        scaleY = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  rotate\r\n    //------------------------------\r\n    \r\n    var rotate = 0;\r\n    this.rotate = function(value) {\r\n        if (!arguments.length) return rotate;\r\n        rotate = value;\r\n        return this;\r\n    };\r\n    \r\n    this.toString = function () {\r\n         return (\"LayoutFeatures info: \"         +\r\n                \"\\n   x:\"       + this.x()       + \r\n                \"\\n   y:\"       + this.y()       + \r\n                \"\\n   z:\"       + this.z()       + \r\n                \"\\n   width:\"   + this.width()   + \r\n                \"\\n   height:\"  + this.height()  + \r\n                \"\\n   scaleX:\"  + this.scaleX()  + \r\n                \"\\n   scaleY:\"  + this.scaleY()  + \r\n                \"\\n   rotate:\"  + this.rotate());\r\n    };\r\n};\r\n\r\nLayoutFeatures.struct = function(ghca_charts) {\r\n    LayoutFeatures.prototype.constructor = LayoutFeatures;\r\n};\r\n\r\nmodule.exports = LayoutFeatures;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/layoutFeatures.js\n// module id = 10\n// module chunks = 0","// 自定义sankey模型\n\n/**\n * 构造方法\n */\nvar SankeyModel = function() {\n\t\n\t// --------------------------------------------------------------------------\n    // import\n    // --------------------------------------------------------------------------\n    \n    const Const = ghca_charts.view.util.constant;\n\n\tvar self = this,\n\t    nodeWidth = 24, \n\t    nodePadding = 8, \n\t    size = [1, 1], // sankey layout width and height\n\t    nodes = [], \n\t    links = [];\n\n\t// --------------------------------------------------------------------------\n\t//\n\t// Attributes\n\t//\n\t// --------------------------------------------------------------------------\n\n\t// ------------------------------\n\t// nodeWidth\n\t// ------------------------------\n\t\n\tthis.nodeWidth = function(value) {\n\t\tif (!arguments.length)\n\t\t\treturn nodeWidth;\n\t\tnodeWidth = +value;\n\t\treturn this;\n\t};\n\t\n\t// ------------------------------\n    // nodePadding\n    // ------------------------------\n\n\tthis.nodePadding = function(value) {\n\t\tif (!arguments.length)\n\t\t\treturn nodePadding;\n\t\tnodePadding = +value;\n\t\treturn this;\n\t};\n\t\n\t// ------------------------------\n    // nodes\n    // ------------------------------\n\n\tthis.nodes = function(value) {\n\t\tif (!arguments.length)\n\t\t\treturn nodes;\n\t\tnodes = value;\n\t\treturn this;\n\t};\n\t\n\t// ------------------------------\n    // links\n    // ------------------------------\n\n\tthis.links = function(value) {\n\t\tif (!arguments.length)\n\t\t\treturn links;\n\t\tlinks = value;\n\t\treturn this;\n\t};\n\t\n\t// ------------------------------\n    // scale\n    // ------------------------------\n\n\t/**\n     * 缩放系数，默认为1\n     */\n\tvar scale = 1;\n    this.scale = function(value) {\n        if (!arguments.length)\n            return scale;\n        scale = value;\n        return this;\n    };\n    \n    // ------------------------------\n    // scaleType\n    // ------------------------------\n\n    /**\n     * 缩放类型，整体缩放0、如连线缩放1\n     */\n    var scaleType = Const.LAYOUT_SCALE_TYPE;\n    this.scaleType = function(value) {\n        if (!arguments.length)\n            return scaleType;\n        scaleType = value;\n        return this;\n    };\n\t\n\t// ------------------------------\n    // size\n    // ------------------------------\n\n    /**\n     * 布局大小范围，格式为[width, height]\n     */\n\tthis.size = function(value) {\n\t\tif (!arguments.length)\n\t\t\treturn size;\n\t\tsize = value;\n\t\treturn this;\n\t};\n\t\n\t// ------------------------------\n    // isLikeTree\n    // ------------------------------\n\n    /**\n     * 是否像树节点一样布局，若为true,则所有节点从根节点开始依照层级左对齐，若为false,则所有节点右对齐\n     */\n    var isLikeTree = false;\n    this.isLikeTree = function(value) {\n        if (!arguments.length)\n            return isLikeTree;\n        isLikeTree = value;\n        return this;\n    };\n    \n    // ------------------------------\n    // maxNodeSize\n    // ------------------------------\n    \n    /**\n     * 最大节点尺寸\n     */\n    var maxNodeSize = 1000;\n    this.maxNodeSize = function(value) {\n        if (!arguments.length)\n            return maxNodeSize;\n        maxNodeSize = +value;\n        return this;\n    };\n\t\n\t// --------------------------------------------------------------------------\n    //\n    // public Methods\n    //\n    // --------------------------------------------------------------------------\n\n\tthis.layout = function(iterations) {\n\t\tcomputeNodeLinks();\n\t\tcomputeNodeValues();\n\t\tcomputeNodeBreadths();\n\t\tcomputeNodeDepths(iterations);\n\t\tcomputeLinkDepths();\n\t\treturn this;\n\t};\n\n\tthis.relayoutLinkDepths = function() {\n\t\tcomputeLinkDepths();\n\t\treturn this;\n\t};\n\t\n\tthis.relayout = function() {\n\t\tcomputeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        return this;\n    };\n\n\tthis.linkPath = function() {\n        var curvature = .5;\n    \n        function link(d) {\n          var x0 = d.source.x + d.source.dx,\n              x1 = d.target.x,\n              xi = d3.interpolateNumber(x0, x1),\n              x2 = xi(curvature),\n              x3 = xi(1 - curvature),\n              y0 = d.source.y + d.sy + d.dy / 2,\n              y1 = d.target.y + d.ty + d.dy / 2;\n          return \"M\" + x0 + \",\" + y0\n               + \"C\" + x2 + \",\" + y0\n               + \" \" + x3 + \",\" + y1\n               + \" \" + x1 + \",\" + y1;\n        }\n\n        link.curvature = function(_) {\n          if (!arguments.length) return curvature;\n          curvature = +_;\n          return link;\n        };\n    \n        return link;\n    };\n\t\n\t// --------------------------------------------------------------------------\n    //\n    // private Methods\n    //\n    // --------------------------------------------------------------------------\n\n\t// Populate the sourceLinks and targetLinks for each node.\n\t// Also, if the source and target are not objects, assume they are\n\t// indices.\n\tfunction computeNodeLinks() {\n//\t\t\tnodes.forEach(function(node) {\n//\t\t\t\t\t\tnode.sourceLinks = [];\n//\t\t\t\t\t\tnode.targetLinks = [];\n//\t\t\t\t\t});\n//\t\t\tlinks.forEach(function(link) {\n//\t\t\t\t\t\tvar source = link.source, target = link.target;\n//\t\t\t\t\t\tif (typeof source === \"number\")\n//\t\t\t\t\t\t\tsource = link.source = nodes[link.source];\n//\t\t\t\t\t\tif (typeof target === \"number\")\n//\t\t\t\t\t\t\ttarget = link.target = nodes[link.target];\n//\t\t\t\t\t\tsource.sourceLinks.push(link);\n//\t\t\t\t\t\ttarget.targetLinks.push(link);\n//\t\t\t\t\t});\n\t}\n\n\t// Compute the value (size) of each node by summing the associated\n\t// links.\n\tfunction computeNodeValues() {\n\t\tnodes.forEach(function(node) {\n\t\t\tnode.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));\n\t\t});\n\t}\n\n\t// Iteratively assign the breadth (x-position) for each node.\n\t// Nodes are assigned the maximum breadth of incoming neighbors plus\n\t// one;\n\t// nodes with no incoming links are assigned breadth zero, while\n\t// nodes with no outgoing links are assigned the maximum breadth.\n\tfunction computeNodeBreadths() {\n\t\tvar remainingNodes = nodes, nextNodes, x = 0;\n\n\t\twhile (remainingNodes.length) {\n\t\t\tnextNodes = [];\n\t\t\tremainingNodes.forEach(function(node) {\n\t\t\t\tnode.x = x;\n\t\t\t\tnode.dx = nodeWidth;\n\t\t\t\tnode.sourceLinks.forEach(function(link) {\n\t\t\t\t\tnextNodes.push(link.target);\n\t\t\t\t});\n\t\t\t});\n\t\t\tremainingNodes = nextNodes;\n\t\t\t++x;\n\t\t}\n\n\t\tif(self.isLikeTree() === false) {\n\t\t\tmoveSinksRight(x);\n\t\t}\n\t\tvar kx = (size[0] - nodeWidth) / (x - 1);\n\t\tscaleNodeBreadths(kx);\n\t}\n\n\tfunction moveSourcesRight() {\n\t\tnodes.forEach(function(node) {\n\t\t\tif (!node.targetLinks.length) {\n\t\t\t\tnode.x = d3.min(node.sourceLinks, function(d) {\n\t\t\t\t\treturn d.target.x;\n\t\t\t\t}) - 1;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction moveSinksRight(x) {\n\t\tnodes.forEach(function(node) {\n\t\t\tif (!node.sourceLinks.length) {\n\t\t\t\tnode.x = x - 1;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction scaleNodeBreadths(kx) {\n\t\tnodes.forEach(function(node) {\n\t\t\tnode.x *= kx;\n\t\t});\n\t}\n\n\tfunction computeNodeDepths(iterations) {\n\t\tvar nodesByBreadth = d3.nest().key(function(d) {\n\t\t\treturn d.x;\n\t\t}).sortKeys(d3.ascending).entries(nodes).map(function(d) {\n\t\t\treturn d.values;\n\t\t});\n\n\t\tinitializeNodeDepth();\n\t\tresolveCollisions();\n\t\tvalidateNodeSize();\n\t\tfor (var alpha = 1; iterations > 0; --iterations) {\n\t\t\trelaxRightToLeft(alpha *= 0.99);\n\t\t\tresolveCollisions();\n\t\t\trelaxLeftToRight(alpha);\n\t\t\tresolveCollisions();\n\t\t}\n\t\tmoveMiddle();\n\n\t\tfunction initializeNodeDepth() {\n\t\t\tvar ky = d3.min(nodesByBreadth, function(nodes) {\n\t\t\t\treturn (size[1] - (nodes.length - 1) * nodePadding)\n\t\t\t\t\t\t/ d3.sum(nodes, value);\n\t\t\t});\n\t\t\t\n\t\t\tif(ky <= 0) {\n\t\t\t    ky = 1;\n\t\t\t}\n\n\t\t\tnodesByBreadth.forEach(function(nodes) {\n\t\t\t\tnodes.forEach(function(node, i) {\n\t\t\t\t\tnode.y = i;\n\t\t\t\t\tnode.dy = node.value * ky;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tlinks.forEach(function(link) {\n\t\t\t\tlink.dy = link.value * ky;\n\t\t\t});\n\t\t}\n\n\t\tfunction relaxLeftToRight(alpha) {\n\t\t\tnodesByBreadth.forEach(function(nodes, breadth) {\n\t\t\t\tnodes.forEach(function(node) {\n\t\t\t\t\tif (node.targetLinks.length) {\n\t\t\t\t\t\tvar y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n\t\t\t\t\t\tnode.y += (y - center(node)) * alpha;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction weightedSource(link) {\n\t\t\t\treturn center(link.source) * link.value;\n\t\t\t}\n\t\t}\n\n\t\tfunction relaxRightToLeft(alpha) {\n\t\t\tnodesByBreadth.slice().reverse().forEach(function(nodes) {\n\t\t\t\tnodes.forEach(function(node) {\n\t\t\t\t\tif (node.sourceLinks.length) {\n\t\t\t\t\t\tvar y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n\t\t\t\t\t\tnode.y += (y - center(node)) * alpha;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction weightedTarget(link) {\n\t\t\t\treturn center(link.target) * link.value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//根据最大节点高度处理布局\n        function validateNodeSize() {\n            var maxNodeSize = self.maxNodeSize(), maxDy = 0;\n            self.nodes().forEach(function(d){\n                maxDy = d.dy > maxDy ? d.dy : maxDy;\n            });\n            if(maxDy > maxNodeSize) {\n                var k = maxNodeSize / maxDy;\n                self.nodes().forEach(function(d){\n                    d.dy *= k;\n                });\n                self.links().forEach(function(d){\n                    d.dy *= k;\n                    d.sy *= k;\n                });\n            }\n        }\n        \n        //内容垂直居中\n        function moveMiddle() {\n            var minY = Infinity;\n            self.nodes().forEach(function(d){\n                minY = minY > d.y ? d.y : minY;\n            });\n            var moveY = -minY / 2;\n            self.nodes().forEach(function(d){\n                d.y += moveY;\n            });\n        }\n\n\t\tfunction resolveCollisions() {\n\t\t\tnodesByBreadth.forEach(function(nodes) {\n\t\t\t\tvar node, dy, y0 = 0, n = nodes.length, i;\n\n\t\t\t\t// Push any overlapping nodes down.\n\t\t\t\tnodes.sort(ascendingDepth);\n\t\t\t\tfor (i = 0; i < n; ++i) {\n\t\t\t\t\tnode = nodes[i];\n\t\t\t\t\tdy = y0 - node.y;\n\t\t\t\t\tif (dy > 0)\n\t\t\t\t\t\tnode.y += dy;\n\t\t\t\t\ty0 = node.y + node.dy + nodePadding;\n\t\t\t\t}\n\n\t\t\t\t// If the bottommost node goes outside the bounds,\n\t\t\t\t// push it back up.\n\t\t\t\tdy = y0 - nodePadding - size[1];\n\t\t\t\tif (dy > 0) {\n\t\t\t\t\ty0 = node.y -= dy;\n\n\t\t\t\t\t// Push any overlapping nodes back up.\n\t\t\t\t\tfor (i = n - 2; i >= 0; --i) {\n\t\t\t\t\t\tnode = nodes[i];\n\t\t\t\t\t\tdy = node.y + node.dy + nodePadding - y0;\n\t\t\t\t\t\tif (dy > 0)\n\t\t\t\t\t\t\tnode.y -= dy;\n\t\t\t\t\t\ty0 = node.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction ascendingDepth(a, b) {\n\t\t\treturn a.y - b.y;\n\t\t}\n\t}\n\t\n\tfunction computeLinkDepths() {\n\t\tnodes.forEach(function(node) {\n\t\t\tnode.sourceLinks.sort(ascendingTargetDepth);\n\t\t\tnode.targetLinks.sort(ascendingSourceDepth);\n\t\t});\n\t\tnodes.forEach(function(node) {\n\t\t\tvar sy = 0, ty = 0;\n\t\t\tnode.sourceLinks.forEach(function(link) {\n\t\t\t\tlink.sy = sy;\n\t\t\t\tsy += link.dy;\n\t\t\t});\n\t\t\tnode.targetLinks.forEach(function(link) {\n\t\t\t\tlink.ty = ty;\n\t\t\t\tty += link.dy;\n\t\t\t});\n\t\t});\n\n\t\tfunction ascendingSourceDepth(a, b) {\n\t\t\treturn a.source.y - b.source.y;\n\t\t}\n\n\t\tfunction ascendingTargetDepth(a, b) {\n\t\t\treturn a.target.y - b.target.y;\n\t\t}\n\t}\n\n\tfunction center(node) {\n\t\treturn node.y + node.dy / 2;\n\t}\n\n\tfunction value(link) {\n\t\treturn link.value;\n\t}\n};\n\nSankeyModel.struct = function(ghca_charts) {\n    SankeyModel.prototype.constructor = SankeyModel;\n};\n\nmodule.exports = SankeyModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/model/sankeyModel.js\n// module id = 11\n// module chunks = 0","//Pack布局类，继承自Layout\r\n\r\nvar PackLayout = function (_target, _data) {\r\n\t   \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    \r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    this.model(d3.pack());\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  visibleData\r\n    //------------------------------\r\n\r\n    var visibleData = [];\r\n    this.visibleData = function(){\r\n        if(!arguments.length)return visibleData;\r\n        visibleData = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  radius\r\n    //------------------------------\r\n\r\n    var radius = 100;\r\n    this.radius = function(){\r\n        if(!arguments.length)return radius;\r\n        radius = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  padding\r\n    //------------------------------\r\n    \r\n    var padding = 0;\r\n    this.padding = function(){\r\n        if(!arguments.length) return padding;\r\n        padding = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  nodes\r\n    //------------------------------\r\n    \r\n    var nodes = [];\r\n    this.nodes = function(){\r\n        if(!arguments.length)return nodes;\r\n        nodes = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  root\r\n    //------------------------------\r\n    \r\n    var root = null;\r\n    this.root = function(value) {\r\n        if (!arguments.length)\r\n            return root;\r\n        root = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    //override\r\n    this.measure = function() {\r\n    \tvar target = self.target();\r\n        var radius = self.radius()*self.scale();\r\n        root = d3.stratify()(self.visibleData());\r\n        root = d3.hierarchy(root)\r\n            .sum(function(d) {\r\n                return d.data.value;\r\n            })\r\n            .sort(function(a, b) {\r\n                return b.data.value - a.data.value;\r\n            });\r\n        self.nodes(self.model().size([radius*2, radius*2]).padding(self.padding())(root)\r\n            .each(function(d) {\r\n            \t//消除一个多余的data层级\r\n                d.data = d.data.data;\r\n                d.startAngle    = 0;\r\n                d.endAngle      = Math.PI * 2;\r\n                d.innerRadius   = 0;\r\n                d.outerRadius   = d.r;\r\n                //复制数据到data下\r\n                d.data.startAngle   = d.startAngle;\r\n                d.data.endAngle     = d.endAngle;\r\n                d.data.innerRadius  = d.innerRadius;\r\n                d.data.outerRadius  = d.outerRadius;\r\n                d.data.x            = d.x;\r\n                d.data.y            = d.y;\r\n                //删除多余的数据\r\n                delete d.x;\r\n                delete d.y;\r\n                delete d.r;\r\n            })\r\n            .descendants());\r\n        //渲染点和线的位置\r\n        target.renderPosition();\r\n    };\r\n    \r\n    //override\r\n    this.zoom = function(isEnlarge) {\r\n        var _rate = self.scaleDelta();\r\n        var _scaleRate = self.scale();\r\n        var _maxScaleRate = self.maxScale();\r\n        var _minScaleRate = self.minScale();\r\n        if(isEnlarge) {\r\n            _scaleRate += _rate;\r\n            if(_scaleRate>_maxScaleRate)\r\n                _scaleRate = _maxScaleRate;//最大放大率\r\n        } else {\r\n            _scaleRate -= _rate;\r\n            if(_scaleRate<_minScaleRate)\r\n                _scaleRate = _minScaleRate;//最小\r\n        }\r\n        self.scale(_scaleRate);\r\n        self.target().update();\r\n    };\r\n};\r\n\r\nPackLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    PackLayout.prototype = Object.create(Layout.prototype);\r\n    PackLayout.prototype.constructor = PackLayout;\r\n};\r\n\r\nmodule.exports = PackLayout;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/packLayout.js\n// module id = 12\n// module chunks = 0","//饼图默认布局类，继承自Layout\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar PieLayout = function (_target, _data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Constant = ghca_charts.view.util.constant;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * pie模型\r\n     */\r\n    var model = d3.pie();\r\n    this.model = function() {\r\n        return model;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  items\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 项数据数组\r\n     */\r\n    var items = [];\r\n    this.items = function(value) {\r\n        if (!arguments.length)\r\n            return items;\r\n        items = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  dataKey\r\n    //------------------------------\r\n    \r\n    /**\r\n     * pie数据项的键名称，默认为\"value\"\r\n     */\r\n    var dataKey = \"value\";\r\n    this.dataKey = function(value) {\r\n        if (!arguments.length)\r\n            return dataKey;\r\n        dataKey = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  roseType\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 玫瑰图类型，no|radius，若为no，则为普通饼图，默认为no\r\n     */\r\n    var roseType = PieLayout.ROSE_TYPE_NO;\r\n    this.roseType = function(value) {\r\n        if (!arguments.length)\r\n            return roseType;\r\n        roseType = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  roseKey\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 玫瑰图数据项的键名称，默认为dataKey的值，即\"value\",roseType不为no时有效\r\n     */\r\n    var roseKey = dataKey;\r\n    this.roseKey = function(value) {\r\n        if (!arguments.length)\r\n            return roseKey;\r\n        roseKey = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  startAngle\r\n    //------------------------------\r\n    \r\n    /**\r\n     * pie开始弧度，默认为0\r\n     */\r\n    var startAngle = 0;\r\n    this.startAngle = function(value) {\r\n        if (!arguments.length)\r\n            return startAngle;\r\n        startAngle = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  endAngle\r\n    //------------------------------\r\n    \r\n    /**\r\n     * pie结束弧度，默认为2pi\r\n     */\r\n    var endAngle = Math.PI*2;\r\n    this.endAngle = function(value) {\r\n        if (!arguments.length)\r\n            return endAngle;\r\n        endAngle = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  sort\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 排序方法(默认禁用排序) desc|asc|none\r\n     */\r\n    var sort = Constant.SORT_NONE;\r\n    this.sort = function(value) {\r\n        if (!arguments.length)\r\n            return sort;\r\n        sort = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    /**\r\n     * 根据传入的sort方法创建真正的排序方法\r\n     */\r\n    var getSortFn = function(a1, a2) {\r\n    \tvar sortFn = self.sort();\r\n    \tif(!sortFn || sortFn === Constant.SORT_NONE) {\r\n    \t\treturn null;\r\n    \t}\r\n    \tif(sortFn === Constant.SORT_DESC) {\r\n    \t\tsortFn = function(v1, v2) {\r\n                return v2 - v1; \r\n            };\r\n    \t} else if (sortFn === Constant.SORT_ASC) {\r\n    \t\tsortFn = function(v1, v2) {\r\n                return v1 - v2; \r\n            };\r\n    \t} else {\r\n    \t\treturn null;\r\n    \t}\r\n    \tvar dataKey = self.dataKey();\r\n    \treturn function(a1, a2) {\r\n    \t\treturn sortFn.call(self, a1[dataKey], a2[dataKey]);\r\n    \t};\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n        var model = self.model()\r\n            .startAngle(self.startAngle()).endAngle(self.endAngle())\r\n            .sort(getSortFn())\r\n            .value(function(d) { \r\n                return d[self.dataKey()]; \r\n            });\r\n        var target = self.target();\r\n        //计算布局内容，重新组装data数据\r\n        var data = target.visibleItems();\r\n        var itemsData = model(data);\r\n        var roseKey, roseValue, maxRoseValue = NaN;\r\n        if(self.roseType() === PieLayout.ROSE_TYPE_RADIUS) {\r\n        \troseKey = self.roseKey();\r\n//        \titemsData.forEach(function(item) {\r\n//        \t\troseValue = item.data[roseKey];\r\n//        \t\tif(isNaN(maxRoseValue) || maxRoseValue < roseValue) {\r\n//        \t\t\tmaxRoseValue = roseValue;\r\n//        \t\t}\r\n//        \t});\r\n        }\r\n        var isRose = roseKey !== undefined;\r\n        var total = 0;\r\n        itemsData.forEach(function(item) {\r\n        \tvar value = item.data[self.dataKey()];\r\n        \ttotal += value;\r\n        \tif(isRose) {\r\n        \t\titem.radiusPercent = item.data[roseKey] / value;\r\n        \t}\r\n        \tvar bindKey = item.hasOwnProperty(\"data\") ? item.data.bindKey : null;\r\n            data.forEach(function(n) {\r\n                if(n.bindKey === bindKey) {\r\n                \tif(!isRose && n.hasOwnProperty(\"radiusPercent\")) {\r\n            \t\t\tdelete n[\"radiusPercent\"];\r\n            \t\t}\r\n                    for(var key in item) {\r\n                    \tif(key !== \"data\") {\r\n                    \t\tn[key] = item[key];\r\n                    \t}\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        itemsData.forEach(function(item) {\r\n        \tif(item.data) {\r\n        \t\tvar value = item.data[self.dataKey()];\r\n        \t\titem.data.percent = value / total;\r\n        \t}\r\n        });\r\n        //渲染点和线的位置\r\n        target.renderPosition();\r\n            \r\n        Global.isDebug && console.log(\"PieLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"PieLayout info: \"   +\r\n                \"\\n   size:\"         + this.target().width() + \",\" + this.target().height());\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nPieLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    PieLayout.prototype = Object.create(Layout.prototype);\r\n    PieLayout.prototype.constructor = PieLayout;\r\n};\r\n\r\n//--------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nPieLayout.ROSE_TYPE_NO \t\t= \"no\";\t\t//非玫瑰图类型\r\nPieLayout.ROSE_TYPE_RADIUS \t= \"radius\";\t//半径类型玫瑰图\r\n\r\nmodule.exports = PieLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/pieLayout.js\n// module id = 13\n// module chunks = 0","//进度条布局类，继承自Layout\r\n\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar ProgressBarLayout = function (_target, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    self.isChartLayout(true);\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平布局模型\r\n     */\r\n    var model = null;\r\n    this.model = function(){\r\n        return model;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  itemMinHeight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项最小高度值(默认值2)\r\n     */\r\n    var itemMinHeight = 2;\r\n    this.itemMinHeight = function(value) {\r\n        if (!arguments.length) return itemMinHeight;                \r\n        itemMinHeight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  itemMaxHeight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项最大高度值(默认值100)\r\n     */\r\n    var itemMaxHeight = 100;\r\n    this.itemMaxHeight = function(value) {\r\n        if (!arguments.length) return itemMaxHeight;                \r\n        itemMaxHeight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  horizontalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平对齐方式，left|center|right(默认值left)\r\n     */\r\n    var horizontalAlign = \"left\";\r\n    this.horizontalAlign = function(value) {\r\n        if (!arguments.length) return horizontalAlign;                \r\n        horizontalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  verticalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直对齐方式，top|middle|bottom(默认值top)\r\n     */\r\n    var verticalAlign = \"top\";\r\n    this.verticalAlign = function(value) {\r\n        if (!arguments.length) return verticalAlign;                \r\n        verticalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  gap\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项间距(默认值6)\r\n     */\r\n    var gap = 6;\r\n    this.gap = function(value) {\r\n        if (!arguments.length) return gap;                \r\n        gap = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  fit\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 自动撑满父容器，根据实际高宽计算gap(默认值false)\r\n     */\r\n    var fit = false;\r\n    this.fit = function(value) {\r\n        if (!arguments.length) return fit;\r\n        fit = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingBottom\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项底边距离(默认值0)\r\n     */\r\n    var paddingBottom = 0;\r\n    this.paddingBottom = function(value) {\r\n        if (!arguments.length) return paddingBottom;                \r\n        paddingBottom = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingLeft\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项左边距离(默认值0)\r\n     */\r\n    var paddingLeft = 0;\r\n    this.paddingLeft = function(value) {\r\n        if (!arguments.length) return paddingLeft;                \r\n        paddingLeft = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingRight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项右边距离(默认值0)\r\n     */\r\n    var paddingRight = 0;\r\n    this.paddingRight = function(value) {\r\n        if (!arguments.length) return paddingRight;                \r\n        paddingRight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingTop\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项顶边距离(默认值0)\r\n     */\r\n    var paddingTop = 0;\r\n    this.paddingTop = function(value) {\r\n        if (!arguments.length) return paddingTop;                \r\n        paddingTop = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n        var self = this, \r\n            target = self.target(),\r\n            children = target.visibleItems();\r\n            \r\n        if(!target || !children || children.length === 0) {\r\n            return;\r\n        }\r\n            \r\n        var paddingTop = self.paddingTop(),\r\n            paddingLeft = self.paddingLeft(),\r\n            paddingRight = self.paddingRight(),\r\n            paddingBottom = self.paddingBottom(),\r\n            horAlign = self.horizontalAlign(),\r\n            verAlign = self.verticalAlign(),\r\n            gap = self.gap(),\r\n            targetW = target.width() - paddingLeft - paddingRight,\r\n            targetH = target.height() - paddingTop - paddingBottom;\r\n        var x, y, child, len= children.length, totalH = 0, i = 0;\r\n        var itemHeight = targetH / len;\r\n        if(itemHeight < self.itemMinHeight()) {\r\n            itemHeight = self.itemMinHeight();\r\n        } else if(itemHeight > self.itemMaxHeight()) {\r\n        \titemHeight = self.itemMaxHeight();\r\n        }\r\n        if(fit || verAlign === \"middle\") {\r\n            for(i = 0; i < len; i++) {\r\n                totalH += itemHeight;\r\n            };\r\n            if(fit) {\r\n                gap = len > 1 ? (targetH - totalH)/(len - 1) : 0;\r\n            }\r\n            totalH += gap * (len - 1);\r\n        }\r\n        \r\n        for(i = 0; i < len; i++) {\r\n            child = children[i];\r\n            child.width = parseInt(targetW * child.value/child.total);\r\n            child.height = itemHeight;\r\n            child.bgWidth = targetW;\r\n            child.bgHeight = itemHeight;\r\n            if(horAlign === \"left\") {\r\n                x = paddingLeft;\r\n            } else if(horAlign === \"center\") {\r\n                x = paddingLeft;\r\n            } else if(horAlign === \"right\") {\r\n                x = paddingLeft;\r\n            }\r\n            \r\n            if(fit || verAlign === \"middle\") {\r\n                y = paddingTop + (targetH - totalH) / 2 + (itemHeight + gap) * i;\r\n            } else if(verAlign === \"top\") {\r\n                y = paddingTop + (itemHeight + gap) * i;\r\n            } else if(verAlign === \"bottom\") {\r\n                y = paddingTop + targetH - itemHeight * (i + 1) - gap * i;\r\n            }\r\n            child.x = x;\r\n            child.y = y;\r\n        }\r\n        \r\n        Global.isDebug && console.log(\"ProgressBarLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"ProgressBarLayout info: \");\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nProgressBarLayout.struct = function(ghca_charts) {\r\n    var Layout = ghca_charts.layout.layout;\r\n    Layout.struct(ghca_charts);\r\n    ProgressBarLayout.prototype = Object.create(Layout.prototype);\r\n    ProgressBarLayout.prototype.constructor = ProgressBarLayout;\r\n};\r\n\r\nmodule.exports = ProgressBarLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/progressBarLayout.js\n// module id = 14\n// module chunks = 0","//sankey图默认布局类，继承自Layout\r\n\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar SankeyLayout = function (_target, _data) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const MouseUtil = ghca_charts.view.util.mouseUtil;\r\n    const SankeyModel = ghca_charts.layout.model.sankeyModel;\r\n    const Global = ghca_charts.global;\r\n    \r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * sankey模型\r\n     */\r\n    var model = new SankeyModel();\r\n    this.model = function(){\r\n        return model;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  nodes\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 节点数据数组\r\n     */\r\n    var nodes = [];\r\n    this.nodes = function(){\r\n        return nodes;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  links\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 连线数据数组\r\n     */\r\n    var links = [];\r\n    this.links = function(){\r\n        return links;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // nodeWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 节点宽度\r\n     */\r\n    var nodeWidth = 24;\r\n    this.nodeWidth = function(value) {\r\n        if (!arguments.length)\r\n            return nodeWidth;\r\n        nodeWidth = +value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // maxNodeSize\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 最大节点尺寸\r\n     */\r\n    var maxNodeSize = 1000;\r\n    this.maxNodeSize = function(value) {\r\n        if (!arguments.length)\r\n            return maxNodeSize;\r\n        maxNodeSize = +value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // nodePadding\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 同级别节点间距\r\n     */\r\n    var nodePadding = 12;\r\n    this.nodePadding = function(value) {\r\n        if (!arguments.length)\r\n            return nodePadding;\r\n        nodePadding = +value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // isLikeTree\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 是否像树节点一样布局，若为true,则所有节点从根节点开始依照层级左对齐，若为false,则所有节点右对齐\r\n     */\r\n    var isLikeTree = false;\r\n    this.isLikeTree = function(value) {\r\n        if (!arguments.length)\r\n            return isLikeTree;\r\n        isLikeTree = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n    \t//刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    this.scaleLayout = function(isEnlarge, scaleType) {\r\n        //如果为固定点模式，则使用以鼠标当前坐标为中心点的缩放方式进行缩放，且只改变点的位置，其他容器都不改变\r\n        var ds, scale = self.scale(), scaleDelta = self.scaleDelta();\r\n        if(isEnlarge) {\r\n            ds = scaleDelta;\r\n            if(scale + ds > self.maxScale()) {\r\n                return;\r\n            }\r\n        } else {\r\n            ds = -scaleDelta;\r\n            if(scale + ds < self.minScale()) {\r\n                return;\r\n            }\r\n        }\r\n        var ratio = (ds + scale) / scale;\r\n        if(scaleType === Const.LAYOUT_SCALE_TYPE) {\r\n            this.target().nodes.forEach(function(node) {\r\n                node.x = node.x * ratio;\r\n                node.y = node.y * ratio;\r\n            });\r\n        } else if(scaleType === Const.LAYOUT_HOR_SCALE_TYPE) {\r\n            this.target().nodes.forEach(function(node) {\r\n                node.x = node.x * ratio;\r\n            });\r\n        } else if(scaleType === Const.LAYOUT_VER_SCALE_TYPE) {\r\n            this.target().nodes.forEach(function(node) {\r\n                node.y = node.y * ratio;\r\n            });\r\n        }\r\n        \r\n        ratio = ds / scale;\r\n        var target = self.target(), x = target.x(), y = target.y(), bg = target.parent().bgNode();\r\n        var localP = MouseUtil.mouse(bg);\r\n        if(scaleType === Const.LAYOUT_SCALE_TYPE) {\r\n            x -= (localP[0] - x) * ratio;\r\n            y -= (localP[1] - y) * ratio;\r\n        } else if(scaleType === Const.LAYOUT_HOR_SCALE_TYPE) {\r\n            x -= (localP[0] - x) * ratio;\r\n        } else if(scaleType === Const.LAYOUT_VER_SCALE_TYPE) {\r\n            y -= (localP[1] - y) * ratio;\r\n        }\r\n        target.x(x);\r\n        target.y(y);\r\n        self.scale(scale + ds);\r\n    };\r\n    \r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n        var model = this.model();\r\n        var self = this, target = self.target();\r\n        //计算布局内容，判断是否全部重新布局\r\n        if(arguments.length !== 1 || arguments[0] !== false) {\r\n            model\r\n                .nodeWidth(this.nodeWidth())\r\n                .nodePadding(this.nodePadding())\r\n                .size([target.width(), target.height()])\r\n                .nodes(this.nodes())\r\n                .links(this.links())\r\n                .scaleType(target.scaleType())\r\n                .scale(this.scale())\r\n                .maxNodeSize(this.maxNodeSize())\r\n                .isLikeTree(this.isLikeTree())\r\n                .layout(32);\r\n        }\r\n            \r\n        //渲染点和线的位置\r\n        self.target().renderPosition();\r\n            \r\n        Global.isDebug && console.log(\"SankeyLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override缩放方法\r\n     * @param isEnlarge 是否放大\r\n     */\r\n    this.zoom = function(isEnlarge) {\r\n        var self = this;\r\n        //判断是否是对所有元素进行缩放\r\n        var scaleType = self.target().scaleType();\r\n        self.scaleLayout(isEnlarge, scaleType);\r\n         \r\n        this.measure(false);\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"SankeyLayout info: \"   +\r\n                \"\\n   nodeWidth:\"       + this.nodeWidth()              + \r\n                \"\\n   nodePadding:\"     + this.nodePadding()            + \r\n                \"\\n   maxNodeSize:\"     + this.maxNodeSize()            + \r\n                \"\\n   scaleType:\"       + this.scaleType()              + \r\n                \"\\n   isLikeTree:\"      + this.isLikeTree()             + \r\n                \"\\n   size:\"            + this.target().width() + \",\" + this.target().height());\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nSankeyLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    SankeyLayout.prototype = Object.create(Layout.prototype);\r\n    SankeyLayout.prototype.constructor = SankeyLayout;\r\n};\r\n\r\nmodule.exports = SankeyLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/sankeyLayout.js\n// module id = 15\n// module chunks = 0","//散点图默认布局类，继承自Layout\r\n    \r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar ScatterLayout = function (_target, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  isTimeLine\r\n    //------------------------------\r\n    \r\n    /**\r\n     * scatter布局类型是否是时间轴类型\r\n     */\r\n    var isTimeLine = false;\r\n    this.isTimeLine = function(value) {\r\n        if (!arguments.length)\r\n            return isTimeLine;\r\n        isTimeLine = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  items\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 项数据数组\r\n     */\r\n    var items = [];\r\n    this.items = function(value) {\r\n        if (!arguments.length)\r\n            return items;\r\n        items = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  const\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n    \tvar xScale, yScale, xKey, yKey, xType, yType, horAxis, verAxis, \r\n    \t    target = self.target();\r\n    \t    \r\n        if(target.horAxis()) {\r\n            horAxis = target.horAxis();\r\n            xScale = horAxis.scaleIns();\r\n            xKey = horAxis.key();\r\n            xType = horAxis.type();\r\n        }\r\n        if(target.verAxis()) {\r\n            verAxis = target.verAxis();\r\n            yScale = verAxis.scaleIns();\r\n            yKey = verAxis.key();\r\n            yType = verAxis.type();\r\n        }\r\n        var horInterval = horAxis.interval(), \r\n            verInterval = verAxis.interval(), \r\n            data = target.visibleItems();\r\n        for(var d, vx, vy, i = 0, len = data.length; i < len; i++) {\r\n        \td = data[i];\r\n            if(xScale && xKey) {\r\n            \tvx = d[xKey];\r\n            \td.x = xScale(vx);\r\n                if(xType === \"enum\") {\r\n                \tif(!self.isTimeLine()) {\r\n                \t\td.x += xScale.bandwidth() / 2;\r\n                \t}\r\n                    d.dx = xScale.bandwidth();\r\n                } else if(xType === \"value\" && horInterval > 0) {\r\n                    d.dx = xScale(vx + horInterval) - d.x;\r\n                } else if(xType === \"time\" && horInterval > 0) {\r\n                    d.dx = xScale(new Date(vx.getTime() + horInterval * 1000)) - d.x;\r\n                }\r\n            }\r\n            if(yScale && yKey) {\r\n            \tvy = d[yKey];\r\n            \td.y = yScale(vy);\r\n                if(yType === \"enum\") {\r\n                \tif(!self.isTimeLine()) {\r\n                \t\td.y += yScale.bandwidth() / 2;\r\n                \t}\r\n                    d.dy = yScale.bandwidth();\r\n                } else if(yType === \"value\" && horInterval > 0) {\r\n                    d.dy = d.y - yScale(vy + verInterval);\r\n                } else if(yType === \"time\" && horInterval > 0) {\r\n                    d.dy = d.y - yScale(new Date(vy.getTime() + verInterval * 1000));\r\n                }\r\n            }\r\n        }\r\n                \r\n        Global.isDebug && console.log(\"ScatterLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"ScatterLayout info: \"   +\r\n                \"\\n   size:\"             + this.target().width() + \",\" + this.target().height());\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nScatterLayout.struct = function(ghca_charts) {\r\n    var Layout = ghca_charts.layout.layout;\r\n    Layout.struct(ghca_charts);\r\n    ScatterLayout.prototype = Object.create(Layout.prototype);\r\n    ScatterLayout.prototype.constructor = ScatterLayout;\r\n};\r\n\r\nmodule.exports = ScatterLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/scatterLayout.js\n// module id = 16\n// module chunks = 0","//Sunburst布局类，继承自Layout\r\n\r\nvar SunburstLayout = function (_target, _data) {\r\n\t   \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    \r\n    var self = this;\r\n\r\n    Layout.apply(this, arguments);\r\n\r\n    var visibleData = [];\r\n    this.visibleData = function(){\r\n        if(!arguments.length)return visibleData;\r\n        visibleData = arguments[0];\r\n        return this;\r\n    }\r\n\r\n    var radius = 0;\r\n    this.radius = function(){\r\n        if(!arguments.length)return radius;\r\n        radius = arguments[0];\r\n        return this;\r\n    }\r\n    \r\n    var nodes = [];\r\n    this.nodes = function(){\r\n        if(!arguments.length)return nodes;\r\n        nodes = arguments[0];\r\n        return this;\r\n    }\r\n    this.model(d3.partition());\r\n\r\n    //override\r\n    this.measure = function() {\r\n    \tvar target = self.target();\r\n        var radius = self.radius()*self.scale();\r\n        var root = d3.stratify()(self.visibleData());\r\n        root = d3.hierarchy(root)\r\n            .sum(function(d) {\r\n                return d.children ? 0 : d.data.value;\r\n            })\r\n            .sort(function(a, b) {\r\n                return b.data.value - a.data.value;\r\n            });\r\n        self.nodes(self.model().size([2 * Math.PI, radius])(root)\r\n            .each(function(d) {\r\n            \t//消除一个多余的data层级\r\n                d.data = d.data.data;\r\n                d.startAngle    = d.x0;\r\n                d.endAngle      = d.x1;\r\n                d.innerRadius   = self.target().isFillMiddle() ? (d.depth > 1 ? d.y0 : 0) : d.y0;\r\n                d.outerRadius   = d.y1;\r\n                //复制数据到data下\r\n                d.data.startAngle   = d.startAngle;\r\n                d.data.endAngle     = d.endAngle;\r\n                d.data.innerRadius  = d.innerRadius;\r\n                d.data.outerRadius  = d.outerRadius;\r\n                //删除无用数据\r\n                delete d.x0;\r\n                delete d.x1;\r\n                delete d.y0;\r\n                delete d.y1;\r\n            })\r\n            .descendants()\r\n            .filter(function(d) {\r\n                return (d.endAngle - d.startAngle > 0.005); // 0.005 radians = 0.29 degrees\r\n            }));\r\n        //渲染点和线的位置\r\n        target.renderPosition();\r\n    };\r\n    //override\r\n    this.zoom = function(isEnlarge) {\r\n        var _rate = self.scaleDelta();\r\n        var _scaleRate = self.scale();\r\n        var _maxScaleRate = self.maxScale();\r\n        var _minScaleRate = self.minScale();\r\n        if(isEnlarge) {\r\n            _scaleRate+=_rate;\r\n            if(_scaleRate>_maxScaleRate)_scaleRate = _maxScaleRate;//最大放大率\r\n        } else {\r\n            _scaleRate-=_rate;\r\n            if(_scaleRate<_minScaleRate)_scaleRate = _minScaleRate;//最小\r\n        }\r\n        self.scale(_scaleRate);\r\n        self.target().update();\r\n    };\r\n};\r\n\r\nSunburstLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    SunburstLayout.prototype = Object.create(Layout.prototype);\r\n    SunburstLayout.prototype.constructor = SunburstLayout;\r\n};\r\n\r\nmodule.exports = SunburstLayout;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/sunburstLayout.js\n// module id = 17\n// module chunks = 0","//拓扑图默认布局类，继承自Layout\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar TopoLayout = function (_target, _data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const MouseUtil = ghca_charts.view.util.mouseUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const BaseEvent =  ghca_charts.events.BaseEvent;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    var superRefreshData=self.refreshData;\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * d3力导向模型\r\n     */\r\n    var model = d3.forceSimulation();\r\n    this.model = function(){\r\n        return model;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isCluster\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否使用聚合模式布局(默认为否)\r\n     */\r\n    var isCluster = false;\r\n    this.isCluster = function(value){\r\n        if (!arguments.length) return isCluster;\r\n        isCluster = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  fixed\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否固定所有点\r\n     */\r\n    var fixed = false;\r\n    this.fixed = function(value){\r\n        if (!arguments.length) return fixed;\r\n        fixed = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isAutoLayout\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否自动布局\r\n     */\r\n    var isAutoLayout = true;\r\n    this.isAutoLayout = function(value){\r\n        if (!arguments.length) return isAutoLayout;\r\n        isAutoLayout = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  nodes\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 节点数据数组\r\n     */\r\n    var nodes = [];\r\n    this.nodes = function(){\r\n        return nodes;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  links\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 连线数据数组\r\n     */\r\n    var links = [];\r\n    this.links = function(){\r\n        return links;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  alpha\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 力布局的冷却参数\r\n     */\r\n    var alpha = 1;\r\n    this.alpha = function(value){\r\n        if (!arguments.length) return alpha;\r\n        alpha = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  distance\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 节点间的距离\r\n     */\r\n    var distance = 30;\r\n    this.distance = function(value){\r\n        if (!arguments.length) return distance;\r\n        distance = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  distanceMin\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 节点间的最小距离\r\n     */\r\n    var distanceMin = 20;\r\n    this.distanceMin = function(value){\r\n        if (!arguments.length) return distanceMin;\r\n        distanceMin = value;\r\n        return this;\r\n    };\r\n\r\n    var alphaMin=0.001;\r\n    this.alphaMin=function(value){\r\n        if (!arguments.length) return alphaMin;\r\n        alphaMin = value;\r\n        return this;\r\n    }\r\n    \r\n    //------------------------------\r\n    //  distanceMax\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 节点间的最大距离\r\n     */\r\n    var distanceMax = 200;\r\n    this.distanceMax = function(value){\r\n        if (!arguments.length) return distanceMax;\r\n        distanceMax = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  chargeStrength\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 电荷强度，负值导致节点排斥，而正值导致节点吸引\r\n     */\r\n    var chargeStrength = -30;\r\n    this.chargeStrength = function(value){\r\n        if (!arguments.length) return chargeStrength;\r\n        chargeStrength = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  theta\r\n    //------------------------------\r\n    \r\n    /**\r\n     * Barnes–Hut逼近算法中用来确定计算精度\r\n     */\r\n    var theta = 0.9;\r\n    this.theta = function(value){\r\n        if (!arguments.length) return theta;\r\n        theta = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  collideRadius\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 节点间碰撞半径，若该值小于节点半径，则节点有可能会重叠\r\n     */\r\n    var collideRadius = 20;\r\n    this.collideRadius = function(value){\r\n        if (!arguments.length) return collideRadius;\r\n        collideRadius = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  collideStrength\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 节点间碰撞力量\r\n     */\r\n    var collideStrength = 0.7;\r\n    this.collideStrength = function(value){\r\n        if (!arguments.length) return collideStrength;\r\n        collideStrength = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        self.isFirstMeasure = true;//判读是否第一次计算布局的标志量\r\n        nodes=[];\r\n        links=[];\r\n    \t//刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);    \r\n    };\r\n    // 初始化\r\n    this.init();\r\n\r\n    \r\n    /**\r\n     * 重新计算布局内容\r\n     */\r\n    var refreshModel = function() {\r\n        //计算布局内容\r\n    \tif(isCluster) {\r\n    \t\tself.model()\r\n                .nodes(self.target().visibleItems())\r\n                .force(\"charge\", d3.forceManyBody())\r\n                .force(\"link\", d3.forceLink(self.links()).distance(self.distance()).strength(self.chargeStrength()).iterations(1)\r\n                .id(function(d) {\r\n                    return d.id;\r\n                }))\r\n                .force(\"x\", d3.forceX().strength(0.1))\r\n                .force(\"y\", d3.forceY().strength(0.1))\r\n                .force(\"center\", d3.forceCenter(self.target().width() / 2, self.target().height() / 2));\r\n    \t} else {\r\n    \t\tself.model()\r\n            .nodes(self.target().visibleItems())\r\n            .alpha(self.alpha())\r\n            .alphaMin(self.alphaMin())\r\n            .force(\"link\",   d3.forceLink(self.links()).distance(self.distance()))\r\n            .force(\"charge\", d3.forceManyBody().strength(self.chargeStrength()).theta(self.theta()))\r\n            .force(\"collide\",d3.forceCollide().radius(self.collideRadius()).strength(self.collideStrength()))\r\n            .force(\"center\", d3.forceCenter(self.target().width() / 2, self.target().height() / 2))\r\n    \t}\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     * @isResize 是否在resize中调用本方法\r\n     */\r\n    this.measure = function(isResize) {\r\n        var nodes = self.target().visibleItems();\r\n        if(nodes.length === 0) {\r\n        \treturn;\r\n        }\r\n        \r\n        var model = self.model();\r\n        //初始化后是否固定节点\r\n        if(self.fixed()) {\r\n            //若使用自动布局，则自动分散点，然后再渲染点和线的位置\r\n            if(self.isAutoLayout() && !isResize) {\r\n            \t//计算布局内容\r\n                refreshModel();\r\n                //停用力布局模式\r\n                model.stop();\r\n                //自动分散节点位置\r\n            \tfor (var i = 0, n = Math.ceil(Math.log(model.alphaMin()) / Math.log(1 - model.alphaDecay())); i < n; ++i) {\r\n                    model.tick();\r\n                }\r\n            } else {\r\n            \t//若使用非自动布局，补全节点属性，然后直接渲染点和线的位置\r\n            \tfor (var node, i = 0, len = nodes.length; i < len; i++) {\r\n                    node = nodes[i];\r\n                    if(!node.hasOwnProperty(\"x\")) node.x = 0;\r\n                    if(!node.hasOwnProperty(\"y\")) node.y = 0;\r\n                    if(!node.hasOwnProperty(\"vx\")) node.vx = 0;\r\n                    if(!node.hasOwnProperty(\"vy\")) node.vy = 0;\r\n                    node.index = i;\r\n                }\r\n            }\r\n//            self.target().renderPosition();\r\n        } else {\r\n        \t//计算布局内容\r\n            refreshModel();\r\n            //若为非固定点模式，则重新开启力布局模式\r\n            model.restart();\r\n        }\r\n        \r\n        Global.isDebug && console.log(\"TopoLayout::measure()\");\r\n    };\r\n    \r\n    this.zoomToPosition=function(pos,scale){\r\n        var isEnlarge=scale>self.scale();\r\n        if(self.target().scaleType() === Const.LAYOUT_SCALE_TYPE) {\r\n            if(self.fixed()) {\r\n                self.scaleLinkWithNodeFixedUseValue(isEnlarge,pos,scale);\r\n            } else {\r\n                self.scaleLinkWithNodeFree(isEnlarge);\r\n            }\r\n        }\r\n        \r\n        if(self.fixed()) {\r\n             self.target().renderPosition();\r\n        } else {\r\n        \trefreshModel();\r\n        }\r\n        self.target().mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.SCALE_CHANGE,true,true));\r\n    }\r\n\r\n    /**\r\n     * override缩放方法\r\n     * @param isEnlarge 是否放大\r\n     */\r\n    this.zoom = function(isEnlarge) {\r\n        if(self.target().scaleType() === Const.LAYOUT_SCALE_TYPE) {\r\n            if(self.fixed()) {\r\n                self.scaleLinkWithNodeFixed(isEnlarge);\r\n            } else {\r\n                self.scaleLinkWithNodeFree(isEnlarge);\r\n            }\r\n        }\r\n        \r\n        if(self.fixed()) {\r\n             self.target().renderPosition();\r\n        } else {\r\n        \trefreshModel();\r\n        }\r\n        self.target().mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.SCALE_CHANGE,true,true));\r\n    };\r\n\r\n    this.scaleLinkWithNodeFixedUseValue=function(isEnlarge,pos,scale){\r\n        if(scale>self.maxScale()){\r\n            scale=self.maxScale();\r\n        }\r\n        if(scale<self.minScale()){\r\n            scale=self.minScale();\r\n        }\r\n\r\n        var currentScale=self.scale();\r\n        var ratio = (scale) / currentScale;\r\n        var nodes = self.target().nodes;\r\n        for (var node, i = 0; i < nodes.length; i++) {\r\n        \tnode = nodes[i];\r\n            node.x = node.x * ratio;\r\n            node.y = node.y * ratio;\r\n            node.fx = node.x;\r\n            node.fy = node.y;\r\n        }\r\n\r\n        var target = self.target();\r\n        target.x(pos.x);\r\n        target.y(pos.y);\r\n        self.scale(currentScale);\r\n    }\r\n    \r\n    this.scaleLinkWithNodeFixed = function(isEnlarge) {\r\n        //如果为固定点模式，则使用以鼠标当前坐标为中心点的缩放方式进行缩放，且只改变点的位置，其他容器都不改变\r\n        var ds, scale = self.scale(), scaleDelta = self.scaleDelta();\r\n        if(isEnlarge) {\r\n            ds = scaleDelta;\r\n            if(scale + ds > self.maxScale()) {\r\n                return;\r\n            }\r\n        } else {\r\n            ds = -scaleDelta;\r\n            if(scale + ds < self.minScale()) {\r\n                return;\r\n            }\r\n        }\r\n        var ratio = (ds + scale) / scale;\r\n        var nodes = self.target().nodes;\r\n        for (var node, i = 0; i < nodes.length; i++) {\r\n        \tnode = nodes[i];\r\n            node.x = node.x * ratio;\r\n            node.y = node.y * ratio;\r\n            node.fx = node.x;\r\n            node.fy = node.y;\r\n        }\r\n        ratio = ds / scale;\r\n        var target = self.target(), x = target.x(), y = target.y(), bg = target.parent().bgNode();\r\n        var localP = MouseUtil.mouse(bg);\r\n        x -= (localP[0] - x) * ratio;\r\n        y -= (localP[1] - y) * ratio;\r\n        target.x(x);\r\n        target.y(y);\r\n        self.scale(scale + ds);\r\n    };\r\n    \r\n    this.scaleLinkWithNodeFree = function(isEnlarge) {\r\n        //如果为非固定点模式，则缩放时只改变连线的长度，并且重新布局，其他容器都不改变\r\n        var delta = 25,\r\n            distance = self.distance(),\r\n            chargeStrength = self.chargeStrength(); \r\n        if(isEnlarge) {\r\n            distance += delta;\r\n            if(distance > self.distanceMax()) return;\r\n            chargeStrength -= delta;\r\n        } else {\r\n            distance -= delta;\r\n            if(distance < self.distanceMin()) return;\r\n            chargeStrength += delta;\r\n        }\r\n        self.distance(distance);\r\n        self.chargeStrength(chargeStrength);\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"TopoLayout info: \"     +\r\n                \"\\n   fixed:\"           + this.fixed()              + \r\n                \"\\n   distance:\"        + this.distance()           + \r\n                \"\\n   distanceMin:\"     + this.distanceMin()        + \r\n                \"\\n   distanceMax:\"     + this.distanceMax()        + \r\n                \"\\n   chargeStrength:\"  + this.chargeStrength()     + \r\n                \"\\n   theta:\"           + this.theta()              + \r\n                \"\\n   collideRadius:\"   + this.collideRadius()      + \r\n                \"\\n   collideStrength:\" + this.collideStrength()    + \r\n                \"\\n   alpha:\"           + this.alpha()              + \r\n                \"\\n   size:\"            + this.target().width() + \",\" + this.target().height());\r\n    };\r\n};\r\n\r\nTopoLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    TopoLayout.prototype = Object.create(Layout.prototype);\r\n    TopoLayout.prototype.constructor = TopoLayout;\r\n};\r\n\r\nmodule.exports = TopoLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/topoLayout.js\n// module id = 18\n// module chunks = 0","//Tree布局类，继承自Layout\r\n\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar TreeLayout = function (_target, _data) {\r\n\t   \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout       = ghca_charts.layout.layout;\r\n    const Constant     = ghca_charts.view.util.constant;\r\n    const math = ghca_charts.view.util.math;\r\n\r\n    Layout.apply(this, arguments);\r\n\r\n    var self = this;\r\n    var autoLayout = true;\r\n    this.autoLayout = function(value){\r\n        if(!arguments.length)return autoLayout;\r\n        autoLayout = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 节点固定间距，横竖间距 [x,y]\r\n     * @type {undefined}\r\n     */\r\n    var nodeSize = undefined;\r\n    this.nodeSize = function(f){\r\n        if (!arguments.length) return nodeSize;\r\n        nodeSize = f;\r\n        return this;\r\n    }\r\n    /**\r\n     * 视图大小，如没有固定节点间距则使用高宽自动计算 [width,height]\r\n     * @type {undefined}\r\n     */\r\n    var size = undefined;\r\n    this.size = function(f){\r\n        if (!arguments.length) return size;\r\n        size = f;\r\n        return this;\r\n    }\r\n    /**\r\n     * 树根节点，转换树节点后的根节点\r\n     * @type {null}\r\n     */\r\n    var treeRootNode = null;\r\n    this.treeRootNode = function(p){\r\n        if (!arguments.length) return treeRootNode;\r\n        treeRootNode = p;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * 树布局放心纵向 默认纵向 环形布局\r\n     * @type {string}\r\n     */\r\n    var direction = Constant.TREE_VER_TYPE;\r\n    this.direction = function(p){\r\n        if (!arguments.length) return direction;\r\n        direction = p;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * 节点间的固定距离,默认为NaN,此时默认用图表的宽、高设置布局范围\r\n     */\r\n    var nodeDistance = NaN;\r\n    this.nodeDistance = function(p){\r\n        if (!arguments.length) return nodeDistance;\r\n        nodeDistance = p;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * 是否包含线条型节点的树结构\r\n     */\r\n    var hasPathNode = false;\r\n    this.hasPathNode = function(p){\r\n        if (!arguments.length) return hasPathNode;\r\n        hasPathNode = p;\r\n        return this;\r\n    };\r\n\r\n    var model = d3.tree();\r\n    this.model = function(){\r\n        return model;\r\n    };\r\n\r\n    /**\r\n     * 缩放差值\r\n     * @type {number}\r\n     */\r\n    var scaleDiff = 0;\r\n    this.scaleDiff = function(diff){\r\n        if (!arguments.length) return scaleDiff;\r\n        scaleDiff = diff;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        self.refreshData(_data);\r\n        // self.model().separation(function(a, b) { return (a.parent == b.parent ? 1 : 2) / a.depth; });//子节点中同异父节点间间距算法\r\n    };\r\n    \r\n    /**\r\n     * 环形算法\r\n     */\r\n    this.radialTreeMeasure = function(){\r\n        self.model()(self.treeRootNode());\r\n        var root =  self.treeRootNode();\r\n        var cx = self.target().width()/2,cy = self.target().height()/2;\r\n        self.treeRootNode().descendants().forEach(function(node,i){\r\n            var x = node.x,y=node.y;\r\n            var rotateAngle =  node.children ? x - 90 : x + 90;\r\n            node.labelPosition = \"start\";\r\n            //翻转\r\n            if(x < 180 === !node.children) {\r\n                rotateAngle -= 180;\r\n                node.labelPosition = \"end\"\r\n            }\r\n            node.angle  = (x - 90) / 180 * Math.PI;\r\n            node.labelRotateAngle  = rotateAngle;\r\n\r\n            var xy = math.circumferencePoint(y,node.angle);\r\n            node.x = xy[0]+cx,node.y = xy[1]+cy;\r\n            node.cx = cx,node.cy=cy;\r\n            node.r = Math.abs(Math.sqrt(Math.pow(root.x-node.x,2)+Math.pow(root.y-node.y,2)));\r\n            node.data.x = node.x;\r\n            node.data.y = node.y;\r\n        });\r\n    }\r\n    /**\r\n     * 竖向算法\r\n     */\r\n    this.verTreeMeasure = function(){\r\n        var root = self.treeRootNode();\r\n        self.model()(root);\r\n        var cx = self.target().width()/2,\r\n        xlength = cx - root.x;\r\n        self.treeRootNode().descendants().forEach(function(node,i){\r\n            var x = node.x,y=node.y;\r\n            node.x = x+xlength,node.y = y+50;//y坐标暂定50\r\n            node.children? node.labelPosition = \"start\":node.labelPosition = \"end\";\r\n            node.labelRotateAngle = 90;\r\n            node.data.x = node.x;\r\n            node.data.y = node.y;\r\n        });\r\n    }\r\n    /**\r\n     * 横向算法\r\n     */\r\n    this.horTreeMeasure = function(rateDiff){\r\n        var root = self.treeRootNode();\r\n        self.model().size();//根据节点计算需要把size置空\r\n        self.model()(root);\r\n        var cy = self.target().height()/2,\r\n        ylength = cy - root.x;\r\n        self.treeRootNode().descendants().forEach(function(node,i){\r\n            var x = node.x,y=node.y;\r\n            node.x = y+50,node.y = x+ylength;\r\n            node.labelRotateAngle = 0;\r\n            node.children? node.labelPosition = \"start\":node.labelPosition = \"end\";\r\n            node.data.x = node.x;\r\n            node.data.y = node.y;\r\n        });\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n        var root =  self.treeRootNode();\r\n        if(this.autoLayout()==false && root.data.x!=undefined){\r\n            var nodes = root.descendants();\r\n            nodes.forEach(function(node){\r\n               node.x = node.data.x;\r\n               node.y = node.data.y;\r\n            });\r\n            return;\r\n        }\r\n\r\n        var direction = this.direction().toLowerCase();\r\n        var Constant     = ghca_charts.view.util.constant;\r\n        var scaleDiff  = this.scaleDiff();\r\n        var size = this.size(),width=size[0],height=size[1];\r\n        this.model().size([width+width*scaleDiff,height+height*scaleDiff]);\r\n        if(this.nodeSize()){\r\n            var nodeSize = this.nodeSize(),x=nodeSize[0],y=nodeSize[1];\r\n            this.model().nodeSize([x+x*scaleDiff,y+y*scaleDiff]);\r\n        }\r\n        switch(direction){\r\n            case Constant.TREE_RADIAL_TYPE: {\r\n                this.model().size([360,this.size()[1]+this.size()[1]*scaleDiff]);\r\n                self.radialTreeMeasure(scaleDiff);\r\n                break;\r\n            }\r\n            case Constant.TREE_HOR_TYPE:{\r\n                self.horTreeMeasure(scaleDiff);\r\n                break;\r\n            }\r\n            case Constant.TREE_VER_TYPE:{\r\n                self.verTreeMeasure(scaleDiff);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * override缩放方法\r\n     * @param isEnlarge 是否放大\r\n     */\r\n    this.zoom = function(isEnlarge) {\r\n        var _rate = this.scaleDelta();\r\n        var _scaleRate = this.scale()+_rate;\r\n        var _maxScaleRate = this.maxScale();\r\n        var _minScaleRate = this.minScale();\r\n        if(_scaleRate>_maxScaleRate||_scaleRate<_minScaleRate)return;\r\n        if(isEnlarge) {\r\n            this.scaleDiff(_rate+this.scaleDiff());\r\n        } else {\r\n            this.scaleDiff(-_rate+this.scaleDiff());\r\n        }\r\n        var callback = function(){\r\n            var self = arguments[0];\r\n            self.measure();\r\n            self.target().updatePosition();\r\n        };\r\n        if(Window.Concurrent)Concurrent.Thread.create(callback,this)\r\n        else callback(this);\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nTreeLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    TreeLayout.prototype = Object.create(Layout.prototype);\r\n    TreeLayout.prototype.constructor = TreeLayout;\r\n};\r\n\r\nmodule.exports = TreeLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/treelayout.js\n// module id = 19\n// module chunks = 0","//treemap默认布局类，继承自Layout\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar TreemapLayout = function (_target, _data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * treemap模型\r\n     */\r\n    var model = d3.treemap();\r\n    this.model = function() {\r\n        return model;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  items\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 项数据数组\r\n     */\r\n    var items = [];\r\n    this.items = function(value) {\r\n        if (!arguments.length)\r\n            return items;\r\n        items = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  dataKey\r\n    //------------------------------\r\n    \r\n    /**\r\n     * treemap数据项的键名称，默认为\"value\"\r\n     */\r\n    var dataKey = \"value\";\r\n    this.dataKey = function(value) {\r\n        if (!arguments.length)\r\n            return dataKey;\r\n        dataKey = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  tile\r\n    //------------------------------\r\n    \r\n    /**\r\n     * treemapSquarify(default)|treemapBinary|treemapDice|\r\n     * treemapSlice|treemapSliceDice|treemapResquarify\r\n     */\r\n    var tile = \"treemapSquarify\";\r\n    this.tile = function(value) {\r\n        if (!arguments.length)\r\n            return tile;\r\n        tile = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  size\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 内容尺寸，[width, height]，若为百分比，则返回[parentWidth*percentWidth, parentHeight*percentHeight]\r\n     */\r\n    var size = ['80%', '80%'];\r\n    this.size = function(value) {\r\n        if(!arguments.length) {\r\n        \tvar w = size[0], h = size[1], parent = self.target().parent();\r\n        \tw = parent && RegexUtil.percentRegex.test(w) ? parseInt(StringUtil.parsePercent(w) * parent.width() / 100) : w;\r\n        \th = parent && RegexUtil.percentRegex.test(h) ? parseInt(StringUtil.parsePercent(h) * parent.height() / 100) : h;\r\n        \treturn [w, h];\r\n        }\r\n        size = ObjectUtil.isArray(value) ? value :　ObjectUtil.isString(value) ? eval(value) : size;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  round\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 计算结果是否四舍五入，true|false\r\n     */\r\n    var round = false;\r\n    this.round = function(value) {\r\n        if (!arguments.length)\r\n            return round;\r\n        round = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  padding\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 设置paddingInner和paddingOuter，number|function, default NaN\r\n     */\r\n    var padding = NaN;\r\n    this.padding = function(value) {\r\n        if (!arguments.length)\r\n            return padding;\r\n        padding = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingInner\r\n    //------------------------------\r\n    \r\n    /**\r\n     * number|function\r\n     */\r\n    var paddingInner = NaN;\r\n    this.paddingInner = function(value) {\r\n        if (!arguments.length)\r\n            return paddingInner;\r\n        paddingInner = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingOuter\r\n    //------------------------------\r\n    \r\n    /**\r\n     * (top, right, bottom and left padding)，number|function, default NaN\r\n     */\r\n    var paddingOuter = NaN;\r\n    this.paddingOuter = function(value) {\r\n        if (!arguments.length)\r\n            return paddingOuter;\r\n        paddingOuter = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingTop\r\n    //------------------------------\r\n    \r\n    /**\r\n     * number|function\r\n     */\r\n    var paddingTop = NaN;\r\n    this.paddingTop = function(value) {\r\n        if (!arguments.length)\r\n            return paddingTop;\r\n        paddingTop = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingBottom\r\n    //------------------------------\r\n    \r\n    /**\r\n     * number|function\r\n     */\r\n    var paddingBottom = NaN;\r\n    this.paddingBottom = function(value) {\r\n        if (!arguments.length)\r\n            return paddingBottom;\r\n        paddingBottom = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingLeft\r\n    //------------------------------\r\n    \r\n    /**\r\n     * number|function\r\n     */\r\n    var paddingLeft = NaN;\r\n    this.paddingLeft = function(value) {\r\n        if (!arguments.length)\r\n            return paddingLeft;\r\n        paddingLeft = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingRight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * number|function\r\n     */\r\n    var paddingRight = NaN;\r\n    this.paddingRight = function(value) {\r\n        if (!arguments.length)\r\n            return paddingRight;\r\n        paddingRight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  sumType\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 求和类型，\"size\"|\"count\"\r\n     */\r\n    var sumType = \"size\";\r\n    this.sumType = function(value) {\r\n        if (!arguments.length)\r\n            return sumType;\r\n        sumType = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  sizeKey\r\n    //------------------------------\r\n    \r\n    /**\r\n     * sumType为\"size\"类型时对应的求和数据键值名称，仅当sumType为\"size\"时有效\r\n     */\r\n    var sizeKey = \"size\";\r\n    this.sizeKey = function(value) {\r\n        if (!arguments.length)\r\n            return sizeKey;\r\n        sizeKey = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  root\r\n    //------------------------------\r\n    \r\n    var root = null;\r\n    this.root = function(value) {\r\n        if (!arguments.length)\r\n            return root;\r\n        root = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  leaves\r\n    //------------------------------\r\n    \r\n    var leaves = [];\r\n    this.leaves = function(value) {\r\n        if (!arguments.length)\r\n            return leaves;\r\n        leaves = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  stratifyId\r\n    //------------------------------\r\n    \r\n    var stratifyId = \"id\";\r\n    this.stratifyId = function(value) {\r\n        if (!arguments.length)\r\n            return stratifyId;\r\n        stratifyId = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  stratifyParentId\r\n    //------------------------------\r\n    \r\n    var stratifyParentId = \"parentId\";\r\n    this.stratifyParentId = function(value) {\r\n        if (!arguments.length)\r\n            return stratifyParentId;\r\n        stratifyParentId = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    var sumByCount = function(d) {\r\n        return d.children ? 0 : 1;\r\n    };\r\n    \r\n    var sumBySize = function(d) {\r\n        return d[self.sizeKey()];\r\n    };\r\n    \r\n    var getTileFn = function(titeName) {\r\n    \tswitch(titeName) {\r\n            case \"treemapBinary\":\r\n                return d3.treemapBinary;\r\n            case \"treemapDice\":\r\n                return d3.treemapDice;\r\n            case \"treemapSlice\":\r\n                return d3.treemapSlice;\r\n            case \"treemapSliceDice\":\r\n                return d3.treemapSliceDice;\r\n            case \"treemapResquarify\":\r\n                return d3.treemapResquarify;\r\n            case \"treemapSquarify\":\r\n            default:\r\n                return d3.treemapSquarify;\r\n    \t}\r\n    }\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n        var model = self.model()\r\n            .tile(getTileFn(self.tile())).size(self.size()).round(self.round());\r\n        if(!isNaN(self.padding())) {\r\n        \tmodel.padding(self.padding());\r\n        }\r\n        if(!isNaN(self.paddingInner())) {\r\n            model.paddingInner(self.paddingInner());\r\n        }\r\n        if(!isNaN(self.paddingOuter())) {\r\n            model.paddingOuter(self.paddingOuter());\r\n        }\r\n        if(!isNaN(self.paddingTop())) {\r\n            model.paddingTop(self.paddingTop());\r\n        }\r\n        if(!isNaN(self.paddingBottom())) {\r\n            model.paddingBottom(self.paddingBottom());\r\n        }\r\n        if(!isNaN(self.paddingLeft())) {\r\n            model.paddingLeft(self.paddingLeft());\r\n        }\r\n        if(!isNaN(self.paddingRight())) {\r\n            model.paddingRight(self.paddingRight());\r\n        }\r\n        \r\n        var target = self.target();\r\n        //计算布局内容，重新组装data数据\r\n        var data = target.data().data.concat();\r\n        root = d3.stratify().id(function(d){\r\n            return d[self.stratifyId()];\r\n        }).parentId(function(d){\r\n            return d[self.stratifyParentId()];\r\n        })(data);\r\n        //删除不可见元素\r\n        var nodes = root.descendants();\r\n        for(var node, data, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            data = node.data;\r\n            if(data.visible === false){\r\n                var parent = node.parent,\r\n                    children = parent ? parent.children : undefined;\r\n                if(children) {\r\n                \tchildren.splice(children.indexOf(node), 1);\r\n                }\r\n            }\r\n        }\r\n        //计算路径和大小\r\n        root = d3.hierarchy(root)\r\n            .eachBefore(function(d) { \r\n            \td.data = d.data.data;\r\n                d.data.path = (d.parent ? d.parent.data.path + \".\" : \"\") + d.data.name; \r\n            })\r\n            .sum(sumType === \"size\" ? sumBySize : sumByCount)\r\n            .sort(function(a, b) { \r\n                return b.height - a.height || b.value - a.value; \r\n            });\r\n        model(root);\r\n        self.leaves(root.leaves());\r\n        //渲染节点的位置\r\n        target.renderPosition();\r\n            \r\n        Global.isDebug && console.log(\"TreemapLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"TreemapLayout info: \" +\r\n                \"\\n   size:\" + this.target().width() + \",\" + this.target().height());\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nTreemapLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    TreemapLayout.prototype = Object.create(Layout.prototype);\r\n    TreemapLayout.prototype.constructor = TreemapLayout;\r\n};\r\n\r\nmodule.exports = TreemapLayout;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/treemapLayout.js\n// module id = 20\n// module chunks = 0","//水平布局类，继承自Layout\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _target 要使用该布局的容器或者组件对象引用\r\n * @param _data 布局配置数据\r\n */\r\nvar VerticalLayout = function (_target, _data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Global = ghca_charts.global;\r\n\r\n    Layout.apply(this, arguments);\r\n    \r\n    var self = this;\r\n    self.isChartLayout(false);\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  model\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平布局模型\r\n     */\r\n    var model = null;\r\n    this.model = function(){\r\n        return model;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  horizontalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平对齐方式，left|center|right(默认值left)\r\n     */\r\n    var horizontalAlign = \"left\";\r\n    this.horizontalAlign = function(value) {\r\n        if (!arguments.length) return horizontalAlign;                \r\n        horizontalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  verticalAlign\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直对齐方式，top|middle|bottom(默认值top)\r\n     */\r\n    var verticalAlign = \"top\";\r\n    this.verticalAlign = function(value) {\r\n        if (!arguments.length) return verticalAlign;                \r\n        verticalAlign = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  gap\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项间距(默认值6)\r\n     */\r\n    var gap = 6;\r\n    this.gap = function(value) {\r\n        if (!arguments.length) return gap;                \r\n        gap = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  fit\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 自动撑满父容器，根据实际高宽计算gap(默认值false)\r\n     */\r\n    var fit = false;\r\n    this.fit = function(value) {\r\n        if (!arguments.length) return fit;\r\n        fit = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingBottom\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项底边距离(默认值0)\r\n     */\r\n    var paddingBottom = 0;\r\n    this.paddingBottom = function(value) {\r\n        if (!arguments.length) return paddingBottom;                \r\n        paddingBottom = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingLeft\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项左边距离(默认值0)\r\n     */\r\n    var paddingLeft = 0;\r\n    this.paddingLeft = function(value) {\r\n        if (!arguments.length) return paddingLeft;                \r\n        paddingLeft = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingRight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项右边距离(默认值0)\r\n     */\r\n    var paddingRight = 0;\r\n    this.paddingRight = function(value) {\r\n        if (!arguments.length) return paddingRight;                \r\n        paddingRight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  paddingTop\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 布局项顶边距离(默认值0)\r\n     */\r\n    var paddingTop = 0;\r\n    this.paddingTop = function(value) {\r\n        if (!arguments.length) return paddingTop;                \r\n        paddingTop = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //刷新传入配置数据到相应布局参数\r\n        self.refreshData(_data);\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * override度量方法\r\n     */\r\n    this.measure = function() {\r\n        var self = this, \r\n            target = self.target(),\r\n            children = target.children();\r\n            \r\n        if(!target || !children || children.length === 0) {\r\n            return;\r\n        }\r\n            \r\n        var paddingTop = self.paddingTop(),\r\n            paddingLeft = self.paddingLeft(),\r\n            paddingRight = self.paddingRight(),\r\n            paddingBottom = self.paddingBottom(),\r\n            horAlign = self.horizontalAlign(),\r\n            verAlign = self.verticalAlign(),\r\n            gap = self.gap(),\r\n            targetW = target.width() - paddingLeft - paddingRight,\r\n            targetH = target.height() - paddingTop - paddingBottom;\r\n        \r\n        var x, y, child, len= children.length, totalH = 0, i = 0;\r\n        \r\n        if(fit || verAlign === \"middle\") {\r\n            for(i = 0; i < len; i++) {\r\n                child = children[i];\r\n                totalH += child.height();\r\n            };\r\n            if(fit) {\r\n                gap = len > 1 ? (targetH - totalH)/(len - 1) : 0;\r\n            }\r\n            totalH += gap * (len - 1);\r\n        }\r\n        \r\n        for(i = 0; i < len; i++) {\r\n            child = children[i];\r\n            if(horAlign === \"left\") {\r\n                x = paddingLeft;\r\n            } else if(horAlign === \"center\") {\r\n                x = paddingLeft + (targetW - child.width()) / 2;\r\n            } else if(horAlign === \"right\") {\r\n                x = paddingLeft + targetW - child.width();\r\n            }\r\n            \r\n            if(fit || verAlign === \"middle\") {\r\n                y = paddingTop + (targetH - totalH) / 2 + (child.height() + gap) * i;\r\n            } else if(verAlign === \"top\") {\r\n                y = paddingTop + (child.height() + gap) * i;\r\n            } else if(verAlign === \"bottom\") {\r\n                y = paddingTop + targetH - child.height() * (i + 1) - gap * i;\r\n            }\r\n            child.x(x);\r\n            child.y(y);\r\n            \r\n            //渲染子组件位置\r\n            child.renderTransform();\r\n        }\r\n        \r\n        Global.isDebug && console.log(\"VerticalLayout::measure()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"VerticalLayout info: \");\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nVerticalLayout.struct = function(ghca_charts) {\r\n\tvar Layout = ghca_charts.layout.layout;\r\n\tLayout.struct(ghca_charts);\r\n    VerticalLayout.prototype = Object.create(Layout.prototype);\r\n    VerticalLayout.prototype.constructor = VerticalLayout;\r\n};\r\n\r\nmodule.exports = VerticalLayout;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/layout/verticalLayout.js\n// module id = 21\n// module chunks = 0","// 可视组件基类，所有的可视组件都必须继承该基类\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data 配置数据\r\n * @param _layout 布局对象，不传就为默认布局\r\n */\r\nvar BaseComponent = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const LayoutFeatures = ghca_charts.layout.layoutFeatures;\r\n    const HorizontalLayout = ghca_charts.layout.horizontalLayout;\r\n    const VerticalLayout = ghca_charts.layout.verticalLayout;\r\n    const MouseUtil = ghca_charts.view.util.mouseUtil;\r\n    const SvgUtil = ghca_charts.view.util.svgUtil;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const BaseEvent =  ghca_charts.events.BaseEvent;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const CommonUtil = ghca_charts.view.util.commonUtil;\r\n    const UUID = ghca_charts.view.util.UUIDUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    var self = this,\r\n        layoutFeatures = null,\r\n        defaultWidth = 0,\r\n        defaultHeight = 0,\r\n        defaultMaxWidth = 10000,\r\n        defaultMaxHeight = 10000;\r\n        \r\n    self.isWaitEyeUpdate= false;//当前是否正在等待刷新鹰眼中\r\n    self.eyeTimer;//鹰眼延时刷新计时器\r\n     \r\n    self.dispatch = d3.dispatch(\"event\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  id\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该类实例唯一标识符，自动生成?\r\n     */\r\n    var id = UUID.generateUUID();\r\n    this.id = function(value){\r\n       if (!arguments.length) {\r\n            return id;                \r\n        }\r\n        id = value;\r\n        return this;\r\n    }\r\n    \r\n    //------------------------------\r\n    //  className\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 类名称，默认作为该容器的css样式名称，比如<g class='mainContainer'>\r\n     */\r\n    var className = \"mainContainer\";\r\n    this.className = function(value){\r\n       if (!arguments.length) {\r\n            return className;                \r\n        }\r\n        className = value;\r\n        return this;\r\n    }\r\n    \r\n    // ------------------------------\r\n    // data\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 配置数据\r\n     */\r\n    var data = _data;\r\n    this.data = function(value) {\r\n        if (!arguments.length) {\r\n            return data;            \t\r\n        }\r\n        self.setAttributes(value);\r\n        data = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // graph\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 组件所在的graph实例\r\n     */\r\n    var graph = null;\r\n    this.graph = function(value) {\r\n        if (!arguments.length) {\r\n            return graph;                \r\n        }\r\n        graph = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // layout\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 布局对象，控制本容器的子对象的布局，不传就为默认布局\r\n     */\r\n    var layout = _layout;\r\n    this.layout = function(value) {\r\n        if (!arguments.length)\r\n            return layout;\r\n        layout = value;\r\n        // 若该layout的target为空，则设置为本对象实例\r\n        if (layout && !layout.target()) {\r\n            layout.target(self);\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  parent\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该类实例的父类实例引用\r\n     */\r\n    var parent = null;\r\n    this.parent = function(value) {\r\n        if (!arguments.length) {\r\n        \treturn parent;\r\n        }\r\n        parent = value;\r\n        //若父容器设置了非图表类的布局，则本容器自动生成一个用于记录父容器布局计算出的本容器的相关特征记录类实例，包括记录本容器的x,y,width,height等属性\r\n        if(parent instanceof BaseComponent && \r\n        parent.layout() && !parent.layout().isChartLayout() && layoutFeatures === null) {\r\n        \tlayoutFeatures = new LayoutFeatures();\r\n        } else {\r\n        \tlayoutFeatures = null;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  children\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该类实例的子类实例引用数组\r\n     */\r\n    var children = [];\r\n    this.children = function(value) {\r\n        if (!arguments.length) {\r\n            return children;\r\n        }\r\n        children = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // numChildren\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 本组件包含的直接子对象数目(只计入baseComponent类型的子对象)\r\n     */\r\n    this.numChildren = function(value) {\r\n        return self.children.length;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度\r\n     */\r\n    this.parentWidth = function() {\r\n    \treturn self.parent() ? self.parent().getBBox().width : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().getBBox().height : 0;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  percentX\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该组件相对父容器的水平位置(x轴)百分比 ，只能设置具体数值，比如100相当于父容器宽度的100%，\r\n     * 在配置中设置x:\"100%\"，则解析数据的时候，设置成percentX:100，\r\n     * 若设置了percentX，则忽略对x的设置\r\n     */\r\n    var percentX = NaN;\r\n    this.percentX = function(value) {\r\n        if (!arguments.length) {\r\n            return percentX;\r\n        }\r\n        percentX = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  percentY\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该组件相对父容器的垂直位置(y轴)百分比 ，只能设置具体数值，比如100相当于父容器高度的100%，\r\n     * 在配置中设置y:\"100%\"，则解析数据的时候，设置成percentY:100，\r\n     * 若设置了percentY，则忽略对y的设置\r\n     */\r\n    var percentY = NaN;\r\n    this.percentY = function(value) {\r\n        if (!arguments.length) {\r\n            return percentY;\r\n        }\r\n        percentY = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  percentZ\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该组件相对父容器的深度位置(z轴)百分比 ，只能设置具体数值，比如100相当于父容器深度的100%，\r\n     * 在配置中设置z:\"100%\"，则解析数据的时候，设置成percentZ:100，\r\n     * 若设置了percentZ，则忽略对z的设置\r\n     */\r\n    var percentZ = NaN;\r\n    this.percentZ = function(value) {\r\n        if (!arguments.length) {\r\n            return percentZ;\r\n        }\r\n        percentZ = value;\r\n        return this;\r\n    };\r\n\r\n    //------------------------------\r\n    //  x\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该组件相对父容器的水平位置，只能设置具体数值，返回的始终是容器的实际x坐标值(默认值0)\r\n     */\r\n    var x = 0;\r\n    this.x = function(value) {\r\n        if (!arguments.length) {\r\n        \tif(layoutFeatures !== null) {\r\n        \t\treturn layoutFeatures.x();\r\n        \t}\r\n            return isNaN(percentX) ? x : (this.parentWidth() * percentX / 100);\r\n        }\r\n        if(layoutFeatures === null) {\r\n        \tx = value;\r\n        } else {\r\n        \tlayoutFeatures.x(value);\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  y\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该组件相对父容器的垂直位置，只能设置具体数值，返回的始终是容器的实际y坐标值(默认值0)\r\n     */\r\n    var y = 0;\r\n    this.y = function(value) {\r\n        if (!arguments.length) {\r\n        \tif(layoutFeatures !== null) {\r\n                return layoutFeatures.y();\r\n            }\r\n            return isNaN(percentY) ? y : (this.parentHeight() * percentY / 100);\r\n        }\r\n        if(layoutFeatures === null) {\r\n            y = value;\r\n        } else {\r\n            layoutFeatures.y(value);\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  z\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 3d模型中的z轴位置(预留)，只能设置具体数值，返回的始终是容器的实际z坐标值(默认值0)\r\n     */\r\n    var z = 0;\r\n    this.z = function(value) {\r\n        if (!arguments.length) {\r\n        \tif(layoutFeatures !== null) {\r\n                return layoutFeatures.z();\r\n            }\r\n            return isNaN(percentZ) ? z : NaN;\r\n        }\r\n        if(layoutFeatures === null) {\r\n            z = value;\r\n        } else {\r\n            layoutFeatures.z(value);\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // maxWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的最大宽度\r\n     */\r\n    var maxWidth = defaultMaxWidth;\r\n    this.maxWidth = function(value) {\r\n        if (!arguments.length) {\r\n            return maxWidth;\r\n        }\r\n        maxWidth = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // maxHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的最大高度\r\n     */\r\n    var maxHeight = defaultMaxHeight;\r\n    this.maxHeight = function(value) {\r\n        if (!arguments.length) {\r\n            return maxHeight;\r\n        }\r\n        maxHeight = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // minWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的最小宽度\r\n     */\r\n    var minWidth = 0;\r\n    this.minWidth = function(value) {\r\n        if (!arguments.length) {\r\n            return minWidth;\r\n        }\r\n        minWidth = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // minHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的最小高度\r\n     */\r\n    var minHeight = 0;\r\n    this.minHeight = function(value) {\r\n        if (!arguments.length) {\r\n            return minHeight;\r\n        }\r\n        minHeight = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // percentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的宽度相对于父容器宽度的百分比，只能设置具体数值，比如100相当于父容器宽度的100%，\r\n     * 在配置中设置width:\"100%\"，则解析数据的时候，设置成percentWidth:100，\r\n     * 若设置了percentWidth，则忽略对width的设置\r\n     */\r\n    var percentWidth = NaN;\r\n    this.percentWidth = function(value) {\r\n        if (!arguments.length) {\r\n            return percentWidth;\r\n        }\r\n        percentWidth = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // percentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的高度相对于父容器高度的百分比，只能设置具体数值，比如100相当于父容器高度的100%，\r\n     * 在配置中设置height:\"100%\"，则解析数据的时候，设置成percentHeight:100，\r\n     * 若设置了percentHeight，则忽略对height的设置\r\n     */\r\n    var percentHeight = NaN;\r\n    this.percentHeight = function(value) {\r\n        if (!arguments.length) {\r\n            return percentHeight;\r\n        }\r\n        percentHeight = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // width\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的宽度，只能设置具体数值，返回的始终是容器的实际宽度\r\n     */\r\n    var width = NaN;\r\n    this.width = function(value) {\r\n        if (!arguments.length) {\r\n        \tvar w;\r\n        \tif(isNaN(percentWidth)) {\r\n        \t\tw = isNaN(width) ? defaultWidth : width;\r\n        \t} else {\r\n        \t\tw = this.parentWidth() * percentWidth / 100;\r\n        \t}\r\n            if(w < minWidth) {\r\n            \tw = minWidth;\r\n            } else if(w > maxWidth) {\r\n            \tw = maxWidth;\r\n            }\r\n            return w;\r\n        }\r\n        width = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // height\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的高度，只能设置具体数值，返回的始终是容器的实际高度\r\n     */\r\n    var height = NaN;\r\n    this.height = function(value) {\r\n        if (!arguments.length) {\r\n            var h;\r\n            if(isNaN(percentHeight)) {\r\n                h = isNaN(height) ? defaultHeight : height;\r\n            } else {\r\n                h = this.parentHeight() * percentHeight / 100;\r\n            }\r\n            if(h < minHeight) {\r\n                h = minHeight;\r\n            } else if(h > maxHeight) {\r\n                h = maxHeight;\r\n            }\r\n            return h;\r\n        }\r\n        height = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // getBBox\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 获取本容器外接矩形\r\n     */\r\n    var bBox = {x:0, y:0, width:0, height:0};\r\n    this.getBBox = function() {\r\n    \tbBox.x = self.x();\r\n    \tbBox.y = self.y();\r\n    \tbBox.width = self.width();\r\n    \tbBox.height = self.height();\r\n        return bBox;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleX\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的水平缩放系数\r\n     */\r\n    var scaleX = 1;\r\n    this.scaleX = function(value) {\r\n        if (!arguments.length) {\r\n            return scaleX;\r\n        }\r\n        scaleX = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleY\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的垂直缩放系数\r\n     */\r\n    var scaleY = 1;\r\n    this.scaleY = function(value) {\r\n        if (!arguments.length) {\r\n            return scaleY;\r\n        }\r\n        scaleY = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // rotate\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前组件的旋转角度(deg)，默认旋转中心为组件(0,0)点\r\n     */\r\n    var rotate = 0;\r\n    this.rotate = function(value) {\r\n        if (!arguments.length) {\r\n            return rotate;\r\n        }\r\n        rotate = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  visible\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 控制组件是否显示\r\n     */\r\n    var visible = true;\r\n    this.visible = function(value) {\r\n        if (!arguments.length) {\r\n            return visible;                \r\n        }\r\n        visible = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // title\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 组件的title(浏览器自带的悬浮提示)内容字符串，若设置非空内容，则创建title元素并显示内容，\r\n     * 可使用js脚本设置动态内容，格式为：{#...#}，其中的...内容是可执行的js，比如数据var d = {name:\"张三\"}，\r\n     * 则title可以传入字符串\"我叫：{#d.name#}\"，就会在鼠标移动到该组件上时显示悬浮提示框，内容为\"我叫：张三\"。\r\n     */\r\n    var title = null;\r\n    this.title = function(value) {\r\n        if (!arguments.length) {\r\n        \treturn title;\r\n        }\r\n        title = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // titleFunction\r\n    // ------------------------------\r\n\r\n    /**\r\n     * title(浏览器自带的悬浮提示)生成规则方法，若注册该方法，则按该方法返回的内容显示title，忽略title属性\r\n     */\r\n    var titleFunction = null;\r\n    this.titleFunction = function(value) {\r\n        if (!arguments.length) {\r\n        \treturn titleFunction;\r\n        }\r\n        titleFunction = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // zIndex\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前容器深度，深度大的容器遮挡深度小的容器\r\n     */\r\n    var zIndex = 0;\r\n    this.zIndex = function(value) {\r\n        if (!arguments.length) {\r\n        \treturn zIndex;\r\n        }\r\n        zIndex = value;\r\n        if(mainContainer && mainContainer.node()) {\r\n        \tmainContainer.node().setAttribute(\"z-index\", zIndex);\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // maxScale\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 最大缩放系数\r\n     */\r\n    var maxScale = 3;\r\n    this.maxScale = function(value) {\r\n        if (!arguments.length)\r\n            return maxScale;\r\n        maxScale = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // minScale\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 最小缩放系数\r\n     */\r\n    var minScale = 0.3;\r\n    this.minScale = function(value) {\r\n        if (!arguments.length)\r\n            return minScale;\r\n        minScale = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleDelta\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 缩放系数变化量，比如使用鼠标滚轮缩放时，每滚动一个刻度所缩放的变化量\r\n     */\r\n    var scaleDelta = 0.05;\r\n    this.scaleDelta = function(value) {\r\n        if (!arguments.length)\r\n            return scaleDelta;\r\n        scaleDelta = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleType\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 缩放类型，\r\n     * -1.禁止缩放;\r\n     * 0.组件整体缩放;\r\n     * 1.布局关系缩放;\r\n     * 2.布局关系缩放，只对水平方向缩放;\r\n     * 3.布局关系缩放，只对垂直方向缩放;\r\n     */\r\n    var scaleType = Const.NO_SCALE_TYPE;\r\n    this.scaleType = function(value) {\r\n        if (!arguments.length)\r\n            return scaleType;\r\n        scaleType = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // mainContainer\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 放置所有内容的最外层容器\r\n     */\r\n    var mainContainer = null;\r\n    this.mainContainer = function(value) {\r\n        if (!arguments.length) {\r\n            return mainContainer;\r\n        }\r\n        mainContainer = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // bgContainer\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 放置背景的容器\r\n     */\r\n    var bgContainer = null;\r\n    this.bgContainer = function(value) {\r\n        if (!arguments.length) {\r\n            return bgContainer;\r\n        }\r\n        bgContainer = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // borderContainer\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 放置边框的容器\r\n     */\r\n    var borderContainer = null;\r\n    this.borderContainer = function(value) {\r\n        if (!arguments.length) {\r\n            return borderContainer;\r\n        }\r\n        borderContainer = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // titleContainer\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 放置悬浮提示的容器\r\n     */\r\n    var titleContainer = null;\r\n    this.titleContainer = function(value) {\r\n        if (!arguments.length) {\r\n            return titleContainer;\r\n        }\r\n        titleContainer = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // node\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 获取本类对象中mainContainer的dom元素，类似于d3的d3.select(this).node()\r\n     */\r\n    this.node = function() {\r\n    \tvar m = self.mainContainer();\r\n        return m ? m.node() : null;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // bgNode\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 获取本类对象背景区域矩形元素\r\n     */\r\n    this.bgNode = function() {\r\n        var bg = self.bgContainer();\r\n        return bg ? bg.node() : null;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isRenderer\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 本组件是否是某组件的渲染器(默认值false)\r\n     */\r\n    var isRenderer = false;\r\n    this.isRenderer = function(value) {\r\n        if (!arguments.length) \r\n            return isRenderer;\r\n        isRenderer = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  normalChild\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 本组件包含的非组件类型子容器实例，比如plugin\r\n     */\r\n    var normalChild = null;\r\n    this.normalChild = function(value) {\r\n        if (!arguments.length) \r\n            return normalChild;\r\n        normalChild = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  clipContent\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 本组件是否对内容进行遮罩，若是则超出背景边界的内容不显示，否则显示\r\n     */\r\n    var clipContent = true;\r\n    this.clipContent = function(value) {\r\n        if (!arguments.length) \r\n            return clipContent;\r\n        clipContent = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  ownerSVG\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 本组件所在的svg\r\n     */\r\n    this.ownerSVG = function() {\r\n    \tvar parent = self;\r\n    \twhile(parent && parent instanceof BaseComponent) {\r\n    \t\tif(parent.className() === \"svgContainer\") {\r\n    \t\t\treturn parent;\r\n    \t\t}\r\n    \t\tparent = parent.parent();\r\n    \t}\r\n        return null;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  animation\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否开启动画效果\r\n     */\r\n    var animation = true;\r\n    this.animation = function(value) {\r\n        if (!arguments.length)\r\n            return animation;\r\n        animation = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isTransform\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否开启transform\r\n     */\r\n    var isTransform = true;\r\n    this.isTransform = function(value) {\r\n        if (!arguments.length)\r\n            return isTransform;\r\n        isTransform = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isLight\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否是轻量级容器，若是则不渲染background,border\r\n     */\r\n    var isLight = false;\r\n    this.isLight = function(value) {\r\n        if (!arguments.length)\r\n            return isLight;\r\n        isLight = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  boundType\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 容器外接图形类别，用来判断和连线的交点。\"rect\"|\"circle\"(默认为矩形:\"rect\")\r\n     */\r\n    var boundType = \"rect\";\r\n    this.boundType = function(value){\r\n        if(!arguments.length)\r\n            return boundType;\r\n        boundType = value ? value : \"rect\";\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  useEagleEye\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 容器是否使用鹰眼组件。(默认为:false)\r\n     */\r\n    var useEagleEye = false;\r\n    this.useEagleEye = function(value){\r\n        if(!arguments.length)\r\n            return useEagleEye;\r\n        useEagleEye = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  events\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 组件事件配置，格式如下:\r\n     * <pre>\r\n     * <code>\r\n     * events:[\r\n     *       {\r\n     *           eventType:1,               //1：派发,2：响应(必须)\r\n     *           bindEvent:\"click\",         //组件支持的事件类型名称(必须)\r\n     *           eventName:\"refresh\",       //自定义事件名称(必须)\r\n     *           defaultParams:null,        //事件抛出默认参数表达式(可选)\r\n     *           eventParams:null           //事件抛出自定义参数表达式(可选)\r\n     *       },\r\n     *       {\r\n     *           eventType:2,                    //1：派发,2：响应(必须)\r\n     *           bindEvent:\"setDataAndUpdate\",   //组件支持的事件类型名称(必须)\r\n     *           eventName:\"refresh\"             //自定义事件名称(必须)\r\n     *       }\r\n     * ]\r\n     * </code>\r\n     * </pre>\r\n     */\r\n    var events = [];\r\n    this.events = function(value) {\r\n        if (!arguments.length)\r\n            return events;\r\n        events = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // attributes\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 可从配置文件读取的属性名称\r\n     */\r\n    var attributes = [\r\n        \"className\", \"x\", \"y\", \"z\", \"percentX\", \"percentY\", \"percentZ\", \r\n        \"width\", \"height\", \"maxWidth\", \"maxHeight\", \"minWidth\", \"minHeight\", \r\n        \"percentWidth\", \"percentHeight\", \"title\", \"zIndex\", \"scaleX\", \"scaleY\", \"rotate\", \"visible\",\r\n        \"minScale\", \"maxScale\", \"scaleDelta\", \"scaleType\", \"clipContent\", \"animation\", \"boundType\", \"useEagleEye\", \"events\"\r\n    ];\r\n    this.attributes = function(value) {\r\n    \t if (!arguments.length) {\r\n            return attributes;\r\n        }\r\n        attributes = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // children control Methods\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.getChildIndex = function(child) {\r\n    \tif(!(child instanceof BaseComponent)) {\r\n            return - 1;\r\n        }\r\n        return self.children().indexOf(child);\r\n    };\r\n    \r\n    this.getChildAt = function(zIndex) {\r\n        if(isNaN(zIndex) || !self.isSafeZIndex(zIndex)) {\r\n            return - 1;\r\n        }\r\n        return self.children()[zIndex];\r\n    };\r\n    \r\n    this.addChild = function(child) {\r\n    \tif(!(child instanceof BaseComponent)) {\r\n            return;\r\n        }\r\n    \tvar children = self.children();\r\n\t\tvar index = children.indexOf(child);\r\n\t\tif(index === -1) {\r\n\t\t\tchildren.push(child);\r\n\t\t\tchild.parent(this);\r\n\t\t\tchild.graph(self.graph());\r\n\t\t\tchild.render();\r\n\t\t\t//append没有的child时不调用所有子对象排序，因为当前的默认顺序和数组中的顺序一致，可大量节约效率\r\n\t\t\tchild.node().setAttribute(\"z-index\", children.length - 1);\r\n\t\t} else {\r\n\t\t\tchildren.push(children.splice(index, 1)[0]);\r\n\t\t\tself.refreshChildrenZIndex();\r\n\t\t}\r\n    };\r\n    \r\n    this.addChildAt = function(child, zIndex) {\r\n    \tif(!(child instanceof BaseComponent)) {\r\n            return;\r\n        }\r\n        var children = self.children();\r\n    \tzIndex = self.getSafeZIndex(zIndex);\r\n        var index = children.indexOf(child);\r\n        if(index === -1) {\r\n            children.splice(zIndex, 0, child);\r\n            child.parent(this);\r\n            child.graph(self.graph());\r\n            child.render();\r\n            self.refreshChildrenZIndex();\r\n        } else {\r\n            self.setChildAt(child, zIndex);\r\n        }\r\n    };\r\n    \r\n    this.setChildAt = function(child, zIndex) {\r\n    \tif(!(child instanceof BaseComponent)) {\r\n            return;\r\n        }\r\n    \tvar children = self.children();\r\n    \tvar index = children.indexOf(child);\r\n    \tif(index === -1 || index === zIndex) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar delChild = children.splice(index, 1)[0];\r\n    \t//当删除的元素在插入位置右侧时\r\n    \tif(index > zIndex) {\r\n    \t\tzIndex--;\r\n    \t}\r\n    \t//插入元素\r\n    \tchildren.splice(zIndex, 0, delChild);\r\n    \tself.refreshChildrenZIndex();\r\n    };\r\n    \r\n    this.swapChildrenAt = function(zIndex1, zIndex2) {\r\n    \tif(zIndex1 === zIndex2 || !self.isSafeZIndex(zIndex1) || !self.isSafeZIndex(zIndex2)) {\r\n    \t\treturn false;\r\n    \t}\r\n    \tvar children = self.children();\r\n    \tvar tempChild = children[zIndex1];\r\n    \tchildren[zIndex1] = children[zIndex2];\r\n    \tchildren[zIndex2] = tempChild;\r\n    \tself.refreshChildrenZIndex();\r\n    \treturn true;\r\n    };\r\n    \r\n    this.swapChildren = function(child1, child2) {\r\n    \tvar zIndex1 = self.getChildIndex(child1);\r\n    \tvar zIndex2 = self.getChildIndex(child2);\r\n        return self.swapChildrenAt(zIndex1, zIndex2);\r\n    };\r\n    \r\n    this.removeChild = function(child) {\r\n    \tif(!(child instanceof BaseComponent)) {\r\n            return;\r\n        }\r\n        var children = self.children();\r\n        var index = children.indexOf(child);\r\n        if(index !== -1) {\r\n            var delChild = children.splice(index, 1)[0];\r\n            delChild.zIndex(-1);\r\n        }\r\n        child.parent(null);\r\n        child.destroy();\r\n        self.refreshChildrenZIndex();\r\n    };\r\n    \r\n    this.removeAllChildren = function() {\r\n    \tvar children = self.children();\r\n    \tfor(var child, i = 0, len = children.length; i < len; i++) {\r\n    \t\tchild = children[i];\r\n    \t\tif(child instanceof BaseComponent) {\r\n                child.zIndex(-1);\r\n                child.parent(null);\r\n                child.destroy();\r\n            }\r\n        };\r\n        children.length = 0;\r\n    };\r\n    \r\n    this.refreshChildrenZIndex = function() {\r\n    \tfor(var i = 0, len = children.length; i < len; i++) {\r\n            children[i].zIndex(i);\r\n        };\r\n        //对组件的所有子组件深度排序\r\n        self.sortAllChildrenByZIndex();\r\n    };\r\n    \r\n    this.isSafeZIndex = function(zIndex) {\r\n    \tif(isNaN(zIndex)) {\r\n            return false;\r\n        }\r\n        if(zIndex < 0 || zIndex > self.numChildren() - 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    \r\n    this.getSafeZIndex = function(zIndex) {\r\n    \tvar maxZindex = self.numChildren() - 1;\r\n    \tif(isNaN(zIndex)) {\r\n    \t\treturn maxZindex;\r\n    \t}\r\n    \tif(zIndex > maxZindex) {\r\n            zIndex = maxZindex;\r\n        }\r\n        if(zIndex < 0) {\r\n            zIndex = 0;\r\n        }\r\n        return zIndex;\r\n    };\r\n    \r\n    this.contains = function(child) {\r\n    \tif(!(child instanceof BaseComponent)) {\r\n            return false;\r\n        }\r\n        return self.getChildIndex(child) !== -1;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // render control Methods\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 创建并使用与本组件相关的defs元素\r\n     */\r\n    this.renderDefsElements = function() {\r\n    \tvar data = self.data();\r\n        if(data && data.hasOwnProperty(\"defs\")){\r\n            var defs = data.defs;\r\n            for(var i = 0, len = defs.length; i < len; i++) {\r\n                SvgUtil.createDefElement(svg, defs[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(!self.mainContainer()) {\r\n            var parentCon = self.parent().mainContainer();\r\n            self.mainContainer(parentCon.append(\"g\").attr(\"class\", self.className()));\r\n        }\r\n        self.validateVisible();\r\n    };\r\n    \r\n    /**\r\n     * 渲染背景容器，背景容器总在所有子容器的最底层，stroke透明\r\n     */\r\n    this.renderBackground = function() {\r\n        if(!self.bgContainer()) {\r\n            //创建背景容器\r\n        \tvar bgCon = self.mainContainer().append(\"g\").attr(\"class\", \"bgContainer\");\r\n            self.bgContainer(bgCon);\r\n        }\r\n        if(!self.bgRect) {\r\n        \t//背景矩形区域\r\n            self.bgRect = self.bgContainer().append(\"rect\").attr(\"class\", \"bg\");\r\n        }\r\n        self.bgRect\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height())\r\n            .attr(\"fill\", \"white\");\r\n        if(_data && _data.background) {\r\n        \tvar background = _data.background;\r\n        \tfor(var key in background) {\r\n        \t\tself.bgRect.attr(key, background[key]);\r\n        \t}\r\n        \t//强制边框笔触透明\r\n        \tself.bgRect.attr(\"stroke-opacity\", 0);\r\n        } else {\r\n        \t self.bgRect.attr(\"opacity\", 0);//默认透明白背景，可响应鼠标事件\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染边框容器，边框容器总在所有子容器的最上层，fill透明\r\n     */\r\n    this.renderBorder = function() {\r\n    \tif(_data && _data.border) {\r\n    \t\tif(!self.borderContainer()) {\r\n                //创建背景容器\r\n    \t\t\tvar borderCon = self.mainContainer()\r\n                    .append(\"g\")\r\n                    .attr(\"class\", \"borderContainer\")\r\n                    .attr(\"z-index\", BaseComponent.MAX_Z_INDEX)\r\n                    .attr(\"pointer-events\", \"none\");\r\n                self.borderContainer(borderCon);\r\n            }\r\n            if(!self.borderRect) {\r\n                //边框矩形区域\r\n                self.borderRect = self.borderContainer().append(\"rect\").attr(\"class\", \"border\");\r\n            }\r\n            var w = self.width(), h = self.height();\r\n            self.borderRect.attr(\"width\", w).attr(\"height\", h);\r\n            var border = _data.border;\r\n            for(var key in border) {\r\n                self.borderRect.attr(key, border[key]);\r\n            }\r\n            //强制填充透明\r\n            self.borderRect.attr(\"fill-opacity\", 0);\r\n    \t} else {\r\n    \t\tif(self.borderContainer()) {\r\n    \t\t\tself.borderContainer().remove();\r\n    \t\t}\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 渲染title(浏览器自带的悬浮提示内容)\r\n     */\r\n    this.renderTitle = function() {\r\n    \t//若没有设置提示内容，则移除相关容器\r\n    \tif(!self.title() && !self.titleFunction()) {\r\n    \t\tif(self.titleContainer()) {\r\n    \t\t\tself.titleContainer().remove();\r\n    \t\t}\r\n    \t\treturn;\r\n    \t}\r\n    \t//若没设置提示内容，且没有创建提示容器，则先创建容器\r\n        if(!self.titleContainer()) {\r\n        \tvar titleClassName = this.className() + \"-title\";\r\n            self.titleContainer(self.mainContainer().append(\"title\").attr(\"class\", titleClassName));\r\n        }\r\n        //根据提示文本设置要求进行文本内容设置\r\n        if(self.titleFunction()) {\r\n            self.titleContainer().text(self.titleFunction());\r\n        } else if(self.title()) {\r\n            self.titleContainer().text(formatTitleFn);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件的所有子组件，先判断子组件是否已创建，若已创建，则只刷新子组件内容\r\n     */\r\n    this.renderChildren = function() {\r\n        //渲染放置所有内容的最外层容器\r\n        self.renderMainContainer();\r\n        //是否是轻量级容器，若是则不渲染background,border\r\n        if(!self.isLight()) {\r\n        \t//渲染背景内容\r\n            self.renderBackground();\r\n            //渲染边框内容\r\n            self.renderBorder();\r\n        }\r\n        //渲染title\r\n        self.renderTitle();\r\n    };\r\n    \r\n    /**\r\n     * 对组件的所有子组件深度排序\r\n     */\r\n    this.sortAllChildrenByZIndex = function() {\r\n        SvgUtil.sortByZIndex(self.node().childNodes, false);\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件位置变换\r\n     * @param transition 动画设置对象,若没有传入该对象，则变换时无动画效果\r\n     */\r\n    this.renderTransform = function(transition) {\r\n    \tif(!self.isTransform()) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar con = transition ? self.mainContainer().transition(transition) : self.mainContainer();\r\n        con && con.attr(\"transform\", function(d) {\r\n            return  \"translate(\" + self.x() + \",\" + self.y() + \")\" + \r\n                    \"scale(\" + self.scaleX() + \",\" + self.scaleY() + \")\" +\r\n                    \"rotate(\" + self.rotate() + \")\";\r\n        });\r\n        //触发鹰眼变更\r\n        if(self.useEagleEye()) {\r\n        \tself.mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.POSITION_CHANGE,true,true));\r\n        }\r\n        self.mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.SCALE_CHANGE,true,true));\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n    \tif(self.isLight()) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar con = self.bgContainer();\r\n    \t//重绘背景\r\n    \tvar rect = con && con.select(\"rect.bg\");\r\n    \tif(rect) {\r\n    \t\trect.attr(\"width\", self.width());\r\n            rect.attr(\"height\", self.height());\r\n    \t}\r\n        \r\n        //重绘边框\r\n    \tcon = self.borderContainer();\r\n    \tif(con) {\r\n    \t\trect = con.select(\"rect.border\");\r\n            if(rect) {\r\n                rect.attr(\"width\", self.width());\r\n                rect.attr(\"height\", self.height());\r\n            }\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件内容\r\n     */\r\n    this.renderDisplayList = function() {\r\n        //渲染组件的所有子组件\r\n        self.renderChildren();\r\n    \t//对组件的所有子组件深度排序\r\n        self.sortAllChildrenByZIndex();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸和位置变换\r\n     */\r\n    this.renderSizeAndPosition = function() {\r\n        //渲染组件尺寸\r\n        self.renderSize();\r\n        //渲染组件位置变换\r\n        self.renderTransform();\r\n    };\r\n    \r\n    /**\r\n     * 渲染方法\r\n     */\r\n    this.render = function() {\r\n    \tif(!self.parent()) {\r\n    \t\treturn;\r\n    \t}\r\n        //渲染组件内容\r\n        self.renderDisplayList();\r\n        //渲染组件尺寸和位置变换\r\n        self.renderSizeAndPosition();\r\n        //创建并使用与本组件相关的defs元素\r\n        self.renderDefsElements();\r\n        //添加监听\r\n        self.addListeners();\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // event Methods\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 浏览器事件监听  必须渲染后才可添加监听，不做保存\r\n     * @returns {exports}\r\n     */\r\n    this.on = function() {\r\n        if(self.mainContainer)\r\n            self.mainContainer.on.apply(self.mainContainer,arguments);\r\n    };\r\n\r\n    /**\r\n     * 自定义事件监听\r\n     * @returns {exports}\r\n     */\r\n    this.addListener = function() {\r\n        var value = self.dispatch.on.apply(self.dispatch, arguments);\r\n        return value === self.dispatch ? self : value;\r\n    };\r\n    \r\n    /**\r\n     * 注册dom事件监听\r\n     */\r\n    this.addEventListener = function() {\r\n        if(self.node()){\r\n        \tvar fn = self.node().addEventListener;\r\n        \tif(fn) {\r\n        \t\t//添加默认 bubbles值为true，这样写为了兼容IE\r\n        \t\tif(CommonUtil.isIE() && arguments.length === 2) {\r\n        \t\t\targuments[2] = true;\r\n        \t\t\targuments.length = 3;\r\n        \t\t}\r\n        \t\treturn fn.apply(self.node(), arguments);\r\n        \t}\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * 删除dom事件监听\r\n     */\r\n    this.removeEventListener = function() {\r\n        if(self.node()){\r\n            var fn = self.node().removeEventListener;\r\n            if(fn) {\r\n            \t//添加默认 bubbles值为true，这样写为了兼容IE\r\n            \tif(CommonUtil.isIE() && arguments.length === 2) {\r\n                    arguments[2] = false;\r\n                }\r\n                return fn.apply(self.node(), arguments);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * 抛出dom事件，要传自定义数据，写法如下：\r\n     * var evt = EventUtil.createCustomEvent(\"event type\", true, true, your data);\r\n     * self.dispatchEvent(evt);\r\n     * function(e) {\r\n     *     e.detail : {data:your data, target:self},\r\n     *     this : self.node(),\r\n     * }\r\n     */\r\n    this.dispatchEvent = function() {\r\n        if(self.node()){\r\n            var fn = self.node().dispatchEvent;\r\n            if(fn) {\r\n            \tif(arguments && arguments.length > 0 && arguments[0] instanceof CustomEvent) {\r\n            \t\tvar evt = arguments[0];\r\n            \t\tvar p = {};\r\n            \t\tfor(var key in evt) {\r\n            \t\t\tp[key] = evt[key];\r\n            \t\t}\r\n            \t\tp.detail = {data:evt.detail, target:self};\r\n            \t\tvar customEvent = EventUtil.createCustomEvent(evt.type, p);\r\n        \t\t\targuments[0] = customEvent;\r\n            \t}\r\n                return fn.apply(self.node(), arguments);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // other Methods\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法，在构造方法中执行，子类重写该方法，已实现部分render操作之前的操作\r\n     */\r\n    this.init = function() {\r\n    \t//刷新传入配置数据到所有对应属性值\r\n    \tself.setAttributes(self.data());\r\n    \t//初始化布局内容\r\n        self.initLayout();\r\n    };\r\n    \r\n    /**\r\n     * 添加可从配置文件读取的属性名称\r\n     */\r\n    this.addAttributes = function() {\r\n\t\tvar arg, attributes = self.attributes();\r\n\t\tfor(var i = 0, len = arguments.length; i < len; i++) {\r\n\t\t\targ = arguments[i];\r\n\t\t\tif(ObjectUtil.isString(arg) && attributes.indexOf(arg) === -1) {\r\n\t\t\t\tattributes.push(arg);\r\n\t\t\t}\r\n\t\t}\r\n    };\r\n    \r\n    /**\r\n     * 本实例渲染完成后注册监听方法\r\n     */\r\n    this.addListeners = function() {\r\n    \t//添加配置中的绑定事件\r\n    \taddAllConfigEvents();\r\n    };\r\n    \r\n    /**\r\n     * 初始化布局内容\r\n     */\r\n    this.initLayout = function() {\r\n        //若构造方法没有传入layout实例，则根据传入data信息设置布局，若data中不包括布局信息，则使用默认布局\r\n        if(!self.layout() && self.data()) {\r\n            var layoutData = self.data().layout;\r\n            if(layoutData && layoutData.type) {\r\n                switch(layoutData.type.toLowerCase()) {\r\n                    case \"horizontallayout\":\r\n                        self.layout(new HorizontalLayout(self, layoutData));\r\n                        break;\r\n                    case \"verticallayout\":\r\n                        self.layout(new VerticalLayout(self, layoutData));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 更新其他内容，包括组件背景、边框、提示信息\r\n     */\r\n    this.updateOthers = function() {\r\n    \t//是否是轻量级容器，若是则不渲染background,border\r\n        if(!self.isLight()) {\r\n            //更新背景内容\r\n            self.renderBackground();\r\n            //更新边框内容\r\n            self.renderBorder();\r\n        }\r\n        //更新title\r\n        self.renderTitle();\r\n        //更新绑定事件\r\n        addAllConfigEvents();\r\n    };\r\n    \r\n    /**\r\n     * 更新内容\r\n     */\r\n    this.update = function() {\r\n    \t//刷新传入配置数据到所有对应属性值\r\n        self.setAttributes(self.data());\r\n        //检测组件是否可见\r\n    \tself.validateVisible();\r\n        //计算除图表布局以外的所有布局\r\n        var layout = self.layout();\r\n        if(layout) {\r\n            layout.update();\r\n        }\r\n        //重新渲染容器尺寸和位置\r\n        self.renderSizeAndPosition();\r\n        //重新计算遮罩等defs元素\r\n        self.renderDefsElements();\r\n        //刷新背景边框等内容\r\n        self.updateOthers();\r\n        //重新计算子容器尺寸和位置\r\n        var children = self.children();\r\n        if(children !== null && children.length > 0) {\r\n            for(var i = 0, len = children.length; i < len; i++) {\r\n                children[i].update();\r\n            }\r\n        }\r\n        //触发鹰眼变更\r\n        //self.mainContainer().node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.SIZE_CHANGE,true,true,{width:self.width(),height:self.height()}));\r\n    };\r\n    \r\n    /**\r\n     * 重新计算容器尺寸\r\n     */\r\n    this.resize = function() {\r\n        //重新计算除图表布局以外的所有布局，图表布局会在自身的resize方法中重新计算\r\n        var layout = self.layout();\r\n        if(layout && !layout.isChartLayout()) {\r\n            layout.measure();\r\n        }\r\n        //重新渲染容器尺寸和位置\r\n        self.renderSizeAndPosition();\r\n        //重新计算遮罩等defs元素\r\n        self.renderDefsElements();\r\n        //重新计算子容器尺寸和位置\r\n        var children = self.children();\r\n        if(children !== null && children.length > 0) {\r\n            for(var i = 0, len = children.length; i < len; i++) {\r\n                children[i].resize();\r\n            };\r\n        }\r\n        //触发鹰眼变更\r\n        self.useEagleEye() && self.sendMsgToEye(function(){\r\n            self.mainContainer().node().dispatchEvent(\r\n                EventUtil.createCustomEvent(BaseEvent.SIZE_CHANGE,true,true,{width:self.width(),height:self.height()}));\r\n        }, 2000);\r\n    };\r\n    \r\n    /**\r\n     * 对本组件实例的缩放方法\r\n     * @param isEnlarge 是否放大\r\n     */\r\n    this.zoom = function(isEnlarge) {\r\n        var ds, scaleX = self.scaleX(), scaleY = self.scaleY(), scaleDelta = self.scaleDelta();\r\n        //判断scaleX,scaleY边界\r\n        if(isEnlarge) {\r\n            ds = scaleDelta;\r\n            if(scaleX >= self.maxScale() || scaleY >= self.maxScale()) {\r\n                return;\r\n            }\r\n            if(scaleX + ds > self.maxScale()) {\r\n                scaleX = self.maxScale() - ds;\r\n            }\r\n            if(scaleY + ds > self.maxScale()) {\r\n                scaleY = self.maxScale() - ds;\r\n            }\r\n        } else {\r\n            ds = -scaleDelta;\r\n            if(scaleX <= self.minScale() || scaleY <= self.minScale()) {\r\n                return;\r\n            }\r\n            if(scaleX + ds < self.minScale()) {\r\n                scaleX = self.minScale() - ds;\r\n            }\r\n            if(scaleY + ds < self.minScale()) {\r\n                scaleY = self.minScale() - ds;\r\n            }\r\n        }\r\n        \r\n        //以当前鼠标点为中心点的缩放\r\n        var ratioX = ds / scaleX,\r\n            ratioY = ds / scaleY,\r\n            x = self.x(), \r\n            y = self.y(), \r\n            bg = self.parent().bgNode();\r\n        var localP = MouseUtil.mouse(bg);\r\n        x -= d3.event ? (localP[0] - x) * ratioX : 0;\r\n        y -= d3.event ? (localP[1] - y) * ratioY : 0;\r\n        self.x(x);\r\n        self.y(y);\r\n        self.scaleX(scaleX + ds);\r\n        self.scaleY(scaleY + ds);\r\n        \r\n        //渲染位置变换\r\n        self.renderTransform();\r\n    }\r\n\r\n    this.zoomToPosition=function(pos,scale){\r\n        self.x(pos.x);\r\n        self.y(pos.y);\r\n        self.scaleX(scale);\r\n        self.scaleY(scale);\r\n        \r\n        //渲染位置变换\r\n        self.renderTransform();\r\n    }\r\n\r\n    \r\n    /**\r\n     * 刷新传入配置数据到所有对应属性值的方法\r\n     * @param data 配置数据\r\n     */\r\n    this.setAttributes = function(data) {\r\n        if(!data) {\r\n            return;\r\n        }\r\n        for(var name, names = self.attributes(), i = 0, len = names.length; i < len; i++) {\r\n            name = names[i];\r\n            if(data.hasOwnProperty(name) && self.hasOwnProperty(name)) {\r\n        \t   self[name](data[name]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据指定的元素属性名称和对应的值过滤数组元素\r\n     * @param arr 要过滤的数组\r\n     * @param name 属性名称\r\n     * @param value 属性值\r\n     * @return 返回过滤后的数组，源数组不变，若没有满足条件的数组，则返回空数组\r\n     */\r\n    this.filterArrayByElementProperty = function(arr, name, value) {\r\n        var result = [];\r\n        if(!arr || arr.length === 0){\r\n            return result;\r\n        }\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            if (arr[i][name] === value)\r\n                result.push(arr[i]);\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * 设置配置属性值\r\n     * @param key 属性键值(包括从该组件到属性的路径，比如legend.xPos或者legend.domain[0])\r\n     * @param value 属性值\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setConfigProperty = function(key, value) {\r\n        if(!ObjectUtil.isString(key) || RegexUtil.whiteSpaceRegex.test(key) || !self.data()) {\r\n        \treturn false;\r\n        }\r\n        if(ObjectUtil.isString(value)) {\r\n            try {\r\n            \t//复杂json字符串格式，包括{}[]\r\n                value = JSON.parse(value);\r\n            } catch(e) {\r\n                try {\r\n                    //这样写是因为JSON.parse(\"x\")非法，要JSON.parse(\"\"x\"\")才正确\r\n                    value = \"\\\"\" + value + \"\\\"\";\r\n                    value = JSON.parse(value);\r\n                } catch(e) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        var propertyNames = key.split(\".\");\r\n        var arrayReg = RegexUtil.arrayFormatRegex;\r\n        var configData = self.data();\r\n        var name, arrayMatch, index;\r\n        for(var i = 0, len = propertyNames.length, lastIndex = len - 1; i < len; i++) {\r\n        \tname = propertyNames[i];\r\n        \tarrayMatch = name.match(arrayReg);\r\n        \tif(arrayMatch) {\r\n        \t\tname = arrayMatch[1];\r\n        \t\tindex = parseInt(arrayMatch[2]);\r\n        \t\tif(!ObjectUtil.isArray(configData[name])) {\r\n                        configData[name] = [];\r\n                }\r\n        \t\tif(i === lastIndex) {\r\n        \t\t\tif(configData[name]===value){\r\n        \t\t\t\treturn false;\r\n        \t\t\t}\r\n                    configData[name][index] = value;\r\n        \t\t} else {\r\n        \t\t\tconfigData = configData[name][index];\r\n        \t\t}\r\n        \t} else {\r\n        \t\tif(i === lastIndex) {\r\n        \t\t\tif(configData[name]===value){\r\n        \t\t\t\treturn false;\r\n        \t\t\t}\r\n        \t\t\tconfigData[name] = value;\r\n        \t\t} else {\r\n        \t\t\tif(!ObjectUtil.isObject(configData[name])) {\r\n                        configData[name] = {};\r\n                    }\r\n                    configData = configData[name];\r\n        \t\t}\r\n        \t}\r\n        }\r\n        return true;\r\n    };\r\n    \r\n    /**\r\n     * 设置数据内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}等\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setData = function(value) {\r\n        if(!self.data()) {\r\n        \treturn false;\r\n        }\r\n        if(ObjectUtil.isString(value)) {\r\n            try {\r\n            \t//是否为复杂json字符串格式\r\n                if(value.indexOf(\"{\") !== 0 && value.indexOf(\"[\") !== 0) {\r\n                    //这样写是因为JSON.parse(\"x\")非法，要JSON.parse(\"\"x\"\")才正确\r\n                    value = \"\\\"\" + value + \"\\\"\";\r\n                }\r\n                value = JSON.parse(value);\r\n            } catch(e) {\r\n                return false;\r\n            }\r\n        }\r\n        var configData = self.data();\r\n        for(var key in value) {\r\n        \tvar d = value[key];\r\n//        \tif(!ObjectUtil.isArray(d)) {\r\n//                continue;\r\n//            }\r\n        \t//暂时这样特殊处理 ---start\r\n        \tif(ObjectUtil.isObject(d) && key === \"tableConfig\") {\r\n                configData[key] = d;\r\n                continue;\r\n            } else if(!ObjectUtil.isArray(d)) {\r\n                continue;\r\n            }\r\n            //暂时这样特殊处理 ---end\r\n        \tif(!ObjectUtil.isArray(configData[key])) {\r\n        \t\tconfigData[key] = [];\r\n        \t}\r\n        \tvar ary = configData[key];\r\n        \tary.length = 0;\r\n        \tfor(var i = 0, len = d.length; i < len; i++) {\r\n        \t\tary.push(d[i]);\r\n        \t}\r\n        }\r\n        return true;\r\n    };\r\n    \r\n    /**\r\n     * 设置配置属性值成功后更新组件内容\r\n     * @param key 属性键值(包括从该组件到属性的路径，比如legend.xPos或者legend.domain[0])\r\n     * @param value 属性值\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setConfigPropertyAndUpdate = function(key, value) {\r\n        if(self.setConfigProperty(key, value)) {\r\n        \tself.update();\r\n        \treturn true;\r\n        }\r\n        return false;\r\n    };\r\n    \r\n    /**\r\n     * 设置数据内容成功后更新组件内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}等\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setDataAndUpdate = function(value) {\r\n    \tif(self.setData(value)) {\r\n            self.update();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    \r\n    /**\r\n     * 验证当前容器是否可见\r\n     */\r\n    this.validateVisible = function() {\r\n    \t//可视化编辑器中\r\n        if(Global.isUseByEVPlatform && self.mainContainer()) {\r\n        \tvar isVisible = self.visible() === true ? true : false;\r\n            self.mainContainer().style(\"display\", isVisible ? null : \"none\");\r\n            self.dispatchEvent(EventUtil.createCustomEvent(\r\n                   BaseEvent.SET_CON_CSS, true, true, {\"pointer-events\":isVisible ? null : \"none\"}));\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 延时发送内容变更到鹰眼，优化效率\r\n     * @param sendFn 注册自己的发送方法\r\n     * @param time 发送间隔时间，单位毫秒，默认1000毫秒\r\n     */\r\n    this.sendMsgToEye = function(sendFn, time) {\r\n    \ttime = isNaN(time) ? 1000 : time;\r\n        //若正在等待刷新鹰眼中，则不做任何操作，并且重新开始计算延时刷新时间\r\n        if(self.isWaitEyeUpdate) {\r\n        \tclearTimeout(self.eyeTimer);\r\n        }\r\n        self.isWaitEyeUpdate = true;\r\n        self.eyeTimer = setTimeout(function() {\r\n            clearTimeout(self.eyeTimer);\r\n            if(sendFn) {\r\n                sendFn();\r\n            }\r\n            self.isWaitEyeUpdate = false;\r\n        }, time);\r\n    };\r\n    \r\n    /**\r\n     * 销毁本类实例的方法\r\n     */\r\n    this.destroy = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 转换组件数据内容为json字符串格式。\r\n     * 如果数据为循环引用，则无法转换，具体修改循环引用的逻辑在子类方法中实现\r\n     */\r\n    this.toJSON = function() {\r\n        var str = \"\";\r\n        var d = self.data();\r\n        if(!d) {\r\n            return str;\r\n        }\r\n        str = JSON.stringify(d);\r\n        return str;\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"BaseComponent info: \"  +\r\n                \"\\n   x:\"               + self.x()              + \r\n                \"\\n   y:\"               + self.y()              + \r\n                \"\\n   z:\"               + self.z()              + \r\n                \"\\n   percentX:\"        + self.percentX()       + \r\n                \"\\n   percentY:\"        + self.percentY()       + \r\n                \"\\n   percentZ:\"        + self.percentZ()       + \r\n                \"\\n   parentWidth:\"     + self.parentWidth()    + \r\n                \"\\n   parentHeight:\"    + self.parentHeight()   + \r\n                \"\\n   width:\"           + self.width()          + \r\n                \"\\n   height:\"          + self.height()         + \r\n                \"\\n   percentWidth:\"    + self.percentWidth()   + \r\n                \"\\n   percentHeight:\"   + self.percentHeight()  + \r\n                \"\\n   minWidth:\"        + self.minWidth()       + \r\n                \"\\n   minHeight:\"       + self.minHeight()      + \r\n                \"\\n   maxWidth:\"        + self.maxWidth()       + \r\n                \"\\n   maxHeight:\"       + self.maxHeight()      + \r\n                \"\\n   scaleX:\"          + self.scaleX()         + \r\n                \"\\n   scaleY:\"          + self.scaleY()         + \r\n                \"\\n   rotate:\"          + self.rotate()         + \r\n                \"\\n   visible:\"         + self.visible()        + \r\n                \"\\n   title:\"           + self.title()          + \r\n                \"\\n   data:\"            + JSON.stringify(self.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 替换title中的特殊字符串内容，比如{#d.name#}替换为渲染数据中的name属性的值,{##}中的内容是可执行的js\r\n     */\r\n    var formatTitleFn = function(d) {\r\n        var titleStr = self.title();\r\n        return titleStr.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // config events codes\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var configEvents = [];//已添加的配置事件列表\r\n    \r\n    /**\r\n     * 解析事件参数值字符串，替换为对应的值的方法,str只支持一个\"{##}\"，且必须整个字符串都是一个\"{##}\"，\r\n     * 因为\"{##}\"会被替换成执行js表达式的值，类型也可能会改变，反回的不一定是字符串类型\r\n     * @param str 参数值字符串\r\n     * @param d 数据对象\r\n     * @return 返回替换后的结果对象，若没有找到替换内容(\"{##}\")，则返回原始值\r\n     */\r\n    var parseParamValue = function(str, d) {\r\n    \ttry {\r\n    \t\tstr.replace(RegexUtil.jsRegex, function() {\r\n                str = arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n            });\r\n    \t} catch(e) {\r\n    \t\treturn str;\r\n    \t}\r\n    \treturn str;\r\n    };\r\n    \r\n    /**\r\n     * 解析事件参数\r\n     * @param obj 参数所属对象\r\n     * @param name 参数属性名称\r\n     * @param d 数据对象\r\n     */\r\n    var parseParams = function(obj, name, d) {\r\n        if(!obj || d === null || d === undefined) {\r\n            return;\r\n        }\r\n        var p = obj[name];\r\n        if(!p) {\r\n        \treturn;\r\n        }\r\n        if(ObjectUtil.isString(p)) {\r\n        \tobj[name] = parseParamValue(p, d);\r\n        } else if(ObjectUtil.isObject(p) || ObjectUtil.isArray(p)) {\r\n        \tfor(var key in p) {\r\n                var value = p[key];\r\n                if(ObjectUtil.isString(value)) {\r\n                    p[key] = parseParamValue(value, d);\r\n                } else if(ObjectUtil.isObject(value) || ObjectUtil.isArray(value)) {\r\n                \tparseParams(p, key, d);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 添加触发类型配置事件\r\n     * @param e 事件配置数据\r\n     */\r\n    var addTriggerEvent = function(e) {\r\n        e.fn = function() {\r\n            var parent = self.parent();\r\n            if(!parent) {\r\n            \treturn;\r\n            }\r\n            /*兼容IE,firefox:IE中，不支持直接参数接收，而是通过window.event来接收;在firefox中用d3的on方法注册的事件监听，用d3.event方法获取event*/\r\n            var evt = (arguments.length > 0 && arguments[0]) || window.event || d3.event;\r\n            if(evt) {\r\n            \tevt.stopPropagation();\r\n            }\r\n            var cloneE = ObjectUtil.cloneObj(e);\r\n            cloneE.fn = e.fn;\r\n            if(!cloneE.defaultParams) {\r\n                cloneE.defaultParams = {};\r\n            }\r\n            //detail.data是baseComponent.dispatchEvent抛出的数据，detail是dom.dispatchEvent抛出的数据\r\n            var d = evt && evt.detail ? (evt.detail.data && evt.detail.target ? evt.detail.data : evt.detail) : null;\r\n            parseParams(cloneE, \"defaultParams\", d);//解析defaultParams\r\n            parseParams(cloneE, \"eventParams\", d);//解析eventParams\r\n            if(cloneE.bindEvent === BaseEvent.NOTICE_SYN_TOOL_TIP) {\r\n            \tvar dp = cloneE.defaultParams;\r\n                dp.isShowToolTip = self.isShowToolTip();\r\n                dp.xAxisValue = self.getXAxisValue();\r\n                dp.eventType = evt.type;\r\n            }\r\n            self.dispatchEvent(EventUtil.createCustomEvent(BaseEvent.NOTICE_EVENT_NAME, true, true, cloneE));\r\n        };\r\n        var bindEvent = e.bindEvent;\r\n        var mainContainer = self.mainContainer();\r\n        if(bindEvent === BaseEvent.SLIDER_RANGE_CHANGE) {\r\n            self.isDispatchSliderChange(true);\r\n            self.addEventListener(BaseEvent.SLIDER_RANGE_CHANGE, e.fn);\r\n        } else if(bindEvent === BaseEvent.NOTICE_SYN_TOOL_TIP) {\r\n        \t//这里使用on注册事件，否则MouseUtil.mouse()方法鼠标定位会报错\r\n            mainContainer.on(\"mouseover.notice\", e.fn);\r\n            mainContainer.on(\"mousemove.notice\", e.fn);\r\n            mainContainer.on(\"mouseout.notice\", e.fn);\r\n        } else {\r\n            self.addEventListener(e.bindEvent, e.fn);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 添加响应类型配置事件\r\n     * @param e 事件配置数据\r\n     */\r\n    var addResponseEvent = function(e) {\r\n        e.fn = function() {\r\n        \t/*兼容IE,firefox:IE中，不支持直接参数接收，而是通过window.event来接收;在firefox中用d3的on方法注册的事件监听，用d3.event方法获取event*/\r\n        \tvar evt = (arguments.length > 0 && arguments[0]) || window.event || d3.event;\r\n        \t//禁止冒泡\r\n        \tif(evt) {\r\n        \t\tevt.stopPropagation();\r\n        \t}\r\n            //console.log(evt);\r\n            var graph = self.graph();\r\n            if(!graph) {\r\n                return;\r\n            }\r\n            var data = evt.detail.data;\r\n            var dp = data ? data.defaultParams : null;\r\n            var ep = data ? data.eventParams : null;\r\n            var bindEvent = e.bindEvent;\r\n            if(bindEvent === BaseEvent.NOTICE_REFRESH_DATA) {\r\n            \tif(!dp && !ep) return;\r\n            \tvar d = ep.data ? ep.data : dp.data;\r\n            \tif(d) {\r\n            \t\td = ObjectUtil.cloneObj(d);\r\n            \t}\r\n                graph.setDataAndUpdate(d);\r\n            } else if(bindEvent === BaseEvent.NOTICE_SYN_TOOL_TIP) {\r\n            \tif(!dp) return;\r\n                var eventType = dp.eventType;\r\n                if(eventType === \"mouseover\") {\r\n                    self.actionShowToolTip(dp.isShowToolTip, dp.xAxisValue);\r\n                } else if(eventType === \"mousemove\") {\r\n                    self.actionUpdateToolTip(dp.xAxisValue);\r\n                } else {\r\n                    self.actionHideToolTip();\r\n                }\r\n            } else if(bindEvent === BaseEvent.CHART_VISIBLE) {\r\n            \tvar isVisible = ep === true ? true : false;\r\n            \tself.setConfigPropertyAndUpdate(\"visible\", isVisible);\r\n            \tself.dispatchEvent(EventUtil.createCustomEvent(\r\n            \t   BaseEvent.SET_CON_CSS, true, true, {\"pointer-events\":isVisible ? null : \"none\"}));\r\n            } else if(bindEvent === BaseEvent.TIMER_CONTROL) {\r\n            \tself.action && self.action(ep);\r\n            }\r\n        };\r\n        self.addEventListener(BaseEvent.CUSTOM_EVENT_PREFIX + e.eventName, e.fn);\r\n    };\r\n    \r\n    /**\r\n     * 添加配置事件\r\n     * @param e 事件配置数据\r\n     */\r\n    var addConfigEvent = function(e) {\r\n        if(hasConfigEvent(e)) {\r\n            return;\r\n        }\r\n        configEvents.push(e);\r\n        \r\n        if(e.eventType === BaseEvent.NOTICE_EVENT_TYPE_TRIGGER) {\r\n            addTriggerEvent(e);\r\n        } else if(e.eventType === BaseEvent.NOTICE_EVENT_TYPE_RESPONSE) {\r\n            addResponseEvent(e);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 添加所有配置事件\r\n     */\r\n    var addAllConfigEvents = function() {\r\n        //刷新事件配置数据到属性中\r\n        var data = self.data();\r\n        if(!data) {\r\n        \treturn;\r\n        }\r\n        \r\n        removeAllConfigEvents();\r\n        \r\n        var events = ObjectUtil.isArray(data.events) ? data.events : [];\r\n        self.events(events);\r\n        for(var i = 0, len = events.length; i < len; i++) {\r\n            addConfigEvent(events[i]);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 移除配置事件\r\n     * @param e 事件配置数据\r\n     */\r\n    var removeConfigEvent = function(e) {\r\n        var index = getConfigEventIndex(e);\r\n        if(index === -1) {\r\n            return;\r\n        }\r\n        configEvents.splice(index, 1);\r\n        \r\n        if(e.eventType === BaseEvent.NOTICE_EVENT_TYPE_TRIGGER) {\r\n            var bindEvent = e.bindEvent;\r\n            var mainContainer = self.mainContainer();\r\n            if(bindEvent === BaseEvent.NOTICE_REFRESH_DATA) {\r\n                self.isDispatchSliderChange(false);\r\n                self.removeEventListener(BaseEvent.SLIDER_RANGE_CHANGE, e.fn);\r\n            } else if(bindEvent === BaseEvent.NOTICE_SYN_TOOL_TIP) {\r\n                mainContainer.on(\"mouseover.notice\", null);\r\n                mainContainer.on(\"mousemove.notice\", null);\r\n                mainContainer.on(\"mouseout.notice\", null);\r\n            } else {\r\n            \tself.removeEventListener(e.bindEvent, e.fn);\r\n            }\r\n        } else if(e.eventType === BaseEvent.NOTICE_EVENT_TYPE_RESPONSE) {\r\n            self.removeEventListener(BaseEvent.CUSTOM_EVENT_PREFIX + e.eventName, e.fn);\r\n        }\r\n        delete e.fn;\r\n    };\r\n    \r\n    /**\r\n     * 移除所有配置事件\r\n     */\r\n    var removeAllConfigEvents = function() {\r\n        while(configEvents.length > 0) {\r\n            removeConfigEvent(configEvents[0]);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 是否已经注册该配置事件\r\n     * @param e 事件配置数据\r\n     * @return 返回结果\r\n     */\r\n    var hasConfigEvent = function(e) {\r\n        return getConfigEventIndex(e) !== -1;\r\n    };\r\n    \r\n    /**\r\n     * 获取该配置事件在已注配置事件数组中的索引值\r\n     * @param e 事件配置数据\r\n     * @return 返回结果，若没有包含则返回-1\r\n     */\r\n    var getConfigEventIndex = function(e) {\r\n        return configEvents.indexOf(e);\r\n    };\r\n    \r\n    BaseComponent.clazzName = \"BaseComponent\";\r\n    \r\n    self.init();\r\n};\r\n\r\nBaseComponent.struct = function(ghca_charts) {\r\n    BaseComponent.prototype.constructor = BaseComponent;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = BaseComponent;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/baseComponent.js\n// module id = 22\n// module chunks = 0","var ChartMap = function() {\r\n\t\r\n\tthis.getMap = function() {\r\n\t\tvar map = {};\r\n\t\t//注册内部图表类\r\n        map.sunburst = ghca_charts.view.component.charts.sunburst;\r\n        map.chart = ghca_charts.view.component.charts.chart;\r\n        map.pie = ghca_charts.view.component.charts.pie;\r\n        map.radialtree = ghca_charts.view.component.charts.radialTree;\r\n        map.sankey = ghca_charts.view.component.charts.sankey;\r\n        map.topology = ghca_charts.view.component.charts.topology;\r\n        map.topology_edit = ghca_charts.view.component.charts.editorTopology;\r\n        map.biztopology = ghca_charts.view.component.charts.bizTopology;\r\n        map.tree = ghca_charts.view.component.charts.tree;\r\n        map.scatter = ghca_charts.view.component.charts.scatter;\r\n        map.area = ghca_charts.view.component.charts.area;\r\n        map.line = ghca_charts.view.component.charts.line;\r\n        map.bar = ghca_charts.view.component.charts.bar;\r\n        map.treemap = ghca_charts.view.component.charts.treemap;\r\n        map.pack = ghca_charts.view.component.charts.pack;\r\n        map.calendar = ghca_charts.view.component.charts.calendar;\r\n        map.progressbar = ghca_charts.view.component.charts.progressBar;\r\n        \r\n        //注册外部图表类\r\n        var outerMap = ghca_charts.global.outerPlugins && ghca_charts.global.outerPlugins.chartMap;\r\n        if(outerMap) {\r\n        \tfor(var name in outerMap) {\r\n                map[name] = outerMap[name];\r\n            }\r\n        }\r\n        \r\n        return map;\r\n\t};\r\n};\r\n\r\nChartMap.struct = function(ghca_charts) {\r\n    ChartMap.prototype.constructor = ChartMap;\r\n};\r\n\r\nmodule.exports = ChartMap;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/chartMap.js\n// module id = 23\n// module chunks = 0","// 区域图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 区域图配置数据\r\n * @param _layout 区域图布局对象，不传就为默认布局\r\n */\r\nvar Area = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const SvgUtil = ghca_charts.view.util.svgUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        nodesInsMap = {},\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        initDuraton = 1000,\r\n        updateDuration = 500;\r\n    \r\n    self.className(\"seriesArea\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"tension\", \"nodeShow\", \"isDash\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // tension\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 连线弯曲率，范围[0, 1],1时为折线，0和1之间(包括0)值为曲线(默认值为0)\r\n     */\r\n    var tension = 0;\r\n    this.tension = function(value){\r\n        if (!arguments.length) return tension;\r\n        tension = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // nodeShow\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 是否显示节点(默认值为false)\r\n     */\r\n    var nodeShow = false;\r\n    this.nodeShow = function(value){\r\n        if (!arguments.length) return nodeShow;\r\n        nodeShow = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // isDash\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 是否开启虚线实线混合显示模式，同时节点数据中要设置isDash为true的节点，\r\n     * 从该节点前面一个节点到该节点之间才会显示虚线(默认值为false)，例子如下：\r\n     * series:[{\r\n            type:\"area\",\r\n            isDash:true,\r\n            linkStyle:{\"stroke-dasharray\":\"5, 5\"},\r\n            data:[\r\n                {id:1},\r\n                {id:2},\r\n                {id:3, isDash:true},\r\n                {id:4, isDash:true}\r\n            ]\r\n        }]\r\n        1-2实线，2-3-4虚线\r\n     */\r\n    var isDash = false;\r\n    this.isDash = function(value){\r\n        if (!arguments.length) return isDash;\r\n        isDash = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.itemsIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n   \t    superRefreshData();\r\n        //生成visible属性，默认值为true\r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n            item = items[i];\r\n            item.bindKey = i;\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n        \r\n        if(self.areaContainer) {\r\n        \tself.areaContainer.renderTransform();\r\n        }\r\n    };\r\n    \r\n    this.initAllContainers = function() {\r\n    \tsuperInitAllContainers();\r\n    \t\r\n    \t//放置所有项的g元素\r\n    \tif(!self.areaContainer) {\r\n    \t\tvar areaContainer = new BaseComponent();\r\n            areaContainer.className(\"area-Container\");\r\n            self.addChild(areaContainer);\r\n            self.areaContainer = areaContainer;\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n    \tvar items = self.data().data;\r\n    \tself.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n    \t//计算布局，获取项数据数组\r\n        self.layout().update();\r\n        \r\n        /*这里先清除所有的项元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n                                    但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n        var areaContainer = self.areaContainer;\r\n//        SvgUtil.removeAllChildren(areaContainer.node());\r\n//        self.itemsIns.length = 0;\r\n        \r\n//        //获取节点渲染器配置，并根据legend组件分配的颜色设置节点填充颜色,若没有legend相关配置，则pie组件始终强制使用自动生成的颜色填充\r\n//        for(var d, i = 0, len = itemsData.length; i < len; i++) {\r\n//            d = itemsData[i];\r\n//            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n//                d.legendColor = ColorUtil.getColor(i);\r\n//            }\r\n//            var config = self.getRendererConfig(d, \"fill\");\r\n//            //判断饼图外半径是否为auto,若为auto,则自动填满图表范围;若没有outerRadius属性，则等同于auto\r\n//            if(!config.hasOwnProperty(\"clazzProperties\")) {\r\n//                \r\n//            } else if(config.clazzProperties.hasOwnProperty(\"outerRadius\") && config.clazzProperties.outerRadius === \"auto\") {\r\n//                config.clazzProperties.outerRadius = Math.min(self.width(), self.height()) / 2;\r\n//            }\r\n//        }\r\n//        //渲染节点内容\r\n//        var itemsIns = ClassFactory.newRenderersInstanceByData(areaContainer, self, \"itemContainer\", itemsData);\r\n//        if(itemsIns) {\r\n//            for(var i = 0, len = itemsIns.length; i < len; i++) {\r\n//                self.itemsIns.push(itemsIns[i]);\r\n//            }\r\n//        }\r\n        \r\n        //渲染节点\r\n        var horAxis, verAxis, xScale, yScale, xPadding = 0, yPadding = 0, vAixsHeight = 0;\r\n        if(self.horAxis()) {\r\n        \thorAxis = self.horAxis();\r\n        \txPadding = horAxis.padding();\r\n        \txScale = horAxis.scaleIns();\r\n        }\r\n        if(self.verAxis()) {\r\n        \tverAxis = self.verAxis();\r\n            yPadding = verAxis.padding();\r\n            yScale = verAxis.scaleIns();\r\n            vAixsHeight = verAxis.height();\r\n        }\r\n        \r\n        //整体区域虚线或者实线\r\n        var area = d3.area()\r\n            .x(function(d) { return d.x; })\r\n            .curve(d3.curveCardinal.tension(self.tension()));\r\n        \r\n        var defaultColor = ColorUtil.getColor(self.seriesIndex());\r\n        areaContainer = self.areaContainer.mainContainer();\r\n        self.areaContainer.x(xPadding.left);\r\n        self.areaContainer.y(yPadding.top);\r\n        \r\n        //根据字典中指定的渲染器数据生成节点渲染器数据\r\n        var visibleItems = self.visibleItems();\r\n        for(var d, i = 0, len = visibleItems.length; i < len; i++) {\r\n            d = visibleItems[i];\r\n            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n                d.legendColor = defaultColor;\r\n            }\r\n            self.getRendererConfig(d, \"fill\");\r\n        }\r\n        \r\n        var diffKey = self.diffKey();\r\n        //render path\r\n        var pathUpdate = areaContainer.selectAll(\"path.area-path\")\r\n            .data(visibleItems.length > 0 ? [visibleItems] : []);\r\n        \r\n        var pathExit = pathUpdate.exit();\r\n        pathExit.remove();\r\n            \r\n        pathUpdate\r\n            .transition().duration(self.animation() ? updateDuration : 0)\r\n            .attr(\"fill\",  function(d) {\r\n                var color = defaultColor;\r\n                if(d.hasOwnProperty(\"legendColor\")) {\r\n                    color = d.legendColor;\r\n                } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                    color = d[0].legendColor;\r\n                }\r\n                return ColorUtil.setAlpha(color, 0.15);\r\n            })\r\n            .attr(\"stroke\", function(d) {\r\n                var color = defaultColor;\r\n                if(d.hasOwnProperty(\"legendColor\")) {\r\n                    color = d.legendColor;\r\n                } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                    color = d[0].legendColor;\r\n                }\r\n                return color;\r\n            })\r\n            .attr(\"d\", area.y(vAixsHeight))\r\n            .attr(\"d\", area.y0(yScale(0)).y1(function(d) { return d.y; }));    \r\n        \r\n        var defaultLink = {\r\n            \"stroke-linejoin\":\"round\", \r\n            \"stroke-linecap\":\"round\", \r\n            \"stroke-width\":1.5, \r\n            \"stroke-dasharray\":\"\"\r\n        };\r\n        var linkStyle = self.data().linkStyle;\r\n        if(linkStyle) {\r\n        \tfor(var key in linkStyle) {\r\n        \t\tdefaultLink[key] = linkStyle[key];\r\n        \t}\r\n        }\r\n        var path = pathUpdate.enter().append(\"path\");\r\n        for(var key in linkStyle) {\r\n            path.attr(key, linkStyle[key]);\r\n        }\r\n        path.attr(\"class\", \"area-path\")\r\n            .attr(\"fill\",  function(d) {\r\n                var color = defaultColor;\r\n                if(d.hasOwnProperty(\"legendColor\")) {\r\n                    color = d.legendColor;\r\n                } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                    color = d[0].legendColor;\r\n                }\r\n                return ColorUtil.setAlpha(color, 0.15);\r\n            })\r\n            .attr(\"stroke\", function(d) {\r\n                var color = defaultColor;\r\n                if(d.hasOwnProperty(\"legendColor\")) {\r\n                    color = d.legendColor;\r\n                } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                    color = d[0].legendColor;\r\n                }\r\n                return color;\r\n            })\r\n            .each(function(d) {\r\n                if(d.length > 0) {\r\n                    d[0].legendIns = self.areaContainer;\r\n                }\r\n            })\r\n            .attr(\"d\", area.y(vAixsHeight))\r\n            .transition().duration(self.animation() ? initDuraton : 0)\r\n            .attr(\"d\", area.y0(yScale(0)).y1(function(d) { return d.y; }));\r\n         \r\n        //部分区域实线，如果有则渲染\r\n        if(self.isDash()) {\r\n        \tvar line = d3.line()\r\n                .x(function(d) { return d.x; })\r\n                .curve(d3.curveCardinal.tension(self.tension()));\r\n            var regExp = /[a-zA-Z]+[^a-zA-Z]*/g;\r\n            var path1Update = areaContainer.selectAll(\"path.line-path1\")\r\n                .data(visibleItems.length > 0 ? [visibleItems.filter(function(d){ \r\n                    return !d.isDash; \r\n                })] : []);\r\n            \r\n            var path1Exit = path1Update.exit();\r\n            path1Exit.remove();\r\n                \r\n            path1Update\r\n                .attr(\"visibility\", \"hidden\")\r\n                .transition().duration(self.animation() ? updateDuration : 0)\r\n                .attr(\"stroke\", function(d) {\r\n                    var color = defaultColor;\r\n                    if(d.hasOwnProperty(\"legendColor\")) {\r\n                        color = d.legendColor;\r\n                    } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                        color = d[0].legendColor;\r\n                    }\r\n                    return color;\r\n                })\r\n                .attr(\"d\", line.y(vAixsHeight))\r\n                .attr(\"d\", line.y(function(d) { return d.y; }))\r\n                .on(\"end\", function() {\r\n                    var pArray = pathUpdate.attr(\"d\").match(regExp);\r\n                    var lArray = path1Update.attr(\"d\").match(regExp);\r\n                    for(var i = 0, len = lArray.length; i < len; i++) {\r\n                        lArray[i] = pArray[i];\r\n                    }\r\n                    path1Update.attr(\"visibility\", \"visible\").attr(\"d\", lArray.join(\"\"));\r\n                });    \r\n            \r\n            var path1 = path1Update.enter().append(\"path\");\r\n            for(var key in linkStyle) {\r\n                path1.attr(key, linkStyle[key]);\r\n            }\r\n            path1.attr(\"class\", \"line-path1\")\r\n                .attr(\"visibility\", \"hidden\")\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"stroke-dasharray\", \"\")\r\n                .attr(\"stroke\", function(d) {\r\n                    var color = defaultColor;\r\n                    if(d.hasOwnProperty(\"legendColor\")) {\r\n                        color = d.legendColor;\r\n                    } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                        color = d[0].legendColor;\r\n                    }\r\n                    return color;\r\n                })\r\n                .attr(\"d\", line.y(vAixsHeight))\r\n                .transition().duration(self.animation() ? initDuraton : 0)\r\n                .attr(\"d\", line.y(function(d) { return d.y; }))\r\n                .on(\"end\", function() {\r\n                    var pArray = path.attr(\"d\").match(regExp);\r\n                    var lArray = path1.attr(\"d\").match(regExp);\r\n                    for(var i = 0, len = lArray.length; i < len; i++) {\r\n                        lArray[i] = pArray[i];\r\n                    }\r\n                    path1.attr(\"visibility\", \"visible\").attr(\"d\", lArray.join(\"\"));\r\n                });\r\n        }\r\n         \r\n        //render items\r\n        if(self.nodeShow()) {\r\n        \tvar pointUpdate = areaContainer.selectAll(\"g.point-item\")\r\n        \t   .data(visibleItems, self.bindKeyFn);\r\n        \tvar pointExit = pointUpdate.exit();\r\n        \tpointExit.each(function(d) {\r\n                var key = self.bindKeyFn(d);\r\n                if(nodesInsMap.hasOwnProperty(key)) {\r\n                    delete nodesInsMap[key];\r\n                }\r\n            }).remove();\r\n        \t\r\n        \t//update\r\n            pointUpdate.each(function(d) {\r\n                var key = self.bindKeyFn(d);\r\n                var ins = nodesInsMap[key];\r\n                if(ins) {\r\n                    ins.data(d);\r\n                    ins.update();\r\n                    d.ins = ins;\r\n                    d.legendIns = ins;\r\n                }\r\n            });\r\n            \r\n            //add\r\n            var pointsEnter = pointUpdate.enter().append(\"g\").attr(\"class\", \"point-item\");\r\n            pointsEnter.each(function(d){\r\n                if(!d.hasOwnProperty(\"legendColor\")) {\r\n                    d.legendColor = defaultColor;\r\n                }\r\n                var rendererConfig = self.getRendererConfig(d, \"stroke\");\r\n                var clazz = d.hasOwnProperty(\"renderer\") ? rendererConfig.clazz : \"lineNode\";\r\n                var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n                nodeIns.render();\r\n                d.ins = nodeIns;\r\n                d.legendIns = self.areaContainer;\r\n                var key = self.bindKeyFn(d);\r\n                nodesInsMap[key] = nodeIns;\r\n            });\r\n        } else {\r\n        \tareaContainer.selectAll(\"g.point-item\").remove();\r\n        }\r\n            \r\n        self.renderPosition();\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Area info: \"     +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    Area.clazzName = \"Area\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nArea.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    Area.prototype = Object.create(BaseChart.prototype);\r\n    Area.prototype.constructor = Area;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Area;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/area.js\n// module id = 24\n// module chunks = 0","/**\r\n * 坐标轴渲染控制类，包括多个axis实例，一个坐标轴渲染控制类可控制内容如下：\r\n *         |---继承自baseAxis类的horAxis元素(0-2条)---gridLine(可选)\r\n * axis--- |---继承自baseAxis类的verAxis元素(0-2条)---gridLine(可选)\r\n * \r\n */\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _parent 坐标轴所在组件实例\r\n * @param _config 整体配置数据\r\n */\r\nvar Axis = function(_parent, _config) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const HorAxis = ghca_charts.view.component.charts.horAxis;\r\n    const VerAxis = ghca_charts.view.component.charts.verAxis;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    if(arguments.length < 1) {\r\n        throw new Error('Axis传入参数个数错误,当前个数' + arguments.length + \",应至少传入1个参数\");\r\n    }\r\n    if (!_parent) {\r\n        throw new Error('Axis构造方法中传入的容器_parent:' + _parent + \"无法找到。\");\r\n    }\r\n    \r\n    //判断是否传入有效配置信息\r\n    if(!_config || !_config.axis || (!_config.axis.xAxis && !_config.axis.yAxis)) {\r\n        return;\r\n    }\r\n    \r\n    var self = this;\r\n        \r\n    var parseTime = d3.timeParse('%Y-%m-%d');\r\n        parseTimeRegEx = new RegExp(/^\\d{4}-\\d{2}-\\d{2}$/),\r\n        parseDateTime = d3.timeParse('%Y-%m-%d %H:%M:%S'),\r\n        parseDateTimeRegEx = new RegExp(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r\n//        d3.timeFormatDefaultLocale({\r\n//            \"dateTime\": \"%x, %X\",\r\n//            \"date\": \"%-m/%-d/%Y\",\r\n//            \"time\": \"%-I:%M:%S %p\",\r\n//            \"periods\": [\"上午\", \"下午\"],\r\n//            \"days\": [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\r\n//            \"shortDays\": [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\r\n//            \"months\": [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\"],\r\n//            \"shortMonths\": [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\"]\r\n//        });\r\n//        d3.timeFormatDefaultLocale({\r\n//            \"dateTime\": \"%x, %X\",\r\n//            \"date\": \"%-m/%-d/%Y\",\r\n//            \"time\": \"%-I:%M:%S %p\",\r\n//            \"periods\": [\"AM\", \"PM\"],\r\n//            \"days\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n//            \"shortDays\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n//            \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n//            \"shortMonths\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n//        });\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    //------------------------------\r\n    //  horAxises\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平坐标轴实例数组\r\n     */\r\n    var horAxises = [];\r\n    this.horAxises = function(value){\r\n        if (!arguments.length) return horAxises;\r\n        horAxises = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  verAxises\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直坐标轴实例数组\r\n     */\r\n    var verAxises = [];\r\n    this.verAxises = function(value){\r\n        if (!arguments.length) return verAxises;\r\n        verAxises = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // config\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 整体配置数据\r\n     */\r\n    var config = _config;\r\n    this.config = function(value) {\r\n        if (!arguments.length)\r\n            return config;\r\n        config = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 渲染方法\r\n     */\r\n    this.render = function() {\r\n    \t//渲染坐标轴\r\n    \trenderAxis(self.axisContainer, _config);\r\n    \t//渲染坐标轴网格\r\n    \trenderGridLine();\r\n    };\r\n    \r\n    /**\r\n     * 获取坐标轴有效内容区域矩形\r\n     */\r\n    this.getAxisContentArea = function() {\r\n        var horAxis, verAxis;\r\n        var horAxises = self.horAxises();\r\n        if(horAxises && horAxises.length > 0) {\r\n            horAxis = horAxises[0];\r\n        }\r\n        var verAxises = self.verAxises();\r\n        if(verAxises && verAxises.length > 0) {\r\n            verAxis = verAxises[0];\r\n        }\r\n        var hx = horAxis ? horAxis.x() : 0;\r\n        var vx = verAxis ? verAxis.x() : 0;\r\n        var hy = horAxis ? horAxis.y() : 0;\r\n        var vy = verAxis ? verAxis.y() : 0;\r\n        var x = hx < vx ? hx : vx;\r\n        var y = hy < vy ? hy : vy;\r\n        var w = horAxis ? horAxis.width() : 0;\r\n        var h = verAxis ? verAxis.height() : 0;\r\n        return {x:x, y:y, w:w, h:h};\r\n    };\r\n    \r\n    this.update = function() {\r\n    \t//移除所有坐标轴容器\r\n    \tself.axisContainer.selectAll(\".xAxis\").remove();\r\n    \tself.axisContainer.selectAll(\".yAxis\").remove();\r\n    \t//清空坐标轴实例数组\r\n    \thorAxises = self.horAxises();\r\n    \tverAxises = self.verAxises();\r\n    \tif(horAxises && horAxises.length > 0) {\r\n            horAxises.length = 0;\r\n        }\r\n        if(verAxises && verAxises.length > 0) {\r\n            verAxises.length = 0;\r\n        }\r\n        //重新实例化坐标轴\r\n    \trenderAxis(self.axisContainer, _config);\r\n    \t//重新设置序列图表对应的坐标轴对象\r\n    \tif(_parent && _parent.children().length > 0) {\r\n    \t\t_parent.children().forEach(function(seriesChart){\r\n    \t\t\t_parent.setAxisForSeriesCharts(seriesChart, seriesChart.data());\r\n    \t\t});\r\n    \t}\r\n    \t//更新坐标轴\r\n        if(horAxises && horAxises.length > 0) {\r\n            horAxises.forEach(function(axis) {\r\n            \taxis.update();\r\n            });\r\n        }\r\n        if(verAxises && verAxises.length > 0) {\r\n            verAxises.forEach(function(axis) {\r\n                axis.update();\r\n            });\r\n        }\r\n        //渲染坐标轴网格\r\n        renderGridLine();\r\n    };\r\n    \r\n    this.toString = function() {\r\n    };\r\n    \r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // axis code\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        self.parent = _parent.mainContainer();\r\n        \r\n        //解析配置数据\r\n        parseConfig();\r\n        \r\n        //初始化坐标轴包含的各个层级\r\n        initAllContainers();\r\n        \r\n        //添加监听\r\n        addListeners();\r\n    };\r\n    \r\n    /**\r\n     * 解析配置数据\r\n     */\r\n    var parseConfig = function() {\r\n        \r\n    };\r\n    \r\n    /**\r\n     * 初始化图列包含的各个层级\r\n     */\r\n    var initAllContainers = function() {\r\n        //放置所有内容的最外层g元素\r\n        self.axisContainer = self.parent.append(\"g\").attr(\"class\", \"axis\");\r\n    };\r\n    \r\n    /**\r\n     * 添加所需监听\r\n     */\r\n    var addListeners = function() {\r\n    };\r\n    \r\n    /**\r\n     * 渲染水平坐标轴内容\r\n     * @param parent 父容器\r\n     * @param xAxis 水平坐标轴数据数组，即config.xAxis\r\n     */\r\n    var renderHorAxises = function(parent, xAxis) {\r\n    \tGlobal.isDebug && console.log(\"Axis.renderHorAxises()\");\r\n        for(var i = 0, len = xAxis.length; i < len; i++) {\r\n            renderHorAxis(parent, xAxis[i], i);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染垂直坐标轴内容\r\n     * @param parent 父容器\r\n     * @param yAxis 垂直坐标轴数据数组，即config.yAxis\r\n     */\r\n    var renderVerAxises = function(parent, yAxis) {\r\n    \tGlobal.isDebug && console.log(\"Axis.renderVerAxises()\");\r\n        for(var i = 0, len = yAxis.length; i < len; i++) {\r\n            renderVerAxis(parent, yAxis[i], i);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染xAxis中水平坐标轴内容\r\n     * @param parent 父容器\r\n     * @param axisData 单个水平坐标轴数据，即config.xAxis[n]\r\n     * @param index 对应的水平坐标轴索引值，若不传则默认为0\r\n     */\r\n    var renderHorAxis = function(parent, axisData, index) {\r\n    \tGlobal.isDebug && console.log(\"Axis.renderHorAxis(), type is \" + axisData.type);\r\n        //若配置中没有设置刻度范围，则从key的对应值中选择最小和最大的值作为刻度范围\r\n        setDomain(axisData, axisData.useDomain && axisData.hasOwnProperty(\"domain\") && axisData.domain.length > 0, index, true);\r\n        //实例化水平坐标轴\r\n        var axis = new HorAxis(parent, axisData);\r\n        if(!axis) {\r\n            throw new Error('当前传入的坐标轴类型' + axisData.type + \"尚未支持。\");\r\n        }\r\n        axis.parentChart(_parent);\r\n        axis.render();\r\n        self.horAxises().push(axis);\r\n    };\r\n    \r\n    /**\r\n     * 渲染yAxis中垂直坐标轴内容\r\n     * @param parent 父容器\r\n     * @param axisData 单个垂直坐标轴数据，即config.xAxis[n]\r\n     * @param index 对应的垂直坐标轴索引值，若不传则默认为0\r\n     */\r\n    var renderVerAxis = function(parent, axisData, index) {\r\n    \tGlobal.isDebug && console.log(\"Axis.renderVerAxis(), type is \" + axisData.type);\r\n        //若配置中没有设置刻度范围，则从key的对应值中选择最小和最大的值作为刻度范围\r\n        setDomain(axisData, axisData.useDomain && axisData.hasOwnProperty(\"domain\") && axisData.domain.length > 0, index, false);\r\n        //实例化垂直坐标轴\r\n        var axis = new VerAxis(parent, axisData);\r\n        if(!axis) {\r\n            throw new Error('当前传入的坐标轴类型' + axisData.type + \"尚未支持。\");\r\n        }\r\n        axis.parentChart(_parent);\r\n        axis.render();\r\n        self.verAxises().push(axis);\r\n    };\r\n    \r\n    /**\r\n     * 渲染坐标轴\r\n     * @param parent 父容器\r\n     * @param config 整体渲染配置数据\r\n     */\r\n    var renderAxis = function(parent, config) {\r\n        if(!config.axis.xAxis) {\r\n            self.horAxises().length = 0;\r\n        } else {\r\n            renderHorAxises(parent, config.axis.xAxis);\r\n        }\r\n        if(!config.axis.yAxis) {\r\n            self.verAxises().length = 0;\r\n        } else {\r\n            renderVerAxises(parent, config.axis.yAxis);\r\n        }\r\n        \r\n        Global.isDebug && console.log(\"Axis.renderAxis()\");\r\n    };\r\n    \r\n    /**\r\n     * 渲染坐标轴网格\r\n     */\r\n    var renderGridLine = function() {\r\n    \tvar rect = self.getAxisContentArea();\r\n    \tvar horAxises = self.horAxises(), verAxises = self.verAxises();\r\n    \thorAxises.forEach(function(axis){\r\n    \t\taxis.renderGridLine(rect);\r\n    \t});\r\n    \tverAxises.forEach(function(axis){\r\n            axis.renderGridLine(rect);\r\n        });\r\n        \r\n    \tGlobal.isDebug && console.log(\"Axis.renderGridLine()\");\r\n    };\r\n    \r\n    /**\r\n     * 设置坐标轴连续刻度范围，即设置坐标轴配置数据的minValue和maxValue,\r\n     * 若为enum类型或者已设置minValue和maxValue，则该方法无效\r\n     * @param axisData 坐标轴配置数据\r\n     * @param hasDomain 初始化配置中是否包括domain\r\n     * @param index 对应的坐标轴索引值，若不传则默认为0\r\n     * @param isHor 是否为水平坐标轴\r\n     */\r\n    var setContinuousDomain = function(axisData, hasDomain, index, isHor) {\r\n        if(!axisData || axisData.type === \"enum\" || hasDomain) {\r\n            return;\r\n        }\r\n        var series = config.series;\r\n        if(!series) {\r\n            return;\r\n        }\r\n        var chartData, data, value, axisIndex, axisIndexKey, layout, minValue = null, maxValue = null, \r\n            key = axisData.hasOwnProperty(\"key\") ? axisData.key : \"name\", \r\n            keyPath = axisData.hasOwnProperty(\"keyPath\") ? axisData.keyPath : \"\",\r\n            index = index === undefined ? 0 : index;\r\n        for(var i = 0, len = series.length; i < len; i++) {\r\n            chartData = series[i];\r\n            //过滤不相关的坐标轴对应的数据\r\n            axisIndexKey = isHor ? \"xAxisIndex\" : \"yAxisIndex\";\r\n            axisIndex = chartData.hasOwnProperty(axisIndexKey) ? chartData[axisIndexKey] : 0;\r\n            if(axisIndex !== index) {\r\n            \tcontinue;\r\n            }\r\n            //bar图表非普通类型,特殊处理key值\r\n            layout = chartData.layout;\r\n            if(layout.type === \"barLayout\" && layout.barType !== \"normal\" && layout.barType !== undefined) {\r\n            \tkey = \"total\";\r\n            }\r\n            data = keyPath === \"\" ? chartData : eval('chartData.' + keyPath);\r\n            for(var d, j = 0, len1 = data.length; j < len1; j++) {\r\n            \td = data[j];\r\n            \t//过滤不可见数据\r\n            \tif(d.hasOwnProperty(\"visible\") && !d[\"visible\"]) {\r\n            \t\tcontinue;\r\n            \t}\r\n                value = d[key];\r\n                if(value !== undefined && value !== null) {\r\n                    //替换字符串时间格式为date类型格式\r\n                    if(axisData.type === \"time\" && ObjectUtil.isString(value)) {\r\n                        if(parseDateTimeRegEx.test(value)) {\r\n                            value = parseDateTime(value);\r\n                        } else if(parseTimeRegEx.test(value)) {\r\n                            value = parseTime(value);\r\n                        }\r\n                        d[key] = value;\r\n                    }\r\n                    if(minValue === null) {\r\n                        minValue = value;\r\n                    } else if(value < minValue) {\r\n                        minValue = value;\r\n                    }\r\n                    if(maxValue === null) {\r\n                        maxValue = value;\r\n                    } else if(value > maxValue) {\r\n                        maxValue = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        axisData.domain = axisData.type === \"time\" ? \r\n            [minValue, maxValue] : [0 < minValue ? 0 : minValue, maxValue*1.2];\r\n    }\r\n    \r\n    /**\r\n     * 设置坐标轴枚举刻度范围。\r\n     * 枚举刻度数据，若设置domain,则直接从domain获取；\r\n     * 若没有设置domain，则依赖keyPath和key属性从数据中分析获取。\r\n     * @param axisData 坐标轴配置数据\r\n     * @param hasDomain 初始化配置中是否包括domain\r\n     * @param index 对应的坐标轴索引值，若不传则默认为0\r\n     * @param isHor 是否为水平坐标轴\r\n     */\r\n    var setEnumDomain = function(axisData, hasDomain, index, isHor) {\r\n        if(!axisData || axisData.type !== \"enum\" || hasDomain) {\r\n            return;\r\n        }\r\n        var series = config.series;\r\n        if(!series) {\r\n            return;\r\n        }\r\n        var chartData, data, value, axisIndex, axisIndexKey, domain = [], \r\n            key = axisData.hasOwnProperty(\"key\") ? axisData.key : \"name\", \r\n            keyPath = axisData.hasOwnProperty(\"keyPath\") ? axisData.keyPath : \"\",\r\n            index = index === undefined ? 0 : index;\r\n        for(var i = 0, len = series.length; i < len; i++) {\r\n            chartData = series[i];\r\n            //过滤不相关的坐标轴对应的数据\r\n            axisIndexKey = isHor ? \"xAxisIndex\" : \"yAxisIndex\";\r\n            axisIndex = chartData.hasOwnProperty(axisIndexKey) ? chartData[axisIndexKey] : 0;\r\n            if(axisIndex !== index) {\r\n                continue;\r\n            }\r\n            data = keyPath === \"\" ? chartData : eval('chartData.' + keyPath);\r\n            if(ObjectUtil.isArray(data)) {\r\n                for(var d, j = 0, len1 = data.length; j < len1; j++) {\r\n                    d = data[j];\r\n                \t//过滤不可见数据\r\n                    if(d.hasOwnProperty(\"visible\") && !d[\"visible\"]) {\r\n                        continue;\r\n                    }\r\n                    value = d[key];\r\n                    if(value !== undefined && value !== null) {\r\n                       domain.push(value);\r\n                    }\r\n                }\r\n            } else {\r\n                value = data[key];\r\n                if(value !== undefined && value !== null) {\r\n                   domain.push(value);\r\n                }\r\n            }\r\n        }\r\n        axisData.domain = domain;\r\n    }\r\n    \r\n    /**\r\n     * 设置坐标轴枚度范围\r\n     * @param axisData 坐标轴配置数据\r\n     * @param hasDomain 初始化配置中是否包括domain\r\n     * @param index 对应的坐标轴索引值，若不传则默认为0\r\n     * @param isHor 是否为水平坐标轴\r\n     */\r\n    var setDomain = function(axisData, hasDomain, index, isHor) {\r\n        setEnumDomain(axisData, false, index, isHor);//枚举类型强制重新渲染\r\n        setContinuousDomain(axisData, hasDomain, index, isHor);//暂时强制重新渲染\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nAxis.struct = function(ghca_charts) {\r\n    Axis.prototype.constructor = Axis;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Axis;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/axis.js\n// module id = 25\n// module chunks = 0","// 柱状图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 柱状图配置数据\r\n * @param _layout 柱状图布局对象，不传就为默认布局\r\n */\r\nvar Bar = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        nodesInsMap = {},\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData;\r\n    \r\n    self.className(\"seriesBar\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.itemsIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n   \t    superRefreshData();\r\n        //生成visible属性，默认值为true\r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n            item = items[i];\r\n            item.bindKey = i;\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n        \r\n        if(self.barContainer) {\r\n            self.barContainer.renderTransform();\r\n        }\r\n    };\r\n    \r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        \r\n        //放置所有项的g元素\r\n        if(!self.barContainer) {\r\n            var barContainer = new BaseComponent();\r\n            barContainer.className(\"bar-Container\");\r\n            self.addChild(barContainer);\r\n            self.barContainer = barContainer;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function(isResize) {\r\n    \tself.refreshData();\r\n        var items = self.data().data;\r\n        self.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n        //计算布局，获取项数据数组\r\n        self.layout().update(isResize);\r\n        \r\n        var barContainer = self.barContainer;\r\n        \r\n        //渲染节点\r\n        var horAxis, verAxis, xScale, yScale, xType, yType, barType, xPadding = 0, yPadding = 0, isAxisUpdate = false;\r\n        if(self.horAxis()) {\r\n            horAxis = self.horAxis();\r\n            xPadding = horAxis.padding();\r\n            xScale = horAxis.scaleIns();\r\n            xType = horAxis.type();\r\n            barType = self.layout().barType();\r\n            if(xType !== \"enum\" && barType !== \"normal\" && barType !== \"percentStack\") {\r\n            \tisAxisUpdate = true;\r\n            }\r\n        }\r\n        if(self.verAxis()) {\r\n            verAxis = self.verAxis();\r\n            yPadding = verAxis.padding();\r\n            yScale = verAxis.scaleIns();\r\n            yType = verAxis.type();\r\n            barType = self.layout().barType();\r\n            if(!isAxisUpdate && yType !== \"enum\" && barType !== \"normal\" && barType !== \"percentStack\") {\r\n                isAxisUpdate = true;\r\n            }\r\n        }\r\n        \r\n        if(isAxisUpdate && self.parent()) {\r\n            self.parent().isUpdateAxisAgain = true;\r\n        }\r\n        \r\n        var defaultColor = ColorUtil.getColor(self.seriesIndex()),\r\n            isVer = xType === \"enum\" && yType !== \"enum\";\r\n        barContainer = self.barContainer.mainContainer();\r\n        self.barContainer.x(xPadding.left);\r\n        self.barContainer.y(yPadding.top);\r\n        \r\n        //根据字典中指定的渲染器数据生成节点渲染器数据\r\n        var visibleItems = self.visibleItems();\r\n        for(var d, i = 0, len = visibleItems.length; i < len; i++) {\r\n            d = visibleItems[i];\r\n            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n                d.legendColor = defaultColor;\r\n            }\r\n            self.getRendererConfig(d, \"fill\");\r\n        }\r\n        \r\n        //render items\r\n        var diffKey = self.diffKey();\r\n        var barItemsUpdate = barContainer.selectAll(\"g.bar-item\")\r\n            .data(visibleItems, self.bindKeyFn);\r\n        //delete\r\n        var barItemsExit = barItemsUpdate.exit();\r\n        barItemsExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(nodesInsMap.hasOwnProperty(key)) {\r\n                delete nodesInsMap[key];\r\n            }\r\n        }).remove();\r\n        //update\r\n    \tbarItemsUpdate.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            var ins = nodesInsMap[key];\r\n            if(ins) {\r\n                ins.data(d);\r\n                ins.update();\r\n                d.ins = ins;\r\n                d.legendIns = ins;\r\n            }\r\n    \t});\r\n    \t//add\r\n    \tvar barItemsEnter = barItemsUpdate.enter().append(\"g\").attr(\"class\", \"bar-item\");\r\n    \tbarItemsEnter.each(function(d){\r\n            if(!d.hasOwnProperty(\"legendColor\")) {\r\n                d.legendColor = defaultColor;\r\n            }\r\n            d.startY = verAxis.height();\r\n            var clazz = d.hasOwnProperty(\"data\") && d.data ? d.data.clazz : (isVer ? \"vBarNode\" : \"hBarNode\");\r\n            var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n            nodeIns.render();\r\n            d.ins = nodeIns;\r\n            d.legendIns = nodeIns;\r\n            var key = self.bindKeyFn(d);\r\n            nodesInsMap[key] = nodeIns;\r\n        });\r\n            \r\n        self.renderPosition();\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Bar info: \"      +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    Bar.clazzName = \"Bar\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nBar.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    Bar.prototype = Object.create(BaseChart.prototype);\r\n    Bar.prototype.constructor = Bar;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Bar;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/bar.js\n// module id = 26\n// module chunks = 0","//坐标轴基类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _parent 坐标轴项所在容器对象\r\n * @param _data 坐标轴项数据\r\n */\r\nvar BaseAxis = function(_parent, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const HorAxis = ghca_charts.view.component.charts.horAxis;\r\n    const VerAxis = ghca_charts.view.component.charts.verAxis;\r\n    const SvgUtil = ghca_charts.view.util.svgUtil;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const CommonUtil = ghca_charts.view.util.commonUtil;\r\n\r\n    if(arguments.length < 2) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",应至少传入2个参数\");\r\n    }\r\n    \r\n    var self = this,\r\n        defaultPadding = 30,\r\n        defaultPaddingObj = {\r\n            left:defaultPadding, \r\n            top:defaultPadding, \r\n            right:defaultPadding, \r\n            bottom:defaultPadding\r\n        },\r\n        defaultTickArguments = [], \r\n        defaultTickValues = null, \r\n        defaultTickFormat = null, \r\n        defaultTickSize = 6, \r\n        defaultTickSizeInner = 6, \r\n        defaultTickSizeOuter = 6, \r\n        defaultTickPadding = 3,\r\n        defaultTick = {\r\n            tickArguments:defaultTickArguments, \r\n            tickValues:defaultTickValues, \r\n            tickFormat:defaultTickFormat, \r\n            tickSize:defaultTickSize, \r\n            tickSizeInner:defaultTickSizeInner, \r\n            tickSizeOuter:defaultTickSizeOuter, \r\n            tickPadding:defaultTickPadding,\r\n            show:true,\r\n            style:{stroke:\"#000\"}\r\n        },\r\n        defaultTickLabel = {style:{fontSize:12, fill:\"#000\"}},\r\n        defaultGridLine = {\r\n            tickLine:{show:false, style:{stroke:\"#ccc\", strokeWidth:1}},\r\n            innerLine:{show:false, gapNum:2, style:{stroke:\"#eee\", strokeWidth:1}}\r\n        },\r\n        defaultAxisLabel = {text:\"\", padding:5, style:{fontSize:12, fill:\"#000\", textAnchor:\"middle\"}};\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    //------------------------------\r\n    //  data\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴数据\r\n     */\r\n    var data = _data;\r\n    this.data = function(value) {\r\n        if (!arguments.length)\r\n            return data;\r\n        data = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  type\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴刻度类型 value|time|enum(默认值value)\r\n     */\r\n    var type = \"value\";\r\n    this.type = function(value) {\r\n        if (!arguments.length)\r\n            return type;\r\n        type = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  x\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴x坐标\r\n     */\r\n    var x = 0;\r\n    this.x = function(value) {\r\n        if (!arguments.length)\r\n            return x;\r\n        x = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  y\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴y坐标\r\n     */\r\n    var y = 0;\r\n    this.y = function(value) {\r\n        if (!arguments.length)\r\n            return y;\r\n        y = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  width\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴宽度\r\n     */\r\n    var width = 0;\r\n    this.width = function(value) {\r\n        if (!arguments.length)\r\n            return width;\r\n        width = value;\r\n        width=width<0?0:width;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  height\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴高度\r\n     */\r\n    var height = 0;\r\n    this.height = function(value) {\r\n        if (!arguments.length)\r\n            return height;\r\n        height = value;\r\n        height=height<0?0:height;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  position\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴位置 left|right|top|bottom(默认值\"\")\r\n     * \r\n     */\r\n    var position = \"\";\r\n    this.position = function(value) {\r\n        if (!arguments.length)\r\n            return position;\r\n        position = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  padding\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴距离边界的位置对象,默认值defaultPaddingObj)\r\n     * \r\n     */\r\n    var padding = defaultPaddingObj;\r\n    this.padding = function(value) {\r\n        if (!arguments.length)\r\n            return padding;\r\n        padding = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  tick\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴刻度配置对象(默认值defaultTick)\r\n     * \r\n     */\r\n    var tick = defaultTick;\r\n    this.tick = function(value) {\r\n        if (!arguments.length)\r\n            return tick;\r\n        tick = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  tickLabel\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴刻度标签配置对象(默认值defaultTickLabel)\r\n     * \r\n     */\r\n    var tickLabel = defaultTickLabel;\r\n    this.tickLabel = function(value) {\r\n        if (!arguments.length)\r\n            return tickLabel;\r\n        tickLabel = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  visible\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴是否可见，(默认值true)\r\n     */\r\n    var visible = true;\r\n    this.visible = function(value) {\r\n        if (!arguments.length) return visible;\r\n        visible = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  keyPath\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 针对下面key属性，设置该key所在对象路径，从图表数据本身开始，图表本身数据所在路径为xxx..series[n]，\r\n     * 要取topo的节点为坐标轴，则这里传\"nodes\",相当于xxx..series[n].nodes， \r\n     * 要取topo的连线为坐标轴，则这里传\"links\",,相当于xxx..series[n].links，\r\n     * 若不传，则下面的key就是var array = xxx..series[n];array[n].key(默认值\"\")\r\n     */\r\n    var keyPath = \"\";\r\n    this.keyPath = function(value) {\r\n        if (!arguments.length) return keyPath;\r\n        keyPath = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  key\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用来进行坐标轴项刻度值计算的键名称，比如\"level\"，(默认值name)\r\n     */\r\n    var key = \"name\";\r\n    this.key = function(value) {\r\n        if (!arguments.length) return key;\r\n        key = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  domain\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 刻度值范围\r\n     */\r\n    var domain = [0, 1];\r\n    this.domain = function(value) {\r\n        if (!arguments.length) return domain;\r\n        domain = StringUtil.parseArray(value);\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  interval\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 两个数据间隔值，只在type为非enum时有效\r\n     * 若type为time,则为时间间隔，单位秒；\r\n     * 若type为value,则为数值间隔；\r\n     */\r\n    var interval = NaN;\r\n    this.interval = function(value) {\r\n        if (!arguments.length) {\r\n            return isNaN(interval) ? 0 : interval;\r\n        }\r\n        interval = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  scaleIns\r\n    //------------------------------\r\n    \r\n    /**\r\n     * d3缩放比例实例,如d3.scaleTime()\r\n     */\r\n    var scaleIns = null;\r\n    this.scaleIns = function(value) {\r\n        if (!arguments.length) return scaleIns;\r\n        scaleIns = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  axisIns\r\n    //------------------------------\r\n    \r\n    /**\r\n     * d3坐标轴实例,如d3.axisTop()\r\n     */\r\n    var axisIns = null;\r\n    this.axisIns = function(value) {\r\n        if (!arguments.length) return axisIns;\r\n        axisIns = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  gridLine\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴网格配置数据\r\n     */\r\n    var gridLine = null;\r\n    this.gridLine = function(value) {\r\n        if (!arguments.length) return gridLine;\r\n        gridLine = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  axisLabel\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴说明标签配置数据\r\n     */\r\n    var axisLabel = null;\r\n    this.axisLabel = function(value) {\r\n        if (!arguments.length) return axisLabel;\r\n        axisLabel = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  parentChart\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 拥有该坐标轴的图表组件实例\r\n     */\r\n    var parentChart = null;\r\n    this.parentChart = function(value) {\r\n        if (!arguments.length) return parentChart;\r\n        parentChart = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isReverse\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴刻度是否倒置显示\r\n     */\r\n    var isReverse = false;\r\n    this.isReverse = function(value) {\r\n        if (!arguments.length) return isReverse;                \r\n        isReverse = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 刷新传入配置数据到相应坐标轴参数的方法\r\n     */\r\n    this.refreshData = function() {\r\n        var axis = self.data();\r\n        self.type(axis.hasOwnProperty(\"type\") ? axis.type : \"value\");\r\n        self.position(axis.hasOwnProperty(\"position\") ? axis.position : \"\");\r\n        self.visible(axis.hasOwnProperty(\"visible\") ? axis.visible : true);\r\n        self.keyPath(axis.hasOwnProperty(\"keyPath\") ? axis.keyPath : \"\");\r\n        self.interval(axis.hasOwnProperty(\"interval\") ? axis.interval : NaN);\r\n        self.isReverse(axis.hasOwnProperty(\"isReverse\") ? axis.isReverse : false);\r\n        \r\n        //parse key\r\n        if(axis.hasOwnProperty(\"key\") && ObjectUtil.isString(axis.key)) {\r\n            self.key(axis.key);\r\n        } else {\r\n            self.key(\"name\");\r\n        }\r\n        \r\n        //parse padding\r\n        var newPadding = {left:defaultPadding, top:defaultPadding, right:defaultPadding, bottom:defaultPadding};\r\n        if(axis.hasOwnProperty(\"padding\") && ObjectUtil.isObject(axis.padding)) {\r\n        \tvar padding = axis.padding;\r\n        \tfor(var k in newPadding) {\r\n                if(padding.hasOwnProperty(k))\r\n                    newPadding[k] = padding[k];\r\n            }\r\n        }\r\n        self.padding(newPadding);\r\n        \r\n        //parse tick\r\n        var newTick = {\r\n        \ttickArguments:defaultTickArguments, \r\n            tickValues:defaultTickValues, \r\n            tickFormat:defaultTickFormat, \r\n            tickSize:defaultTickSize, \r\n            tickSizeInner:defaultTickSizeInner, \r\n            tickSizeOuter:defaultTickSizeOuter, \r\n            tickPadding:defaultTickPadding,\r\n            show:true,\r\n            style:{stroke:\"#000\"}\r\n        };\r\n        if(axis.hasOwnProperty(\"tick\") && ObjectUtil.isObject(axis.tick)) {\r\n            newTick = CommonUtil.createConfig(defaultTick, axis.tick);\r\n            //tickArguments可识别字符串类型数组\r\n            var tickArguments = newTick.tickArguments;\r\n            if(ObjectUtil.isString(tickArguments)) {\r\n                if(newTick.tickArguments === \"\") {\r\n                    newTick.tickArguments = [];\r\n                } else {\r\n                    newTick.tickArguments = StringUtil.parseArray(tickArguments);\r\n                }\r\n            }\r\n            //tickValues可识别字符串类型数组\r\n            var tickValues = newTick.tickValues;\r\n            if(ObjectUtil.isString(tickValues)) {\r\n            \tif(newTick.tickValues === \"\") {\r\n                    newTick.tickValues = null;\r\n                } else {\r\n                \tnewTick.tickValues = StringUtil.parseArray(tickValues);\r\n                }\r\n            }\r\n            //tickFormat可识别字符串类型js代码,字符串里面的引号必须为单引号，比如\"d3.timeFormat('%Y-%m-%d %H:%M:%S')(d)\"\r\n            var tickFormat = newTick.tickFormat;\r\n            if(ObjectUtil.isString(tickFormat)) {\r\n            \tif(tickFormat === \"\") {\r\n                    newTick.tickFormat = null;\r\n                } else {\r\n                \tnewTick.tickFormat = function(d) {\r\n                \t\ttry {\r\n                            return eval(tickFormat);\r\n                \t\t} catch(e) {\r\n                            return tickFormat;\r\n                \t\t}\r\n                \t};\r\n                }\r\n            }\r\n        }\r\n        self.tick(newTick);\r\n        \r\n        //parse tickLabel\r\n        var newTickLabel = defaultTickLabel;\r\n        if(axis.hasOwnProperty(\"tickLabel\") && ObjectUtil.isObject(axis.tickLabel)) {\r\n            newTickLabel = CommonUtil.createConfig(defaultTickLabel, axis.tickLabel);\r\n        }\r\n        self.tickLabel(newTickLabel);\r\n        \r\n        //parse domain\r\n        if(axis.hasOwnProperty(\"domain\") && ObjectUtil.isArray(axis.domain)) {\r\n        \tvar domain = axis.domain;\r\n        \tif(self.type() === \"time\") {\r\n                //时间类型且有时间间隔参数，则最大值再加上一个间隔数值\r\n                if(self.interval() !== 0) {\r\n                \tvar lastIndex = domain.length - 1;\r\n                \tif(domain[lastIndex]) {\r\n                \t\tvar time = domain[lastIndex].getTime();\r\n                        domain[lastIndex] = new Date(time + self.interval() * 1000);\r\n                \t}\r\n                }\r\n            }\r\n            self.domain(axis.domain);\r\n        } else {\r\n        \tself.domain([0, 1]);\r\n        }\r\n        \r\n        //parse gridLine\r\n        var newGridLine = defaultGridLine;\r\n        if(axis.hasOwnProperty(\"gridLine\") && ObjectUtil.isObject(axis.gridLine)) {\r\n            var gridLine = axis.gridLine,\r\n                tickLine = gridLine.tickLine,\r\n                innerLine = gridLine.innerLine;\r\n            if(tickLine) {\r\n                newGridLine.tickLine = CommonUtil.createConfig(defaultGridLine.tickLine, gridLine.tickLine);\r\n            }\r\n            if(innerLine) {\r\n                newGridLine.innerLine = CommonUtil.createConfig(defaultGridLine.innerLine, gridLine.innerLine);\r\n            }\r\n        }\r\n        self.gridLine(newGridLine);\r\n        \r\n        //parse axisLabel\r\n        var newAxisLabel = defaultAxisLabel;\r\n        if(axis.hasOwnProperty(\"label\") && ObjectUtil.isObject(axis.label)) {\r\n        \tif(self instanceof HorAxis) {\r\n        \t\tnewAxisLabel.pos = \"right\";\r\n        \t} else {\r\n        \t\tnewAxisLabel.pos = \"top\";\r\n        \t}\r\n            if(axis.label) {\r\n            \tnewAxisLabel = CommonUtil.createConfig(defaultAxisLabel, axis.label);\r\n            }\r\n        }\r\n        self.axisLabel(newAxisLabel);\r\n    };\r\n    \r\n    this.update = function() {\r\n    \tself.refreshData();\r\n    \tself.renderChildren();\r\n    };\r\n    \r\n    /**\r\n     * 渲染方法\r\n     */\r\n    this.render = function() {\r\n    \tself.refreshData();\r\n    \tself.renderChildren();\r\n    };\r\n    \r\n    this.renderChildren = function() {\r\n    \t//渲染坐标轴\r\n        self.renderAxis();\r\n        //设置刻度对应轴线样式\r\n        self.setTickPathStyle();\r\n        //设置刻度对应标签样式\r\n        self.setTickLabelStyle();\r\n        //渲染坐标轴说明标签\r\n        self.renderAxisLabel();\r\n    };\r\n    \r\n    /**\r\n     * 渲染坐标轴\r\n     */\r\n    this.renderAxis = function() {\r\n    \t\r\n    };\r\n    \r\n    /**\r\n     * 渲染坐标轴说明标签\r\n     */\r\n    this.renderAxisLabel = function() {\r\n        \r\n    };\r\n    \r\n    /**\r\n     * 渲染网格\r\n     * @rect 网格区域矩形\r\n     */\r\n    this.renderGridLine = function(rect) {\r\n    \tif(!self.gridLine().tickLine.show && !self.gridLine().innerLine.show) {\r\n    \t\treturn;\r\n    \t}\r\n    \t\r\n    \t//render grid line container\r\n        if(!self.gridLineContainer) {\r\n            self.gridLineContainer = self.axisContainer\r\n                .insert(\"g\", \":first-child\")\r\n                .attr(\"class\", \"gridLine-container\");\r\n        }\r\n        SvgUtil.removeAllChildren(self.gridLineContainer.node());\r\n        \r\n        //render tick line\r\n        if(self.gridLine().tickLine.show) {\r\n        \tself.renderTickLine(rect);\r\n        \tself.setTickLineStyle();\r\n        }\r\n        \r\n        //render inner line\r\n        if(self.gridLine().innerLine.show) {\r\n            self.renderInnerLine(rect);\r\n            self.setInnerLineStyle(rect);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染刻度对应网格\r\n     * @rect 网格区域矩形\r\n     */\r\n    this.renderTickLine = function(rect) {\r\n    \t\r\n    };\r\n    \r\n    /**\r\n     * 渲染刻度间对应网格\r\n     * @rect 网格区域矩形\r\n     */\r\n    this.renderInnerLine = function(rect) {\r\n        \r\n    };\r\n    \r\n    /**\r\n\t * 设置刻度对应标签样式\r\n\t */\r\n    this.setTickLabelStyle = function() {\r\n    \tvar group = self.axisContainer.selectAll(\"g.tick text\");\r\n    \tvar style = self.tickLabel().style;\r\n    \tif(style) {\r\n    \t\tvar fontSize = style.fontSize;\r\n            if(!fontSize) {\r\n                fontSize = defaultTickLabel.style.fontSize;\r\n            }\r\n            var maxWidth = style.maxWidth;\r\n            var textLine = style.hasOwnProperty(\"textLine\") ? style.textLine : 1;\r\n            if(!isNaN(maxWidth)) {\r\n            \tif(maxWidth < 0) {\r\n            \t\tmaxWidth = 0;\r\n            \t}\r\n            \tgroup.each(function(d){\r\n                    var text = d3.select(this);\r\n                    var content = text.text();\r\n                    var textX = text.attr(\"x\");\r\n                    textX === null && (textX = 0);\r\n                    texts = StringUtil.splitByLine(content, maxWidth, fontSize, textLine);\r\n                    text.text(\"\");\r\n                    text.selectAll(\"tspan\")\r\n                        .data(texts)\r\n                        .enter()\r\n                        .append(\"tspan\")\r\n                        .attr(\"x\", textX)\r\n                        .attr(\"dy\", function(d, i) {\r\n                        \treturn self instanceof HorAxis ? \r\n                        \t\t\t\"1em\" : \r\n                    \t\t\t\ti === 0 ? ((1 - 0.5 * texts.length) + \"em\") : \"1em\";\r\n                        })\r\n                        .text(function(d) {\r\n                            return d;\r\n                        });\r\n                    text.append(\"title\").text(content);\r\n                });\r\n            }\r\n            CommonUtil.setGroupStyle(group, style);\r\n    \t}\r\n    \tCommonUtil.setGroupAttr(group, self.tickLabel().attr);\r\n    };\r\n    \r\n    /**\r\n     * 设置刻度对应轴线样式\r\n     */\r\n    this.setTickPathStyle = function() {\r\n    \tvar tick = self.tick();\r\n        var group1 = self.axisContainer.selectAll(\"g.tick line\");\r\n        group1.style(\"visibility\", self.visible() === false || tick.show === false ? \"hidden\" : \"visible\");\r\n        CommonUtil.setGroupStyle(group1, tick.style);\r\n        CommonUtil.setGroupAttr(group1, tick.attr);\r\n        \r\n        var group2 = self.axisContainer.selectAll(\"path.domain\");\r\n        group2.style(\"visibility\", self.visible() === false || tick.show === false ? \"hidden\" : \"visible\");\r\n        CommonUtil.setGroupStyle(group2, tick.style);\r\n        CommonUtil.setGroupAttr(group2, tick.attr);\r\n    };\r\n    \r\n    /**\r\n     * 设置刻度对应的网格样式\r\n     */\r\n    this.setTickLineStyle = function() {\r\n    \tvar group = self.axisContainer.selectAll(\"g.gridLine-container line.tickLine\");\r\n    \tCommonUtil.setGroupStyle(group, self.gridLine().tickLine.style);\r\n    \tCommonUtil.setGroupAttr(group, self.gridLine().tickLine.attr);\r\n    };\r\n    \r\n    /**\r\n     * 设置刻度间对应的网格样式\r\n     */\r\n    this.setInnerLineStyle = function() {\r\n    \tvar group = self.axisContainer.selectAll(\"g.gridLine-container line.innerLine\");\r\n        CommonUtil.setGroupStyle(group, self.gridLine().innerLine.style);\r\n        CommonUtil.setGroupAttr(group, self.gridLine().innerLine.attr);\r\n    };\r\n    \r\n    /**\r\n     * 设置坐标轴说明标签样式\r\n     */\r\n    this.setAxisLabelStyle = function() {\r\n    \tvar group = self.axisContainer.selectAll(\"text.axisLabel\");\r\n        CommonUtil.setGroupStyle(group, self.axisLabel().style);\r\n        CommonUtil.setGroupAttr(group, self.axisLabel().attr);\r\n    };\r\n    \r\n    /**\r\n     * 获取刻度坐标数据数组，该数组按升序排序。\r\n     * 若为水平坐标轴，则格式为[x1,...,xn]；若为垂直坐标轴，则格式为[y1,...,yn]\r\n     */\r\n    this.getTicksPos = function() {\r\n    \t\r\n    };\r\n    \r\n    /**\r\n     * 获取刻度标签字符串数据数组\r\n     */\r\n    this.getTicksText = function() {\r\n    \tvar result = [];\r\n    \tvar texts = self.axisContainer.selectAll(\"g.tick text title\");\r\n    \tif(texts.nodes().length === 0) {\r\n    \t\ttexts = self.axisContainer.selectAll(\"g.tick text\");\r\n    \t}\r\n    \ttexts.each(function() {\r\n    \t\tvar text = d3.select(this).text();\r\n    \t\tresult.push(text);\r\n    \t});\r\n    \treturn result;\r\n    }\r\n    \r\n    this.toString = function() {\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n    \t//获取渲染容器实例\r\n        if (typeof(_parent) === 'string') {\r\n            _parent = document.getElementById(_parent);\r\n        }\r\n        if (!_parent) {\r\n            throw new Error('BaseAxis构造方法中传入的容器_parent:' + _parent + \"无法找到。\");\r\n        }\r\n        self.parent = _parent;\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nBaseAxis.struct = function(ghca_charts) {\r\n    BaseAxis.prototype.constructor = BaseAxis;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = BaseAxis;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/baseAxis.js\n// module id = 27\n// module chunks = 0","/**\r\n * 图表基类，所有的图表series元素类都必须继承该基类，一个图表组件组成结构为\r\n *          |---继承自baseChart类的series元素(所有的位置变换都是对该元素进行操作)\r\n * chart--- |---legend\r\n *          |---axis\r\n */\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data 图表配置数据\r\n * @param _layout 图表布局对象，不传就为默认布局\r\n */\r\nvar BaseChart = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Layout = ghca_charts.layout.layout;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const TopoLayout = ghca_charts.layout.topoLayout;\r\n    const TreeLayout = ghca_charts.layout.treelayout;\r\n    const SankeyLayout = ghca_charts.layout.sankeyLayout;\r\n    const SunburstLayout = ghca_charts.layout.sunburstLayout;\r\n    const PackLayout = ghca_charts.layout.packLayout;\r\n    const PieLayout = ghca_charts.layout.pieLayout;\r\n    const ScatterLayout = ghca_charts.layout.scatterLayout;\r\n    const BarLayout = ghca_charts.layout.barLayout;\r\n    const TreemapLayout = ghca_charts.layout.treemapLayout;\r\n    const CalendarLayout = ghca_charts.layout.calendarLayout;\r\n    const ProgressBarLayout = ghca_charts.layout.progressBarLayout;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const BaseEvent =  ghca_charts.events.BaseEvent;\r\n\r\n\tBaseComponent.apply(this, arguments);\r\n\t\r\n    var self = this, \r\n        canDragContent = false,\r\n        superInit = self.init,\r\n        superResize = self.resize,\r\n        superRenderBackground = self.renderBackground,\r\n        superRenderChildren = self.renderChildren,\r\n        superAddListeners = self.addListeners;\r\n\r\n    self.className(\"seriesChart\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"key\", \"keyPath\", \"dragable\", \"diffKey\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  visibleItems\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该图表可见项数据\r\n     */\r\n    var visibleItems = [];\r\n    this.visibleItems = function(value) {\r\n        if (!arguments.length) \r\n            return visibleItems;\r\n        visibleItems = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  horAxis\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该图表(series chart)对应的水平坐标轴，一个图表(series chart)只能对应一个水平坐标轴\r\n     */\r\n    var horAxis = null;\r\n    this.horAxis = function(value) {\r\n        if (!arguments.length) \r\n            return horAxis;\r\n        horAxis = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  verrAxis\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该图表(series chart)对应的垂直坐标轴，一个图表(series chart)只能对应一个垂直坐标轴\r\n     */\r\n    var verAxis = null;\r\n    this.verAxis = function(value) {\r\n        if (!arguments.length) \r\n            return verAxis;\r\n        verAxis = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  keyPath\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 针对下面key属性，设置该key所在对象路径，从图表数据本身开始，图表本身数据所在路径为xxx..series[n]，\r\n     * 要取topo的节点为图例，则这里传\"nodes\",相当于xxx..series[n].nodes， \r\n     * 要取topo的连线为图例，则这里传\"links\",,相当于xxx..series[n].links，\r\n     * 若不传，则下面的key就是var array = xxx..series[n];array[n].key(默认值\"\")\r\n     */\r\n    var keyPath = \"\";\r\n    this.keyPath = function(value) {\r\n        if (!arguments.length) \r\n            return keyPath;\r\n        keyPath = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  key\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用来进行图表数据所在键值对的键名称，比如\"{values:[data]}\"中的values，(默认值\"\")，\r\n     * 若不传，则keyPath属性无效，且使用图表数据固定的key值，比如topo数据用nodes和links\r\n     */\r\n    var key = \"\";\r\n    this.key = function(value) {\r\n        if (!arguments.length) \r\n            return key;\r\n        key = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  itemRenderer\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 渲染器键值名称，对应renderers中的键值，若没有设置，则从renderers中随机选择一个作为渲染器\r\n     */\r\n    var itemRenderer = \"\";\r\n    this.itemRenderer = function(value) {\r\n        if (!arguments.length) \r\n            return itemRenderer;\r\n        itemRenderer = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  dragable\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图表整体内容是否可以通过拖动鼠标移动(默认值true)\r\n     */\r\n    var dragable = true;\r\n    this.dragable = function(value) {\r\n        if (!arguments.length) \r\n            return dragable;\r\n        dragable = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  seriesIndex\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 本图表在series chart中的索引值(默认值-1)\r\n     */\r\n    var seriesIndex = -1;\r\n    this.seriesIndex = function(value) {\r\n        if (!arguments.length) \r\n            return seriesIndex;\r\n        seriesIndex = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  seriesData\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 本series chart所在chart的series数据\r\n     */\r\n    var seriesData = null;\r\n    this.seriesData = function(value) {\r\n        if (!arguments.length) \r\n            return seriesData;\r\n        seriesData = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  diffKey\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 数据差异变化判断依据的属性key\r\n     */\r\n    var diffKey = null;\r\n    this.diffKey = function(value) {\r\n        if (!arguments.length) \r\n            return diffKey;\r\n        diffKey = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 图表内容开始拖动平移监听处理方法\r\n     */\r\n    this.chartDragStartHandler = function() {\r\n    \t//若鼠标点击到图例项上，则不允许拖动内容\r\n    \tcanDragContent = !isLegendItemClick();\r\n    \tif(!canDragContent) {\r\n    \t\t//抛出图例项鼠标点击事件，若不抛出，则点击事件被chart drag事件覆盖，无法收到点击图例项监听\r\n            var evt = EventUtil.createEvent(\"click.legendItem\", {bubbles:true, cancelable:true});\r\n            event.target.parentNode && event.target.parentNode.dispatchEvent(evt);\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 图表内容拖动平移进行中监听处理方法\r\n     */\r\n    this.chartDragHandler = function() {\r\n    \tif(!canDragContent || !self.dragable()) {\r\n            return;\r\n        }\r\n    \tvar x = self.x(), y = self.y();\r\n        self.x(x+d3.event.dx);\r\n        self.y(y+d3.event.dy);\r\n        self.renderTransform();\r\n    };\r\n    \r\n    /**\r\n     * 整个图表缩放的监听相关处理方法，鼠标滚轮触发\r\n     */\r\n    this.zoomHandler = function() {\r\n    \tvar scaleType = self.scaleType();\r\n    \t//判断是否开启缩放功能\r\n    \tif(scaleType === Const.NO_SCALE_TYPE) {\r\n    \t\treturn;\r\n    \t}\r\n    \t//判断是否是对布局关系的缩放\r\n        var isLayoutZoom = self.scaleType() !== Const.COMPONENT_SCALE_TYPE;\r\n        if(isLayoutZoom) {\r\n        \tif(self.layout()) {\r\n        \t\tself.layout().zoom(d3.event.deltaY > 0);\r\n        \t}\r\n        } else {\r\n        \tself.zoom(d3.event.deltaY > 0);\r\n        }\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        self.model = self.layout().model();\r\n        self.lastX = 0,    //上次鼠标点击的x坐标值\r\n        self.lastY = 0;    //上次鼠标点击的y坐标值\r\n    };\r\n    \r\n    /**\r\n     * 初始化布局内容\r\n     * @param defaultLayout 默认布局类构造器\r\n     */\r\n    this.initLayout = function() {\r\n        //若构造方法没有传入layout实例，则根据传入data信息设置布局，若data中不包括布局信息，则使用默认布局\r\n        if(!self.layout()) {\r\n            var layoutData = self.data().layout;\r\n            if(layoutData) {\r\n            \t//检查外部注册的布局类\r\n            \tvar outerPlugins = ghca_charts.global.outerPlugins;\r\n                var LayoutClass = outerPlugins && outerPlugins.layoutMap && outerPlugins.layoutMap[layoutData.type];\r\n                if(LayoutClass) {\r\n                    self.layout(new LayoutClass(self, layoutData));\r\n                } else {\r\n                \t//若没有查到则检查内部布局类\r\n                \tswitch(layoutData.type.toLowerCase()) {\r\n                        case \"topolayout\":\r\n                            self.layout(new TopoLayout(self, layoutData));\r\n                            break;\r\n                        case \"treelayout\":\r\n                            self.layout(new TreeLayout(self, layoutData));\r\n                            break;\r\n                        case \"sankeylayout\":\r\n                            self.layout(new SankeyLayout(self, layoutData));\r\n                            break;\r\n                        case \"pielayout\":\r\n                            self.layout(new PieLayout(self, layoutData));\r\n                            break;\r\n                        case \"sunburstlayout\":\r\n                            self.layout(new SunburstLayout(self, layoutData));\r\n                            break;\r\n                        case \"packlayout\":\r\n                            self.layout(new PackLayout(self, layoutData));\r\n                            break;\r\n                        case \"scatterlayout\":\r\n                            self.layout(new ScatterLayout(self, layoutData));\r\n                            break;\r\n                         case \"barlayout\":\r\n                            self.layout(new BarLayout(self, layoutData));\r\n                            break;\r\n                        case \"treemaplayout\":\r\n                            self.layout(new TreemapLayout(self, layoutData));\r\n                            break;\r\n                        case \"calendarlayout\":\r\n                            self.layout(new CalendarLayout(self, layoutData));\r\n                            break;\r\n                        case \"progressbarlayout\":\r\n                            self.layout(new ProgressBarLayout(self, layoutData));\r\n                            break;\r\n                        default:\r\n                            self.layout(new Layout(self, layoutData));\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n    \tsuperAddListeners();\r\n    \t\r\n    \t//本组件所在的chart是否是某组件的渲染器，若是则不添加缩放和图表类容拖动监听\r\n    \tif(!self.parent() || self.parent().isRenderer()) {\r\n    \t\treturn;\r\n    \t}\r\n        self.parent().mainContainer().node().addEventListener(BaseEvent.EAGLE_EYE_DRAG,function(e){\r\n            var detail = e.detail;\r\n            self.x(detail.x);\r\n            self.y(detail.y);\r\n        });\r\n        //添加缩放监听\r\n        self.parent().mainContainer().on(\"wheel\", self.zoomHandler);\r\n        \r\n        //添加图表内容拖动平移监听\r\n        self.addDragListeners();\r\n    };\r\n    \r\n    this.addDragListeners = function() {\r\n    \tself.parent().mainContainer().call(d3.drag()\r\n            .on(\"start\", self.chartDragStartHandler)\r\n            .on(\"drag\", self.chartDragHandler)\r\n        );\r\n    };\r\n    \r\n    this.removeDragListeners = function() {\r\n        self.parent().mainContainer().on(\"mousedown.drag\", null);\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表组件相对于父容器的位置 \r\n     */\r\n    this.renderPosition = function() {\r\n    \tself.renderTransform();\r\n    };\r\n    \r\n//    /**\r\n//     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n//     */\r\n//    this.update = function() {\r\n//    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n    this.refreshData = function() {\r\n    \tvar data = self.data();\r\n    \tif(!data) {\r\n    \t\treturn;\r\n    \t}\r\n    \t//从配置读取指定的属性值\r\n    \tvar attrs = self.attributes();\r\n    \tif(attrs) {\r\n           for(var key, i = 0, len = attrs.length; i < len; i++) {\r\n           \t    key = attrs[i];\r\n                if(self.hasOwnProperty(key) && data.hasOwnProperty(key)) {\r\n                    self[key](data[key]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    //override\r\n    this.renderBackground = function() {\r\n    \tsuperRenderBackground();\r\n    \tif(self.bgRect) {\r\n    \t\tself.bgRect.attr(\"pointer-events\", \"none\");\r\n    \t}\r\n    };\r\n    \r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        //初始化图表包含的各个层级\r\n        self.initAllContainers();\r\n        //刷新数据内容，生成需要的属性\r\n        self.refreshData();\r\n        //根据当前数据重新布局并且渲染内容\r\n        self.update();\r\n    };\r\n    \r\n    this.resize = function() {\r\n        superResize();\r\n        \r\n        self.update(true, true);\r\n    };\r\n    \r\n    /**\r\n     * 刷新某个节点或连线渲染器的配置数据，并放入d.data中\r\n     * @param d 节点或连线数据\r\n     * @param colorPropertyName 节点或连线控制渲染颜色的属性名称字符串\r\n     * @param rendererName 渲染器名称键值，默认\"renderer\"\r\n     * @return 返回渲染器的配置数据\r\n     */\r\n    this.getRendererConfig = function(d, colorPropertyName, rendererName) {\r\n        if(!d) {\r\n            return null;\r\n        }\r\n        //只有渲染器是组件且已经有渲染数据的情况下不克隆，若克隆则会把已有渲染器的data数据清除掉，导致无法正常渲染；\r\n        //若其他普通渲染器必须克隆，否则会导致update时不会更新renderer数据\r\n        if(d.data && d.data.type && d.data.type === \"chart\" && d.data.series) {\r\n        \treturn d.data;\r\n        }\r\n        var rendererConfig = null;\r\n        var rendererName = rendererName ? rendererName : \"renderer\";\r\n        //获取节点渲染器配置，并根据legend组件分配的颜色设置节点填充颜色\r\n        if(d[rendererName]) {\r\n            rendererConfig = self.data().renderers[d[rendererName]];\r\n            if(!rendererConfig) {\r\n            \treturn null;\r\n            }\r\n        \trendererConfig = ObjectUtil.cloneObj(rendererConfig);\r\n            //若已分配了图例颜色，则使用该图例颜色渲染\r\n            if(d.legendColor) {\r\n                if(rendererConfig.useProperties) {\r\n                    rendererConfig.useProperties[colorPropertyName] = d.legendColor;\r\n                } else {\r\n                    var useProperties = {};\r\n                    useProperties[colorPropertyName] = d.legendColor;\r\n                    rendererConfig.useProperties = useProperties;\r\n                }\r\n            }\r\n        }\r\n        d.data = rendererConfig;\r\n        return rendererConfig;\r\n    };\r\n    \r\n    /**\r\n     * 用于绑定数据区别是否变更的属性内容获取方式回调，用于selectAll(\"\").data(data, bindKeyFn);\r\n     */\r\n    this.bindKeyFn = function(d) {\r\n    \tvar diffKey = self.diffKey();\r\n    \treturn (diffKey && d[diffKey]) ? d[diffKey] : d.bindKey;\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"BaseChart info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 判断当前鼠标点击的是否是图例项\r\n     */\r\n    var isLegendItemClick = function() {\r\n    \tvar e = (arguments.length > 0 && arguments[0]) || window.event || d3.event;\r\n        var target = e.target;\r\n        return target && target.parentNode \r\n               && target.parentNode.getAttribute\r\n               && target.parentNode.getAttribute(\"class\") === \"legendItem\";\r\n    };\r\n    \r\n    BaseChart.clazzName = \"BaseChart\";\r\n};\r\n\r\nBaseChart.struct = function(ghca_charts) {\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tBaseComponent.struct(ghca_charts);\r\n    BaseChart.prototype = Object.create(BaseComponent.prototype);\r\n    BaseChart.prototype.constructor = BaseChart;\r\n};\r\n\r\nmodule.exports = BaseChart;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/baseChart.js\n// module id = 28\n// module chunks = 0","// 业务拓扑图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 拓扑图配置数据\r\n * @param _layout 拓扑图布局对象，不传就为默认布局\r\n */\r\nvar BizTopology = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const TopoLayout = ghca_charts.layout.topoLayout;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const DataParser = ghca_charts.view.util.dataParser;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const Node = ghca_charts.view.elements.plugins.nodes.node;\r\n    const GroupNode = ghca_charts.view.elements.plugins.nodes.groupNode;\r\n    const math = ghca_charts.view.util.math;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const MouseUtil = ghca_charts.view.util.mouseUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        superSetData = self.setData,\r\n        isValidateMode = false;\r\n\r\n    self.className(\"seriesTopo\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"showLevel\", \"mode\", \"focusEffect\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // showLevel\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 设置节点显示层级，默认全部节点都显示\r\n     * (暂时没有实现)\r\n     */\r\n    var showLevel = BizTopology.SHOW_ALL_LEVEL_NODES;\r\n    this.showLevel = function(value) {\r\n        if (!arguments.length)\r\n            return showLevel;\r\n        showLevel = value;\r\n        if(_data) {\r\n            _data.showLevel = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // mode\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 组件模式，normal|edit，默认为普通模式\r\n     */\r\n    var mode = \"normal\";\r\n    this.mode = function(value) {\r\n        if (!arguments.length)\r\n            return mode;\r\n        if(mode !== value) {\r\n            isValidateMode = true;\r\n        }\r\n        mode = value;\r\n        if(_data) {\r\n            _data.mode = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // focusEffect\r\n    // ------------------------------\r\n        \r\n    /**\r\n     * 鼠标单击节点时，是否显示凸显效果(默认值true)\r\n     */\r\n    var focusEffect = true;\r\n    this.focusEffect = function(value) {\r\n        if (!arguments.length) return focusEffect;\r\n        focusEffect = value;\r\n        if(_data) {\r\n            _data.focusEffect = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // isEditMode\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 组件是否处于编辑模式，默认为否\r\n     */\r\n    this.isEditMode = function() {\r\n        return mode === \"edit\";\r\n    };\r\n    \r\n    // ------------------------------\r\n    // selectedItems\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前选中的项数据对象数组\r\n     */\r\n    var selectedNodeItems = [];\r\n    this.selectedNodeItems = function(value) {\r\n        if (!arguments.length)\r\n            return selectedNodeItems;\r\n        selectedNodeItems = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * 当前选中的项数据对象数组\r\n     */\r\n    var selectedLinkItems = [];\r\n    this.selectedLinkItems = function(value) {\r\n        if (!arguments.length)\r\n            return selectedLinkItems;\r\n        selectedLinkItems = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * 当前选中的项数据对象数组\r\n     */\r\n    var selectedGroupItems = [];\r\n    this.selectedGroupItems = function(value) {\r\n        if (!arguments.length)\r\n            return selectedGroupItems;\r\n        selectedGroupItems = value;\r\n        return this;\r\n    };\r\n\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var autoGroupKeys;\r\n\r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        self.layout().init();\r\n        self.nodes = self.layout().nodes();\r\n        self.links = self.layout().links();\r\n\r\n        self.groups = [];\r\n        self.nodesIns = [];\r\n        self.linksIns = [];\r\n        self.groupsIns = [];\r\n        autoGroupKeys=self.data().renderers.groupNode&&self.data().renderers.groupNode.autoGroupKeys&&self.data().renderers.groupNode.autoGroupKeys.split(\",\");//以逗号为分割的属性名，属性值相同的就是一个组     \r\n        autoGroupKeys=autoGroupKeys?autoGroupKeys:\"\";\r\n        //添加初始化数据中的所有节点和连线和节点分组内容\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n        self.addGroups(self.data().groups);\r\n        self.addAutoGroupNodes(self.data().nodes);\r\n        \r\n        self.visibleItems(self.nodes);\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        \r\n        //放置所有连线节点组背景的g元素\r\n        var groupsContainer = new BaseComponent();\r\n        groupsContainer.className(\"topo-groupsContainer\");\r\n        self.addChild(groupsContainer);\r\n        groupsContainer.mainContainer().attr(\"pointer-events\", \"none\");\r\n        self.groupsContainer = groupsContainer;\r\n        \r\n        //放置所有连线的g元素\r\n        var linksContainer = new BaseComponent();\r\n        linksContainer.className(\"topo-linksContainer\");\r\n        self.addChild(linksContainer);\r\n        self.linksContainer = linksContainer;\r\n        \r\n        //放置所有节点的g元素\r\n        var nodesContainer = new BaseComponent();\r\n        nodesContainer.className(\"topo-nodesContainer\");\r\n        self.addChild(nodesContainer);\r\n        self.nodesContainer = nodesContainer;\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n        //若点不固定，则添加实时刷新数据监听\r\n\r\n        self.model.on(\"tick\", self.tickHandler);\r\n        self.model.on(\"end\", self.tickEndHandler);\r\n\r\n        self.addEventListener(BaseEvent.MODE_CHANGE, modeChangeHandler);\r\n        //self.addEventListener(BaseEvent.EV_EVENT_OPEN_EDIT, openEditHandler);\r\n        self.addEventListener(BaseEvent.SEARCH_TEXT, searchTextHandler);\r\n        self.addEventListener(BaseEvent.TOPO_NODE_FOCUS_IN, topoNodeFocusInHandler);\r\n        \r\n        self.mainContainer().node().addEventListener(BaseEvent.EAGLE_EYE_DRAG, function(e) {\r\n            event.stopImmediatePropagation();\r\n            var detail = e.detail;\r\n            self.x(detail.x);\r\n            self.y(detail.y);\r\n            self.renderTransform();\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n        superRefreshData();\r\n        var  data = self.data(),\r\n             nodes = data.nodes,\r\n             level = self.showLevel();\r\n        \r\n        //根据showLevel设置每一个节点是否可见，以及是否展开\r\n        for(var node, nodeLevel, nodeEnabledExpand, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            if(node.hasOwnProperty(\"visible\")) {\r\n                continue;\r\n            }\r\n            nodeLevel = node.level === undefined ? 0 : node.level;  \r\n            nodeEnabledExpand = node.enabledExpand === undefined ? false : node.enabledExpand;  \r\n            if(nodeLevel < level) {\r\n                node.visible = true;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = true;\r\n                }\r\n            } else if(nodeLevel == level) {\r\n                node.visible = true;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = false;\r\n                }\r\n            } else {\r\n                node.visible = false;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = false;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n        \r\n        var nodesIns = self.nodesIns;\r\n        for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().each(function(d) {\r\n               nodeIns.x(Math.round(d.x));\r\n               nodeIns.y(Math.round(d.y));\r\n               nodeIns.renderTransform();\r\n            });\r\n        }\r\n        \r\n        var linksIns = self.linksIns;\r\n        for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n            linkIns = linksIns[i];\r\n            if(linkIns.normalChild()){\r\n                linkIns.normalChild().update();\r\n            } else {\r\n                linkIns.render();\r\n            }\r\n        }\r\n        \r\n        //刷新所有节点组path数据\r\n        refreshGroupsData();\r\n        var groupsIns = self.groupsIns;\r\n        for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n            groupIns = groupsIns[i];\r\n            if(groupIns.normalChild()){\r\n                groupIns.normalChild().update();\r\n            } else {\r\n                groupIns.render();\r\n            }\r\n        }\r\n\r\n        //触发鹰眼变更\r\n        self.sendMsgToEye(fireContentChange, 1000);\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n        self.refreshData();\r\n        //只用当前可见的项作为渲染数据源\r\n        self.visibleItems(self.filterArrayByElementProperty(self.nodes, \"visible\", true));\r\n        \r\n        //计算布局\r\n        self.layout().update();\r\n        \r\n        /*这里先清除所有的连线和节点元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n                                    但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n        var linksContainer = self.linksContainer;\r\n        linksContainer.removeAllChildren();\r\n        self.linksIns.length = 0;\r\n        var nodesContainer = self.nodesContainer;\r\n        nodesContainer.removeAllChildren();\r\n        self.nodesIns.length = 0;\r\n        var groupsContainer = self.groupsContainer;\r\n        groupsContainer.removeAllChildren();\r\n        self.groupsIns.length = 0;\r\n        \r\n        //只用当前可见的节点作为渲染数据源\r\n        var nodesData = self.visibleItems();\r\n        //若节点渲染器是一个组件，则重新设置一些配置数据\r\n        for(var i = 0, len = nodesData.length; i < len; i++) {\r\n            var nodeData = nodesData[i];\r\n            var rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n            if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n                var chartData, series = rendererConfig.series;\r\n                for(var j = 0, len1 = series.length; j < len1; j++) {\r\n                    chartData = series[j];\r\n                    //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n                    chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n                    chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n                    //pie的位置特殊处理\r\n                    if(chartData.type === \"pie\") {\r\n                        rendererConfig.x = -chartData.width / 2;\r\n                        rendererConfig.y = -chartData.height / 2;\r\n                    }\r\n                    //组装图表数据\r\n                    DataParser.createChartData(chartData, nodeData);\r\n                }\r\n            }\r\n        }\r\n        //渲染节点内容\r\n        var nodesIns = ClassFactory.newRenderersInstanceByData(nodesContainer, self, \"nodeContainer\", nodesData);\r\n        if(nodesIns) {\r\n            for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n                nodeIns = nodesIns[i];\r\n                //添加子节点收放按钮点击监听，可控制节点的展开,合拢\r\n                nodeIns.addEventListener(\"expandTool_collapsed\", expandToolClickHandler);\r\n                //添加节点单击监听，点击节点自动居中，显示子级节点，淡化其他节点\r\n                nodeIns.addEventListener(\"click\", nodeClickHandler);              \r\n                self.nodesIns.push(nodeIns);\r\n                //添加节点拖拽监听\r\n                nodeIns.mainContainer().call(d3.drag()\r\n                    .on(\"start\", self.node_dragStartHandler)\r\n                    .on(\"drag\", self.node_dragHandler)\r\n                    .on(\"end\", self.node_dragEndHandler));\r\n            }\r\n        }\r\n        //只用当前可见的连线作为渲染数据源\r\n        var linksData = self.getVisibleLinks(self.links);\r\n        //渲染连线内容   \r\n        var linksIns = ClassFactory.newRenderersInstanceByData(linksContainer, self, \"linkContainer\", linksData, false, \"stroke\");\r\n        if(linksIns) {\r\n            for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n                linkIns = linksIns[i];\r\n                self.linksIns.push(linkIns);\r\n            }\r\n        }\r\n        \r\n        //用当前可见的点渲染节点组\r\n        resetAutoGroups();\r\n        var groupsData = self.groups;\r\n        //刷新所有节点组path数据\r\n        refreshGroupsData();\r\n        var groupsIns = ClassFactory.newRenderersInstanceByData(groupsContainer, self, \"groupContainer\", groupsData);\r\n        if(groupsIns) {\r\n            for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n                groupIns = groupsIns[i];\r\n                self.groupsIns.push(groupIns);\r\n            }\r\n        }\r\n        \r\n        if(self.layout().fixed()) {\r\n            self.renderPosition();\r\n        }\r\n        \r\n        //等待初始化完成再验证mode是否改变，否则会出现各种问题\r\n        var timer = setTimeout(function() {\r\n            clearTimeout(timer);\r\n            validateMode();\r\n        }, 0);\r\n    };\r\n    \r\n    /**\r\n     * 设置数据内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}等\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setData = function(value) {\r\n        var result = superSetData(value);\r\n        \r\n        self.layout().nodes().length = 0;\r\n        self.layout().links().length = 0;\r\n        self.nodes.length = 0;\r\n        self.links.length = 0;\r\n        self.groups.length = 0;\r\n        self.nodesIns.length = 0;\r\n        self.linksIns.length = 0;\r\n        self.groupsIns.length = 0;\r\n        autoGroupKeys=self.data().renderers.groupNode&&self.data().renderers.groupNode.autoGroupKeys&&self.data().renderers.groupNode.autoGroupKeys.split(\",\");\r\n        autoGroupKeys=autoGroupKeys?autoGroupKeys:\"\";\r\n        //添加初始化数据中的所有节点和连线\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n        self.addGroups(self.data().groups);\r\n        self.addAutoGroupNodes(self.data().nodes);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * 刷新节点分组路径数据\r\n     */\r\n    var refreshGroupsData = function() {\r\n        var groupsData = self.groups;\r\n        for(var groupData, i = 0, len = groupsData.length; i < len; i++) {\r\n            groupData = groupsData[i];\r\n            setGroupPath(groupData);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 设置节点分组路径字符串数据到节点分组数据对象中\r\n     * @param groupData 节点分组数据对象\r\n     */\r\n    var setGroupPath = function(groupData) {\r\n        //判断整个节点分组是否可见\r\n        if(groupData.visible === false) {\r\n            groupData.path = \"\";\r\n            groupData.pathPoints = [];\r\n            return;\r\n        }\r\n        var nodesData = groupData.nodes, points = [], \r\n        radius = (groupData.data &&　groupData.data.hasOwnProperty(\"radius\")) ?RegexUtil.replace(RegexUtil.dataRegex,groupData.data.radius,groupData): 20, \r\n        extendedSize = (groupData.data &&　groupData.data.hasOwnProperty(\"extendedSize\")) ? groupData.data.extendedSize : 10;\r\n        if(ObjectUtil.isString(radius)&&radius.indexOf(\"{\")!=-1){\r\n            radius=20;\r\n        }\r\n        for(var ins, node, box, halfW, halfH, i = 0, len = nodesData.length; i < len; i++) {\r\n            node = nodesData[i];\r\n            if(!node.visible || !node.ins) {\r\n                continue;\r\n            }\r\n            ins = node.ins;\r\n//            box = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.el.node().getBBox();\r\n            box = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.getBBox();\r\n            halfW = box.width/2 + extendedSize;\r\n            halfH = box.height/2 + extendedSize;\r\n            points.push([node.x - halfW, node.y - halfH]);\r\n            points.push([node.x + halfW, node.y - halfH]);\r\n            points.push([node.x + halfW, node.y + halfH]);\r\n            points.push([node.x - halfW, node.y + halfH]);\r\n        }\r\n        var path = math.pointsToPolygonHullRoundPath(points, radius, false);\r\n        groupData.path = path;\r\n        groupData.pathPoints = points;\r\n    };\r\n    \r\n    var addNodeDragListeners = function() {\r\n        for(var nodeIns, nodesIns = self.nodesIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            //添加节点拖拽监听\r\n            nodeIns.mainContainer().call(d3.drag()\r\n                .on(\"start\", self.node_dragStartHandler)\r\n                .on(\"drag\", self.node_dragHandler)\r\n                .on(\"end\", self.node_dragEndHandler));\r\n        }\r\n    };\r\n    \r\n    var removeNodeDragListeners = function() {\r\n        for(var nodeIns, nodesIns = self.nodesIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            //移除节点拖拽监听\r\n            nodeIns.mainContainer().on(\"mousedown.drag\", null);\r\n        }\r\n    };\r\n    \r\n    var setListenersInNormal = function() {\r\n        self.addDragListeners();\r\n        addNodeDragListeners();\r\n    };\r\n    \r\n    var setListenersInEditLink = function() {\r\n        self.removeDragListeners();\r\n        removeNodeDragListeners();\r\n    };\r\n    \r\n    //override\r\n    this.toJSON = function(isData) {\r\n        var str = \"\";\r\n        var d = self.data();\r\n        if(!d) {\r\n            return str;\r\n        }\r\n        //清除数据属性节点的内容，然后克隆除数据内容外的配置内容，这样做是因为循环引用在toJson的时候会报错\r\n        var nodes = d.nodes;\r\n        var links = d.links;\r\n        var groups = d.groups;\r\n        if(nodes) {\r\n            d.nodes = [];\r\n        }\r\n        if(links) {\r\n            d.links = [];\r\n        }\r\n        if(groups) {\r\n            d.groups = [];\r\n        }\r\n        //根据需要的属性复制数据内容，下面是要排除的属性名称数组\r\n        var nodeKeys = [\"collapsed\", \"data\", \"ins\", \"legendIns\", \"vx\", \"vy\",\"index\",\"links\",\"cx\",\"cy\"];\r\n        var linkKeys = [\"data\", \"ins\",\"legendIns\",\"lineIndex\", \"__proto__\"];\r\n        var groupKeys = [\"data\", \"ins\",\"legendIns\", \"path\",\"pathPoints\"];\r\n        var getData = function(keys, data, isLink) {\r\n            var result = [];\r\n            if(isLink) {\r\n                var d, obj;\r\n                var  len = data.length;\r\n                for(i = 0; i < len; i++) {\r\n                    d = data[i];\r\n                    obj = {};\r\n                    result.push(obj);\r\n                    for(var k in d) {  \r\n                        if(keys.indexOf(k)==-1){\r\n                            obj[k]=d[k];\r\n                            if(k===\"source\"||k===\"target\"){\r\n                                obj[k]=d[k].id;\r\n                            }\r\n                        }\r\n                    }  \r\n                }\r\n            } else{\r\n                for(var d, obj, i = 0, len = data.length; i < len; i++) {\r\n                    d = data[i];\r\n                    obj = {};\r\n                    result.push(obj);\r\n                    for(var k in d) {  \r\n                        if(keys.indexOf(k)==-1){\r\n                            if(k===\"nodes\"&&keys===groupKeys){\r\n                                var nodes=d[k];\r\n                                obj[k]=[];\r\n                                for(var j=0;j<nodes.length;j++){\r\n                                    obj[k].push(nodes[j].id);\r\n                                }\r\n                            }else{\r\n                                obj[k]=d[k];\r\n                            }                           \r\n\r\n                        }\r\n                    }  \r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        var cloneData = isData === true ? {} : ObjectUtil.cloneObj(d);\r\n        cloneData.nodes = getData(nodeKeys, self.nodes);\r\n        cloneData.links = getData(linkKeys, self.links, true);\r\n        cloneData.groups = getData(groupKeys, self.groups);\r\n        //还原数据\r\n        if(nodes) {\r\n            d.nodes = nodes;\r\n        }\r\n        if(links) {\r\n            d.links = links;\r\n        }\r\n        if(groups) {\r\n            d.groups = groups;\r\n        }\r\n        //把该baseChart的数据转换成json字符串\r\n        str = JSON.stringify(cloneData);\r\n        return str;\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"BizTopology info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   showLevel:\" + self.showLevel()  +\r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var searchTextHandler = function(event) {\r\n        var str = event.detail;\r\n        var nodes = self.searchNodesByName(str);\r\n        self.centerNodesAndSelected(nodes, true);\r\n    };\r\n    \r\n    /**\r\n     * 外部抛事件代码如下:\r\n     * <code><pre>\r\n     * const BaseEvent = ghca_charts.events.BaseEvent;\r\n     * const EventUtil = ghca_charts.view.util.eventUtil;\r\n     * const evt = EventUtil.createCustomEvent(BaseEvent.TOPO_NODE_FOCUS_IN, true, true, \"10.4.42.1\");\r\n     * d3.selectAll(\"g.seriesTopo\").node().dispatchEvent(evt);\r\n     * </pre></code>\r\n     */\r\n    var topoNodeFocusInHandler = function(event) {\r\n        var id = event.detail;\r\n        //移动该节点到中心位置并选中，然后突出显示节点\r\n        self.centerAndFocusInNode(id)\r\n    };\r\n    \r\n    /**\r\n     * 节点单击事件的监听相关处理方法\r\n     */\r\n    var nodeClickHandler = function(event) {\r\n        if(self.isEditMode() || !self.focusEffect()) {\r\n            return;\r\n        }\r\n        //获取当前双击的节点数据对象\r\n        var data = d3.select(event.currentTarget).data();\r\n        if(data.length === 0) {\r\n            return;\r\n        }\r\n        var node = data[0];\r\n        var nodeIns = node.ins;\r\n        if(nodeIns && nodeIns.selected()) {\r\n            //若该节点已经处于选中状态，则取消选选中和聚焦状态\r\n            self.focusOutAllNodes();\r\n        } else {\r\n            //移动该节点到中心位置并选中，然后突出显示节点\r\n            self.centerAndFocusInNode(node);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 子节点收放按钮点击事件的监听相关处理方法\r\n     */\r\n    var expandToolClickHandler = function(event) {\r\n        event.stopImmediatePropagation();\r\n        var node = event.detail;\r\n        if(!node) {\r\n            return;\r\n        }\r\n        self.expandOrCollapseNodeInUI(node);\r\n    };\r\n    \r\n    /**\r\n     * 实时更新渲染数据的监听相关处理方法\r\n     */\r\n    this.tickHandler = function() {        \r\n        if(!self.layout().fixed()) {\r\n            self.renderPosition();\r\n            self.mainContainer().node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG_CHANGE,true,true,{enable:false}));\r\n        }       \r\n    };\r\n    this.tickEndHandler = function() {\r\n        if(!self.layout().fixed()) {\r\n            self.mainContainer().node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG_CHANGE,true,true,{enable:true}));\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点开始拖动\r\n     */\r\n    this.node_dragStartHandler = function(d) {\r\n        if(self.layout().fixed()) {\r\n            d.x = d3.event.x;\r\n            d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.renderPosition();\r\n        } else {\r\n             if (!d3.event.active) {\r\n                self.model.alphaTarget(0.3).restart();\r\n            }\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点拖动中\r\n     */\r\n    this.node_dragHandler = function(d) {\r\n        if(self.layout().fixed()) {\r\n            d.x = d3.event.x;\r\n            d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.renderPosition();\r\n        } else {\r\n            d.fx = d3.event.x;\r\n            d.fy = d3.event.y;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点结束拖动\r\n     */\r\n    this.node_dragEndHandler = function(d) {\r\n        if(self.layout().fixed()) {\r\n            d.x = d3.event.x;\r\n            d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.renderPosition();\r\n        } else {\r\n            if (!d3.event.active) {\r\n                self.model.alphaTarget(0);\r\n            }\r\n            d.fx = null;\r\n            d.fy = null;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 点击保存按钮事件处理方法\r\n     */\r\n    var saveBtnClickHandler = function() {\r\n        //向外部抛出保存数据\r\n        self.node().dispatchEvent(EventUtil.createCustomEvent(\r\n           BaseEvent.EV_EVENT_DATA_STORAGE, true, true, {data:self.toJSON(true)}));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 设置传入的对象是否显示选中状态\r\n     * @param selected 对象是否显示选中状态\r\n     * @param insArray 要设置的对象数组，若不传则为图表中的所有对象(节点+连线)\r\n     */\r\n    this.setSelected = function(selected, insArray) {\r\n        if(insArray) {\r\n            for (var i = 0, len = insArray.length; i < len; i++) {\r\n                insArray[i].selected(selected);\r\n            }\r\n        } else {\r\n            var nodes = self.nodes;\r\n            for (var i = 0, len = nodes.length; i < len; i++) {\r\n                nodes[i].ins.selected(selected);\r\n            }\r\n            var links = self.links;\r\n            for (var i = 0, len = links.length; i < len; i++) {\r\n                links[i].ins.selected(selected);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 将当前框选项显示选中效果\r\n     */\r\n    this.setSelectedItemsInSelectArea = function() {\r\n        var rect = self.editCon.mainContainer().select(\"rect.select\");\r\n        var rectNode = rect.node();\r\n        if(rectNode) {\r\n            selectedNodeItems.length = 0;\r\n            selectedLinkItems.length = 0;\r\n            selectedGroupItems.length = 0;\r\n            //选中区域内的所有节点\r\n            var node, link, ins, insRect, source, target, intersections, isCollision, \r\n                nodes = self.nodes, \r\n                links = self.links,\r\n                groups = self.groups,\r\n                rect = {},\r\n                selectRect = rectNode.getBBox();\r\n\r\n            for (var i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                ins = node.ins;\r\n//                insRect = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.el.node().getBBox();\r\n                insRect = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.getBBox();\r\n                //这样重新创建一个对象是因为ie中getBBox()返回的对象属性是只读的\r\n                rect.x = node.x + insRect.x;\r\n                rect.y = node.y + insRect.y;\r\n                rect.width = insRect.width;\r\n                rect.height = insRect.height;\r\n                if(math.isCollisionInTwoRects(selectRect, rect)) {\r\n                    ins.selected(true);\r\n                    selectedNodeItems.push(node);\r\n                } else {\r\n                    ins.selected(false);\r\n                }\r\n            }\r\n            selectedNodeItems.forEach(function(node){\r\n                groups.forEach(function(g){\r\n                    if(ObjectUtil.contains(g.nodes,node)&&!ObjectUtil.contains(selectedGroupItems,g)){\r\n                        selectedGroupItems.push(g);\r\n                    }\r\n                });\r\n            });\r\n\r\n            //选中区域内的所有连线\r\n            var rectPath =  \"M\"+selectRect.x+\",\"+selectRect.y +\r\n                            \" L\"+(selectRect.x+selectRect.width)+\",\"+selectRect.y+\r\n                            \" L\"+(selectRect.x+selectRect.width)+\",\"+(selectRect.y+selectRect.height)+\r\n                            \" L\"+(selectRect.x)+\",\"+(selectRect.y+selectRect.height) + \"Z\";\r\n            for (var i = 0, len = links.length; i < len; i++) {\r\n                link = links[i];\r\n                ins = link.ins;\r\n                source = link.source;\r\n                target = link.target;\r\n                //矩形框选区域是否包含该连线\r\n                if(math.isPointInsideBBox(source.x, source.y, selectRect) && \r\n                   math.isPointInsideBBox(target.x, target.y, selectRect)) {\r\n                    isCollision = true;\r\n                } else {\r\n                    //若不包含则判断是否有交点\r\n                    intersections = Raphael.pathIntersection(ins.el.select(\"path\").attr(\"d\"), rectPath);\r\n                    if(intersections.length > 0) {\r\n                        isCollision = true;\r\n                    } else {\r\n                        isCollision = false;\r\n                    }\r\n                }\r\n                if(isCollision) {\r\n                    ins.selected(true);\r\n                    selectedLinkItems.push(link);\r\n                } else {\r\n                    ins.selected(false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 移动该节点到中心位置并选中，然后突出显示节点\r\n     * @param arguments[0] 节点id或者节点数据对象\r\n     */\r\n    this.centerAndFocusInNode = function() {\r\n        if(arguments.length === 0) {\r\n            return;\r\n        }\r\n        var node;\r\n        if(ObjectUtil.isString(arguments[0])) {\r\n            node = self.findNode(arguments[0]);\r\n        } else if(ObjectUtil.isObject(arguments[0])) {\r\n            node = arguments[0];\r\n        }\r\n        if(!node) {\r\n            return;\r\n        }\r\n        //移动该节点到中心位置并选中\r\n        self.centerNodesAndSelected(node);\r\n        //突出显示节点\r\n        self.focusInNode(node);\r\n    };\r\n    \r\n    /**\r\n     * 突出显示节点\r\n     * @param node 要突出显示的节点数据对象\r\n     */\r\n    this.focusInNode = function(node) {\r\n        if(!node || !node.id) {\r\n            return;\r\n        }\r\n        var i, len, ins, nodeIns, linkIns, groupIns, nodeData, linkData, links, id = node.id, opacity = 0.1, \r\n            nodesIns = self.nodesIns, linksIns = self.linksIns, groupsIns = self.groupsIns, insAry = [];\r\n        var duration = self.animation() ? 300 : 0;\r\n        //找到目标对象，并淡化所有节点、连线、分组的显示效果\r\n        for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().attr(\"opacity\", opacity);\r\n            if(nodeIns.mainContainer().data()[0].id === id) {\r\n                ins = nodesIns[i];\r\n            }\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            linkIns = linksIns[i];\r\n            linkIns.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = groupsIns.length; i < len; i++) {\r\n            groupIns = groupsIns[i];\r\n            groupIns.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        //添加要突出显示的对象到数组中\r\n        nodeData = ins.mainContainer().data()[0];\r\n        insAry.push(nodeData.ins);\r\n        links = nodeData.links;\r\n        if(links) {\r\n            for(i = 0, len = links.length; i < len; i++) {\r\n                linkData = links[i];\r\n                insAry.push(linkData.ins);\r\n                if(linkData.target && linkData.target.ins) {\r\n                    insAry.push(linkData.target.ins);\r\n                }\r\n                if(linkData.source && linkData.source.ins) {\r\n                    insAry.push(linkData.source.ins);\r\n                }\r\n            }\r\n        }\r\n        //突出显示\r\n        for(i = 0, len = insAry.length; i < len; i++) {\r\n            ins = insAry[i];\r\n            if(ins instanceof BaseComponent) {\r\n                ins = ins.mainContainer();\r\n            } else {\r\n                ins = d3.select(ins.el.node().parentNode);\r\n            }\r\n            ins && ins.attr(\"opacity\", 1);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 取消所有节点的突出显示效果\r\n     */\r\n    this.focusOutAllNodes = function() {\r\n        if(!self.nodesIns || !self.linksIns) {\r\n            return;\r\n        }\r\n        var i, len, ins, opacity = 1, nodesIns = self.nodesIns, \r\n            linksIns = self.linksIns, groupsIns = self.groupsIns;\r\n        for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            ins = nodesIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            ins = linksIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = groupsIns.length; i < len; i++) {\r\n            ins = groupsIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 对传入的节点居中并设置显示选中状态(选中状态根据传入参数设置)\r\n     * @param arguments[0] 节点数据对象数组或者单个节点数据对象\r\n     * @param arguments[1] 是否选中传入的节点，默认为否\r\n     */\r\n    this.centerNodesAndSelected = function() {\r\n        var nodes = self.nodes;\r\n        var isSelect = arguments.length > 1 ? arguments[1] === true : false;\r\n        //取消所有节点选中状态\r\n        var nodesIns = [];\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            nodesIns.push(nodes[i].ins);\r\n        }\r\n        self.setSelected(false, nodesIns);\r\n        \r\n        var ratio = 1, currentX = NaN, currentY = NaN;\r\n        if (ObjectUtil.isArray(arguments[0])) {//传入参数为数组\r\n            nodes = arguments[0];\r\n            if(nodes.length === 0) {\r\n                return;\r\n            }\r\n            //计算搜索结果点外接矩形中心\r\n            var minX = NaN, minY = NaN, maxX = NaN, maxY = NaN,\r\n                leftNodeW = NaN, rightNodeW = NaN, topNodeH = NaN, bottomNodeH = NaN;\r\n            for (var node, nodeIns, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                nodeIns = node.ins;\r\n                if(isSelect) {\r\n                    nodeIns.selected(true);\r\n                }\r\n                if(isNaN(minX) || node.x < minX) {\r\n                    minX = node.x;\r\n                    leftNodeW = nodeIns.actualWidth();\r\n                }\r\n                if(isNaN(minY) || node.y < minY) {\r\n                    minY = node.y;\r\n                    topNodeH = nodeIns.actualHeight();\r\n                }\r\n                if(isNaN(maxX) || node.x > maxX) {\r\n                    maxX = node.x;\r\n                    rightNodeW = nodeIns.actualWidth();\r\n                }\r\n                if(isNaN(maxY) || node.y > maxY) {\r\n                    maxY = node.y;\r\n                    bottomNodeH = nodeIns.actualHeight();\r\n                }\r\n            }\r\n            currentX = (maxX + minX)/2, currentY = (maxY + minY)/2;\r\n            //搜索结果点外接矩形是否大于图表显示范围，若是则缩小内容\r\n            var ratioX = 1, ratioY = 1, \r\n                areaW = maxX - minX + (leftNodeW + rightNodeW) / 2, \r\n                areaH = maxY - minY + (topNodeH + bottomNodeH) / 2;\r\n            if(areaW > self.width()) {\r\n                ratioX = self.width() / areaW;\r\n            }\r\n            if(areaH > self.height()) {\r\n                ratioY = self.height() / areaH;\r\n            }\r\n            ratio = ratioX > ratioY ? ratioY : ratioX;\r\n            self.scaleX(ratio);\r\n            self.scaleY(ratio);\r\n        } else if(ObjectUtil.isObject(arguments[0])) {//传入参数为单个点\r\n            var node = arguments[0];\r\n            var nodeIns = node.ins;\r\n            if(isSelect) {\r\n                nodeIns.selected(true);\r\n            }\r\n            currentX = node.x;\r\n            currentY = node.y;\r\n        }\r\n        if(isNaN(currentX) || isNaN(currentY)) {\r\n            return;\r\n        }\r\n        \r\n        //把搜索结果点外接矩形中心点移动到图 表中心位置\r\n        var x = self.x(), y = self.y(), \r\n            moveX = self.width()/2, moveY = self.height()/2;\r\n        x = (moveX - currentX * self.scaleX()) * self.graph().scaleX();\r\n        y = (moveY - currentY * self.scaleY()) * self.graph().scaleY();\r\n        self.x(Math.round(x));\r\n        self.y(Math.round(y));\r\n        self.layout().model().stop();\r\n        var transition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n        self.renderTransform(transition);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // data control\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 增加一个节点 \r\n     * @param node 节点数据对象\r\n     */\r\n    this.addNode = function(node) {\r\n        self.nodes.push(node);        \r\n    };\r\n\r\n    /**\r\n     * 批量增加节点 \r\n     * @param nodes 节点数据对象数组\r\n     */\r\n    this.addNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n            for(var i = 0, len = nodes.length; i < len; i++) {\r\n                self.addNode(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n\r\n    this.addAutoGroupNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n            for(var i = 0, len = nodes.length; i < len; i++) {\r\n                self.addNodeToAutoGroup(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 增加一条连线 \r\n     * @param link 连线数据对象 \r\n     */\r\n    this.addLink = function(link) {\r\n        //寻找该连线起点和终点\r\n        link.source = self.findNode(link.source);\r\n        link.target = self.findNode(link.target);\r\n        var source = link.source, \r\n            target = link.target;\r\n        //寻找具有相同起点和终点的连线，生成lineIndex，并把该连线添加到起点和终点对应的连线数据数组里面\r\n        if(!source.hasOwnProperty(\"links\")) {\r\n            source.links = [];\r\n        }\r\n        //刷新lineIndex\r\n        var lineIndex = self.refreshLineIndex(link);\r\n        link.lineIndex = lineIndex > 0 ? lineIndex : 0;\r\n        source.links.push(link);\r\n        if(!target.hasOwnProperty(\"links\")) {\r\n            target.links = [];\r\n        }\r\n        target.links.push(link);\r\n        self.links.push(link);\r\n    };\r\n\r\n    /**\r\n     * 批量增加连线 \r\n     * @param links 连线数据对象数组\r\n     */\r\n    this.addLinks = function(links) {\r\n        if (ObjectUtil.isArray(links)) {\r\n            for(var i = 0, len = links.length; i < len; i++) {\r\n                self.addLink(links[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点 \r\n     * @param node 要删除的节点data\r\n     */\r\n    this.removeNode = function(node) {\r\n        var i = 0,id=node.id, n = self.findNode(id), links = self.links;\r\n        //删除该节点相关的连线\r\n        while (i < links.length) {\r\n            links[i]['source'] === n || links[i]['target'] === n ? links.splice(i, 1) : ++i;\r\n        }\r\n        //删除该节点\r\n        self.nodes.splice(self.findNodeIndex(id), 1);\r\n        //在所有分组中删除该节点\r\n        self.removeNodeFromAllGroup(n);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除节点 \r\n     * @param ids 要删除的节点id数组\r\n     */\r\n    this.removeNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n            for(var i = 0, len = nodes.length; i < len; i++) {\r\n                self.removeNode(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除连线 \r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLink = function(link) {\r\n        //删除连线自身\r\n        var links = self.links;\r\n        var index = links.indexOf(link);\r\n        if(index !== -1) {\r\n            links.splice(index, 1);\r\n        }\r\n        var source = link.source, \r\n            target = link.target;\r\n        //删除连线起点中对应的该连线\r\n        self.removeLinkFromNode(source, link);\r\n        //删除连线终点中对应的该连线\r\n        self.removeLinkFromNode(target, link);\r\n        //刷新lineIndex\r\n        self.refreshLineIndex(link);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除连线 \r\n     * @param links 要删除的连线数据对象数组\r\n     */\r\n    this.removeLinks = function(links) {\r\n        if (ObjectUtil.isArray(links)) {\r\n            for(var i = 0, len = links.length; i < len; i++) {\r\n                self.removeLink(links[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点中对应的连线引用\r\n     * @param node 包含该连线引用的节点数据对象\r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLinkFromNode = function(node, link) {\r\n        if(node && node.links) {\r\n            links = node.links;\r\n            for(var l, i = 0, len = links.length; i < len; i++) {\r\n                l = links[i];\r\n                if(l === link) {\r\n                    links.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点下的子节点，同时清除link信息 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeChildNodes = function(id) {\r\n        var   node = self.findNode(id), //要删除的节点\r\n              nodes = self.nodes,       //所有节点\r\n              link = null,\r\n              links = self.links,       //所有连线 \r\n              delateLinks = [],         //要删除的连线索引数组\r\n              childNodes = [];          //当前节点的所有子节点数组\r\n\r\n        //找到所有要删除的连线索引，以及当前节点的所有子节点\r\n        links.forEach(function(link, index) {\r\n            //若节点是此条连线的起点\r\n            if(link['source'] === node) {\r\n                delateLinks.push(index);\r\n                childNodes.push(link['target']);\r\n            }\r\n        });\r\n\r\n        //删除上面找到的所有需要删除的连线\r\n        delateLinks.reverse().forEach(function(index) {\r\n            links.splice(index, 1);\r\n        });\r\n\r\n        //迭代删除节点\r\n        var remove = function(node) {\r\n            var length = links.length;\r\n            for (var i = length - 1; i >= 0; i--) {\r\n                if (links[i]['source'] === node) {\r\n                    var target = links[i]['target'];\r\n                    links.splice(i, 1);\r\n                    nodes.splice(self.findNodeIndex(node.id), 1);\r\n                    remove(target);\r\n                }\r\n            }\r\n        };\r\n\r\n        //删除上面找到当前节点的所有子节点\r\n        childNodes.forEach(function(node) {\r\n            remove(node);\r\n        });\r\n\r\n        //清除没有连线的节点\r\n        for (var i = nodes.length - 1, len = links.length; i >= 0; i--) {\r\n            var isFoundNode = false;\r\n            node = nodes[i];\r\n            for (var j = 0; j < len; j++) {\r\n                link = links[j];\r\n                if(link['source'] === node || link['target'] === node) {\r\n                    isFoundNode = true;\r\n                }\r\n            }\r\n            if(!isFoundNode) {\r\n                nodes.splice(i, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 查找节点\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象，若没有查找到则返回null\r\n     */\r\n    this.findNode = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] === id)\r\n                return nodes[i];\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * 获取LINk\r\n     * @param id\r\n     * @returns {*}\r\n     */\r\n    this.findLink = function(id) {\r\n        var links = self.links;\r\n        for (var i = 0, len = links.length; i < len; i++) {\r\n            if (links[i]['id'] === id)\r\n                return links[i];\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * 查找节点数据对象所在数组的索引值\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象所在数组的索引值，若没有查找到则返回-1\r\n     */\r\n    this.findNodeIndex = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] === id)\r\n                return i;\r\n        }\r\n        return -1;\r\n    };\r\n    \r\n    /**\r\n     * 刷新变更(添加、删除)目标连线所在的两端点之间的连线的索引值\r\n     * @param link 变更(添加、删除)目标连线数据对象\r\n     * @return 返回下一个要添加的连线索引值\r\n     */\r\n    this.refreshLineIndex = function(link) {\r\n        var sourceLink, \r\n            lineIndex = 0, \r\n            source = link.source, \r\n            target = link.target,\r\n            sourceLinks = source.links;\r\n        for(var i = 0, len = sourceLinks.length; i < len; i++) {\r\n            sourceLink = sourceLinks[i];\r\n            //寻找具有相同节点的连线\r\n            if((sourceLink.target === source || sourceLink.source === source) && \r\n               (sourceLink.target === target || sourceLink.source === target)) {\r\n                sourceLink.lineIndex = lineIndex;\r\n                lineIndex++;\r\n            }\r\n        }\r\n        return lineIndex;\r\n    };\r\n    \r\n    /**\r\n     * 增加一个节点组\r\n     * @param group 节点数据对象\r\n     */\r\n    this.addGroup = function(group) {\r\n        var nodes = group.nodes;\r\n        //替换group中的节点id为对应的节点数据对象\r\n        for (var node, i = 0, len = nodes.length; i < len; i++) {\r\n            node = self.findNode(nodes[i]);\r\n            nodes[i] = node;\r\n        }\r\n        self.groups.push(group);\r\n    };\r\n    \r\n    /**\r\n     * 批量增加节点组\r\n     * @param groups 节点组数据对象数组\r\n     */\r\n    this.addGroups = function(groups) {\r\n        if (ObjectUtil.isArray(groups)) {\r\n            for(var i = 0, len = groups.length; i < len; i++) {\r\n                self.addGroup(groups[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除一个节点组\r\n     * @param group 节点数据对象\r\n     */\r\n    this.removeGroup = function(group) {\r\n        var groups = self.groups;\r\n        var index = groups.indexOf(group);\r\n        if(index !== -1) {\r\n            //删除该节点组\r\n            groups.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    var resetAutoGroups=function(){\r\n        autoGroupKeys=self.data().renderers.groupNode&&self.data().renderers.groupNode.autoGroupKeys&&self.data().renderers.groupNode.autoGroupKeys.split(\",\");\r\n        autoGroupKeys=autoGroupKeys?autoGroupKeys:\"\";\r\n        var groups=self.groups;\r\n        groups.forEach(function(group){\r\n            if(group.groupKey&&autoGroupKeys.indexOf(group.groupKey)==-1){\r\n                 self.removeGroup(group);\r\n            }\r\n//            //by lizheng 此处分组存在与否，不应与业务逻辑挂钩\r\n//            else if(group.nodes.length<2){\r\n//                self.removeGroup(group);\r\n//            }\r\n        })\r\n\r\n        self.addAutoGroupNodes(self.nodes);\r\n    }\r\n\r\n\r\n      /**\r\n     * 添加节点到自动组\r\n     */\r\n    this.addNodeToAutoGroup=function(nodeData){\r\n        var allgroup=self.groups;\r\n        var num=allgroup.length;\r\n        var putGkeys=[];\r\n        for(var i=0;i<num;i++){\r\n            var group=allgroup[i];\r\n            var index=autoGroupKeys.indexOf(group.groupKey);\r\n            if(index!=-1&&group.nodes.length>0&&group.nodes[0][group.groupKey]===nodeData[group.groupKey]){\r\n                node = self.findNode(nodeData.id);\r\n                self.addNodeToGroup(node,group);\r\n                putGkeys.push(group.groupKey);\r\n            }  \r\n        }\r\n\r\n        var nodes = self.nodes;\r\n        for(var k=0;k<autoGroupKeys.length;k++){\r\n            var key=autoGroupKeys[k];\r\n            var groupIDs=[];\r\n            if(putGkeys.indexOf(key)===-1){\r\n                for(var j=0;j<nodes.length;j++){\r\n                    var gNode=nodes[j];\r\n                    if(gNode.id!=nodeData.id&&gNode[key]&&nodeData[key]&&gNode[key]===nodeData[key]){\r\n                        groupIDs.push(gNode.id);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(groupIDs.length!=0){\r\n                groupIDs.push(nodeData.id);\r\n                var data = [{\r\n                     renderer: \"groupNode\", \r\n                     name: \"自动组\", \r\n                     nodes: groupIDs, \r\n                     visible: true,\r\n                     groupKey:key,\r\n                     radius:20,\r\n                     fill:\"#e3dec8\",\r\n                     fillOp: 1,\r\n                     lbBgFill:\"#f8f8f8\",\r\n                     lbFill:\"#2c2c2c\",                     \r\n                     lbOp:1\r\n                    }];\r\n                self.addGroups(data);    \r\n            }\r\n        }  \r\n    }\r\n    \r\n    /**\r\n     * 为指定的节点组中添加一个节点\r\n     * @param node 要删除的节点\r\n     * @param group 节点组\r\n     */\r\n    this.addNodeToGroup = function(node, group) {\r\n        if(!group.nodes) {\r\n            group.nodes = [];\r\n        }\r\n        var groupNodes = group.nodes;\r\n        var index = groupNodes.indexOf(node);\r\n        if(index === -1) {\r\n            groupNodes.push(node);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从指定的节点组中删除一个节点\r\n     * @param node 要删除的节点\r\n     * @param group 节点组\r\n     */\r\n    this.removeNodeFromGroup = function(node, group) {\r\n        var groupNodes = group.nodes;\r\n        var index = groupNodes.indexOf(node);\r\n        if(index !== -1) {\r\n            groupNodes.splice(index, 1);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从所有的节点组中删除一个节点\r\n     * @param node 要删除的节点\r\n     */\r\n    this.removeNodeFromAllGroup = function(node) {\r\n        var groups = self.groups;\r\n        for(var group, i = 0, len = groups.length; i < len; i++) {\r\n            group = groups[i];\r\n            self.removeNodeFromGroup(node, group);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据指定节点的id找到该节点的所有子孙节点\r\n     * @param id 指定节点的id\r\n     * @param isAll 是否返回所有子孙节点(无论是否展开)，默认为是，若为false，则只返回展开的子孙节点\r\n     * @return 返回定节点的所有子孙节点数据对象数组，若没有找到则返回空数组\r\n     */\r\n    this.findAllChildNodes = function(id, isAll) {\r\n        var nodes = [];\r\n        var node = self.findNode(id);\r\n        if(!node) return nodes;\r\n        if(isAll === undefined) {\r\n            isAll = true;\r\n        }\r\n        \r\n        //有待优化--start\r\n        var getNode;\r\n        if(isAll) {\r\n            getNode = function(nodeId) {\r\n                self.nodes.forEach(function(node) {\r\n                    if(node.parentId === nodeId) {\r\n                        nodes.push(node);\r\n                        getNode(node.id);\r\n                    }\r\n                });\r\n            };\r\n            getNode(id);\r\n        } else {\r\n            getNode = function(parentNode, isFirst) {\r\n                var isExpanded = isFirst \r\n                    || parentNode.isExpanded === undefined \r\n                    || parentNode.isExpanded === true;\r\n                self.nodes.forEach(function(node) {\r\n                    if(isExpanded && node.parentId === parentNode.id) {\r\n                        nodes.push(node);\r\n                        getNode(node, false);\r\n                    }\r\n                });\r\n            };\r\n            getNode(node, true);\r\n        }\r\n        //有待优化--end\r\n        \r\n        return nodes;\r\n    }\r\n    \r\n    /**\r\n     * 设置指定节点是否可见\r\n     * @param nodes 要设置的指定节点对象数组\r\n     * @param visible 设置指定节点是否可见\r\n     */\r\n    this.setNodesVisible = function(nodes, visible) {\r\n        if(!nodes || nodes.length === 0) return;\r\n        if(visible === undefined)  {\r\n            visible = true;\r\n        }\r\n        for(var i = 0, len = nodes.length; i < len; i++) {\r\n            nodes[i].visible = visible;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 展开节点\r\n     * @param id 要展开的节点id\r\n     * @param isExpandAll 是否强制展开所有子孙节点，默认为false,\r\n     * 若为false则原先合拢的子孙节点在父节点展开后保持原有状态；若为true则强制展开所有子孙节点\r\n     */\r\n    this.expandNode = function(id, isExpandAll) {\r\n        var nodes = self.findAllChildNodes(id, isExpandAll === undefined ? false : isExpandAll);\r\n        self.setNodesVisible(nodes, true);\r\n    };\r\n    \r\n    /**\r\n     * 合拢节点\r\n     * @param id 要合拢的节点id\r\n     */\r\n    this.collapseNode = function(id) {\r\n        var nodes = self.findAllChildNodes(id, true);\r\n        self.setNodesVisible(nodes, false);\r\n    };\r\n    \r\n    /**\r\n     * 展开或者合拢节点\r\n     * @param node 当前要展开或者合拢的节点数据对象\r\n     */\r\n    this.expandOrCollapseNode = function(node) {\r\n        if(!node.enabledExpand) {\r\n            return;\r\n        }\r\n        if(node.isExpanded) {\r\n            self.collapseNode(node.id);\r\n            node.isExpanded = false;\r\n        } else {\r\n            self.expandNode(node.id, false);\r\n            node.isExpanded = true;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从指定的连线数据数组中获取可见的所有连线\r\n     * @param links 指定的连线数据数组\r\n     * @return 返回可见的所有连线数组，若没有满足条件的数组，则返回空数组\r\n     */\r\n    this.getVisibleLinks = function(links) {\r\n        var result = [];\r\n        if(!links || links.length === 0){\r\n            return result;\r\n        }\r\n        var link;\r\n        for (var i = 0, len = links.length; i < len; i++) {\r\n            link = links[i];\r\n            if (link.source.visible && link.target.visible) {\r\n                if(link.hasOwnProperty(\"visible\")) {\r\n                    if(link.visible) {\r\n                        result.push(link);\r\n                    }\r\n                } else {\r\n                    result.push(link);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * 根据搜索字符串内容从节点的name属性中搜索匹配的节点，并把所有满足搜索条件的节点数据放入一个数组中\r\n     * @param str 搜索条件字符串\r\n     * @return 所有满足搜索条件的节点数据数组，若没有搜索到则返回空数组\r\n     */\r\n    this.searchNodesByName = function(str) {\r\n        var result = [];\r\n        if(str === undefined || str === null || str.replace(/ /g,'') === \"\") {\r\n            return result;\r\n        }\r\n        var nodes = self.nodes;\r\n        for (var node, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            if(node.name.indexOf(str) > -1) {\r\n                result.push(node);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // edit code\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var drawlinkIns,\r\n        drawLinkSource,\r\n        oldDragable = false,\r\n        selectRectX = 0, \r\n        selectRectY = 0;\r\n        \r\n    var modeChangeHandler = function(evt) {\r\n        self.mode((evt || window.event).detail ? \"edit\" : \"normal\");\r\n        validateMode();\r\n    };\r\n    \r\n    /**\r\n     * 监听外部抛出开启和关闭编辑模式的事件\r\n     */\r\n    var openEditHandler = function(evt) {\r\n        self.mode((evt || window.event).detail.data === true ? \"edit\" : \"normal\");\r\n        validateMode();\r\n    };\r\n    \r\n    var validateMode = function() {\r\n        if(!isValidateMode) {\r\n            return;\r\n        }\r\n        isValidateMode = false;\r\n        if(self.isEditMode()) {\r\n            self.focusOutAllNodes();\r\n            addEditContainer();\r\n            setListenersInEditLink();\r\n            // self.addEventListener(BaseEvent.OPERATION_TYPE, operationChangeHandler);\r\n            self.addEventListener(BaseEvent.OPEN_FLUX_TYPE, openFluxChangeHandler);\r\n            self.addEventListener(BaseEvent.OPEN_ALARM_TYPE, openAlarmChangeHandler);\r\n            // self.addEventListener(BaseEvent.OPERATION_CLEAR, operationClearHandler);\r\n            self.addEventListener(BaseEvent.ADD_ITEMS, addItemsHandler);\r\n            self.addEventListener(BaseEvent.REMOVE_ITEMS, removeItemsHandler);\r\n            // self.addEventListener(BaseEvent.REOMVE_ALL_SELECTED_ITEMS, removeAllSelectedItemsHandler);\r\n            self.parent().mainContainer().on(\"mousedown.edit\", edit_mouseDownHandler);\r\n            self.parent().mainContainer().on(\"mousemove.edit\", edit_mouseMoveHandler);\r\n            self.parent().mainContainer().on(\"mouseup.edit\", edit_mouseUpHandler);\r\n        } else {\r\n            removeEditContainer();\r\n            // self.removeEventListener(BaseEvent.OPERATION_TYPE, operationChangeHandler);\r\n            // self.removeEventListener(BaseEvent.OPERATION_CLEAR, operationClearHandler);\r\n            self.removeEventListener(BaseEvent.ADD_ITEMS, addItemsHandler);\r\n            self.removeEventListener(BaseEvent.REMOVE_ITEMS, removeItemsHandler);\r\n            // self.removeEventListener(BaseEvent.REOMVE_ALL_SELECTED_ITEMS, removeAllSelectedItemsHandler);\r\n            // self.parent().mainContainer().on(\"mousedown.edit\", null);\r\n            self.parent().mainContainer().on(\"mousedown.edit\", null);\r\n            self.parent().mainContainer().on(\"mousemove.edit\", null);\r\n            self.parent().mainContainer().on(\"mouseup.edit\", null);\r\n            setListenersInNormal();\r\n        }\r\n    };\r\n \r\n\r\n    /**\r\n     * 开启流量\r\n     * @param event\r\n     */\r\n    var openFluxChangeHandler = function(event){\r\n        if(event.detail){\r\n            var detail = event.detail;\r\n            //[{id:1,flux:{}}]\r\n            var link = self.findLink(detail.id);\r\n            if(link){\r\n                link.flux = detail.flux;\r\n                if(link.ins)\r\n                    link.ins.render();\r\n            }\r\n        }else{\r\n            self.links.forEach(function(link){\r\n                delete link.flux;\r\n                if(link.ins)\r\n                    link.ins.render();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开启告警\r\n     * @param event\r\n     */\r\n    var openAlarmChangeHandler = function(event){\r\n        if(event.detail){\r\n            //[{id:1,type:\"link/node\",value:{}}]\r\n            var detail = event.detail;\r\n            switch(detail.type){\r\n                case \"link\":{\r\n                    var link = self.findLink(detail.id);\r\n                    if(link){\r\n                        link.value = detail.value;\r\n                        if(link.ins)\r\n                            link.ins.render();\r\n                    }\r\n                    break;\r\n                }\r\n                case \"node\":{\r\n                    var node = self.findNode(detail.id);\r\n                    console.log(node);\r\n                    if(node){\r\n                        node.value = detail.value;\r\n                        console.log(node);\r\n                        if(node.ins)\r\n                            node.ins.render();\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }else{\r\n            self.links.forEach(function(link){\r\n                console.log(link);\r\n                delete link.value;\r\n                if(link.ins)\r\n                    link.ins.render();\r\n            });\r\n            self.nodes.forEach(function(node){\r\n                console.log(node);\r\n                delete node.value;\r\n                if(node.ins)\r\n                    node.ins.render();\r\n            });\r\n        }\r\n    }\r\n\r\n    var addItemsHandler = function(event) {\r\n        var data = event.detail;\r\n        switch (data.type){\r\n            case \"link\":{\r\n                self.addLinksInUI(data.data)\r\n                break;\r\n            }\r\n            case \"group\":{\r\n                self.addGroupsInUI(data.data)\r\n                break;\r\n            }\r\n\r\n            default:{\r\n                self.addNodesInUI(data.data);\r\n                break;\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n    var _mouseDownHandler=undefined;\r\n    this.addMouseDownHandler=function(handler){\r\n        _mouseDownHandler=handler;\r\n    }\r\n    var _mouseMoveHandler=undefined;\r\n    this.addMouseMoveHandler=function(handler){\r\n        _mouseMoveHandler=handler;\r\n    }\r\n    var _mouseUpHandler=undefined;\r\n    this.addMouseUpHandler=function(handler){\r\n        _mouseUpHandler=handler;\r\n    }\r\n\r\n    //缓存 mouse down 响应对象\r\n    var downTargetD = undefined;\r\n    var edit_mouseDownHandler = function() {    \r\n        if(_mouseDownHandler){\r\n            _mouseDownHandler(self);\r\n        }    \r\n        /* if(!operationData)return;\r\n        var target = d3.event.target;\r\n        var d = target.__data__;\r\n        if(d && d.ins) {\r\n            downTargetD = d;\r\n        }\r\n        switch(operationData.type){\r\n            case \"node\":{\r\n                break;\r\n            }\r\n            case \"delete\":{\r\n                var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n                createSelectRect(coordinates[0], coordinates[1]);\r\n                break;\r\n            }\r\n            case \"group\":{\r\n                var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n                createSelectRect(coordinates[0], coordinates[1]);\r\n                break;\r\n            }\r\n            case \"link\":{\r\n                endDrawLink();\r\n                drawLinkSource = undefined;\r\n                if(downTargetD) {\r\n                    var ins = downTargetD.ins;\r\n                    var linkData = {renderer:operationData.renderer, name:\"\", lineIndex:0, visible:true};\r\n                    if(ins instanceof Node) {\r\n                        drawLinkSource = d;\r\n                        startDrawLink(d.x, d.y, linkData);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        } */\r\n    };\r\n    \r\n    var edit_mouseMoveHandler = function() {\r\n        if(_mouseMoveHandler){\r\n            _mouseMoveHandler(self);\r\n        }\r\n        /* if(self.isEditMode()&&drawLinkSource){\r\n            var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n            drawLink(drawLinkSource.x, drawLinkSource.y, coordinates[0], coordinates[1]);\r\n        } */\r\n    };\r\n    \r\n    var edit_mouseUpHandler = function() {\r\n        if(_mouseUpHandler){\r\n            _mouseUpHandler(self);\r\n        }\r\n        \r\n        /* if(self.isEditMode()){\r\n            var target = d3.event.target;\r\n            var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n            var d = target.__data__;\r\n            var data = {};\r\n            data.type=\"mouse_up\";\r\n            data.x = coordinates[0];\r\n            data.y = coordinates[1];\r\n            self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.TOPO_EDIT_POSITON,true,true,data));\r\n        } */\r\n        \r\n        /* switch(operationData.type){\r\n            case \"node\":{\r\n                var data = ObjectUtil.cloneObj(operationData);\r\n                data.x = coordinates[0];\r\n                data.y = coordinates[1];\r\n                self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                break;\r\n            }\r\n            case \"group\":{\r\n                self.setSelectedItemsInSelectArea();\r\n                removeSelectRect();\r\n                var data = ObjectUtil.cloneObj(operationData);\r\n                data.items = selectedNodeItems;\r\n                self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                break;\r\n            }\r\n            case \"link\":{\r\n                var d = target.__data__;\r\n                if(d && d.ins) {\r\n                    var ins = d.ins;\r\n                    if(drawLinkSource && ins instanceof Node && drawLinkSource!==d) {\r\n                        var data = ObjectUtil.cloneObj(operationData);\r\n                        data.source = drawLinkSource;\r\n                        data.target = d;\r\n                        self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                    }\r\n                }\r\n                drawLinkSource = null;\r\n                endDrawLink();\r\n                break;\r\n            }\r\n            case \"delete\":{\r\n                var d = target.__data__;\r\n                if(d && d.ins) {\r\n                    var ins = d.ins;\r\n                    if(ins instanceof GroupNode)\r\n                        selectedGroupItems.push(d);\r\n                    if(ins instanceof Node)\r\n                        selectedNodeItems.push(d);\r\n                }\r\n                self.setSelectedItemsInSelectArea();\r\n                removeSelectRect();\r\n                var data = ObjectUtil.cloneObj(operationData);\r\n                data.nodeItems = selectedNodeItems;\r\n                data.linkItems = selectedLinkItems;\r\n                data.groupItems = selectedGroupItems;\r\n                self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                break;\r\n            }\r\n        } */\r\n    };\r\n    \r\n    var removeItemsHandler = function(event) {\r\n        self.removeAllSelectedInUI();\r\n    };\r\n\r\n    \r\n    /**\r\n     * 当处于编辑状态时添加编辑容器\r\n     */\r\n    var addEditContainer = function() {\r\n        var editCon = new BaseComponent();\r\n        editCon.className(\"edit-container\");\r\n        editCon.percentWidth(100);\r\n        editCon.percentHeight(100);\r\n        self.addChild(editCon);\r\n        editCon.mainContainer().attr(\"pointer-events\", \"none\");\r\n        self.editCon = editCon;\r\n    };\r\n    \r\n    /**\r\n     * 移除编辑容器\r\n     */\r\n    var removeEditContainer = function() {\r\n        if(self.editCon) {\r\n            self.removeChild(self.editCon);\r\n            delete self.editCon;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 创建框选矩形\r\n     */\r\n    this.createSelectRect = function() {\r\n        if(self.editCon) {\r\n            var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n            var con = self.editCon.mainContainer();\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node() === null) {\r\n                selectRectX = coordinates[0];\r\n                selectRectY = coordinates[1];\r\n                con.append(\"rect\")\r\n                    .attr(\"class\", \"select\")\r\n                    .attr(\"x\", selectRectX)\r\n                    .attr(\"y\", selectRectY)\r\n                    .attr(\"stroke\", \"#0078d7\")\r\n                    .attr(\"stroke-width\", 1)\r\n                    .attr(\"fill\", \"#0078d7\")\r\n                    .attr(\"fill-opacity\", 0.1);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 绘制框选矩形\r\n     */\r\n    this.drawSelectRect = function() {\r\n        if(self.editCon) {\r\n            var con = self.editCon.mainContainer();\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node()) {\r\n                var sx, sy, mp = MouseUtil.mouse(self.mainContainer().node(), self.graph());//d3.mouse(con.node());\r\n                if(mp[0] < selectRectX) {\r\n                    w = selectRectX - mp[0];\r\n                    sx = mp[0];\r\n                } else {\r\n                    w = mp[0] - selectRectX;\r\n                    sx = selectRectX;\r\n                }\r\n                if(mp[1] < selectRectY) {\r\n                    h = selectRectY - mp[1];\r\n                    sy = mp[1];\r\n                } else {\r\n                    h = mp[1] - selectRectY;\r\n                    sy = selectRectY;\r\n                }\r\n                rect.attr(\"x\", sx).attr(\"y\", sy)\r\n                    .attr(\"width\", w).attr(\"height\", h);\r\n            }\r\n        }\r\n    };\r\n    \r\n     /**\r\n     * 移除框选矩形\r\n     */\r\n    this.removeSelectRect = function() {\r\n        if(self.editCon) {\r\n            self.editCon.mainContainer().select(\"rect.select\").remove();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 准备开始画连线\r\n     * @param x1, y1 起点坐标\r\n     * @param d 连线数据对象\r\n     */\r\n    this.startDrawLink = function(x1, y1, d) {\r\n        // if(!isDrawLink) {\r\n        //     return;\r\n        // }\r\n        d.source = {x:x1, y:y1};\r\n        d.target = {x:x1+1, y:y1+1};\r\n        var rendererConfig;\r\n        //获取节点渲染器配置\r\n        if(d.renderer) {\r\n            rendererConfig = self.data().renderers[d.renderer];\r\n        }\r\n        drawlinkIns = ClassFactory.newLinkInstance(rendererConfig.clazz, [self.linksContainer.mainContainer(), d]);\r\n        drawlinkIns.config(rendererConfig.config)\r\n        drawlinkIns.render();\r\n    };\r\n    \r\n    /**\r\n     * 画连线\r\n     * @param x1, y1 起点坐标\r\n     * @param x2, y2 终点坐标\r\n     */\r\n    this.drawLink = function(x1, y1, x2, y2) {\r\n        if(drawlinkIns) {\r\n            var d = drawlinkIns.itemData();\r\n            d.source.x = x1;\r\n            d.source.y = y1;\r\n            d.target.x = x2;\r\n            d.target.y = y2;\r\n            drawlinkIns.update();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 结束画连线\r\n     */\r\n    this.endDrawLink = function() {\r\n        // if(!isDrawLink) {\r\n        //     return;\r\n        // }\r\n        if(drawlinkIns) {\r\n            drawlinkIns.el.remove();\r\n            drawlinkIns = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 增加一个节点界面操作\r\n     * @param node 节点数据对象\r\n     */\r\n    this.addNodeInUI = function(node) {\r\n        self.addNode(node);\r\n        self.update();\r\n    };\r\n\r\n    /**\r\n     * 批量增加节点界面操作 \r\n     * @param nodes 节点数据对象数组\r\n     */\r\n    this.addNodesInUI = function(nodes) {\r\n        self.addNodes(nodes);\r\n        self.addAutoGroupNodes(nodes);\r\n        self.update();\r\n    };\r\n\r\n    /**\r\n     * 增加一条连线界面操作\r\n     * @param link 连线数据对象 \r\n     */\r\n    this.addLinkInUI = function(link) {\r\n        self.addLink(link);\r\n        self.update();\r\n    };\r\n\r\n    /**\r\n     * 批量增加连线界面操作\r\n     * @param links 连线数据对象数组\r\n     */\r\n    this.addLinksInUI = function(links) {\r\n        self.addLinks(links);\r\n        self.update();\r\n    };\r\n\r\n    /**\r\n     * 批量增加组操作\r\n     * @param groups 组对象数组\r\n     */\r\n    this.addGroupsInUI = function(groups) {\r\n        self.addGroups(groups);\r\n        self.update();\r\n    };\r\n\r\n    /**\r\n     * 批量增加组操作\r\n     * @param groups 组对象数组\r\n     */\r\n    this.removeGroupsInUI = function(groups) {\r\n        if(!groups.length)return;\r\n        groups.forEach(function(group){\r\n            self.removeGroup(group);\r\n        })\r\n        self.update();\r\n    }\r\n    \r\n\r\n    /**\r\n     * 删除节点界面操作 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeNodeInUI = function(node) {\r\n        self.removeNode(node);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 批量删除节点界面操作 \r\n     * @param ids 要删除的节点id数组\r\n     */\r\n    this.removeNodesInUI = function(nodes) {\r\n        if(!nodes.length)return;\r\n        self.removeNodes(nodes);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 删除连线界面操作 \r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLinkInUI = function(link) {\r\n        self.removeLink(link);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 批量删除连线界面操作 \r\n     * @param links 要删除的连线数据对象数组\r\n     */\r\n    this.removeLinksInUI = function(links) {\r\n        if(!links.length)return;\r\n        self.removeLinks(links);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 批量删除选中节点和连线界面操作 \r\n     */\r\n    this.removeAllSelectedInUI = function() {\r\n        // var plugin, links = [], nodeIds = [];\r\n        // self.nodesIns.forEach(function(ins) {\r\n        //     plugin = ins.normalChild();\r\n        //     if(plugin && plugin.selected()){\r\n        //         nodeIds.push(plugin.el.data()[0].id);\r\n        //     }\r\n        // });\r\n        // self.linksIns.forEach(function(ins) {\r\n            // plugin = ins.normalChild();\r\n        //     if(plugin && plugin.selected()){\r\n        //      links.push(plugin.el.data()[0]);\r\n        //     }\r\n        // });\r\n        // self.removeNodes(nodeIds);\r\n        self.removeGroupsInUI(selectedGroupItems);\r\n        self.removeLinksInUI(selectedLinkItems)\r\n        self.removeNodesInUI(selectedNodeItems);\r\n    };\r\n    \r\n    /**\r\n     * 删除节点下的子节点，同时清除link信息界面操作 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeChildNodesInUI = function(id) {\r\n        self.removeChildNodes(id);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 展开节点界面操作\r\n     * @param id 要展开的节点id\r\n     * @param isExpandAll 是否强制展开所有子孙节点，默认为false,\r\n     *                    若为false则原先合拢的子孙节点在父节点展开后保持原有状态；若为true则强制展开所有子孙节点\r\n     */\r\n    this.expandNodeInUI = function(id, isExpandAll) {\r\n        self.expandNode(id, isExpandAll);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 合拢节点界面操作\r\n     * @param id 要合拢的节点id\r\n     */\r\n    this.collapseNodeInUI = function(id) {\r\n        self.collapseNode(id);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 展开或者合拢节点界面操作\r\n     * @param node 当前要展开或者合拢的节点数据对象\r\n     */\r\n    this.expandOrCollapseNodeInUI = function(node) {\r\n        if(!node.enabledExpand) {\r\n            return;\r\n        }\r\n        self.expandOrCollapseNode(node);\r\n        self.update();\r\n    };\r\n    \r\n    /**\r\n     * 触发鹰眼变更\r\n     */\r\n    function fireContentChange(){\r\n        self.mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.CONTENT_CHANGE,true,true));\r\n    }\r\n    \r\n    BizTopology.clazzName = \"BizTopology\";\r\n    \r\n    // 初始化\r\n    this.init();\r\n};\r\n\r\nBizTopology.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    BizTopology.prototype = Object.create(BaseChart.prototype);\r\n    BizTopology.prototype.constructor = BizTopology;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n//显示所有节点\r\nBizTopology.SHOW_ALL_LEVEL_NODES = 99999;\r\n\r\n//显示第一层级所有节点\r\nBizTopology.SHOW_FIRST_LEVEL_NODES = 0;\r\n\r\nmodule.exports = BizTopology;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/bizTopology.js\n// module id = 29\n// module chunks = 0","// 日历图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 日历图配置数据\r\n * @param _layout 日历图布局对象，不传就为默认布局\r\n */\r\nvar Calendar = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const CommonUtil = ghca_charts.view.util.commonUtil;\r\n    const CalendarLayout = ghca_charts.layout.calendarLayout;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        isInit = true,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        firstDaysMap,\r\n        defaultMonthBorder = {\r\n            style:{\r\n                fill:\"none\", \r\n                stroke: \"#000\"\r\n            }\r\n        },\r\n        defaultDayBorder = {\r\n            style:{\r\n                fill:\"none\", \r\n                stroke: \"#ccc\"\r\n            }\r\n        },\r\n        defaultYearLabel = {\r\n            show:true,          //标签是否显示\r\n            labelFormat:\"{v}\",  //标签内容\r\n            padding:5,          //标签和主体内容间隔\r\n            xPos:\"left\",        //标签水平位置left|center|right|具体数值\r\n            yPos:\"middle\",      //标签垂直位置top|middle|bottom|具体数值\r\n            rotate:0,           //标签旋转角度\r\n            style:{             //内容样式，兼容css style\r\n                fontSize:12, \r\n                fontFamily:\"sans-serif\", \r\n                fill:\"#000\", \r\n                textAnchor:\"middle\"\r\n            }\r\n        },\r\n        defaultMonthLabel = {\r\n            show:true,              //标签是否显示\r\n            labelFormat: \"{v}月\",    //标签内容\r\n            padding:5,              //标签和主体内容间隔\r\n            xPos:\"center\",          //标签水平位置left|center|right|具体数值\r\n            yPos:\"top\",             //标签垂直位置top|middle|bottom|具体数值\r\n            rotate:0,               //标签旋转角度\r\n            style:{                 //内容样式，兼容css style\r\n                fontSize:12, \r\n                fontFamily:\"sans-serif\", \r\n                fill:\"#000\", \r\n                textAnchor:\"middle\"\r\n            }\r\n        };\r\n    \r\n    self.className(\"seriesCalendar\");\r\n    //添加可从配置文件读取的属性名称\r\n//    self.addAttributes(\"attribute\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    //------------------------------\r\n    //  yearLabel\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 年份标签配置数据\r\n     */\r\n    var yearLabel = null;\r\n    this.yearLabel = function(value) {\r\n        if (!arguments.length) return yearLabel;\r\n        yearLabel = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  monthLabel\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 月份标签配置数据\r\n     */\r\n    var monthLabel = null;\r\n    this.monthLabel = function(value) {\r\n        if (!arguments.length) return monthLabel;\r\n        monthLabel = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  monthBorder\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 月份边框配置数据\r\n     */\r\n    var monthBorder = null;\r\n    this.monthBorder = function(value) {\r\n        if (!arguments.length) return monthBorder;\r\n        monthBorder = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  dayBorder\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 日期边框配置数据\r\n     */\r\n    var dayBorder = null;\r\n    this.dayBorder = function(value) {\r\n        if (!arguments.length) return dayBorder;\r\n        dayBorder = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.itemsIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        //放置所有项的g元素\r\n        var itemsContainer = new BaseComponent();\r\n        itemsContainer.className(\"calendar-ItemsContainer\");\r\n        self.addChild(itemsContainer);\r\n        self.itemsContainer = itemsContainer;\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n        superRefreshData();\r\n        \r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n            item = items[i];\r\n            //生成visible属性，默认值为true\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        };\r\n        \r\n        var calendar = self.data().calendar;\r\n        //parse monthBorder\r\n        var newMonthBorder = defaultMonthBorder;\r\n        if(calendar && ObjectUtil.isObject(calendar.monthBorder)) {\r\n            if(calendar.monthBorder) {\r\n                newMonthBorder = CommonUtil.createConfig(defaultMonthBorder, calendar.monthBorder);\r\n            }\r\n        }\r\n        self.monthBorder(newMonthBorder);\r\n        \r\n        //parse dayBorder\r\n        var newDayBorder = defaultDayBorder;\r\n        if(calendar && ObjectUtil.isObject(calendar.dayBorder)) {\r\n            if(calendar.dayBorder) {\r\n                newDayBorder = CommonUtil.createConfig(defaultDayBorder, calendar.dayBorder);\r\n            }\r\n        }\r\n        self.dayBorder(newDayBorder);\r\n        \r\n        //parse yearLabel\r\n        var newYearLabel = defaultYearLabel;\r\n        if(calendar && ObjectUtil.isObject(calendar.yearLabel)) {\r\n            if(calendar.yearLabel) {\r\n                newYearLabel = CommonUtil.createConfig(defaultYearLabel, calendar.yearLabel);\r\n            }\r\n        }\r\n        self.yearLabel(newYearLabel);\r\n        \r\n        //parse monthLabel\r\n        var newMonthLabel = defaultMonthLabel;\r\n        if(calendar && ObjectUtil.isObject(calendar.monthLabel)) {\r\n            if(calendar.monthLabel) {\r\n                newMonthLabel = CommonUtil.createConfig(defaultMonthLabel, calendar.monthLabel);\r\n            }\r\n        }\r\n        self.monthLabel(newMonthLabel);\r\n        \r\n        //parse dayLabel\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n        self.refreshData();\r\n        //只用当前可见的项作为渲染数据源\r\n        var items = self.data().data;\r\n        self.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n        \r\n        //计算布局，获取项数据数组\r\n        self.layout().update();\r\n        \r\n        //update background\r\n        updateBackground();\r\n        \r\n        //update content cells\r\n        updateCells();\r\n        \r\n        self.renderPosition();\r\n        \r\n        isInit = false;\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Calendar info: \"   +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var getTimeDays = function(year) {\r\n    \tvar layout = self.layout();\r\n        var dateRange = layout.mode() === CalendarLayout.MODE_NORMAL ? \r\n            layout.getDateRange(year) : \r\n            [new Date(year, 0, 1), new Date(year + 1, 0, 1)];\r\n        return d3.timeDays(dateRange[0], dateRange[1]); \r\n    };\r\n    \r\n    var getTimeMonths = function(year) {\r\n        var layout = self.layout();\r\n        var dateRange = layout.mode() === CalendarLayout.MODE_NORMAL ? \r\n            layout.getDateRange(year) : \r\n            [new Date(year, 0, 1), new Date(year + 1, 0, 1)];\r\n        return d3.timeMonths(dateRange[0], dateRange[1]); \r\n    };\r\n    \r\n    var updateBackground = function() {\r\n    \t //update background cells\r\n        updateBgCells();\r\n        \r\n        //update background labels\r\n        updateYearLabel();\r\n        updateMonthLabel();\r\n        updateDayLabel();\r\n    };\r\n    \r\n    var updateBgCells = function() {\r\n    \tvar cellWidth = self.layout().cellWidth();\r\n    \tvar cellHeight = self.layout().cellHeight();\r\n    \tvar monthBorder = self.monthBorder();\r\n    \tvar dayBorder = self.dayBorder();\r\n    \t\r\n    \t//years\r\n    \tvar yearItemsUpdate = self.itemsContainer.mainContainer().selectAll(\"g.year-item\")\r\n            .data(self.layout().yearsData(), function(d) {\r\n                return d.year;\r\n            });\r\n        //add\r\n        var addYearItems = yearItemsUpdate.enter().append(\"g\")\r\n            .attr(\"class\", \"year-item\")\r\n            .attr(\"transform\", function(d) {\r\n                return \"translate(\" + (-cellWidth*53) + \",\" + d.y + \")\";\r\n            })\r\n            .transition()\r\n            .duration(self.animation() ? 500 : 0)\r\n            .delay(function (d, i) {\r\n                return self.animation() ? 100 * i : 0\r\n            })\r\n            .attr(\"transform\", function(d) {\r\n                return \"translate(\" + d.x + \",\" + d.y + \")\";\r\n            })\r\n            .selection();\r\n        //update\r\n        yearItemsUpdate.each(function(d){\r\n            d3.select(this)\r\n                .transition()\r\n                .duration(self.animation() ? 500 : 0)\r\n                .attr(\"transform\", function(d) {\r\n                    return \"translate(\" + d.x + \",\" + d.y + \")\";\r\n                });\r\n        });\r\n        \r\n        //days\r\n        firstDaysMap = {};\r\n        var addDayConItems = addYearItems.append(\"g\").attr(\"class\", \"days-con\");\r\n        var dayItemsUpdate = self.itemsContainer.mainContainer().selectAll(\"g.days-con\")\r\n            .selectAll(\"g.day-itemCon\")\r\n            .data(function(d) {\r\n            \tvar days = getTimeDays(d.year);\r\n            \tfirstDaysMap[d.year] = days[0];\r\n                return days; \r\n            }, function(d) {\r\n                return d.toString(); \r\n            });\r\n        //add    \r\n        var addDayItems = dayItemsUpdate.enter().append(\"g\").attr(\"class\", \"day-itemCon\")\r\n            .attr(\"transform\", function(d) {\r\n            \tvar tx = d3.timeWeek.count(firstDaysMap[d.getFullYear()], d) * cellWidth;\r\n            \tvar ty = d.getDay() * cellHeight;\r\n                return \"translate(\" + tx + \",\" + ty + \")\";\r\n            })\r\n            .append(\"rect\").attr(\"class\", \"day-item-bg\")\r\n            .attr(\"width\", cellWidth)\r\n            .attr(\"height\", cellHeight);\r\n        CommonUtil.setGroupStyle(addDayItems, dayBorder.style);\r\n        CommonUtil.setGroupAttr(addDayItems, dayBorder.attr);\r\n        //update\r\n        var dayItems = dayItemsUpdate.transition()\r\n            .duration(self.animation() ? 500 : 0)\r\n            .attr(\"transform\", function(d) {\r\n                var tx = d3.timeWeek.count(firstDaysMap[d.getFullYear()], d) * cellWidth;\r\n                var ty = d.getDay() * cellHeight;\r\n                return \"translate(\" + tx + \",\" + ty + \")\";\r\n            })\r\n            .selectAll(\"rect.day-item-bg\")\r\n            .attr(\"width\", cellWidth)\r\n            .attr(\"height\", cellHeight)\r\n            .selection();\r\n        CommonUtil.setGroupStyle(dayItems, dayBorder.style);\r\n        CommonUtil.setGroupAttr(dayItems, dayBorder.attr);\r\n        lastGroup = null;\r\n        //delete\r\n        var dayItemsExit = dayItemsUpdate.exit();\r\n        dayItemsExit.remove();\r\n        \r\n        \r\n        //months\r\n        var addMonthConItem = addYearItems.append(\"g\").attr(\"class\", \"months-con\");\r\n        var monthItemsUpdate = self.itemsContainer.mainContainer().selectAll(\"g.months-con\")\r\n            .selectAll(\"g.month-item\")\r\n            .data(function(d) { \r\n                return getTimeMonths(d.year);\r\n            }, function(d) {\r\n                return d.toString(); \r\n            });\r\n        //add   \r\n        var addMonthItems = monthItemsUpdate.enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"month-item\")\r\n            .append(\"path\")\r\n            .attr(\"d\", pathMonth);\r\n        CommonUtil.setGroupStyle(addMonthItems, monthBorder.style);\r\n        CommonUtil.setGroupAttr(addMonthItems, monthBorder.attr);\r\n        //update\r\n        var monthItems = monthItemsUpdate.each(function(d) {\r\n            d3.select(this).selectAll(\"path\").attr(\"d\", pathMonth);\r\n        }).select(\"path\");\r\n        CommonUtil.setGroupStyle(monthItems, monthBorder.style);\r\n        CommonUtil.setGroupAttr(monthItems, monthBorder.attr);\r\n        //delete\r\n        var monthItemsExit = monthItemsUpdate.exit();\r\n        monthItemsExit.remove();\r\n            \r\n        //delete\r\n        var yearItemsExit = yearItemsUpdate.exit();\r\n        yearItemsExit.remove();\r\n    };\r\n    \r\n    var updateYearLabel = function() {\r\n    \tvar yearLabel = self.yearLabel();\r\n    \tvar yearItems = self.itemsContainer.mainContainer().selectAll(\"g.year-item\");\r\n    \tvar show = yearLabel.show === true;\r\n    \tif(!show) {\r\n    \t\tyearItems.selectAll(\"text.year-label\").remove();\r\n    \t} else {\r\n    \t\tyearItems.each(function(d) {\r\n    \t\t\tvar parent = d3.select(this);\r\n    \t\t\tvar label = parent.select(\"text.year-label\");\r\n    \t\t\tif(!label.node()) {\r\n    \t\t\t\tlabel = parent.append(\"text\").attr(\"class\", \"year-label\");\r\n    \t\t\t}\r\n    \t\t\tvar text = getResultLabel(yearLabel.labelFormat, d.year, d.year, self.visibleItems(),d);\r\n    \t\t\tlabel.text(text);\r\n    \t\t\tCommonUtil.setGroupStyle(label, yearLabel.style);\r\n    \t\t\tCommonUtil.setGroupAttr(label, yearLabel.attr);\r\n    \t\t\t\r\n    \t\t\t//计算布局\r\n                var x = 0,\r\n                    y = 0,\r\n                    xPos = yearLabel.xPos,\r\n                    yPos = yearLabel.yPos,\r\n                    padding = yearLabel.padding,\r\n                    rotate = yearLabel.rotate,\r\n                    parentBox = parent.select(\"g.days-con\").node().getBBox(),\r\n                    parentW = parentBox.width,\r\n                    parentH = parentBox.height,\r\n                    labelBox = label.node().getBBox(),\r\n                    labelW = labelBox.width,\r\n                    labelH = labelBox.height;\r\n                //计算水平定位\r\n                if(!isNaN(xPos)) {\r\n                    x = xPos;\r\n                } else if(xPos === \"left\") {\r\n                    x = -labelW/2 - padding;\r\n                } else if(xPos === \"right\")  {\r\n                    x = parentW + labelW/2 + padding;\r\n                } else {//default center\r\n                    x = parentW / 2;\r\n                }\r\n                \r\n                //计算垂直定位\r\n                if(!isNaN(yPos)) {\r\n                    y = yPos;\r\n                } else if(yPos === \"middle\") {\r\n                    y = parentH/2;\r\n                } else if(yPos === \"bottom\")  {\r\n                    y = parentH + labelH/2 + padding;\r\n                } else {//defult top\r\n                    y = -labelH/2 - padding;\r\n                }\r\n                \r\n                label.transition().duration(self.animation() ? 500 : 0).delay(self.animation() ? 200 : 0)\r\n                    .attr(\"transform\", \"translate(\" + x + \",\" + y + \")rotate(\" + rotate + \")\");\r\n    \t\t});\r\n    \t}\r\n    };\r\n    \r\n    var updateMonthLabel = function() {\r\n    \tvar cellWidth = self.layout().cellWidth();\r\n        var cellHeight = self.layout().cellHeight();\r\n        var monthLabel = self.monthLabel();\r\n        var monthItems = self.itemsContainer.mainContainer().selectAll(\"g.month-item\");\r\n        var show = monthLabel.show === true;\r\n        if(!show) {\r\n            monthItems.selectAll(\"text.month-label\").remove();\r\n        } else {\r\n            monthItems.each(function(d) {\r\n            \tvar monthItem = d3.select(this);\r\n                var monthPath = monthItem.select(\"path\");\r\n                var label = monthItem.select(\"text.month-label\");\r\n                if(!label.node()) {\r\n                    label = monthItem.append(\"text\").attr(\"class\", \"month-label\");\r\n                }\r\n                var month = new Date(d).getMonth() + 1;\r\n                var text = getResultLabel(monthLabel.labelFormat, month, month, self.visibleItems(), d);\r\n                label.text(text);\r\n                CommonUtil.setGroupStyle(label, monthLabel.style);\r\n                CommonUtil.setGroupAttr(label, monthLabel.attr);\r\n                \r\n                //计算布局\r\n                var x = 0,\r\n                    y = 0,\r\n                    xPos = monthLabel.xPos,\r\n                    yPos = monthLabel.yPos,\r\n                    padding = monthLabel.padding,\r\n                    rotate = monthLabel.rotate,\r\n                    pathBox = monthPath.node().getBBox(),\r\n                    pathW = pathBox.width,\r\n                    pathH = pathBox.height,\r\n                    pathX = pathBox.x,\r\n                    pathY = pathBox.y,\r\n                    labelBox = label.node().getBBox(),\r\n                    labelW = labelBox.width,\r\n                    labelH = labelBox.height;\r\n                //计算水平定位\r\n                if(!isNaN(xPos)) {\r\n                    x = xPos;\r\n                } else if(xPos === \"left\") {\r\n                    x = labelW/2 + padding + pathX;\r\n                } else if(xPos === \"right\")  {\r\n                    x = pathW - labelW/2 - padding + pathX;\r\n                } else {//default center\r\n                    x = pathW / 2 + pathX;\r\n                }\r\n                \r\n                var yDiff = 2;\r\n                //计算垂直定位\r\n                if(!isNaN(yPos)) {\r\n                    y = yPos;\r\n                } else if(yPos === \"middle\") {\r\n                    y = pathH/2 + labelH/2 + pathY;\r\n                } else if(yPos === \"bottom\")  {\r\n                    y = pathH + labelH + padding + pathY - yDiff;\r\n                } else {//defult top\r\n                    y = pathY - padding - yDiff;\r\n                }\r\n                \r\n                label.transition().duration(self.animation() ? 500 : 0).delay(self.animation() ? 200 : 0)\r\n                    .attr(\"transform\", \"translate(\" + x + \",\" + y + \")rotate(\" + rotate + \")\");\r\n            });\r\n        }\r\n    };\r\n    \r\n    var updateDayLabel = function() {\r\n    };\r\n    \r\n    var updateCells = function() {\r\n        var visibleItems = self.visibleItems();\r\n        var itemMap = {};\r\n        var dateKey = self.layout().dateKey();\r\n        var cellWidth = self.layout().cellWidth();\r\n        var cellHeight = self.layout().cellHeight();\r\n        var timeFormatFn = d3.timeFormat(\"%Y-%m-%d\");\r\n        \r\n        //获取节点渲染器配置，并根据legend组件分配的颜色设置节点填充颜色,若没有legend相关配置，则组件始终强制使用自动生成的颜色填充\r\n        for(var d, i = 0, len = visibleItems.length; i < len; i++) {\r\n            d = visibleItems[i];\r\n            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n                d.legendColor = ColorUtil.getColor(i);\r\n            }\r\n            var config = self.getRendererConfig(d, \"fill\");\r\n            itemMap[d[dateKey]] = d;\r\n        }\r\n        \r\n        var renderItems = d3.selectAll(\"g.day-itemCon\").filter(function(d) { \r\n            return timeFormatFn(d) in itemMap; \r\n        });\r\n        \r\n        //render node items\r\n        renderItems.each(function(d) {\r\n        \tvar data = itemMap[timeFormatFn(d)];\r\n        \tdata.x = 0;\r\n        \tdata.y = 0;\r\n        \tdata.width = cellWidth;\r\n        \tdata.height = cellHeight;\r\n            var itemsUpdate = d3.select(this).selectAll(\"g.day-item\")\r\n                .data([data], function(d) {\r\n                    return d[dateKey];\r\n                });\r\n            //update\r\n            itemsUpdate.each(function(d){\r\n                d.ins && d.ins.update(true);\r\n            });\r\n            //add\r\n            var itemsEnter = itemsUpdate.enter().append(\"g\").attr(\"class\", \"day-item\");\r\n            itemsEnter.each(function(d){\r\n                var clazz = d.hasOwnProperty(\"data\") && d.data ? d.data.clazz : \"rectShape\";\r\n                var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n                nodeIns.isChartFirstInit && nodeIns.isChartFirstInit(isInit);\r\n                nodeIns.graph && nodeIns.graph(self.graph());\r\n                nodeIns.render();\r\n                d.ins = nodeIns;\r\n                d.legendIns = d3.select(this);\r\n            });\r\n        });\r\n        \r\n        //delete\r\n        var exitItems = d3.selectAll(\"g.day-item\").filter(function(d) { \r\n            return !(d[dateKey] in itemMap); \r\n        }).remove();\r\n    };\r\n    \r\n    var pathMonth = function(t0) {\r\n    \tvar cellWidth = self.layout().cellWidth();\r\n    \tvar cellHeight = self.layout().cellHeight();\r\n    \tvar year = t0.getFullYear();\r\n    \tvar firstDay = firstDaysMap[year];\r\n        var t1 = new Date(year, t0.getMonth() + 1, 0),\r\n            d0 = t0.getDay(), w0 = d3.timeWeek.count(firstDay, t0),\r\n            d1 = t1.getDay(), w1 = d3.timeWeek.count(firstDay, t1);\r\n        return \"M\" + (w0 + 1) * cellWidth + \",\" + d0 * cellHeight\r\n            + \"H\" + w0 * cellWidth + \"V\" + 7 * cellHeight\r\n            + \"H\" + w1 * cellWidth + \"V\" + (d1 + 1) * cellHeight\r\n            + \"H\" + (w1 + 1) * cellWidth + \"V\" + 0\r\n            + \"H\" + (w0 + 1) * cellWidth + \"Z\";\r\n    };\r\n    \r\n    /**\r\n     * 根据labelFormat获取最终label的方法\r\n     * @param label labelFormat\r\n     * @param value 替换内容，支持{#script#},其中script为js脚本内容；支持{v},相当于{#d[key]#}\r\n     * @param defaultResult 默认最终label\r\n     * @param data 所有项数据\r\n     * @param d 当前项数据\r\n     */\r\n    var getResultLabel = function(label, value, defaultResult, data, d) {\r\n        if(!label) {\r\n            return defaultResult;\r\n        }\r\n        var result = label.replace(/{v}/ig, value);\r\n        return result.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n    \r\n    Calendar.clazzName = \"Calendar\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nCalendar.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    Calendar.prototype = Object.create(BaseChart.prototype);\r\n    Calendar.prototype.constructor = Calendar;\r\n};\r\n\r\nmodule.exports = Calendar;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/calendar.js\n// module id = 30\n// module chunks = 0","/**\r\n * 图表组件类，包括多个series实例，一个图表组件组成结构为\r\n *          |---继承自baseChart类的series元素(所有的位置变换都是对该元素进行操作)\r\n * chart--- |---legend\r\n *          |---axis\r\n */\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data 图表配置数据\r\n * @param _layout 图表布局对象，不传就为默认布局\r\n */\r\nvar Chart = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const SvgUtil = ghca_charts.view.util.svgUtil;\r\n    const Legend = ghca_charts.view.component.charts.legend;\r\n    const Heading = ghca_charts.view.component.charts.heading;\r\n    const Axis = ghca_charts.view.component.charts.axis;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const MouseUtil = ghca_charts.view.util.mouseUtil;\r\n    const Label = ghca_charts.view.elements.plugins.label.label;\r\n    const CommonUtil = ghca_charts.view.util.commonUtil;\r\n    const Global = ghca_charts.global;\r\n    \r\n    BaseComponent.apply(this, arguments);\r\n    \r\n    var firstHorAxis, firstVerAxis, ticksPos, ticksText, axisHotBox,\r\n        self = this,\r\n        superResize = self.resize,\r\n        superUpdate = self.update,\r\n        superRenderChildren = self.renderChildren,\r\n        superAddListeners = self.addListeners,\r\n        superRenderDefsElements = self.renderDefsElements,\r\n        formatTime = d3.timeFormat('%Y-%m-%d'),\r\n        formatDateTime = d3.timeFormat('%Y-%m-%d %H:%M:%S'),\r\n        visibleItems = [],\r\n        visibleItemsChanged = true,\r\n        isHorAxisTime = false,\r\n        isHorAxisEnum = false,\r\n        scaleQuantize = d3.scaleQuantize();\r\n        \r\n    self.className(\"chart\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  headings\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图表标题对象数组\r\n     */\r\n    var headings = [];\r\n    this.headings = function(value){\r\n        if (!arguments.length) return headings;\r\n        headings = value;\r\n        return this;\r\n    };\r\n        \r\n    //------------------------------\r\n    //  legend\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图例对象\r\n     */\r\n    var legend = null;\r\n    this.legend = function(value){\r\n        if (!arguments.length) return legend;\r\n        legend = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  axis\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 坐标轴对象\r\n     */\r\n    var axis = null;\r\n    this.axis = function(value){\r\n        if (!arguments.length) return axis;\r\n        axis = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  toolTip\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 悬浮提示框对象\r\n     */\r\n    var toolTip = null;\r\n    this.toolTip = function(value){\r\n        if (!arguments.length) return toolTip;\r\n        toolTip = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isDispatchSliderChange\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 当slider选择范围改变时是否抛出事件\r\n     */\r\n    var isDispatchSliderChange = false;\r\n    this.isDispatchSliderChange = function(value){\r\n        if (!arguments.length) return isDispatchSliderChange;\r\n        isDispatchSliderChange = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 渲染图表系列内容\r\n     * @param series 数据系列，一个图表可能包含多个系列，每一个系列可能包含多个数据，即config.series\r\n     */\r\n    this.renderSeries = function(parent, series) {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderSeries()\");\r\n        }\r\n        for(var i = 0, len = series.length; i < len; i++) {\r\n            self.renderSeriesChart(parent, series, i);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 渲染series中单个图表内容，一个图表组件至少有一个series元素\r\n     * @param series 多个个图表数据，即chart.series\r\n     * @param index 当前图表在series中的索引值\r\n     */\r\n    this.renderSeriesChart = function(parent, series, index) {\r\n        var chartData = series[index];\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderSeriesChart(), type is \" + chartData.type);\r\n        }\r\n        var chart = ClassFactory.newChartInstance(chartData.type, [chartData, null]);\r\n        if(!chart) {\r\n            throw new Error('当前传入的图表类型' + chart.type + \"尚未支持。\");\r\n        }\r\n        //设置当前图表在series中的索引值，以及series数据\r\n        chart.seriesIndex(index);\r\n        chart.seriesData(series);\r\n        //根据配置信息设置图表关联的坐标轴\r\n        self.setAxisForSeriesCharts(chart, chartData);\r\n        \r\n        parent.addChild(chart);\r\n        \r\n        return chart;\r\n    };\r\n    \r\n    /**\r\n     * 渲染子组件级别的plugin数组数据中的所有元素\r\n     * @param parent 父容器\r\n     * @param config 整体渲染配置数据\r\n     */\r\n    this.renderPlugins = function(parent, config) {\r\n        var plugins = config.plugins;\r\n        if(!plugins || plugins.length === 0) {\r\n            return;\r\n        }\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderPlugins()\");\r\n        }\r\n        plugins.forEach(function(plugin, i) {\r\n            //这里延时实例化是要等待节点动画播放完毕才能准确定位布局plugin，可以在配置里关闭plugin动画\r\n            var timer = setTimeout(function(){\r\n                clearTimeout(timer);\r\n                self.renderPlugin(self, plugin);\r\n            }, 0);\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * 渲染单个plugin元素\r\n     * @param parent 父容器\r\n     * @param d 整体渲染配置数据\r\n     */\r\n    this.renderPlugin = function(parent, d) {\r\n    \tself.mainContainer().each(function(data) {\r\n            if(d.render === undefined || RegexUtil.replace(RegexUtil.dataRegex, d.render, data) == \"true\") {\r\n                if(Global.isDebug) {\r\n                    console.log(\"Graph.renderPlugin() class is \" + d.clazz);\r\n                }\r\n                var plugin = ClassFactory.newPluginInstance(d.clazz, [parent.mainContainer(), data]);\r\n                plugin.config(d.config);\r\n                plugin.render();\r\n                pluginLayout(plugin, d, parent);\r\n            }\r\n        });\r\n    };\r\n    \r\n    /**\r\n\t * 渲染所有图表标题\r\n\t * \r\n\t * @param parent 父容器\r\n\t * @param config 整体渲染配置数据\r\n\t */\r\n    this.renderHeadings = function(parent, config) {\r\n        if(!config.headings) {\r\n            self.headings().length = 0;\r\n            return;\r\n        }\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderHeadings()\");\r\n        }\r\n        var headings = config.headings;\r\n        for(var i = 0, len = headings.length; i < len; i++) {\r\n        \tself.renderHeading(parent, config, headings[i]);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染单个图表标题\r\n     * @param config 单个标题渲染配置数据\r\n     */\r\n    this.renderHeading = function(parent, config, headingConfig) {\r\n        if(!config || !headingConfig) {\r\n            return;\r\n        }\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderHeading()\");\r\n        }\r\n        //heading是非可视化组件，只是控制textItem的渲染，故不能用parent.addChild(heading)显示\r\n        var heading = new Heading(parent, config, headingConfig);\r\n        heading.render();\r\n        self.headings().push(heading);\r\n    };\r\n    \r\n    /**\r\n     * 渲染图例\r\n     * @param config 整体渲染配置数据\r\n     */\r\n    this.renderLegend = function(parent, config) {\r\n        if(!config.legend) {\r\n        \tself.legend(null);\r\n            return;\r\n        }\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderLegend()\");\r\n        }\r\n        //legend是非可视化组件，只是控制legendItem的渲染，故不能用parent.addChild(legend)显示\r\n        var legend = new Legend(parent, config);\r\n        legend.render();\r\n        self.legend(legend);\r\n    };\r\n    \r\n    /**\r\n     * 渲染坐标轴\r\n     * @param config 整体渲染配置数据\r\n     */\r\n    this.renderAxis = function(parent, config) {\r\n        if(!config.axis || (!config.axis.xAxis && !config.axis.yAxis)) {\r\n            self.axis(null);\r\n            return;\r\n        }\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderAxis()\");\r\n        }\r\n        //axis是非可视化组件，只是控制horAxis和verAxis的渲染，故不能用parent.addChild(axis)显示\r\n        var axis = new Axis(parent, config);\r\n        axis.render();\r\n        self.axis(axis);\r\n        \r\n        firstHorAxis = axis.horAxises().length > 0 ? axis.horAxises()[0] : null;\r\n        firstVerAxis = axis.verAxises().length > 0 ? axis.verAxises()[0] : null;\r\n    };\r\n    \r\n    /**\r\n     * 渲染悬浮提示框\r\n     * @param config 整体渲染配置数据\r\n     */\r\n    this.renderToolTip = function(parent, config) {\r\n        if(!config.toolTip) {\r\n            self.toolTip(null);\r\n            return;\r\n        }\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderToolTip()\");\r\n        }\r\n        \r\n        //创建tooltip div并且根据配置设置样式\r\n        var toolTipDiv = self.ownerSVG().toolTipDiv();\r\n        \r\n        //根据配置设置样式\r\n    \tCommonUtil.setGroupStyle(toolTipDiv, config.toolTip.style);\r\n    \tCommonUtil.setGroupAttr(toolTipDiv, config.toolTip.attr);\r\n    \t\r\n        self.toolTip(toolTipDiv);\r\n    };\r\n    \r\n    this.renderChildren = function() {\r\n    \tsuperRenderChildren();\r\n    \t\r\n    \tparseConfig();\r\n    \t\r\n    \tvar data = self.data();\r\n    \tif(data && data.hasOwnProperty(\"series\")) {\r\n    \t\t//渲染图表标题\r\n    \t\tself.renderHeadings(self, data);\r\n            //渲染图例\r\n            self.renderLegend(self, data);\r\n            //渲染坐标轴\r\n            self.renderAxis(self, data);\r\n            //渲染图表系列内容\r\n            self.renderSeries(self, data.series);\r\n            //渲染坐标轴内容热区容器\r\n            renderAxisHotAreaContainer();\r\n            //渲染分割线容器\r\n            renderSplitLineContainer();\r\n            //渲染坐标轴指针容器\r\n            renderFocusLineContainer();\r\n            //渲染水平坐标轴范围选择容器\r\n            renderHSliderContainer(\"render\");\r\n            //渲染悬浮提示内容\r\n            self.renderToolTip(self, data);\r\n            //刷新全局数据\r\n            refreshGlobalVars();\r\n            //这里再刷新一次是因为layout.measure方法在child.update()中调用，调用之后才会有最新的total数据在bar图表中，根据该total数据值刷新坐标轴刻度才正确\r\n            updateAgainInBarChart();\r\n        }\r\n        if(data) {\r\n        \t//渲染子组件基本的所有plugin\r\n    \t\tself.renderPlugins(self, data);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据配置信息设置图表关联的坐标轴\r\n     */\r\n    this.setAxisForSeriesCharts = function(chart, chartData) {\r\n        //根据配置信息设置图表关联的坐标轴\r\n        var xAxisIndex, yAxisIndex, \r\n            axis = self.axis(), \r\n            horAxises = axis ? axis.horAxises() : null, \r\n            verAxises = axis ? axis.verAxises() : null\r\n            \r\n        //根据配置设置图表关联的水平坐标轴\r\n        if(horAxises && horAxises.length > 0) {\r\n            if(chartData.hasOwnProperty(\"xAxisIndex\")) {\r\n                xAxisIndex = chartData.xAxisIndex;\r\n                if(xAxisIndex >= horAxises.length) {\r\n                    xAxisIndex = horAxises.length - 1;\r\n                }\r\n                if(xAxisIndex < 0) {\r\n                    xAxisIndex = 0;\r\n                }\r\n            } else {\r\n                xAxisIndex = 0;\r\n            }\r\n            chart.horAxis(horAxises[xAxisIndex]);\r\n        }\r\n        \r\n        //根据配置设置图表关联的垂直坐标轴\r\n        if(verAxises && verAxises.length > 0) {\r\n            if(chartData.hasOwnProperty(\"yAxisIndex\")) {\r\n                yAxisIndex = chartData.yAxisIndex;\r\n                if(yAxisIndex >= verAxises.length) {\r\n                    yAxisIndex = verAxises.length - 1;\r\n                }\r\n                if(yAxisIndex < 0) {\r\n                    yAxisIndex = 0;\r\n                }\r\n            } else {\r\n                yAxisIndex = 0;\r\n            }\r\n            chart.verAxis(verAxises[yAxisIndex]);\r\n        }\r\n    };\r\n    \r\n    this.sortAllChildrenByZIndex = function() {\r\n        var zIndex, className, childNodes = self.node().childNodes, chartIndex = 0;\r\n        for (var element, i = 0, len = childNodes.length; i < len; i++) {\r\n            element = childNodes[i];\r\n            className = element.getAttribute(\"class\");\r\n            if(className === \"legend\") {\r\n                element.setAttribute(\"z-index\", Chart.LEGEND_Z_INDEX);\r\n            } else if(className === \"heading\") {\r\n                element.setAttribute(\"z-index\", Chart.HEADING_Z_INDEX);\r\n            } else if(className === \"axis\") {\r\n                element.setAttribute(\"z-index\", Chart.AXIS_Z_INDEX);\r\n            } else if(className === \"axis-hotArea-container\") {\r\n                element.setAttribute(\"z-index\", Chart.AXIS_HOTAREA_CONTAINER_Z_INDEX);\r\n            } else if(className === \"focus-container\") {\r\n                element.setAttribute(\"z-index\", Chart.FOCUS_CONTAINER_Z_INDEX);\r\n            } else if(className === \"borderContainer\") {\r\n            \telement.setAttribute(\"z-index\", Chart.BORDER_CONTAINER_Z_INDEX);\r\n            } else if(className === \"bgContainer\") {\r\n                element.setAttribute(\"z-index\", Chart.BG_Z_INDEX);\r\n            } else if(className === \"split-container\") {\r\n                element.setAttribute(\"z-index\", Chart.SPLIT_CONTAINER_Z_INDEX);\r\n            } else if(className === \"hSlider-container\") {\r\n                element.setAttribute(\"z-index\", Chart.HSLIDER_CONTAINER_Z_INDEX);\r\n            } else {\r\n            \tzIndex = parseInt(element.getAttribute(\"z-index\"));\r\n                //若有z-index属性，并且超过图表层级定义范围，则直接设置z-index为图表最小层级\r\n                if(!isNaN(zIndex) && (zIndex < Chart.CHART_MIN_Z_INDEX + chartIndex || zIndex > Chart.CHART_MAX_Z_INDEX)) {\r\n                    element.setAttribute(\"z-index\", Chart.CHART_MIN_Z_INDEX + chartIndex);\r\n                    chartIndex++;\r\n                }\r\n            }\r\n        }\r\n        SvgUtil.sortByZIndex(childNodes, false);\r\n    };\r\n    \r\n    this.update = function() {\r\n    \tvisibleItemsChanged = true;\r\n        //update axis content\r\n        var data = self.data();\r\n        if(data && data.hasOwnProperty(\"series\")) {\r\n            if(self.axis()) {\r\n            \t//bar类型提前刷新布局，计算出total值，供axis.update使用，针对动态改变barType来写的---start\r\n            \tbarLayoutUpdate();\r\n            \t//bar类型提前刷新布局，计算出total值，供axis.update使用，针对动态改变barType来写的---end\r\n            \t\r\n                self.axis().update();\r\n            }\r\n            //渲染坐标轴内容热区容器\r\n            renderAxisHotAreaContainer();\r\n            //渲染分割线容器\r\n            renderSplitLineContainer();\r\n            //渲染坐标轴指针容器\r\n            renderFocusLineContainer();\r\n            //渲染水平坐标轴范围选择容器\r\n            renderHSliderContainer(\"update\");\r\n            //渲染悬浮提示内容\r\n            self.renderToolTip(self, data);\r\n            //刷新全局数据\r\n            refreshGlobalVars();\r\n        }\r\n        \r\n        //update legend\r\n        if(self.legend()) {\r\n            self.legend().update();\r\n        }\r\n        \r\n        //这里调用父类update方法，确保执行了坐标轴内容更新以后，所有component组件大小正确\r\n        superUpdate();\r\n        \r\n        //update all headings\r\n        var headings = self.headings();\r\n        if(headings && headings.length > 0) {\r\n            for(var i = 0, len = headings.length; i < len; i++) {\r\n                headings[i].update();\r\n            }\r\n        }\r\n    };\r\n    \r\n    this.resize = function() {\r\n    \tsuperResize();\r\n    \t\r\n    \t//update axis content\r\n    \tvar data = self.data();\r\n        if(data && data.hasOwnProperty(\"series\")) {\r\n            if(self.axis()) {\r\n                self.axis().update();\r\n            }\r\n            //渲染坐标轴内容热区容器\r\n            renderAxisHotAreaContainer();\r\n            //渲染分割线容器\r\n            renderSplitLineContainer();\r\n            //渲染坐标轴指针容器\r\n            renderFocusLineContainer();\r\n            //渲染水平坐标轴范围选择容器\r\n            renderHSliderContainer(\"resize\");\r\n            //刷新全局数据\r\n            refreshGlobalVars();\r\n        }\r\n        \r\n        //这里再次调用父类resize方法，确保执行了坐标轴内容更新以后，所有component组件大小正确\r\n        superResize();\r\n        \r\n        //reset layout all headings\r\n        var headings = self.headings();\r\n        if(headings && headings.length > 0) {\r\n        \tfor(var i = 0, len = headings.length; i < len; i++) {\r\n        \t\theadings[i].resetLayout(true);\r\n        \t}\r\n        }\r\n        //reset layout legend\r\n    \tif(self.legend()) {\r\n            self.legend().resetLayout();\r\n    \t}\r\n    };\r\n    \r\n    this.renderDefsElements = function() {\r\n    \tsuperRenderDefsElements();\r\n    \t\r\n        var id = self.id(), svg = self.ownerSVG().mainContainer();\r\n        var maskId = \"rectMask\" + id;\r\n        if(self.clipContent() && self.width() > 0 && self.height() > 0 && !self.isRenderer()) {\r\n        \tvar rx = _data && _data.border ? _data.border.rx : undefined;\r\n        \tvar ry = _data && _data.border ? _data.border.ry : undefined;\r\n            var reckMask = SvgUtil.createRectMask(svg, maskId, 0, 0, self.width(), self.height(), rx, ry);\r\n            self.mainContainer().attr(\"mask\", \"url(#\" + maskId + \")\");\r\n        } else {\r\n            SvgUtil.deleteDefsElement(svg, maskId);\r\n            self.mainContainer().attr(\"mask\", null);\r\n        }\r\n        \r\n    };\r\n    \r\n    this.addListeners = function() {\r\n    \tsuperAddListeners();\r\n    \t\r\n    \tif(self.axis()) {\r\n    \t\tself.mainContainer().on(\"mouseover\", mouseOverHandler);\r\n            self.mainContainer().on(\"mousemove\", mouseMoveHandler);\r\n            self.mainContainer().on(\"mouseout\", mouseOutHandler);\r\n    \t}\r\n    \tself.addEventListener(BaseEvent.LEGEND_ITEM_CLICK, self.legendItemClickHandler);\r\n    \tself.addEventListener(BaseEvent.SHOW_TOOL_TIP, self.showToolTipHandler);\r\n    \tself.addEventListener(BaseEvent.UPDATE_TOOL_TIP, self.updateToolTipHandler);\r\n    \tself.addEventListener(BaseEvent.HIDE_TOOL_TIP, self.hideToolTipHandler);\r\n    };\r\n    \r\n    this.getVisibleItems = function() {\r\n    \tif(visibleItemsChanged) {\r\n    \t\tvisibleItemsChanged = false;\r\n    \t\tvar children = self.children();\r\n            if(children !== null && children.length > 0) {\r\n                visibleItems = [];\r\n                var instanceofChart = ClassFactory.instanceofChart;\r\n                for(var child, i = 0, len = children.length; i < len; i++) {\r\n                    child = children[i];\r\n                    if(instanceofChart(child)) {\r\n                        visibleItems = visibleItems.concat(child.visibleItems());\r\n                    }\r\n                }\r\n            }\r\n    \t}\r\n        return visibleItems;\r\n    };\r\n    \r\n    /**\r\n     * 根据x坐标获取对应的最近的一个item的数据\r\n     * @x x坐标\r\n     */\r\n    this.getItemDataByX = function(x) {\r\n    \tvar items = self.getVisibleItems();\r\n        var item = getItemByX(x, items);\r\n        return item;\r\n    };\r\n    \r\n    /**\r\n     * 根据y坐标获取对应的最近的一个item的数据\r\n     * @y y坐标\r\n     */\r\n    this.getItemDataByY = function(y) {\r\n        var items = self.getVisibleItems();\r\n        var item = getItemByY(y, items);\r\n        return item;\r\n    };\r\n    \r\n    /**\r\n     * 根据配置和当前鼠标坐标获取本图表要显示的toolTip内容字符串\r\n     * @config toolTip配置数据\r\n     * @x 当前鼠标相对坐标轴内容的水平坐标\r\n     * @y 当前鼠标相对坐标轴内容的垂直坐标\r\n     * @tickIndex 当前距离鼠标最近的刻度值索引\r\n     * @d 鼠标经过图表节点项数据\r\n     */\r\n    this.getToolTipStr = function(config, x, y, tickIndex, d) {\r\n        var itemsData = self.getVisibleItems();\r\n        var item, items, lineStr, str = \"\", br = \"<br>\";\r\n        var labelFormat = config.labelFormat;\r\n        var trigger = config.trigger ? config.trigger :　\"item\";//xAxis|yAxis|item\r\n        var isHorAxisEnum = firstHorAxis && firstHorAxis.type() === \"enum\";\r\n        var isVerAxisEnum = firstVerAxis && firstVerAxis.type() === \"enum\";\r\n        var showIcon = config.hasOwnProperty(\"showIcon\") ? config.showIcon === true : true;\r\n        if(labelFormat === null || labelFormat === undefined || labelFormat === \"\") {\r\n            \r\n        } else if(ObjectUtil.isString(labelFormat)) {\r\n            if(trigger === \"xAxis\") {\r\n            \tif(isHorAxisEnum && tickIndex !== undefined && ticksText) {\r\n            \t\titems = self.filterArrayByElementProperty(itemsData, firstHorAxis.key(), ticksText[tickIndex]);\r\n            \t} else {\r\n            \t\titems = getItemsByX(x, itemsData);\r\n            \t}\r\n            } else if(trigger === \"yAxis\") {\r\n            \tif(isVerAxisEnum && tickIndex !== undefined && ticksText) {\r\n            \t\titems = self.filterArrayByElementProperty(itemsData, firstVerAxis.key(), ticksText[tickIndex]);\r\n            \t} else {\r\n            \t\titems = getItemsByY(y, itemsData);\r\n            \t}\r\n            } else if(d !== undefined) {//default item\r\n                items = [d];\r\n            }\r\n        \tfor(var i = 0, len = items.length; i < len; i++) {\r\n        \t\titem = items[i];\r\n        \t\tlineStr = self.formatToolTip(labelFormat, item);\r\n                if(lineStr !== \"\") {\r\n                    str += (showIcon ? (getTooltipItemIconDomStr(item) + replaceTooltipBr(lineStr)) : lineStr) + br;\r\n                }\r\n        \t}\r\n        } else if(ObjectUtil.isObject(labelFormat)) {\r\n            var len, xAxisFormat = labelFormat.xAxisFormat, \r\n                yAxisFormat = labelFormat.yAxisFormat;\r\n            if(trigger === \"xAxis\") {\r\n                if(isHorAxisEnum && tickIndex !== undefined && ticksText) {\r\n                    items = self.filterArrayByElementProperty(itemsData, firstHorAxis.key(), ticksText[tickIndex]);\r\n                }\r\n                //当枚举类型坐标轴标签显示格式被修改而导致没有查询到匹配结果时(比如数据源是\"2017-1-1\"，坐标轴刻度标签显示的是\"1-1\")，再用x轴距离过滤法查询一次\r\n                if(!items || items.length === 0) {\r\n                    items = getItemsByX(x, itemsData);\r\n                }\r\n            } else if(trigger === \"yAxis\") {\r\n                if(isVerAxisEnum && tickIndex !== undefined && ticksText) {\r\n                    items = self.filterArrayByElementProperty(itemsData, firstVerAxis.key(), ticksText[tickIndex]);\r\n                    items.reverse();\r\n                }\r\n                //当枚举类型坐标轴标签显示格式被修改而导致没有查询到匹配结果时，再用y轴距离过滤法查询一次\r\n                if(!items || items.length === 0) {\r\n                    items = getItemsByY(y, itemsData);\r\n                }\r\n            } else if(d !== undefined) {//default item\r\n            \titems = [d];\r\n            }\r\n            if(ObjectUtil.isString(xAxisFormat)) {\r\n                if(items.length > 0) {\r\n                \tif(trigger === \"xAxis\") {\r\n                        len = 1;\r\n                    } else if(trigger === \"yAxis\") {\r\n                        len = items.length;\r\n                    } else {\r\n                    \tlen = 1;\r\n                    }\r\n                \tfor(var i = 0; i < len; i++) {\r\n                        item = items[i];\r\n                        lineStr = self.formatToolTip(xAxisFormat, item);\r\n                        if(lineStr !== \"\") {\r\n                        \t//包括trigger为yAxis|item,item只添加一个图标，所以这里只添加一次，后面yAxisFormat里面不再添加\r\n                            str += (showIcon ? (getTooltipItemIconDomStr(trigger !== \"xAxis\" ? item : null) + replaceTooltipBr(lineStr)) : lineStr)  + br;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(ObjectUtil.isString(yAxisFormat)) {\r\n            \tif(items.length > 0) {\r\n                    if(trigger === \"xAxis\") {\r\n                        len = items.length;\r\n                        //这里reverse处理使tooltip的数据内容顺序与Y轴从上到下显示的枚举数据顺序一致\r\n                        if(isVerAxisEnum) {\r\n                        \titems.reverse();\r\n                        }\r\n                    } else if(trigger === \"yAxis\") {\r\n                        len = 1;\r\n                    } else {\r\n                        len = 1;\r\n                    }\r\n                    for(var i = 0; i < len; i++) {\r\n                        item = items[i];\r\n                        lineStr = self.formatToolTip(yAxisFormat, item);\r\n                        if(lineStr !== \"\") {\r\n                            str += (showIcon ? (getTooltipItemIconDomStr(trigger === \"xAxis\" ? item : null) + replaceTooltipBr(lineStr)) : lineStr) + br;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return str;\r\n    };\r\n    \r\n    /**\r\n     * 根据配置中的toolTip相关的format得到对应ges的字符串结果，其中{##}里面的是可执行的js代码\r\n     * @format 配置中的format字符串\r\n     * @d 对应item的数据\r\n     */\r\n    this.formatToolTip = function(format, d) {\r\n        format = format.replace(\"\\n\", \"<br>\");\r\n        return format.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n    \r\n    //override\r\n    this.toJSON = function() {\r\n        var str = \"\";\r\n        var d = self.data();\r\n        if(!d) {\r\n            return str;\r\n        }\r\n        var series = d.series;\r\n        if(d.series) {\r\n        \td.series = [];\r\n        }\r\n        var cloneData = ObjectUtil.cloneObj(d);\r\n        var children = self.children();\r\n        for (var child, i = 0, len = children.length; i < len; i++) {\r\n        \tchild = children[i];\r\n        \tif(ClassFactory.instanceofChart(child)) {\r\n        \t\tcloneData.series.push(JSON.parse(child.toJSON()));\r\n        \t}\r\n        }\r\n        if(series) {\r\n        \td.series = series;\r\n        }\r\n        str = JSON.stringify(cloneData);\r\n        return str;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // notice event actions code\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 返回当前鼠标所在位置是否触发显示悬浮提示\r\n     */\r\n    this.isShowToolTip = function() {\r\n        return isInsideHotArea();\r\n    };\r\n    \r\n    /**\r\n     * 获取鼠标当前所在x坐标位置对应的x轴值，若取不到则返回null\r\n     */\r\n    this.getXAxisValue = function() {\r\n        var axisHotArea = self.axisHotArea.node(), \r\n            box = axisHotArea.getBBox(), \r\n            mousePos = MouseUtil.mouse(axisHotArea, self.graph()), \r\n            x = mousePos[0],\r\n            y = mousePos[1];\r\n        var isInside = !(x < 0 || x > box.width || y < 0 || y > box.height);\r\n        if(!isInside) {\r\n            return null;\r\n        }\r\n        var data = self.getItemDataByX(x);\r\n        return data ? data[firstHorAxis.key()] : null;\r\n    };\r\n    \r\n    /**\r\n     * 显示悬浮提示操作\r\n     * @param isShow 是否显示悬浮提示，若为否则执行隐藏悬浮提示操作\r\n     * @param value 悬浮提示对应的x轴的值，若为null则执行隐藏悬浮提示操作\r\n     */\r\n    this.actionShowToolTip = function(isShow, value) {\r\n        if(isShow) {\r\n            self.actionUpdateToolTip(value);\r\n        } else {\r\n            self.actionHideToolTip();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 刷新悬浮提示操作\r\n     * @param value 悬浮提示对应的x轴的值，若为null则执行隐藏悬浮提示操作\r\n     */\r\n    this.actionUpdateToolTip = function(value) {\r\n        if(value === null) {\r\n            self.actionHideToolTip();\r\n        } else {\r\n            firstHorAxis = axis.horAxises().length > 0 ? axis.horAxises()[0] : null;\r\n            var x;\r\n            if(firstHorAxis) {\r\n                var type = firstHorAxis.type();\r\n                var xScale = firstHorAxis.scaleIns();\r\n                if(xScale) {\r\n                \tvar domain = xScale.domain();\r\n                    if(type === \"time\") {\r\n                        x = domain.length === 2 && (value < domain[0] || value > domain[1]) ? NaN : xScale(value);\r\n                    } else if(type === \"enum\") {\r\n                        x = xScale.align() * xScale.step() +　xScale(value);\r\n                    } else {\r\n                        //type is value\r\n                        x = domain.length === 2 && (value < domain[0] || value > domain[1]) ? NaN : xScale(value);\r\n                    }\r\n                }\r\n            }\r\n            if(isNaN(x)) {\r\n                self.actionHideToolTip();\r\n            } else {\r\n            \tif(self.xFocusLine && self.xFocusLine.attr(\"visibility\") === \"hidden\") {\r\n                    mouseOverHandler(x, 0, null, null);\r\n                }\r\n                mouseMoveHandler(x, 0, null, null);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 隐藏悬浮提示操作\r\n     */\r\n    this.actionHideToolTip = function() {\r\n        mouseOutHandler();\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var mouseOverHandler = function() {\r\n    \tif(isThumbDrag) {\r\n            return;\r\n        }\r\n        axisHotBox = self.axisHotArea.node().getBBox();\r\n    \tif(arguments.length > 3 ? !isInsideHotArea(arguments[0], arguments[1], axisHotBox) : !isInsideHotArea()) {\r\n    \t\treturn;\r\n    \t}\r\n        if(self.xFocusLine) {\r\n            self.xFocusLine.attr(\"visibility\", \"visible\");\r\n        }\r\n        if(self.yFocusLine) {\r\n            self.yFocusLine.attr(\"visibility\", \"visible\");\r\n        }\r\n        if(toolTipTrigger === \"xAxis\" || toolTipTrigger === \"yAxis\") {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.SHOW_TOOL_TIP, true, true);\r\n            self.dispatchEvent(evt);\r\n        }\r\n        if(toolTipTrigger === \"xAxis\") {\r\n            var horAxis, horAxises = self.axis().horAxises();\r\n            if(horAxises && horAxises.length > 0) {\r\n                horAxis = horAxises[0];\r\n                ticksPos = horAxis.getTicksPos();\r\n                ticksText = horAxis.isReverse() ? horAxis.getTicksText().reverse() : horAxis.getTicksText();\r\n            }\r\n        } else if(toolTipTrigger === \"yAxis\") {\r\n            var verAxis, verAxises = self.axis().verAxises();\r\n            if(verAxises && verAxises.length > 0) {\r\n                verAxis = verAxises[0];\r\n                ticksPos = verAxis.getTicksPos();\r\n                ticksText = verAxis.isReverse() ? verAxis.getTicksText() : verAxis.getTicksText().reverse();\r\n            }\r\n        }\r\n    };\r\n    \r\n    var mouseMoveHandler = function() {\r\n    \tvar axisHotArea = self.axisHotArea.node(), \r\n            box = axisHotBox;\r\n            mousePos = arguments.length > 3 ? [arguments[0], arguments[1]] : MouseUtil.mouse(axisHotArea, self.graph()), \r\n            x = mousePos[0],\r\n            y = mousePos[1],\r\n            toolTipConfig = self.data().toolTip,\r\n            trigger = toolTipConfig ? toolTipConfig.trigger : null;\r\n            \r\n    \tif(!isInsideHotArea(x, y, box)) {\r\n    \t\tmouseOutHandler();\r\n            return;\r\n        }\r\n        if(isThumbDrag) {\r\n            return;\r\n        }\r\n        var transition = d3.transition().duration(self.animation() ? 100 : 0).ease(d3.easeLinear);\r\n        if(self.xFocusLine) {\r\n        \tif(trigger === \"item\") {//位置为鼠标当前坐标\r\n        \t\tself.xFocusLine.attr(\"x1\", x).attr(\"x2\", x).attr(\"y1\", 0).attr(\"y2\", box.height);\r\n        \t} else if(firstHorAxis && firstHorAxis.type() === \"enum\" && ticksPos) {\r\n                var hIndex = getNearValueIndex(x, ticksPos);\r\n                if(hIndex !== -1) {\r\n                    var hx = ticksPos[hIndex];\r\n                    mousePos.push(hIndex);\r\n                    self.xFocusLine\r\n                        .attr(\"y1\", 0).attr(\"y2\", box.height)\r\n                        .transition(transition)\r\n                        .attr(\"x1\", hx).attr(\"x2\", hx);\r\n                    if(xFocusLineConfig.type === \"bar\") {\r\n                    \tself.xFocusLine.style(\"stroke-width\", parseInt(box.width/ticksPos.length) + \"px\");\r\n                    }\r\n                }\r\n            } else {\r\n                var item = self.getItemDataByX(x);\r\n                if(item) {\r\n                    self.xFocusLine\r\n                        .attr(\"y1\", 0).attr(\"y2\", box.height)\r\n                        .transition(transition)\r\n                        .attr(\"x1\", item.x).attr(\"x2\", item.x);\r\n                }\r\n            }\r\n        }\r\n        if(self.yFocusLine) {\r\n            if(trigger === \"item\") {//位置为鼠标当前坐标\r\n                self.yFocusLine.attr(\"x1\", 0).attr(\"x2\", box.width).attr(\"y1\", y).attr(\"y2\", y);\r\n            } else if(firstVerAxis && firstVerAxis.type() === \"enum\" && ticksPos) {\r\n                var vIndex = getNearValueIndex(y, ticksPos);\r\n                if(vIndex !== -1) {\r\n                    var vy = ticksPos[vIndex];\r\n                    mousePos.push(vIndex);\r\n                    self.yFocusLine\r\n                        .attr(\"x1\", 0).attr(\"x2\", box.width)\r\n                        .transition(transition)\r\n                        .attr(\"y1\", vy).attr(\"y2\", vy);\r\n                    if(yFocusLineConfig.type === \"bar\") {\r\n                    \tself.yFocusLine.style(\"stroke-width\", parseInt(box.height/ticksPos.length) + \"px\");\r\n                    }\r\n                }\r\n            } else {\r\n                var item = self.getItemDataByY(y);\r\n                if(item) {\r\n                    self.yFocusLine\r\n                        .attr(\"x1\", 0).attr(\"x2\", box.width)\r\n                        .transition(transition)\r\n                        .attr(\"y1\", item.y).attr(\"y2\", item.y);\r\n                }\r\n            }\r\n        }\r\n        if(toolTipTrigger === \"xAxis\" || toolTipTrigger === \"yAxis\") {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.UPDATE_TOOL_TIP, true, true, mousePos);\r\n            self.dispatchEvent(evt);\r\n        }\r\n    };\r\n    \r\n    var mouseOutHandler = function() {\r\n        if(isThumbDrag) {\r\n            return;\r\n        }\r\n        if(self.xFocusLine) {\r\n            self.xFocusLine.attr(\"visibility\", \"hidden\");\r\n        }\r\n        if(self.yFocusLine) {\r\n            self.yFocusLine.attr(\"visibility\", \"hidden\");\r\n        }\r\n        if(toolTipTrigger === \"xAxis\" || toolTipTrigger === \"yAxis\") {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.HIDE_TOOL_TIP, true, true);\r\n            self.dispatchEvent(evt);\r\n        }\r\n    };\r\n    \r\n    this.legendItemClickHandler = function(event) {\r\n    \tevent.stopImmediatePropagation();\r\n    \tvisibleItemsChanged = true;\r\n    \t//update axis\r\n    \tvar data = self.data();\r\n        if(data && data.hasOwnProperty(\"series\")) {\r\n            if(self.axis()) {\r\n            \t//bar类型提前刷新布局，计算出total值，供axis.update使用，针对动态改变barType来写的---start\r\n                barLayoutUpdate();\r\n                //bar类型提前刷新布局，计算出total值，供axis.update使用，针对动态改变barType来写的---end\r\n                \r\n                self.axis().update();\r\n            }\r\n            //如果存在，刷新水平坐标轴范围选择容器\r\n            renderHSliderContainer(\"update\");\r\n        }\r\n        //update child base chart\r\n        var children = self.children();\r\n        for(var child, i = 0, len = children.length; i < len; i++) {\r\n    \t    child = children[i];\r\n            if(ClassFactory.instanceofChart(child)) {\r\n                child.update();\r\n            }\r\n        }\r\n    };\r\n    \r\n    this.showToolTipHandler = function(event) {\r\n    \tevent.stopImmediatePropagation();\r\n    \tif(self.toolTip() && self.data().toolTip && self.data().toolTip.labelFormat) {\r\n    \t\tself.toolTip().node().style.display = \"block\";\r\n    \t}\r\n        //console.log(\"showToolTipHandler\");\r\n    };\r\n    \r\n    this.updateToolTipHandler = function(event) {\r\n    \tevent.stopImmediatePropagation();\r\n    \tif(!self.toolTip()) {\r\n            return;\r\n        }\r\n    \tvar toolTipConfig = self.data().toolTip;\r\n    \tif(!toolTipConfig) {\r\n    \t\treturn;\r\n    \t}\r\n    \tif(!toolTipConfig.labelFormat) {\r\n    \t\treturn;\r\n    \t}\r\n    \t//根据当前鼠标位置和配置获取每个子chart对应的toolTip字符串内容\r\n    \tvar mousePos, \r\n    \t    str = \"\", \r\n        \tnode = self.toolTip().node(),\r\n        \tstyle = node.style;\r\n        \t\r\n        if(event.detail && (!event.detail.data || !event.detail.target || !(event.detail.target instanceof Chart))) {//trigger is item\r\n        \tvar axisHotArea = (self.axisHotArea && self.axisHotArea.node()) ? \r\n        \t   self.axisHotArea.node() : \r\n        \t   self.isRenderer() ? self.node().ownerSVGElement : self.node(), \r\n            box = axisHotArea.getBBox(), \r\n            mousePos = MouseUtil.mouse(axisHotArea, self.graph());\r\n            str += self.getToolTipStr(toolTipConfig, mousePos[0], mousePos[1], \r\n                undefined, event.detail);\r\n            if(str!=\"\"){\r\n                str+= \"\\n\";\r\n            }\r\n        } else {//trigger is axis\r\n        \tmousePos = event.detail.data;\r\n        \tstr += self.getToolTipStr(toolTipConfig, mousePos[0], mousePos[1],\r\n        \t    mousePos.length > 2 ? mousePos[2] : undefined);\r\n        \tif (str != \"\") {\r\n        \t    str += \"\\n\";\r\n        \t}\r\n        }\r\n        \t\r\n        if(str === \"\" || str === null) {\r\n        \tstyle.display = \"none\";\r\n        \tSvgUtil.removeAllChildren(node);\r\n        } else {\r\n        \tnode.innerHTML = str;\r\n        \tstyle.display = \"block\";\r\n        \t\r\n        \tvar topW = self.ownerSVG().parentWidth(), \r\n                topH = self.ownerSVG().parentHeight(),\r\n                padding = firstHorAxis ? firstHorAxis.padding() : null;\r\n            x = mousePos[0] + (padding ? padding.left : 0) + 10;\r\n            y = mousePos[1] + (padding ? padding.top : 0) + 20;\r\n            if(x + node.clientWidth > topW) {\r\n                x = topW - node.clientWidth;\r\n            }\r\n            if(y + node.clientHeight > topH) {\r\n                y = topH - node.clientHeight;\r\n            }\r\n            //计算全局坐标\r\n            x += self.x();\r\n            y += self.y();\r\n        \t\r\n        \tstyle.left = x + \"px\";\r\n            style.top = y + \"px\";\r\n        }\r\n        //console.log(\"updateToolTipHandler:\" + str);\r\n    };\r\n    \r\n    this.hideToolTipHandler = function(event) {\r\n    \tevent.stopImmediatePropagation();\r\n    \tif(self.toolTip()) {\r\n            self.toolTip().node().style.display = \"none\";\r\n        }\r\n        //console.log(\"hideToolTipHandler\");\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 解析配置数据\r\n     */\r\n    var parseConfig = function() {\r\n    \tisShowHSlider = _data.hSlider && _data.hSlider.visible;\r\n        isShowXFocusLine = _data.xFocusLine && _data.xFocusLine.visible;\r\n        isShowYFocusLine = _data.yFocusLine && _data.yFocusLine.visible;\r\n        isShowXSplitLine = _data.xSplitLine && _data.xSplitLine.visible;\r\n        isShowYSplitLine = _data.ySplitLine && _data.ySplitLine.visible;\r\n        \r\n        xFocusLineConfig = isShowXFocusLine ? \r\n            CommonUtil.createConfig({visible:true, type:\"line\", style:{stroke:\"red\", pointerEvents:\"none\"}}, _data.xFocusLine) : null;\r\n        yFocusLineConfig = isShowYFocusLine ? \r\n            CommonUtil.createConfig({visible:true, type:\"line\", style:{stroke:\"red\", pointerEvents:\"none\"}}, _data.yFocusLine) : null;\r\n        xSplitLineConfig = isShowXSplitLine ? \r\n            CommonUtil.createConfig({visible:true, style:{stroke:\"#d13438\", pointerEvents:\"none\"}}, _data.xSplitLine) : null;\r\n        ySplitLineConfig = isShowYSplitLine ? \r\n            CommonUtil.createConfig({visible:true, style:{stroke:\"#d13438\", pointerEvents:\"none\"}}, _data.ySplitLine) : null;\r\n        \r\n        if(_data.toolTip && _data.toolTip.trigger) {\r\n            toolTipTrigger = _data.toolTip.trigger;\r\n        } else {\r\n            toolTipTrigger = null;\r\n        }\r\n    };\r\n    \r\n    var refreshGlobalVars = function() {\r\n    \tif(self.axis()) {\r\n    \t\taxisHotBox = self.axisHotArea.node().getBBox();\r\n    \t}\r\n        if(d3.event && window.event instanceof CustomEvent) {\r\n        \tif(self.xFocusLine) {\r\n                self.xFocusLine.attr(\"visibility\", \"visible\");\r\n            }\r\n            if(self.yFocusLine) {\r\n                self.yFocusLine.attr(\"visibility\", \"visible\");\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 图表组件中的plugin布局\r\n     */\r\n    var pluginLayout = function(plugin, d, parent) {\r\n        var xPos = d.xPos, \r\n            yPos = d.yPos, \r\n            x = 0, \r\n            y = 0,\r\n            bBox = parent.node().getBBox(),\r\n            w = bBox.width, \r\n            h = bBox.height, \r\n            rh = plugin.actualHeight(), \r\n            rw = plugin.actualWidth();\r\n\r\n        if (xPos == \"left\")\r\n            x = -w/2;\r\n        else if (xPos == \"center\")\r\n            x = 0;\r\n        else if (xPos == \"right\")\r\n            x = w/2;\r\n        else if(!isNaN(xPos))\r\n            x = parseFloat(xPos);\r\n\r\n        if (yPos == \"top\")\r\n            y = -h/2;\r\n        else if (yPos == \"middle\")\r\n            y = 0;\r\n        else if (yPos == \"bottom\")\r\n            y = h/2;\r\n        else if(!isNaN(yPos))\r\n            y = parseFloat(yPos);\r\n            \r\n        if(plugin instanceof Label) {\r\n        \tif (xPos == \"left\")\r\n                x -= rw;\r\n            else if (xPos == \"center\")\r\n                x -= rw/2;\r\n                \r\n        \tif (yPos == \"top\")\r\n                y -= rh;\r\n            else if (yPos == \"middle\")\r\n                y -= rh/2;\r\n        }\r\n\r\n        plugin.transform(\"translate(\" + [x-parent.x(), y-parent.y()] + \")\");\r\n    };\r\n    \r\n    /**\r\n     * 当前鼠标是否在坐标轴热区内\r\n     */\r\n    var isInsideHotArea = function(x, y, box) {\r\n        if(arguments.length === 0) {\r\n            var axisHotArea = self.axisHotArea.node(), \r\n                box = axisHotArea.getBBox(), \r\n                mousePos = MouseUtil.mouse(axisHotArea, self.graph()), \r\n                x = mousePos[0],\r\n                y = mousePos[1];\r\n        }\r\n        return !(x < 0 || x > box.width || y < 0 || y > box.height);\r\n    }\r\n    \r\n    /**\r\n     * 根据x坐标获取对应的最近的一个item的数据\r\n     * @x x坐标\r\n     * @data item数据数组\r\n     */\r\n    var getItemByX = function(x, data) {\r\n        var d, leftItem, rightItem, item;\r\n        for(var i = 0, len = data.length; i < len; i++) {\r\n            d = data[i];\r\n            if(x >= d.x) {\r\n                if(!leftItem) {\r\n                    leftItem = d;\r\n                } else if(leftItem.x < d.x) {\r\n                    leftItem = d;\r\n                }\r\n            } else if(x <= d.x) {\r\n                if(!rightItem) {\r\n                    rightItem = d;\r\n                } else if(rightItem.x > d.x) {\r\n                    rightItem = d;\r\n                }\r\n            }\r\n        }\r\n        if(leftItem && rightItem) {\r\n            item = x < leftItem.x + (rightItem.x - leftItem.x) / 2 ? leftItem : rightItem;\r\n        } else if(leftItem && !rightItem) {\r\n            item = leftItem;\r\n        } else if(!leftItem && rightItem) {\r\n            item = rightItem;\r\n        } else {\r\n            item = null;\r\n        }\r\n        return item;\r\n    };\r\n    \r\n    /**\r\n     * 根据y坐标获取对应的最近的一个item的数据\r\n     * @y y坐标\r\n     * @data item数据数组\r\n     */\r\n    var getItemByY = function(y, data) {\r\n        var d, topItem, bottomItem, item;\r\n        for(var i = 0, len = data.length; i < len; i++) {\r\n            d = data[i];\r\n            if(y >= d.y) {\r\n                if(!topItem) {\r\n                    topItem = d;\r\n                } else if(topItem.y < d.y) {\r\n                    topItem = d;\r\n                }\r\n            } else if(y <= d.y) {\r\n                if(!bottomItem) {\r\n                    bottomItem = d;\r\n                } else if(bottomItem.y > d.y) {\r\n                    bottomItem = d;\r\n                }\r\n            }\r\n        }\r\n        if(topItem && bottomItem) {\r\n            item = y < topItem.y + (bottomItem.y - topItem.y) / 2 ? topItem : bottomItem;\r\n        } else if(topItem && !bottomItem) {\r\n            item = topItem;\r\n        } else if(!topItem && bottomItem) {\r\n            item = bottomItem;\r\n        } else {\r\n            item = null;\r\n        }\r\n        return item;\r\n    };\r\n    \r\n    /**\r\n     * 根据x坐标获取对应的最近的所有item的数据\r\n     * @x x坐标\r\n     * @data item数据数组\r\n     */\r\n    var getItemsByX = function(x, data) {\r\n    \tvar item = getItemByX(x, data),\r\n    \t    items = [];\r\n        //取所有x坐标相同的item\r\n        if(item) {\r\n        \tvar resultX = item.x;\r\n        \tfor(var i = 0, len = data.length; i < len; i++) {\r\n        \t\td = data[i];\r\n        \t\tif(resultX === d.x) {\r\n        \t\t\titems.push(d);\r\n        \t\t}\r\n        \t}\r\n        }\r\n        return items;\r\n    };\r\n    \r\n    /**\r\n     * 根据y坐标获取对应的最近的所有item的数据\r\n     * @y y坐标\r\n     * @data item数据数组\r\n     */\r\n    var getItemsByY = function(y, data) {\r\n       var item = getItemByY(y, data),\r\n           items = [];\r\n        //取所有y坐标相同的item\r\n        if(item) {\r\n            var resultY = item.y;\r\n            for(var i = 0, len = data.length; i < len; i++) {\r\n                d = data[i];\r\n                if(resultY === d.y) {\r\n                    items.push(d);\r\n                }\r\n            }\r\n        }\r\n        return items;\r\n    };\r\n    \r\n     /**\r\n     * bar图表渲染完毕后，再刷新一次的方法。\r\n     * 是因为layout.measure方法在child.update()中调用，调用之后才会后最新的total数据在bar图表中，\r\n     * 根据该total数据值刷新坐标轴刻度才正确\r\n     */\r\n    var updateAgainInBarChart = function() {\r\n    \tif(self.isUpdateAxisAgain && self.axis()) {\r\n            //重新计算子容器尺寸和位置\r\n            var children = self.children();\r\n            if(children !== null && children.length > 0) {\r\n                for(var i = 0, len = children.length; i < len; i++) {\r\n                    children[i].update();\r\n                }\r\n            }\r\n            self.isUpdateAxisAgain = false;\r\n        }\r\n    };\r\n    \r\n    //bar类型提前刷新布局，计算出相关值，供axis.update使用，针对动态改变barType来写的\r\n    var barLayoutUpdate = function() {\r\n        const BarLayout = ghca_charts.layout.barLayout;\r\n        var children = self.children();\r\n    \tfor(var seriesChart, layout, layoutData, i = 0, len = children.length; i < len; i++) {\r\n    \t\tseriesChart = children[i];\r\n            layout = seriesChart.layout();\r\n            layoutData = seriesChart.data().layout;\r\n            //这里用layout data中的barType是因为变更后的数据还没有刷新到layout对象中\r\n            if(layout instanceof BarLayout && layoutData) {\r\n                layout.update();\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 获取tooltip颜色标签字符串\r\n     * @param d 数据项对象\r\n     */\r\n    var getTooltipItemIconDomStr = function(d) {\r\n    \tvar leftSpace = \"<div style='width:8px;height:8px;display:inline-block;'></div> \";\r\n    \tif(!d) {\r\n    \t\treturn leftSpace;\r\n    \t}\r\n    \tvar color = d.legendColor || d.fill || d.stroke || (d.data && (d.data.legendColor || d.data.fill || d.data.stroke)) || \"\";\r\n    \treturn color === \"\" ? leftSpace : \"<svg width='8' height='8'><circle cx='4' cy='4' r='4' fill='\" + color + \"'></svg> \";\r\n    };\r\n    \r\n    var replaceTooltipBr = function(str) {\r\n    \tvar leftSpace = \"<div style='width:8px;height:8px;display:inline-block;'></div> \";\r\n    \tif(ObjectUtil.isString(str)) {\r\n    \t\treturn str.replace(/<br>/ig, \"<br>\" + leftSpace);\r\n    \t}\r\n    \treturn str;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // axis hot area code\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 坐标轴内容热区容器\r\n     */\r\n    var renderAxisHotAreaContainer = function() {\r\n        if(!self.axis()) {\r\n            return;\r\n        }\r\n        \r\n        if(!self.axisHotAreaContainer) {\r\n        \tself.axisHotAreaContainer = self.mainContainer().append(\"g\")\r\n                .attr(\"class\", \"axis-hotArea-container\");\r\n        }\r\n        \r\n        //render axisHotArea rect\r\n        if(!self.axisHotArea) {\r\n            self.axisHotArea = self.axisHotAreaContainer.append(\"rect\")\r\n                .attr(\"class\", \"axis-hotArea\")\r\n                .attr(\"fill\", \"white\")\r\n                .attr(\"opacity\", 0);\r\n        }\r\n        \r\n        //update axie hot area\r\n        var rect = self.axis().getAxisContentArea();\r\n        self.axisHotArea\r\n            .attr(\"width\", rect.w)\r\n            .attr(\"height\", rect.h);\r\n            \r\n        self.axisHotAreaContainer.attr(\"transform\", \"translate(\" + rect.x + \",\" + rect.y + \")\");\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // spilt line code\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var isShowXSplitLine = false,\r\n        isShowYSplitLine = false,\r\n        xSplitLineConfig = null,\r\n        ySplitLineConfig = null;\r\n    \r\n    /**\r\n     * 渲染分割线容器\r\n     */\r\n    var renderSplitLineContainer = function() {\r\n        if(!self.axis() || (!isShowXSplitLine && !isShowYSplitLine)) {\r\n            return;\r\n        }\r\n        \r\n        //render split container\r\n        if(!self.splitContainer) {\r\n            self.splitContainer = self.mainContainer().append(\"g\")\r\n                .attr(\"class\", \"split-container\");\r\n        }\r\n        \r\n        //render splitHotArea container\r\n        if(!self.splitHotArea) {\r\n            self.splitHotArea = self.splitContainer.append(\"rect\")\r\n                .attr(\"class\", \"split-container-hotArea\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .attr(\"fill\", \"blue\")\r\n                .attr(\"visibility\", \"hidden\")\r\n        }\r\n        \r\n        var rect = self.axis().getAxisContentArea();\r\n        self.splitHotArea\r\n            .attr(\"width\", rect.w)\r\n            .attr(\"height\", rect.h);\r\n        \r\n        //render x split line\r\n        if(isShowXSplitLine) {\r\n        \tvar filter = _data.xSplitLine.filter;\r\n        \t//根据配置信息设置图表关联的坐标轴\r\n            var axis = self.axis();\r\n            var horAxises = axis ? axis.horAxises() : null;\r\n            self.splitContainer.selectAll(\"line.x-split-line\").remove();\r\n            if(filter && horAxises && horAxises.length > 0) {\r\n            \tvar horAxis = horAxises[0];\r\n            \tvar xScale = horAxis.scaleIns();\r\n            \tvar domain = horAxis.domain();\r\n            \tvar splitData = filter(domain);\r\n            \tself.splitContainer.selectAll(\"line.x-split-line\")\r\n                    .data(splitData).enter().append(\"line\")\r\n                    .attr(\"class\", \"x-split-line\")\r\n                    .attr(\"x1\", function(d){\r\n                        return xScale(d) +　0.5;\r\n                    })\r\n                    .attr(\"x2\", function(d){\r\n                        return xScale(d) +　0.5;\r\n                    })\r\n                    .attr(\"y1\", 0)\r\n                    .attr(\"y2\", rect.h);\r\n            }\r\n            //update style for x focus line\r\n        \tself.splitContainer.selectAll(\"line.x-split-line\").each(function(d){\r\n                CommonUtil.setGroupStyle(d3.select(this), xSplitLineConfig.style);\r\n                CommonUtil.setGroupAttr(d3.select(this), xSplitLineConfig.attr);\r\n        \t});\r\n        }\r\n        \r\n        //render y split line\r\n        if(isShowYSplitLine) {\r\n            var filter = _data.ySplitLine.filter;\r\n            //根据配置信息设置图表关联的坐标轴\r\n            var axis = self.axis();\r\n            var verAxises = axis ? axis.verAxises() : null;\r\n            self.splitContainer.selectAll(\"line.y-split-line\").remove();\r\n            if(filter && verAxises && verAxises.length > 0) {\r\n                var verAxis = verAxises[0];\r\n                var yScale = verAxis.scaleIns();\r\n                var domain = verAxis.domain();\r\n                var splitData = filter(domain);\r\n                self.splitContainer.selectAll(\"line.y-split-line\")\r\n                    .data(splitData).enter().append(\"line\")\r\n                    .attr(\"class\", \"y-split-line\")\r\n                    .attr(\"y1\", function(d){\r\n                        return yScale(d) +　0.5;\r\n                    })\r\n                    .attr(\"y2\", function(d){\r\n                        return yScale(d) +　0.5;\r\n                    })\r\n                    .attr(\"x1\", 0)\r\n                    .attr(\"x2\", rect.w);\r\n            }\r\n            //update style for x focus line\r\n            self.splitContainer.selectAll(\"line.y-split-line\").each(function(d){\r\n                CommonUtil.setGroupStyle(d3.select(this), ySplitLineConfig.style);\r\n                CommonUtil.setGroupAttr(d3.select(this), ySplitLineConfig.attr);\r\n            });\r\n        }\r\n        \r\n       self.splitContainer.attr(\"transform\", \"translate(\" + rect.x + \",\" + rect.y + \")\");\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // focus line code\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var toolTipTrigger = null, \r\n        isShowHSlider = false, \r\n        isShowXFocusLine = false, \r\n        isShowYFocusLine = false,\r\n        xFocusLineConfig = null,\r\n        yFocusLineConfig = null;\r\n    \r\n    /**\r\n     * 渲染坐标轴指针容器\r\n     */\r\n    var renderFocusLineContainer = function() {\r\n        if(!self.axis() || (!isShowXFocusLine && !isShowYFocusLine && !toolTipTrigger)) {\r\n            return;\r\n        }\r\n        \r\n        //render focus container\r\n        if(!self.focusContainer) {\r\n            self.focusContainer = self.mainContainer().append(\"g\")\r\n                .attr(\"class\", \"focus-container\");\r\n        }\r\n        \r\n        //render x focus line\r\n        if(isShowXFocusLine && !self.xFocusLine) {\r\n            self.xFocusLine = self.focusContainer.append(\"line\")\r\n                .attr(\"class\", \"x-focus-line\")\r\n                .attr(\"visibility\", \"hidden\");\r\n        }\r\n        //update style for x focus line\r\n        if(isShowXFocusLine && self.xFocusLine) {\r\n        \tCommonUtil.setGroupStyle(self.xFocusLine, xFocusLineConfig.style);\r\n        \tCommonUtil.setGroupAttr(self.xFocusLine, xFocusLineConfig.attr);\r\n        }\r\n        \r\n        //render y focus line\r\n        if(isShowYFocusLine && !self.yFocusLine) {\r\n            self.yFocusLine = self.focusContainer.append(\"line\")\r\n                .attr(\"class\", \"y-focus-line\")\r\n                .attr(\"visibility\", \"hidden\");\r\n        }\r\n        //update style for y focus line\r\n        if(isShowYFocusLine && self.yFocusLine) {\r\n            CommonUtil.setGroupStyle(self.yFocusLine, yFocusLineConfig.style);\r\n            CommonUtil.setGroupAttr(self.yFocusLine, yFocusLineConfig.attr);\r\n        }\r\n       \r\n       var rect = self.axis().getAxisContentArea();\r\n       self.focusContainer.attr(\"transform\", \"translate(\" + rect.x + \",\" + rect.y + \")\");\r\n       \r\n       //update focus line\r\n       var box = self.axisHotArea.node().getBBox();\r\n       if(self.xFocusLine) {\r\n            self.xFocusLine.attr(\"y1\", 0).attr(\"y2\", box.height);\r\n       }\r\n       if(self.yFocusLine) {\r\n            self.yFocusLine.attr(\"x1\", 0).attr(\"x2\", box.width);\r\n       }\r\n       \r\n//       addFocusContainerListeners();\r\n    };\r\n    \r\n//    var addFocusContainerListeners = function() {\r\n//        if(!isShowXFocusLine && !isShowYFocusLine && !toolTipTrigger) {\r\n//            return;\r\n//        }\r\n//    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // hSlider code\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var minThumbsGap = 8;\r\n    var thumbsGap = minThumbsGap;\r\n    var thumbWidth = 6;\r\n    var thumbHeight = 34;\r\n    var thumbBoundRect = null;\r\n    var thumbX = -thumbWidth;\r\n    var thumbY = 0;\r\n    var tempThumbX = 0;\r\n    var thumbStartX = 0;\r\n    var thumbRadius = 4.5;\r\n    var symbolPadding = 1.5;\r\n    var errorWidth = 10;//误差宽度\r\n    \r\n    var leftThumbX = 0;\r\n    var leftTempThumbX = 0;\r\n    var leftThumbStartX = 0;\r\n    \r\n    var rightThumbX = 0;\r\n    var rightTempThumbX = 0;\r\n    var rightThumbStartX = 0;\r\n    \r\n    var isThumbDrag = false;\r\n    var isLeftThumbDrag = false;\r\n    var isRightThumbDrag = false;\r\n    var isLeftThumbOver = false;\r\n    var isRightThumbOver = false;\r\n    var xScale = null;\r\n    \r\n    /**\r\n     * 渲染水平坐标轴范围选择容器\r\n     * @param type \"render\"|\"update\"|\"resize\"\r\n     */\r\n    var renderHSliderContainer = function(type) {\r\n    \tisShowHSlider = _data.hSlider && _data.hSlider.visible;\r\n        if(!isShowHSlider) {\r\n        \tif(self.hSliderContainer) {\r\n        \t\tself.hSliderContainer.attr(\"visibility\", \"hidden\");\r\n        \t}\r\n            return;\r\n        }\r\n        \r\n        var horAxis, horAxises = self.axis().horAxises();\r\n        if(horAxises && horAxises.length > 0) {\r\n            horAxis = horAxises[0];\r\n            xScale = horAxis.scaleIns();\r\n            isHorAxisTime = horAxis.type() === \"time\";\r\n        }\r\n        \r\n        var rect = self.axis().getAxisContentArea();\r\n        thumbY = (rect.h - thumbHeight) / 2;\r\n        \r\n        //render hSlider container\r\n        if(!self.hSliderContainer) {\r\n            self.hSliderContainer = self.mainContainer().append(\"g\").attr(\"class\", \"hSlider-container\");\r\n        }\r\n        self.hSliderContainer.attr(\"visibility\", \"visible\");\r\n        \r\n        //render hSliderHotArea container\r\n        if(!self.hSliderHotArea) {\r\n            self.hSliderHotArea = self.hSliderContainer.append(\"rect\")\r\n                .attr(\"class\", \"hSlider-container-hotArea\")\r\n                .attr(\"fill\", \"blue\")\r\n                .attr(\"visibility\", \"hidden\")\r\n                .attr(\"pointer-events\", \"none\");\r\n        }\r\n        \r\n        //render thumb container\r\n        if(!self.hSliderThumb) {\r\n            self.hSliderThumb = self.hSliderContainer.append(\"g\").attr(\"class\", \"hSlider-thumb-container\");\r\n        }\r\n        \r\n        //render hSlider thumb gap area background rect\r\n        if(!self.hSliderThumbGapBg) {\r\n            self.hSliderThumbGapBg = self.hSliderThumb.append(\"rect\")\r\n                .attr(\"class\", \"hSlider-thumb-gap-bg\")\r\n                .attr(\"pointer-events\", \"none\");\r\n        }\r\n        \r\n        //render hSlider thumb background rect\r\n        if(!self.hSliderThumbBg) {\r\n            self.hSliderThumbBg = self.hSliderThumb.append(\"rect\").attr(\"class\", \"hSlider-thumb-bg\");\r\n        }\r\n        \r\n        //render left thumb container\r\n        if(!self.hSliderLeftThumb) {\r\n            self.hSliderLeftThumb = self.hSliderThumb.append(\"g\").attr(\"class\", \"hSlider-left-thumb-container\");\r\n        }\r\n        \r\n        //render hSlider left thumb background path\r\n        if(!self.hSliderLeftThumbBg) {\r\n            self.hSliderLeftThumbBg = self.hSliderLeftThumb.append(\"path\").attr(\"class\", \"hSlider-left-thumb-bg\");\r\n        }\r\n        \r\n        //render hSlider left thumb top background path\r\n        if(!self.hSliderLeftThumbTopBg) {\r\n            self.hSliderLeftThumbTopBg = self.hSliderLeftThumb.append(\"path\").attr(\"class\", \"hSlider-left-thumb-top-bg\");\r\n        }\r\n        \r\n        //render hSlider left thumb bottom background path\r\n        if(!self.hSliderLeftThumbBottomBg) {\r\n            self.hSliderLeftThumbBottomBg = self.hSliderLeftThumb.append(\"path\").attr(\"class\", \"hSlider-left-thumb-bottom-bg\");\r\n        }\r\n        \r\n        //render right thumb container\r\n        if(!self.hSliderRightThumb) {\r\n            self.hSliderRightThumb = self.hSliderThumb.append(\"g\").attr(\"class\", \"hSlider-right-thumb-container\");\r\n        }\r\n        \r\n        //render hSlider right thumb background path\r\n        if(!self.hSliderRightThumbBg) {\r\n            self.hSliderRightThumbBg = self.hSliderRightThumb.append(\"path\").attr(\"class\", \"hSlider-right-thumb-bg\");\r\n        }\r\n        \r\n        //render hSlider right thumb top background path\r\n        if(!self.hSliderRightThumbTopBg) {\r\n            self.hSliderRightThumbTopBg = self.hSliderRightThumb.append(\"path\").attr(\"class\", \"hSlider-right-thumb-top-bg\");\r\n        }\r\n        \r\n        //render hSlider right thumb bottom background path\r\n        if(!self.hSliderRightThumbBottomBg) {\r\n            self.hSliderRightThumbBottomBg = self.hSliderRightThumb.append(\"path\").attr(\"class\", \"hSlider-right-thumb-bottom-bg\");\r\n        }\r\n        \r\n        //render thumb toolTip container\r\n        if(!self.hSliderThumbToolTip) {\r\n            self.hSliderThumbToolTip = self.hSliderContainer.append(\"g\").attr(\"class\", \"hSlider-thumb-toolTip-container\");\r\n        }\r\n        \r\n        var thumbToolTipStyle = _data.hSlider.thumbToolTip ? _data.hSlider.thumbToolTip.style : {\"font-size\":\"12\"};\r\n        //render left thumb toolTip\r\n        if(!self.hSliderLeftThumbToolTip) {\r\n            self.hSliderLeftThumbToolTip = self.hSliderThumbToolTip.append(\"text\")\r\n                .attr(\"class\", \"hSlider-left-thumb-toolTip\");\r\n        }\r\n        ElementUtil.setElementStyles(self.hSliderLeftThumbToolTip, thumbToolTipStyle);\r\n        ElementUtil.setElementStyles(self.hSliderLeftThumb, {display:_data.changeThumbSize?\"\":\"none\"});\r\n        ElementUtil.setElementStyles(self.hSliderRightThumb, {display:_data.changeThumbSize?\"\":\"none\"});\r\n\r\n        if(_data.changeThumbSize){\r\n            thumbWidth=8;\r\n        }else{\r\n            thumbWidth=0;\r\n        }\r\n        \r\n        //render rigth thumb toolTip\r\n        if(!self.hSliderRightThumbToolTip) {\r\n            self.hSliderRightThumbToolTip = self.hSliderThumbToolTip.append(\"text\")\r\n                .attr(\"class\", \"hSlider-right-thumb-toolTip\");\r\n        }\r\n        ElementUtil.setElementStyles(self.hSliderRightThumbToolTip, thumbToolTipStyle);\r\n        \r\n        self.hSliderHotArea\r\n            .attr(\"width\", rect.w)\r\n            .attr(\"height\", rect.h);\r\n            \r\n        self.hSliderLeftThumbBg\r\n            .attr(\"d\", \"M\" + thumbWidth + \" \" + 0 + \r\n            \" L\" + thumbWidth + \" \" + thumbHeight +\r\n            \" C\" + (thumbWidth/2) + \" \" + thumbHeight + \", \" + 0 + \" \" + (thumbHeight - thumbRadius) + \", \"+ 0 + \" \" + (thumbHeight - thumbRadius*2) +\r\n            \" L\" + 0 + \" \" + thumbRadius*2 +\r\n            \" C\" + 0 + \" \" + thumbRadius + \", \" + (thumbWidth/2) + \" \" + 0 + \", \"+ thumbWidth + \" \" + 0)\r\n            .attr(\"fill\", \"#666\");\r\n       \r\n        self.hSliderLeftThumbTopBg\r\n            .attr(\"d\", \"M\" + (thumbWidth - symbolPadding) + \" \" + symbolPadding + \r\n            \" L\" + (thumbWidth - symbolPadding) + \" \" + thumbRadius*2 +\r\n            \" L\" + symbolPadding + \" \" + thumbRadius*2 +\r\n            \" C\" + symbolPadding + \" \" + thumbRadius + \", \" + (symbolPadding + thumbRadius) + \" \" + symbolPadding + \", \" + (thumbWidth - symbolPadding) + \" \" + symbolPadding)\r\n            .attr(\"fill\", \"#eee\");\r\n            \r\n        self.hSliderLeftThumbBottomBg\r\n            .attr(\"d\", \"M\" + symbolPadding + \" \" + (thumbHeight - thumbRadius*2) + \r\n            \" L\" + (thumbWidth - symbolPadding) + \" \" + (thumbHeight - thumbRadius*2) +\r\n            \" L\" + (thumbWidth - symbolPadding) + \" \" + (thumbHeight - symbolPadding) +\r\n            \" C\" + thumbRadius + \" \" + (thumbHeight - symbolPadding) + \", \" + symbolPadding + \" \" + (thumbHeight - symbolPadding - thumbRadius) + \", \" + symbolPadding + \" \" + (thumbHeight - thumbRadius*2))\r\n            .attr(\"fill\", \"#eee\");\r\n            \r\n        self.hSliderRightThumbBg\r\n            .attr(\"d\", \"M\" + 0 + \" \" + 0 + \r\n            \" L\" + 0 + \" \" + thumbHeight +\r\n            \" C\" + (thumbWidth/2) + \" \" + thumbHeight + \", \" + thumbWidth + \" \" + (thumbHeight - thumbRadius) + \", \"+ thumbWidth + \" \" + (thumbHeight - thumbRadius*2) +\r\n            \" L\" + thumbWidth + \" \" + thumbRadius*2 +\r\n            \" C\" + thumbWidth + \" \" + thumbRadius + \", \" + (thumbWidth/2) + \" \" + 0 + \", \"+ 0 + \" \" + 0)\r\n            .attr(\"fill\", \"#666\");\r\n            \r\n        self.hSliderRightThumbTopBg\r\n            .attr(\"d\", \"M\" + symbolPadding + \" \" + symbolPadding + \r\n            \" L\" + symbolPadding + \" \" + thumbRadius*2 +\r\n            \" L\" + (thumbWidth - symbolPadding) + \" \" + thumbRadius*2 +\r\n            \" C\" + (thumbWidth - symbolPadding) + \" \" + thumbRadius + \", \" + symbolPadding + \" \" + symbolPadding + \", \" + symbolPadding + \" \" + symbolPadding)\r\n            .attr(\"fill\", \"#eee\");\r\n            \r\n        self.hSliderRightThumbBottomBg\r\n            .attr(\"d\", \"M\" + (thumbWidth - symbolPadding) + \" \" + (thumbHeight - thumbRadius*2) + \r\n            \" L\" + symbolPadding + \" \" + (thumbHeight - thumbRadius*2) +\r\n            \" L\" + symbolPadding + \" \" + (thumbHeight - symbolPadding) +\r\n            \" C\" + symbolPadding + \" \" + (thumbHeight - symbolPadding) + \", \" + thumbRadius + \" \" + (thumbHeight - symbolPadding - thumbRadius) + \", \" + (thumbWidth - symbolPadding) + \" \" + (thumbHeight - thumbRadius*2))\r\n            .attr(\"fill\", \"#eee\");\r\n            \r\n        //水平坐标轴为枚举类型时，默认显示水平框选组件为一个枚举的宽度范围    \r\n        if (firstHorAxis) {\r\n            if (firstHorAxis.type() === \"enum\") {\r\n                var domain = xScale.domain();\r\n                var len = domain.length === 0 ? 1 : domain.length;\r\n                var box = self.hSliderHotArea.node().getBBox();\r\n                var w = box.width / len;\r\n                thumbsGap = w - thumbWidth * 2;\r\n                thumbsGap = thumbsGap < minThumbsGap ? minThumbsGap : thumbsGap;\r\n            }else if(firstHorAxis.type() === \"time\"){\r\n                var len = self.data().series[0].data.length;\r\n                var box = d3.select(\".scatter-ItemsContainer\").node().getBBox();\r\n                var w = box.width / len;\r\n                thumbsGap = w;\r\n            }\r\n        }\r\n        if(!thumbsGap){\r\n            thumbsGap=5;\r\n        }\r\n            \r\n        self.hSliderThumbGapBg\r\n            .attr(\"width\", thumbsGap)\r\n            .attr(\"height\", rect.h)\r\n            .attr(\"fill\", \"rgba(0, 0, 0, 0.1)\"); \r\n            \r\n        self.hSliderThumbBg\r\n            .attr(\"width\", thumbWidth * 2 + thumbsGap)\r\n            .attr(\"height\", rect.h)\r\n            .attr(\"fill\", \"#ff0000\")\r\n            .attr(\"opacity\", 0); \r\n            \r\n        \r\n    \tself.hSliderContainer.attr(\"transform\", \"translate(\" + rect.x + \",\" + rect.y + \")\");\r\n        self.hSliderLeftThumb.attr(\"transform\", \"translate(\" + 0 + \",\" + thumbY + \")\");\r\n        self.hSliderRightThumb.attr(\"transform\", \"translate(\" + (thumbWidth + thumbsGap) + \",\" + thumbY + \")\");\r\n        self.hSliderThumbGapBg.attr(\"transform\", \"translate(\" + thumbWidth + \",\" + 0 + \")\"); \r\n        self.hSliderThumb.attr(\"transform\", \"translate(\" + (-thumbWidth) + \",\" + 0 + \")\");\r\n        \r\n        //重新设置水平选择框位置\r\n        var pos = _data.hSlider && _data.hSlider.pos ? _data.hSlider.pos : null;\r\n        var gapPercent = _data.hSlider && _data.hSlider.gapPercent ? _data.hSlider.gapPercent : NaN;\r\n        setHSliderPos(pos, gapPercent);\r\n        \r\n        if(type !== \"resize\") {\r\n        \trefreshThumbsTooltip(thumbX);\r\n        \t\r\n        \t//这里稍后调用是因为isDispatchSliderChange在所有render方法执行完之后才设置\r\n        \tif(type === \"update\" || (type === \"render\" && \r\n        \t_data.series && ObjectUtil.isArray(_data.series.data) && _data.series.data.length > 0)) {\r\n        \t\tvar timer = setTimeout(function() {\r\n                    clearTimeout(timer);\r\n                    dispatchChangeEvent(thumbX);\r\n                }, 100);\r\n        \t}\r\n            \r\n            addHSliderListeners();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 设置水平选择框位置(暂不支持enum类型坐标轴设置)\r\n     * @param pos left|right default right\r\n     * @param gapPercent 框选范围占总长度百分比 0-1 default 0.1\r\n     */\r\n    var setHSliderPos = function(pos, gapPercent) {\r\n    \tif(!firstHorAxis || firstHorAxis.type() === \"enum\") {\r\n    \t\treturn;\r\n    \t}\r\n    \tpos = pos === \"right\" ? \"right\" : \"left\";\r\n    \tgapPercent = isNaN(gapPercent) ? 0.1 : gapPercent;\r\n    \tvar box = self.hSliderHotArea.node().getBBox();\r\n        if (firstHorAxis) {\r\n            var len = self.data().series[0].data.length;\r\n            var box = d3.select(\".scatter-ItemsContainer\").node().getBBox();\r\n            var w = box.width / len;\r\n            thumbsGap = w;\r\n        }\r\n        if(!thumbsGap){\r\n            thumbsGap=5;\r\n        }\r\n        thumbX = pos === \"left\" ? -thumbWidth : box.width - thumbsGap;\r\n        thumbBoundRect = self.axis().getAxisContentArea();\r\n        var minX = -thumbWidth;\r\n        var maxX = thumbBoundRect.w - thumbsGap - thumbWidth;\r\n        if(thumbX < minX) {\r\n            thumbX = minX;\r\n        }\r\n        if(thumbX > maxX) {\r\n            thumbX = maxX;\r\n        }\r\n        \r\n        self.hSliderRightThumb\r\n            .attr(\"transform\", \"translate(\" + (thumbWidth + thumbsGap) + \",\" + thumbY + \")\");\r\n        self.hSliderThumbGapBg\r\n            .attr(\"width\", thumbsGap)\r\n            .attr(\"transform\", \"translate(\" + thumbWidth + \",\" + 0 + \")\"); \r\n        self.hSliderThumbBg.attr(\"width\", thumbWidth * 2 + thumbsGap);\r\n        self.hSliderThumb.attr(\"transform\", \"translate(\" + (thumbX) + \",\" + 0 + \")\");\r\n        \r\n        refreshThumbsTooltip(thumbX);\r\n    };\r\n    \r\n    var dispatchChangeEvent = function(x) {\r\n    \tif(!self.isDispatchSliderChange() || !xScale) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar startX = x + thumbWidth;\r\n        var endX = startX + thumbsGap;\r\n        var startData = self.getItemDataByX(startX);\r\n        var endData = self.getItemDataByX(endX);\r\n        \r\n        self.dispatchEvent(EventUtil.createCustomEvent(BaseEvent.SLIDER_RANGE_CHANGE, false, true, [startData, endData]));\r\n    };\r\n    \r\n    var thumb_dragStartHandler = function() {\r\n        mouseOutHandler();\r\n        isThumbDrag = true;\r\n        \r\n        thumbBoundRect = self.axis().getAxisContentArea();\r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        thumbStartX = mousePos[0];\r\n    };\r\n    \r\n    var thumb_dragHandler = function() {\r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        var minX = -thumbWidth;\r\n        var maxX = thumbBoundRect.w - thumbsGap - thumbWidth;\r\n        tempThumbX = (mousePos[0] - thumbStartX) + thumbX;\r\n        if(tempThumbX < minX) {\r\n            tempThumbX = minX;\r\n        }\r\n        if(tempThumbX > maxX) {\r\n            tempThumbX = maxX;\r\n        }\r\n        self.hSliderThumb.attr(\"transform\", \"translate(\" + tempThumbX + \",\" + 0 + \")\");\r\n        \r\n        refreshThumbsTooltip(tempThumbX);\r\n    };\r\n    \r\n    var thumb_dragEndHandler = function() {\r\n        isThumbDrag = false;\r\n        \r\n        validateThumbPos(0);\r\n        \r\n        thumbX = tempThumbX;\r\n        \r\n        refreshThumbsTooltip(tempThumbX);\r\n        dispatchChangeEvent(thumbX);\r\n        changeThumbContainer();\r\n    };\r\n    \r\n    var leftThumb_dragStartHandler = function() {\r\n        mouseOutHandler();\r\n        leftThumb_mouseOverHandler();\r\n        isThumbDrag = true;\r\n        isLeftThumbDrag = true;\r\n        \r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        leftThumbStartX = mousePos[0];\r\n        leftThumbX = thumbX;\r\n        leftTempThumbX = leftThumbX;\r\n        self.hSliderLeftThumb.attr(\"transform\", \"translate(\" + leftThumbX + \",\" + thumbY + \")\");\r\n        \r\n        var lThumb = self.hSliderLeftThumb.node();\r\n        var hSlider = self.hSliderContainer.node();\r\n        hSlider.appendChild(lThumb);\r\n    };\r\n    \r\n    var leftThumb_dragHandler = function() {\r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        var box = self.hSliderThumb.node().getBBox();\r\n        var minX = -thumbWidth;\r\n        var maxX = thumbX + box.width - minThumbsGap - thumbWidth * 2;\r\n        leftTempThumbX = (mousePos[0] - leftThumbStartX) + leftThumbX;\r\n        if(leftTempThumbX < minX) {\r\n            leftTempThumbX = minX;\r\n        }\r\n        if(leftTempThumbX > maxX) {\r\n            leftTempThumbX = maxX;\r\n        }\r\n        self.hSliderLeftThumb.attr(\"transform\", \"translate(\" + leftTempThumbX + \",\" + thumbY + \")\");\r\n        \r\n        refreshLeftThumbTooltip(leftTempThumbX);\r\n        \r\n        //刷新thumb内容\r\n        var thumbBgWidth = thumbX - leftTempThumbX + box.width;\r\n        self.hSliderThumbGapBg.attr(\"width\", thumbBgWidth - thumbWidth * 2);\r\n        self.hSliderThumbBg.attr(\"width\", thumbBgWidth);\r\n        thumbX = leftTempThumbX;\r\n        self.hSliderThumb.attr(\"transform\", \"translate(\" + thumbX + \",\" + 0 + \")\");\r\n        rightThumbX = thumbBgWidth - thumbWidth; \r\n        self.hSliderRightThumb.attr(\"transform\", \"translate(\" + rightThumbX + \",\" + thumbY + \")\");\r\n    };\r\n    \r\n    var leftThumb_dragEndHandler = function() {\r\n        isThumbDrag = false;\r\n        isLeftThumbDrag = false;\r\n        \r\n        validateThumbPos(1);\r\n        \r\n        var box = self.hSliderThumb.node().getBBox();\r\n        var thumbBgWidth = thumbX - leftTempThumbX + box.width;\r\n        self.hSliderThumbGapBg.attr(\"width\", thumbBgWidth - thumbWidth * 2);\r\n        self.hSliderThumbBg.attr(\"width\", thumbBgWidth);\r\n        \r\n        thumbX = leftTempThumbX;\r\n        self.hSliderThumb.attr(\"transform\", \"translate(\" + thumbX + \",\" + 0 + \")\");\r\n        leftThumbX = 0;    \r\n        self.hSliderLeftThumb.attr(\"transform\", \"translate(\" + leftThumbX + \",\" + thumbY + \")\");\r\n        rightThumbX = thumbBgWidth - thumbWidth; \r\n        self.hSliderRightThumb.attr(\"transform\", \"translate(\" + rightThumbX + \",\" + thumbY + \")\");\r\n        thumbsGap = thumbBgWidth - thumbWidth * 2;\r\n        \r\n        var lThumb = self.hSliderLeftThumb.node();\r\n        var thumb = self.hSliderThumb.node();\r\n        thumb.appendChild(lThumb);\r\n        \r\n        refreshLeftThumbTooltip(leftTempThumbX);\r\n        dispatchChangeEvent(thumbX);\r\n        \r\n        leftThumb_mouseOutHandler();\r\n    };\r\n    \r\n    var rightThumb_dragStartHandler = function() {\r\n        mouseOutHandler();\r\n        rightThumb_mouseOverHandler();\r\n        isThumbDrag = true;\r\n        isRightThumbDrag = true;\r\n        \r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        rightThumbStartX = mousePos[0];\r\n        rightThumbX = thumbX + thumbWidth + thumbsGap;\r\n        rightTempThumbX = rightThumbX;\r\n        self.hSliderRightThumb.attr(\"transform\", \"translate(\" + rightThumbX + \",\" + thumbY + \")\");\r\n        \r\n        var rThumb = self.hSliderRightThumb.node();\r\n        var hSlider = self.hSliderContainer.node();\r\n        hSlider.appendChild(rThumb);\r\n    };\r\n    \r\n    var rightThumb_dragHandler = function() {\r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        var box = self.hSliderHotArea.node().getBBox();\r\n        var minX = thumbX + thumbWidth + minThumbsGap;\r\n        var maxX = box.width;\r\n        rightTempThumbX = (mousePos[0] - rightThumbStartX) + rightThumbX;\r\n        if(rightTempThumbX < minX) {\r\n            rightTempThumbX = minX;\r\n        }\r\n        if(rightTempThumbX > maxX) {\r\n            rightTempThumbX = maxX;\r\n        }\r\n        self.hSliderRightThumb.attr(\"transform\", \"translate(\" + rightTempThumbX + \",\" + thumbY + \")\");\r\n        \r\n        refreshRightThumbTooltip(rightTempThumbX);\r\n        \r\n        //刷新thumb内容\r\n        var thumbBgWidth = rightTempThumbX - thumbX + thumbWidth;\r\n        self.hSliderThumbGapBg.attr(\"width\", thumbBgWidth - thumbWidth * 2);\r\n        self.hSliderThumbBg.attr(\"width\", thumbBgWidth);\r\n    };\r\n    \r\n    var rightThumb_dragEndHandler = function() {\r\n        isThumbDrag = false;\r\n        isRightThumbDrag = false;\r\n        \r\n        validateThumbPos(2);\r\n        \r\n        var thumbBgWidth = rightTempThumbX - thumbX + thumbWidth;\r\n        self.hSliderThumbGapBg.attr(\"width\", thumbBgWidth - thumbWidth * 2);\r\n        self.hSliderThumbBg.attr(\"width\", thumbBgWidth);\r\n        \r\n        rightThumbX = thumbBgWidth - thumbWidth; \r\n        self.hSliderRightThumb.attr(\"transform\", \"translate(\" + rightThumbX + \",\" + thumbY + \")\");\r\n        thumbsGap = thumbBgWidth - thumbWidth * 2;\r\n        \r\n        var rThumb = self.hSliderRightThumb.node();\r\n        var thumb = self.hSliderThumb.node();\r\n        thumb.appendChild(rThumb);\r\n        \r\n        refreshRightThumbTooltip(rightTempThumbX);\r\n        dispatchChangeEvent(thumbX);\r\n        \r\n        rightThumb_mouseOutHandler();\r\n    };\r\n    \r\n    var validateThumbPos = function(dragType) {\r\n        if(isHorAxisEnum) {\r\n            var domain = xScale.domain();\r\n            var len = domain.length === 0 ? 1 : domain.length;\r\n            var box = self.hSliderHotArea.node().getBBox();\r\n            var maxWidth = box.width;\r\n            var w = maxWidth / len;\r\n            var halfW = w * 0.5;\r\n            if(dragType === 0) {\r\n            \tvar x = (tempThumbX + thumbWidth) % w;\r\n                if(x < halfW) {\r\n                    tempThumbX -= x;\r\n                } else {\r\n                    tempThumbX += (w - x);\r\n                }\r\n                self.hSliderThumb.attr(\"transform\", \"translate(\" + tempThumbX + \",\" + 0 + \")\");\r\n            } else if(dragType === 1) {\r\n            \tvar lx = (leftTempThumbX + thumbWidth) % w;\r\n                if(lx < halfW) {\r\n                    leftTempThumbX -= lx;\r\n                } else {\r\n                    leftTempThumbX += (w - lx);\r\n                }\r\n                if(parseFloat(self.hSliderThumbBg.attr(\"width\")) < w) {\r\n                    leftTempThumbX -= w;\r\n                }\r\n        \t} else if(dragType === 2) {\r\n        \t\tvar rx = rightTempThumbX % w + 1;\r\n                if(rx < halfW) {\r\n                    rightTempThumbX -= rx;\r\n                } else {\r\n                    rightTempThumbX += (w - rx);\r\n                }\r\n                if(parseFloat(self.hSliderThumbBg.attr(\"width\")) < w) {\r\n                    rightTempThumbX += w;\r\n                }\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    var leftThumb_mouseOverHandler = function() {\r\n        isLeftThumbOver = true;\r\n        if(!isLeftThumbDrag) {\r\n            self.hSliderLeftThumbBg.transition().attr(\"fill\", \"#43b4e1\").attr(\"stroke\", \"#6cc8ee\");\r\n        }\r\n    };\r\n    \r\n    var leftThumb_mouseOutHandler = function() {\r\n        isLeftThumbOver = false;\r\n        if(!isLeftThumbDrag && !isLeftThumbOver) {\r\n            self.hSliderLeftThumbBg.transition().attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\r\n        }\r\n    };\r\n    \r\n    var rightThumb_mouseOverHandler = function() {\r\n        isRightThumbOver = true;\r\n        if(!isRightThumbDrag) {\r\n            self.hSliderRightThumbBg.transition().attr(\"fill\", \"#43b4e1\").attr(\"stroke\", \"#6cc8ee\");\r\n        }\r\n    };\r\n    \r\n    var rightThumb_mouseOutHandler = function() {\r\n        isRightThumbOver = false;\r\n        if(!isRightThumbDrag && !isRightThumbOver) {\r\n            self.hSliderRightThumbBg.transition().attr(\"fill\", \"#666\").attr(\"stroke\", \"#666\");\r\n        }\r\n    };\r\n    \r\n    var thumbBg_mouseOverHandler = function() {\r\n        thumbBoundRect = self.axis().getAxisContentArea();\r\n    };\r\n    \r\n    var thumbBg_mouseMoveHandler = function() {\r\n        //根据边界判断是否显示xFocusLine\r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        var x = mousePos[0];\r\n        if(x < 0 || x - thumbBoundRect.w > 0) {\r\n            mouseOutHandler();\r\n        } else {\r\n            mouseOverHandler();\r\n            mouseMoveHandler();\r\n        }\r\n    };\r\n    \r\n    var thumbBg_mouseOutHandler = function() {\r\n        mouseOutHandler();\r\n    };\r\n    \r\n    var addHSliderListeners = function() {\r\n        if(!isShowHSlider) {\r\n            return;\r\n        }\r\n        \r\n        self.hSliderThumbBg.on(\"mouseover.focus\", thumbBg_mouseOverHandler);\r\n        self.hSliderThumbBg.on(\"mousemove.focus\", thumbBg_mouseMoveHandler);\r\n        self.hSliderThumbBg.on(\"mouseout.focus\", thumbBg_mouseOutHandler);\r\n        \r\n        self.hSliderThumb.call(d3.drag()\r\n            .on(\"start.thumb\", thumb_dragStartHandler)\r\n            .on(\"drag.thumb\", thumb_dragHandler)\r\n            .on(\"end.thumb\", thumb_dragEndHandler)\r\n        );\r\n        \r\n        self.hSliderLeftThumb.call(d3.drag()\r\n            .on(\"start.leftThumb\", leftThumb_dragStartHandler)\r\n            .on(\"drag.leftThumb\", leftThumb_dragHandler)\r\n            .on(\"end.leftThumb\", leftThumb_dragEndHandler)\r\n        );\r\n        \r\n        self.hSliderRightThumb.call(d3.drag()\r\n            .on(\"start.leftThumb\", rightThumb_dragStartHandler)\r\n            .on(\"drag.leftThumb\", rightThumb_dragHandler)\r\n            .on(\"end.leftThumb\", rightThumb_dragEndHandler)\r\n        );\r\n        \r\n        self.hSliderLeftThumb.on(\"mouseover.leftThumb\", leftThumb_mouseOverHandler);\r\n        self.hSliderLeftThumb.on(\"mouseout.leftThumb\", leftThumb_mouseOutHandler);\r\n        \r\n        self.hSliderRightThumb.on(\"mouseover.rightThumb\", rightThumb_mouseOverHandler);\r\n        self.hSliderRightThumb.on(\"mouseout.rightThumb\", rightThumb_mouseOutHandler);\r\n\r\n        d3.select(\".scatter-ItemsContainer\").on(\"click\",changeThumbContainer);\r\n    };\r\n    \r\n    var changeThumbContainer = function() {\r\n        var mousePos = MouseUtil.mouse(self.hSliderHotArea.node(), self.graph());\r\n        thumbX=mousePos[0];\r\n        var num=thumbX/thumbsGap;\r\n        var numceil=Math.floor(num);\r\n        thumbX=numceil*thumbsGap;\r\n        thumbBoundRect = self.axis().getAxisContentArea();\r\n        var minX = -thumbWidth;\r\n        var maxX = thumbBoundRect.w - thumbsGap - thumbWidth;\r\n        if(thumbX < minX) {\r\n            thumbX = minX;\r\n        }\r\n        if(thumbX > maxX) {\r\n            thumbX = maxX;\r\n        }\r\n        self.hSliderThumb.attr(\"transform\", \"translate(\" +thumbX + \",\" + 0 + \")\");\r\n        refreshThumbsTooltip(thumbX);\r\n        var startX = thumbX + thumbWidth;\r\n        var startData = self.getItemDataByX(startX);\r\n        self.dispatchEvent(EventUtil.createCustomEvent(BaseEvent.SLIDER_MOVE_END, false, true, startData));\r\n    }\r\n    \r\n    /**\r\n     * 刷新所有滑块提示内容能\r\n     * @param x 滑块容器水平坐标\r\n     */\r\n    var refreshThumbsTooltip = function(x) {\r\n        if(!xScale) {\r\n           return;\r\n        }\r\n        var horAxis, horAxises = self.axis().horAxises();\r\n        if(horAxises && horAxises.length > 0) {\r\n            horAxis = horAxises[0];\r\n            isHorAxisTime = horAxis.type() === \"time\";\r\n            isHorAxisEnum = horAxis.type() === \"enum\";\r\n        }\r\n        if(isHorAxisEnum && xScale.domain().length === 0) {\r\n            return;\r\n        }\r\n        var leftX = x + thumbWidth;\r\n        var rightX = leftX + thumbsGap;\r\n        var leftText, rightText;\r\n        if(isHorAxisEnum) {\r\n        \t//d3.scaleQuantize()也属于连续性比例尺。定义域是连续的，而输出域是离散的\r\n        \t//invert/invertExtend这两种方法只针对连续性比例尺有效，即domain()域为连续性数据集的比例尺。\r\n        \tvar scale = scaleQuantize.domain(xScale.range()).range(xScale.domain());\r\n        \tleftText = scale(leftX + errorWidth);\r\n            rightText = scale(rightX - errorWidth);\r\n        } else {\r\n        \tleftText = xScale.invert(leftX);\r\n            rightText = xScale.invert(rightX);\r\n        }\r\n        var lt = self.hSliderLeftThumbToolTip.text(isHorAxisTime ? formatDateTime(leftText) : leftText);\r\n        var rt = self.hSliderRightThumbToolTip.text(isHorAxisTime ? formatDateTime(rightText) : rightText);\r\n        var ltBox = lt.node().getBBox();\r\n        var ty = -5;\r\n        lt.attr(\"transform\", \"translate(\" + (leftX - ltBox.width) + \",\" + ty + \")\");\r\n        rt.attr(\"transform\", \"translate(\" + (rightX) + \",\" + ty + \")\");\r\n    };\r\n    \r\n    /**\r\n     * 刷新左滑块提示内容能\r\n     * @param x 左滑块容器水平坐标\r\n     */\r\n    var refreshLeftThumbTooltip = function(x) {\r\n        if(!xScale) {\r\n           return;\r\n        }\r\n        var leftX = x + thumbWidth;\r\n        var leftText;\r\n        if(isHorAxisEnum) {\r\n            //d3.scaleQuantize()也属于连续性比例尺。定义域是连续的，而输出域是离散的\r\n            //invert/invertExtend这两种方法只针对连续性比例尺有效，即domain()域为连续性数据集的比例尺。\r\n            var scale = scaleQuantize.domain(xScale.range()).range(xScale.domain());\r\n            leftText = scale(leftX + errorWidth);\r\n        } else {\r\n            leftText = xScale.invert(leftX);\r\n        }\r\n        var lt = self.hSliderLeftThumbToolTip.text(isHorAxisTime ? formatDateTime(leftText) : leftText);\r\n        var ltBox = lt.node().getBBox();\r\n        var ty = -5;\r\n        lt.attr(\"transform\", \"translate(\" + (leftX - ltBox.width) + \",\" + ty + \")\");\r\n    };\r\n    \r\n    /**\r\n     * 刷新右滑块提示内容能\r\n     * @param x 右滑块容器水平坐标\r\n     */\r\n    var refreshRightThumbTooltip = function(x) {\r\n        if(!xScale) {\r\n           return;\r\n        }\r\n        var rightX = x;\r\n        var rightText;\r\n        if(isHorAxisEnum) {\r\n            //d3.scaleQuantize()也属于连续性比例尺。定义域是连续的，而输出域是离散的\r\n            //invert/invertExtend这两种方法只针对连续性比例尺有效，即domain()域为连续性数据集的比例尺。\r\n            var scale = scaleQuantize.domain(xScale.range()).range(xScale.domain());\r\n            rightText = scale(rightX - errorWidth);\r\n        } else {\r\n            rightText = xScale.invert(rightX);\r\n        }\r\n        var rt = self.hSliderRightThumbToolTip.text(isHorAxisTime ? formatDateTime(rightText) : rightText);\r\n        var ty = -5;\r\n        rt.attr(\"transform\", \"translate(\" + rightX + \",\" + ty + \")\");\r\n    };\r\n    \r\n    /**\r\n     * 获取和给定值最相近的值的所在数组索引\r\n     * @param v 给定值\r\n     * @param ary 要对比的值数组，从小到大排列\r\n     */\r\n    var getNearValueIndex = function(v, ary) {\r\n        var len = ary.length;\r\n        if(len === 0) {\r\n            return -1;\r\n        }\r\n        if(len === 1) {\r\n            return 0;\r\n        }\r\n        var min = ary[0], max = ary[len-1];\r\n        if(v <= min) {\r\n            return 0;\r\n        }\r\n        if(v >= max) {\r\n            return len-1;\r\n        }\r\n        len--;\r\n        for(var n, next, i = 0; i < len; i++) {\r\n            n = ary[i];\r\n            next = ary[i+1];\r\n            if(v === n) {\r\n                return i;\r\n            } else if(v > n && v < next) {\r\n                return (v - n) < (next - v) ? i : i+1;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    \r\n    Chart.clazzName = \"Chart\";\r\n};\r\n\r\nChart.struct = function(ghca_charts) {\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tBaseComponent.struct(ghca_charts);\r\n    Chart.prototype = Object.create(BaseComponent.prototype);\r\n    Chart.prototype.constructor = Chart;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n//背景层级，固定为0\r\nChart.BG_Z_INDEX = 0;\r\n\r\n//坐标轴层级，固定为1\r\nChart.AXIS_Z_INDEX = 1;\r\n\r\n//坐标轴热区容器层级，固定为2\r\nChart.AXIS_HOTAREA_CONTAINER_Z_INDEX = 2;\r\n\r\n//图表层级，范围为10-1000\r\nChart.CHART_MIN_Z_INDEX = 10;\r\nChart.CHART_MAX_Z_INDEX = 1000;\r\n\r\n//坐标轴聚焦辅助线容器层级，固定为1100\r\nChart.FOCUS_CONTAINER_Z_INDEX = 1100;\r\n\r\n//坐标轴分割线容器层级，固定为1110\r\nChart.SPLIT_CONTAINER_Z_INDEX = 1110;\r\n\r\n//水平框选组件容器层级，固定为1120\r\nChart.HSLIDER_CONTAINER_Z_INDEX = 1120;\r\n\r\n//图例层级，固定为1200\r\nChart.LEGEND_Z_INDEX = 1200;\r\n\r\n//标题层级，固定为1900\r\nChart.HEADING_Z_INDEX = 1900;\r\n\r\n//边框容器层级，固定为2000\r\nChart.BORDER_CONTAINER_Z_INDEX = 2000;\r\n\r\nmodule.exports = Chart;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/chart.js\n// module id = 31\n// module chunks = 0","// 业务拓扑图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 拓扑图配置数据\r\n * @param _layout 拓扑图布局对象，不传就为默认布局\r\n */\r\nvar EditorTopology = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const TopoLayout = ghca_charts.layout.topoLayout;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const DataParser = ghca_charts.view.util.dataParser;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const Node = ghca_charts.view.elements.plugins.nodes.node;\r\n    const GroupNode = ghca_charts.view.elements.plugins.nodes.groupNode;\r\n    const math = ghca_charts.view.util.math;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const MouseUtil = ghca_charts.view.util.mouseUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const UUIDUtil = ghca_charts.view.util.UUIDUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    BaseChart.apply(this, arguments);\r\n\r\n    var self = this,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        superSetData = self.setData,\r\n        nodesInsMap = {},\r\n        linksInsMap = {},\r\n        groupsInsMap = {},\r\n        isValidateMode = false,\r\n        isInFocus = false,\r\n        changeData = {\r\n            nodes:{enter:{}, update:{}}, \r\n            links:{enter:{}, update:{}}, \r\n            groups:{enter:{}, update:{}}\r\n        };//数据变更集\r\n    var dragMoveX,dragMoveY;\r\n\r\n    self.className(\"seriesTopo\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"showLevel\", \"mode\", \"focusEffect\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // showLevel\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 设置节点显示层级，默认全部节点都显示\r\n     * (暂时没有实现)\r\n     */\r\n    var showLevel = EditorTopology.SHOW_ALL_LEVEL_NODES;\r\n    this.showLevel = function(value) {\r\n        if (!arguments.length)\r\n            return showLevel;\r\n        showLevel = value;\r\n        if(_data) {\r\n            _data.showLevel = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // mode\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 组件模式，normal|edit，默认为普通模式\r\n     */\r\n    var mode = \"normal\";\r\n    this.mode = function(value) {\r\n        if (!arguments.length)\r\n            return mode;\r\n        if(mode !== value) {\r\n            isValidateMode = true;\r\n        }\r\n        mode = value;\r\n        if(_data) {\r\n            _data.mode = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // focusEffect\r\n    // ------------------------------\r\n        \r\n    /**\r\n     * 鼠标单击节点时，是否显示凸显效果(默认值true)\r\n     */\r\n    var focusEffect = true;\r\n    this.focusEffect = function(value) {\r\n        if (!arguments.length) return focusEffect;\r\n        focusEffect = value;\r\n        if(_data) {\r\n            _data.focusEffect = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // isEditMode\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 组件是否处于编辑模式，默认为否\r\n     */\r\n    this.isEditMode = function() {\r\n        return mode === \"edit\";\r\n    };\r\n    \r\n    // ------------------------------\r\n    // selectedItems\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前选中的项数据对象数组\r\n     */\r\n    var selectedNodeItems = [];\r\n    this.selectedNodeItems = function(value) {\r\n        if (!arguments.length){\r\n            selectedNodeItems.length=0;\r\n            for(var i=0;i<self.nodes.length;i++){\r\n                if(self.nodes[i].ins&&self.nodes[i].ins.selected()){\r\n                    selectedNodeItems.push(self.nodes[i]);\r\n                }\r\n            }\r\n            return selectedNodeItems;\r\n        }\r\n            \r\n        selectedNodeItems = value;\r\n        return this;\r\n    };\r\n\r\n\r\n    this.calCurrentSelected\r\n\r\n    /**\r\n     * 当前选中的项数据对象数组\r\n     */\r\n    var selectedLinkItems = [];\r\n    this.selectedLinkItems = function(value) {\r\n        if (!arguments.length)\r\n            return selectedLinkItems;\r\n        selectedLinkItems = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * 当前选中的项数据对象数组\r\n     */\r\n    var selectedGroupItems = [];\r\n    this.selectedGroupItems = function(value) {\r\n        if (!arguments.length)\r\n            return selectedGroupItems;\r\n        selectedGroupItems = value;\r\n        return this;\r\n    };\r\n\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var autoGroupKeys;\r\n\r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        self.layout().init();\r\n        self.nodes = self.layout().nodes();\r\n        self.links = self.layout().links();\r\n\r\n        self.groups = [];\r\n        self.nodesIns = [];\r\n        self.linksIns = [];\r\n        self.groupsIns = [];\r\n        autoGroupKeys=self.data().renderers.groupNode&&self.data().renderers.groupNode.autoGroupKeys&&self.data().renderers.groupNode.autoGroupKeys.split(\",\");//以逗号为分割的属性名，属性值相同的就是一个组     \r\n        autoGroupKeys=autoGroupKeys?autoGroupKeys:\"\";\r\n        //添加初始化数据中的所有节点和连线和节点分组内容\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n        self.addGroups(self.data().groups);\r\n        self.addAutoGroupNodes(self.data().nodes);\r\n        \r\n        self.visibleItems(self.nodes);\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        \r\n        \r\n        //放置所有背景的g元素\r\n        var bgNodeContainer = new BaseComponent();\r\n        bgNodeContainer.className(\"topo-bgContainer\");\r\n        self.addChild(bgNodeContainer);\r\n        self.bgNodeContainer = bgNodeContainer;\r\n\r\n        //放置所有连线节点组背景的g元素\r\n        var groupsContainer = new BaseComponent();\r\n        groupsContainer.className(\"topo-groupsContainer\");\r\n        self.addChild(groupsContainer);\r\n        groupsContainer.mainContainer().attr(\"pointer-events\", \"none\");\r\n        self.groupsContainer = groupsContainer;\r\n        \r\n        //放置所有连线的g元素\r\n        var linksContainer = new BaseComponent();\r\n        linksContainer.className(\"topo-linksContainer\");\r\n        self.addChild(linksContainer);\r\n        self.linksContainer = linksContainer;\r\n        \r\n        //放置所有节点的g元素\r\n        var nodesContainer = new BaseComponent();\r\n        nodesContainer.className(\"topo-nodesContainer\");\r\n        self.addChild(nodesContainer);\r\n        self.nodesContainer = nodesContainer;\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n        //若点不固定，则添加实时刷新数据监听\r\n\r\n        // self.model.on(\"tick\", self.tickHandler);\r\n        self.model.on(\"end\", self.tickEndHandler);\r\n\r\n        self.addEventListener(BaseEvent.MODE_CHANGE, modeChangeHandler);\r\n        //self.addEventListener(BaseEvent.EV_EVENT_OPEN_EDIT, openEditHandler);\r\n        self.addEventListener(BaseEvent.SEARCH_TEXT, searchTextHandler);\r\n        self.addEventListener(BaseEvent.TOPO_NODE_FOCUS_IN, topoNodeFocusInHandler);\r\n        \r\n        self.mainContainer().node().addEventListener(BaseEvent.EAGLE_EYE_DRAG, function(e) {\r\n            event.stopImmediatePropagation();\r\n            var detail = e.detail;\r\n            self.x(detail.x);\r\n            self.y(detail.y);\r\n            self.renderTransform();\r\n        });\r\n\r\n        self.parent().mainContainer().on(\"mousedown.edit\", edit_mouseDownHandler);\r\n         self.parent().mainContainer().on(\"mousemove.edit\", edit_mouseMoveHandler);\r\n        self.parent().mainContainer().on(\"mouseup.edit\", edit_mouseUpHandler);\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n        superRefreshData();\r\n        var  nodes = self.nodes,\r\n             links = self.links,\r\n             groups = self.groups,\r\n             level = self.showLevel();\r\n        \r\n        //根据showLevel设置每一个节点是否可见，以及是否展开\r\n        for(var node, nodeLevel, nodeEnabledExpand, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            node.bindKey = i;\r\n            if(node.hasOwnProperty(\"visible\")) {\r\n                continue;\r\n            }\r\n            nodeLevel = node.level === undefined ? 0 : node.level;  \r\n            nodeEnabledExpand = node.enabledExpand === undefined ? false : node.enabledExpand;  \r\n            if(nodeLevel < level) {\r\n                node.visible = true;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = true;\r\n                }\r\n            } else if(nodeLevel == level) {\r\n                node.visible = true;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = false;\r\n                }\r\n            } else {\r\n                node.visible = false;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(var link, i = 0, len = links.length; i < len; i++) {\r\n            link = links[i];\r\n            link.bindKey = i;\r\n            if(link.hasOwnProperty(\"visible\")) {\r\n                continue;\r\n            }\r\n            link.visible = true;\r\n        }\r\n        \r\n        for(var group, i = 0, len = groups.length; i < len; i++) {\r\n            group = groups[i];\r\n            group.bindKey = i;\r\n            if(group.hasOwnProperty(\"visible\")) {\r\n                continue;\r\n            }\r\n            group.visible = true;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     * @param isRenderByChange 是否根据当前变更集渲染\r\n     */\r\n    this.renderPosition = function(isRenderByChange) {\r\n        superRenderPosition();\r\n        \r\n        var nodesIns = self.nodesIns;\r\n        for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().each(function(d) {\r\n                //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n                if(isRenderByChange && !isItemInChangeData(d, changeData.nodes.enter)) {\r\n                    return;\r\n                }\r\n               \r\n                if(d.ins.selected()){\r\n                    d.x+=dragMoveX;\r\n                    d.y+=dragMoveY;\r\n                }\r\n               nodeIns.x(Math.round(d.x));\r\n               nodeIns.y(Math.round(d.y));\r\n               nodeIns.renderTransform();\r\n            });\r\n        }\r\n        dragMoveX=dragMoveY=0;\r\n        \r\n        var linksIns = self.linksIns;\r\n        for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n            linkIns = linksIns[i];\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isRenderByChange && !isItemInChangeData(linkIns.mainContainer().node().__data__, changeData.links.enter)) {\r\n                continue;\r\n            }\r\n            if(linkIns.normalChild()){\r\n                linkIns.normalChild().update();\r\n            } else {\r\n                linkIns.render();\r\n            }\r\n        }\r\n        \r\n        //刷新所有节点组path数据\r\n        refreshGroupsData();\r\n        var groupsIns = self.groupsIns;\r\n        for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n            groupIns = groupsIns[i];\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isRenderByChange && !isItemInChangeData(groupIns.mainContainer().node().__data__, changeData.groups.enter)) {\r\n                continue;\r\n            }\r\n            if(groupIns.normalChild()){\r\n                groupIns.normalChild().update();\r\n            } else {\r\n                groupIns.render();\r\n            }\r\n        }\r\n\r\n        //触发鹰眼变更\r\n        self.sendMsgToEye(fireContentChange, 1000);\r\n    };\r\n    \r\n\r\n    // function getLinksBydata(nodes,linksData){//和节点匹配的连线\r\n    //     var list=[];       \r\n    //     var newLinks=[];\r\n    //     for(var i=0,d,len=linksData.length;i<len;i++){\r\n    //         d=linksData[i];\r\n    //         if(nodes.indexOf(d.source)!=-1&&nodes.indexOf(d.target)!=-1){//连线的source和target都在节点里面\r\n    //             list.push(d);\r\n    //         }else{\r\n    //             newLinks.push(d);\r\n    //         }\r\n    //     }\r\n    //     return [list,newLinks];\r\n    // }\r\n\r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function(isUpdateByChange,isResize) {\r\n        // if(updateTimer!=0){\r\n        //     clearInterval(updateTimer);\r\n        //     updateTimer=0;\r\n        // }\r\n        // self.newUpdate();\r\n        // return;\r\n\r\n        if(Global.isDebug) {\r\n    \t\tvar otAll = new Date().getTime();\r\n    \t}\r\n\r\n        //刷新当前数据\r\n        self.refreshData();\r\n\r\n        //只用当前可见的项作为渲染数据源\r\n        self.visibleItems(self.filterArrayByElementProperty(self.nodes, \"visible\", true));\r\n\r\n        //计算布局\r\n        self.layout().update(isResize);\r\n        if(Global.isDebug) {\r\n        \tvar nt = new Date().getTime();\r\n            console.log(\"update refreshData and layout cost time \" + (nt-ot1) + \" ms.\");\r\n        }\r\n\r\n        //更新节点\r\n        updateNodes(isUpdateByChange);\r\n        //更新连线\r\n        updateLinks(isUpdateByChange);\r\n        //更新节点组\r\n        updateGroups(isUpdateByChange);\r\n        \r\n        if(Global.isDebug) {\r\n        \tvar nt = new Date().getTime();\r\n        }\r\n        //若是固定节点模式，移动所有对象正确位置\r\n        if(self.layout().fixed()) {\r\n            self.renderPosition(isUpdateByChange);\r\n        }\r\n        if(Global.isDebug) {\r\n        \tvar nt = new Date().getTime();\r\n            console.log(\"renderPosition cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n\r\n        //清空变更集\r\n        clearChangeData();\r\n        \r\n        //等待初始化完成再验证mode是否改变，否则会出现各种问题\r\n        var timer = setTimeout(function() {\r\n            clearTimeout(timer);\r\n            validateMode();\r\n        }, 0);\r\n        \r\n        if(Global.isDebug) {\r\n        \tvar ntAll = new Date().getTime();\r\n            console.log(\"update cost time \" + (ntAll-otAll) + \" ms.\");\r\n        }\r\n\r\n        \r\n        // /*这里先清除所有的连线和节点元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n        //                             但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n        \r\n        // var linksContainer = self.linksContainer;\r\n        // linksContainer.removeAllChildren();\r\n        // self.linksIns.length = 0;\r\n        // var bgNodeContainer = self.bgNodeContainer;\r\n        // bgNodeContainer.removeAllChildren();\r\n        // var nodesContainer = self.nodesContainer;\r\n        // nodesContainer.removeAllChildren();\r\n        // self.nodesIns.length = 0;\r\n        // var groupsContainer = self.groupsContainer;\r\n        // groupsContainer.removeAllChildren();\r\n        // self.groupsIns.length = 0;\r\n\r\n        \r\n        // //只用当前可见的节点作为渲染数据源\r\n        // var nodesData = self.visibleItems();\r\n        // //若节点渲染器是一个组件，则重新设置一些配置数据\r\n        // for(var i = 0, len = nodesData.length; i < len; i++) {\r\n        //     var nodeData = nodesData[i];\r\n        //     var rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n        //     if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n        //         var chartData, series = rendererConfig.series;\r\n        //         for(var j = 0, len1 = series.length; j < len1; j++) {\r\n        //             chartData = series[j];\r\n        //             //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n        //             chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n        //             chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n        //             //pie的位置特殊处理\r\n        //             if(chartData.type === \"pie\") {\r\n        //                 rendererConfig.x = -chartData.width / 2;\r\n        //                 rendererConfig.y = -chartData.height / 2;\r\n        //             }\r\n        //             //组装图表数据\r\n        //             DataParser.createChartData(chartData, nodeData);\r\n        //         }\r\n        //     }\r\n        // }\r\n        // // console.log(\"DataParser 耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n        // //渲染节点内容\r\n        // var bgNodes=[];\r\n        // var normalNodes=[];\r\n        // for(var i=0;i<nodesData.length;i++){\r\n        //     if(nodesData[i].isBg){\r\n        //         bgNodes.push(nodesData[i]);\r\n        //     }else{\r\n        //         normalNodes.push(nodesData[i]);\r\n        //     }\r\n        // }\r\n        // // console.log(\"nodeIns 数据组装耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n        // var nodesBgIns = ClassFactory.newRenderersInstanceByData(bgNodeContainer, self, \"bgNodeContainer\", bgNodes);\r\n        // // console.log(\"nodesBgIns 创建耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n        // var nodesNormalIns = ClassFactory.newRenderersInstanceByData(nodesContainer, self, \"nodeContainer\", normalNodes);//耗时严重\r\n        // // console.log(\"nodesNormalIns 创建耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n        // var nodesIns=nodesBgIns.concat(nodesNormalIns);\r\n        // // console.log(\"nodeIns 创建耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n\r\n        // if(nodesIns) {\r\n        //     for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n        //         nodeIns = nodesIns[i];\r\n        //         //添加子节点收放按钮点击监听，可控制节点的展开,合拢\r\n        //         nodeIns.addEventListener(\"expandTool_collapsed\", expandToolClickHandler);\r\n        //         //添加节点单击监听，点击节点自动居中，显示子级节点，淡化其他节点\r\n        //         nodeIns.addEventListener(\"click\", nodeClickHandler);              \r\n        //         self.nodesIns.push(nodeIns);\r\n        //         //添加节点拖拽监听\r\n        //     }\r\n        //     if (self.isEditMode() == false) {\r\n        //         setListenersInNormal();\r\n        //     } else {\r\n        //         setListenersInEditLink();\r\n        //     }\r\n        // }\r\n        // // console.log(\"nodeIns 监听耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n\r\n        // //只用当前可见的连线作为渲染数据源\r\n        // var linksData = self.getVisibleLinks(self.links);\r\n        // //渲染连线内容   \r\n        // var linksIns = ClassFactory.newRenderersInstanceByData(linksContainer, self, \"linkContainer\", linksData, false, \"stroke\");\r\n        // if(linksIns) {\r\n        //     for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n        //         linkIns = linksIns[i];\r\n        //         self.linksIns.push(linkIns);\r\n        //     }\r\n        // }\r\n        // // console.log(\"linksIns 耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n        \r\n        // //用当前可见的点渲染节点组\r\n        // resetAutoGroups();\r\n        // var groupsData = self.groups;\r\n        // //刷新所有节点组path数据\r\n        // refreshGroupsData();\r\n        // var groupsIns = ClassFactory.newRenderersInstanceByData(groupsContainer, self, \"groupContainer\", groupsData);\r\n        // if(groupsIns) {\r\n        //     for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n        //         groupIns = groupsIns[i];\r\n        //         self.groupsIns.push(groupIns);\r\n        //     }\r\n        // }\r\n        // // console.log(\"groupsIns 耗时:\"+(new Date().getTime()-ot));\r\n        // // ot=new Date().getTime();\r\n        // if(self.layout().fixed()) {\r\n        //     self.renderPosition();\r\n        // }\r\n        // // console.log(\"renderPosition耗时:\"+(new Date().getTime()-ot));\r\n        // // console.log(\"渲染topo耗时:\"+(new Date().getTime()-st));\r\n\r\n        \r\n        // //等待初始化完成再验证mode是否改变，否则会出现各种问题\r\n        // var timer = setTimeout(function() {\r\n        //     clearTimeout(timer);\r\n        //     validateMode();\r\n        // }, 0);\r\n    };\r\n    \r\n    /**\r\n     * 设置数据内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}等\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setData = function(value) {\r\n        var result = superSetData(value);\r\n        \r\n        self.layout().nodes().length = 0;\r\n        self.layout().links().length = 0;\r\n        self.nodes.length = 0;\r\n        self.links.length = 0;\r\n        self.groups.length = 0;\r\n        // self.nodesIns.length = 0;\r\n        // self.linksIns.length = 0;\r\n        // self.groupsIns.length = 0;\r\n\r\n        autoGroupKeys=self.data().renderers.groupNode&&self.data().renderers.groupNode.autoGroupKeys&&self.data().renderers.groupNode.autoGroupKeys.split(\",\");\r\n        autoGroupKeys=autoGroupKeys?autoGroupKeys:\"\";\r\n\r\n        //添加初始化数据中的所有节点和连线\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n        self.addGroups(self.data().groups);\r\n        self.addAutoGroupNodes(self.data().nodes);\r\n        return result;\r\n    };\r\n    \r\n     /**\r\n     * 更新节点内容\r\n     * @param isUpdateByChange 是否按照变更集刷新\r\n     */\r\n    var updateNodes = function(isUpdateByChange) {\r\n        //只用当前可见的节点作为渲染数据源\r\n        var nodesData = self.visibleItems();\r\n\r\n        //编辑器这边区分了背景节点和普通节点\r\n        var bgNodes=[];\r\n        var normalNodes=[];\r\n        for(var i=0;i<nodesData.length;i++){\r\n            if(nodesData[i].isBg){\r\n                bgNodes.push(nodesData[i]);\r\n            }else{\r\n                normalNodes.push(nodesData[i]);\r\n            }\r\n        }\r\n\r\n\r\n        //渲染节点内容\r\n        var bgUpdate = self.bgNodeContainer.mainContainer().selectAll(\"g.bgNodeContainer\")\r\n            .data(bgNodes, self.bindKeyFn);\r\n        var normalUpdate = self.nodesContainer.mainContainer().selectAll(\"g.nodeContainer\")\r\n            .data(normalNodes, self.bindKeyFn);\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //update\r\n        bgUpdate.each(function(d) {\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isUpdateByChange && !isItemInChangeData(d, changeData.nodes.update)) {\r\n                return;\r\n            }\r\n             //根据配置刷新数据内容\r\n            self.getRendererConfig(d, \"fill\");\r\n            var key = self.bindKeyFn(d);\r\n            var ins = nodesInsMap[key];\r\n            if(ins) {\r\n                var child = ins.normalChild();\r\n                if(child instanceof Plugin) {\r\n                    child.data(d);\r\n                    child.config(d.data.config);\r\n                    child.update();\r\n                    d.ins = child;\r\n                    d.legendIns = child;\r\n                    d.dragIns = ins;\r\n                    return;\r\n                }\r\n                var children = ins.children();\r\n                children.forEach(function(child) {\r\n                    if(child instanceof BaseComponent) {\r\n                        child.setDataAndUpdate(d);\r\n                        d.ins = child;\r\n                        d.legendIns = child;\r\n                        d.dragIns = ins;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        normalUpdate.each(function(d) {\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isUpdateByChange && !isItemInChangeData(d, changeData.nodes.update)) {\r\n                return;\r\n            }\r\n            self.getRendererConfig(d, \"fill\");\r\n            var key = self.bindKeyFn(d);\r\n            var ins = nodesInsMap[key];\r\n            if(ins) {\r\n                var child = ins.normalChild();\r\n                if(child instanceof Plugin) {\r\n                    child.data(d);\r\n                    child.config(d.data.config);\r\n                    child.update();\r\n                    d.ins = child;\r\n                    d.legendIns = child;\r\n                    d.dragIns = ins;\r\n                    return;\r\n                }\r\n                var children = ins.children();\r\n                children.forEach(function(child) {\r\n                    if(child instanceof BaseComponent) {\r\n                        child.setDataAndUpdate(d);\r\n                        d.ins = child;\r\n                        d.legendIns = child;\r\n                        d.dragIns = ins;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n\r\n\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"nodes update cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        \r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //enter\r\n        var nodesEnter = [];\r\n        bgUpdate.enter().each(function(d) {\r\n            nodesEnter.push(d);\r\n            //若节点渲染器是一个组件，则重新设置一些配置数据\r\n            var nodeData = d;\r\n            var rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n            if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n                var chartData, series = rendererConfig.series;\r\n                for(var j = 0, len1 = series.length; j < len1; j++) {\r\n                    chartData = series[j];\r\n                    //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n                    chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n                    chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n                    //pie的位置特殊处理\r\n                    if(chartData.type === \"pie\") {\r\n                        rendererConfig.x = -chartData.width / 2;\r\n                        rendererConfig.y = -chartData.height / 2;\r\n                    }\r\n                    //组装图表数据\r\n                    \r\n                    DataParser.createChartData(chartData, nodeData);\r\n                }\r\n            }\r\n            var nodesIns = ClassFactory.newRenderersInstanceByData(self.bgNodeContainer, self, \"bgNodeContainer\", [d]);\r\n            if(nodesIns) {\r\n                for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n                    nodeIns = nodesIns[i];\r\n                    //添加子节点收放按钮点击监听，可控制节点的展开,合拢\r\n                    nodeIns.addEventListener(\"expandTool_collapsed\", expandToolClickHandler);\r\n                    //添加节点单击监听，点击节点自动居中，显示子级节点，淡化其他节点\r\n                    nodeIns.addEventListener(\"click\", nodeClickHandler);\r\n                    // nodeIns.addEventListener(\"mouseover\", nodeMouseOverHandler);\r\n                    // nodeIns.addEventListener(\"mouseout\", nodeMouseOutHandler);\r\n                    //添加节点拖拽监听\r\n                    if(self.isEditMode()===false&&self.dragNodeAble()===true){\r\n                        nodeIns.mainContainer().call(d3.drag()\r\n                        .on(\"start\", self.node_dragStartHandler)\r\n                        .on(\"drag\", self.node_dragHandler)\r\n                        .on(\"end\", self.node_dragEndHandler));\r\n                    }\r\n                    self.nodesIns.push(nodeIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    nodesInsMap[key] = nodeIns;\r\n                }\r\n            }\r\n        });\r\n\r\n        normalUpdate.enter().each(function(d) {\r\n            nodesEnter.push(d);\r\n            //若节点渲染器是一个组件，则重新设置一些配置数据\r\n            var nodeData = d;\r\n            var rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n            if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n                var chartData, series = rendererConfig.series;\r\n                for(var j = 0, len1 = series.length; j < len1; j++) {\r\n                    chartData = series[j];\r\n                    //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n                    chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n                    chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n                    //pie的位置特殊处理\r\n                    if(chartData.type === \"pie\") {\r\n                        rendererConfig.x = -chartData.width / 2;\r\n                        rendererConfig.y = -chartData.height / 2;\r\n                    }\r\n                    //组装图表数据\r\n                    DataParser.createChartData(chartData, nodeData);\r\n                }\r\n            }\r\n            var nodesIns = ClassFactory.newRenderersInstanceByData(self.nodesContainer, self, \"nodeContainer\", [d]);\r\n            if(nodesIns) {\r\n                for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n                    nodeIns = nodesIns[i];\r\n                    //添加子节点收放按钮点击监听，可控制节点的展开,合拢\r\n                    nodeIns.addEventListener(\"expandTool_collapsed\", expandToolClickHandler);\r\n                    //添加节点单击监听，点击节点自动居中，显示子级节点，淡化其他节点\r\n                    nodeIns.addEventListener(\"click\", nodeClickHandler);\r\n                    // nodeIns.addEventListener(\"mouseover\", nodeMouseOverHandler);\r\n                    // nodeIns.addEventListener(\"mouseout\", nodeMouseOutHandler);\r\n                    //添加节点拖拽监听\r\n                    if(self.isEditMode()===false&&self.dragNodeAble()===true){\r\n                        nodeIns.mainContainer().call(d3.drag()\r\n                        .on(\"start\", self.node_dragStartHandler)\r\n                        .on(\"drag\", self.node_dragHandler)\r\n                        .on(\"end\", self.node_dragEndHandler));\r\n                    }\r\n                    self.nodesIns.push(nodeIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    nodesInsMap[key] = nodeIns;\r\n                }\r\n            }\r\n        });\r\n\r\n        //添加新建节点数据到变更集\r\n        addItemsToChangeData(nodesEnter, changeData.nodes.enter);\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"nodes enter cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        \r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        \r\n        //delete\r\n        var nodesExit = bgUpdate.exit();\r\n        nodesExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(nodesInsMap.hasOwnProperty(key)) {\r\n                delete nodesInsMap[key];\r\n            }\r\n            var index = self.nodesIns.indexOf(d.dragIns);\r\n            if(index !== -1) {\r\n                self.nodesIns.splice(index, 1);\r\n            }\r\n        }).remove();\r\n        nodesExit = normalUpdate.exit();\r\n        nodesExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(nodesInsMap.hasOwnProperty(key)) {\r\n                delete nodesInsMap[key];\r\n            }\r\n            var index = self.nodesIns.indexOf(d.dragIns);\r\n            if(index !== -1) {\r\n                self.nodesIns.splice(index, 1);\r\n            }\r\n        }).remove();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"nodes remove cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 更新连线内容\r\n     * @param isUpdateByChange 是否按照变更集刷新\r\n     */\r\n    var updateLinks = function(isUpdateByChange) {\r\n        //只用当前可见的连线作为渲染数据源\r\n        var linksData = self.getVisibleLinks(self.links);\r\n        //渲染连线内容   \r\n        var linksUpdate = self.linksContainer.mainContainer().selectAll(\"g.linkContainer\")\r\n            .data(linksData, self.bindKeyFn);\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //update\r\n        linksUpdate.each(function(d){\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isUpdateByChange && !isItemInChangeData(d, changeData.links.update)) {\r\n                return;\r\n            }\r\n             //根据配置刷新数据内容\r\n             self.getRendererConfig(d, \"stroke\");\r\n            var key = self.bindKeyFn(d);\r\n            var ins = linksInsMap[key];\r\n            if(ins) {\r\n                var child = ins.normalChild();\r\n                if(child instanceof Plugin) {\r\n                    child.data(d);\r\n                    child.config(d.data.config);\r\n                    child.update();\r\n                    d.ins = child;\r\n                    d.legendIns = child;\r\n                    d.dragIns = ins;\r\n                    return;\r\n                }\r\n                var children = ins.children();\r\n                children.forEach(function(child) {\r\n                    if(child instanceof BaseComponent) {\r\n                        child.setDataAndUpdate(d);\r\n                        d.ins = child;\r\n                        d.legendIns = child;\r\n                        d.dragIns = ins;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"link update cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //enter\r\n        var linksEnter = [];\r\n        linksUpdate.enter().each(function(d) {\r\n            linksEnter.push(d);\r\n            var linksIns = ClassFactory.newRenderersInstanceByData(self.linksContainer, self, \"linkContainer\", [d], false, \"stroke\");\r\n            if(linksIns) {\r\n                for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n                    linkIns = linksIns[i];\r\n                    self.linksIns.push(linkIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    linksInsMap[key] = linkIns;\r\n                }\r\n            }\r\n        });\r\n        //添加新建连线数据到变更集\r\n        addItemsToChangeData(linksEnter, changeData.links.enter);\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"link enter cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //delete\r\n        var linksExit = linksUpdate.exit();\r\n        linksExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(linksInsMap.hasOwnProperty(key)) {\r\n                delete linksInsMap[key];\r\n            }\r\n            var index = self.linksIns.indexOf(d.dragIns);\r\n            if(index !== -1) {\r\n                self.linksIns.splice(index, 1);\r\n            }\r\n        }).remove();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"link remove cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n    };\r\n    \r\n     /**\r\n     * 更新节点组内容\r\n     * @param isUpdateByChange 是否按照变更集刷新\r\n     */\r\n    var updateGroups = function(isUpdateByChange) {\r\n        /*\r\n        var groupsContainer = self.groupsContainer;\r\n        groupsContainer.removeAllChildren();\r\n        self.groupsIns.length = 0;\r\n         //用当前可见的点渲染节点组\r\n         var groupsData = self.groups;\r\n         //刷新所有节点组path数据\r\n         refreshGroupsData();\r\n         var groupsIns = ClassFactory.newRenderersInstanceByData(groupsContainer, self, \"groupContainer\", groupsData);\r\n         if(groupsIns) {\r\n             for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n                 groupIns = groupsIns[i];\r\n                 self.groupsIns.push(groupIns);\r\n                }\r\n            }\r\n        return*/\r\n        \r\n        \r\n        //用当前可见的点渲染节点组\r\n        var groupsData = self.groups;\r\n        //刷新所有节点组path数据\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        resetAutoGroups();\r\n        refreshGroupsData();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"refreshGroupsData cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        var groupsUpdate = self.groupsContainer.mainContainer().selectAll(\"g.groupContainer\")\r\n            .data(groupsData, self.bindKeyFn);\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //update\r\n        groupsUpdate.each(function(d){\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isUpdateByChange && !isItemInChangeData(d, changeData.groups.update)) {\r\n                return;\r\n            }\r\n            //根据配置刷新数据内容\r\n            self.getRendererConfig(d, \"fill\");\r\n            var key = self.bindKeyFn(d);\r\n            var ins = groupsInsMap[key];\r\n            if(ins) {\r\n                var child = ins.normalChild();\r\n                if(child instanceof Plugin) {\r\n                    child.data(d);\r\n                    child.update();\r\n                    d.ins = child;\r\n                    d.legendIns = child;\r\n                    d.dragIns = ins;\r\n                    return;\r\n                }\r\n                var children = ins.children();\r\n                children.forEach(function(child) {\r\n                    if(child instanceof BaseComponent) {\r\n                        child.setDataAndUpdate(d);\r\n                        d.ins = child;\r\n                        d.legendIns = child;\r\n                        d.dragIns = ins;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"group update cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //enter\r\n        var groupsEnter = [];\r\n        groupsUpdate.enter().each(function(d) {\r\n            groupsEnter.push(d);\r\n            var groupsIns = ClassFactory.newRenderersInstanceByData(self.groupsContainer, self, \"groupContainer\", [d]);\r\n            if(groupsIns) {\r\n                for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n                    groupIns = groupsIns[i];\r\n                    self.groupsIns.push(groupIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    groupsInsMap[key] = groupIns;\r\n                }\r\n            }\r\n        });\r\n        //添加新建节点组数据到变更集\r\n        addItemsToChangeData(groupsEnter, changeData.groups.enter);\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"group enter cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //delete\r\n        var groupsExit = groupsUpdate.exit();\r\n        groupsExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(groupsInsMap.hasOwnProperty(key)) {\r\n                delete groupsInsMap[key];\r\n            }\r\n            var index = self.groupsIns.indexOf(d.dragIns);\r\n            if(index !== -1) {\r\n                self.groupsIns.splice(index, 1);\r\n            }\r\n        }).remove();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"group remove cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * 刷新节点分组路径数据\r\n     */\r\n    var refreshGroupsData = function() {\r\n        var groupsData = self.groups;\r\n        for(var groupData, i = 0, len = groupsData.length; i < len; i++) {\r\n            groupData = groupsData[i];\r\n            setGroupPath(groupData);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 设置节点分组路径字符串数据到节点分组数据对象中\r\n     * @param groupData 节点分组数据对象\r\n     */\r\n    var setGroupPath = function(groupData) {\r\n        //判断整个节点分组是否可见\r\n        if(groupData.visible === false) {\r\n            groupData.path = \"\";\r\n            groupData.pathPoints = [];\r\n            return;\r\n        }\r\n        var nodesData = groupData.nodes, points = [], \r\n        radius = (groupData.data &&　groupData.data.hasOwnProperty(\"radius\")) ?RegexUtil.replace(RegexUtil.dataRegex,groupData.data.radius,groupData): 20, \r\n        extendedSize = (groupData.data &&　groupData.data.hasOwnProperty(\"extendedSize\")) ? groupData.data.extendedSize : 10;\r\n        if(ObjectUtil.isString(radius)&&radius.indexOf(\"{\")!=-1){\r\n            radius=20;\r\n        }\r\n        for(var ins, node, box, halfW, halfH, i = 0, len = nodesData.length; i < len; i++) {\r\n            node = nodesData[i];\r\n            if(!node.visible || !node.ins) {\r\n                continue;\r\n            }\r\n            ins = node.ins;\r\n//            box = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.el.node().getBBox();\r\n            // box = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.getBBox();\r\n            box = ins instanceof BaseComponent ? ins.getBBox() : ins.mainPlugin.getBBox();\r\n            halfW = box.width/2 + extendedSize;\r\n            halfH = box.height/2 + extendedSize;\r\n            points.push([node.x - halfW, node.y - halfH]);\r\n            points.push([node.x + halfW, node.y - halfH]);\r\n            points.push([node.x + halfW, node.y + halfH]);\r\n            points.push([node.x - halfW, node.y + halfH]);\r\n        }\r\n        var path = math.pointsToPolygonHullRoundPath(points, radius, false);\r\n        groupData.path = path;\r\n        groupData.pathPoints = points;\r\n    };\r\n    \r\n    var addNodeDragListeners = function() {\r\n        for(var nodeIns, nodesIns = self.nodesIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            //添加节点拖拽监听\r\n            nodeIns.mainContainer().call(d3.drag()\r\n                .on(\"start\", self.node_dragStartHandler)\r\n                .on(\"drag\", self.node_dragHandler)\r\n                .on(\"end\", self.node_dragEndHandler));\r\n        }\r\n    };\r\n    \r\n    var removeNodeDragListeners = function() {\r\n        for(var nodeIns, nodesIns = self.nodesIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            //移除节点拖拽监听\r\n            nodeIns.mainContainer().on(\"mousedown.drag\", null);\r\n        }\r\n    };\r\n\r\n\r\n    var dragNodeAble=true;\r\n    this.dragNodeAble=function(value){//能否拖拽节点\r\n        if(arguments.length===0){\r\n            return dragNodeAble;\r\n        }\r\n        dragNodeAble=value;\r\n        return this;\r\n    }\r\n    \r\n    var setListenersInNormal = function() {\r\n        self.addDragListeners();\r\n        if(self.dragNodeAble()){\r\n            addNodeDragListeners();\r\n        }\r\n    };\r\n    \r\n    var setListenersInEditLink = function() {\r\n        self.removeDragListeners();\r\n        removeNodeDragListeners();\r\n    };\r\n    \r\n    //override\r\n    this.toJSON = function(isData) {\r\n        var str = \"\";\r\n        var d = self.data();\r\n        if(!d) {\r\n            return str;\r\n        }\r\n        //清除数据属性节点的内容，然后克隆除数据内容外的配置内容，这样做是因为循环引用在toJson的时候会报错\r\n        var nodes = d.nodes;\r\n        var links = d.links;\r\n        var groups = d.groups;\r\n        if(nodes) {\r\n            d.nodes = [];\r\n        }\r\n        if(links) {\r\n            d.links = [];\r\n        }\r\n        if(groups) {\r\n            d.groups = [];\r\n        }\r\n        //根据需要的属性复制数据内容，下面是要排除的属性名称数组\r\n        var nodeKeys = [\"collapsed\", \"data\", \"ins\", \"legendIns\", \"vx\", \"vy\",\"index\",\"links\",\"cx\",\"cy\"];\r\n        var linkKeys = [\"data\", \"ins\",\"legendIns\",\"lineIndex\", \"__proto__\"];\r\n        var groupKeys = [\"data\", \"ins\",\"legendIns\", \"path\",\"pathPoints\"];\r\n        var getData = function(keys, data, isLink) {\r\n            var result = [];\r\n            if(isLink) {\r\n                for(var d, obj, i = 0, len = data.length; i < len; i++) {\r\n                    d = data[i];\r\n                    obj = {};\r\n                    result.push(obj);\r\n                    for(var k in d) {  \r\n                        if(keys.indexOf(k)==-1){\r\n                            obj[k]=d[k];\r\n                            if(k===\"source\"||k===\"target\"){\r\n                                obj[k]=d[k].id;\r\n                            }\r\n                        }\r\n                    }  \r\n                }\r\n            } else{\r\n                for(var d, obj, i = 0, len = data.length; i < len; i++) {\r\n                    d = data[i];\r\n                    obj = {};\r\n                    result.push(obj);\r\n                    for(var k in d) {  \r\n                        if(keys.indexOf(k)==-1){\r\n                            if(k===\"nodes\"&&keys===groupKeys){\r\n                                var nodes=d[k];\r\n                                obj[k]=[];\r\n                                for(var j=0;j<nodes.length;j++){\r\n                                    obj[k].push(nodes[j].id);\r\n                                }\r\n                            }else{\r\n                                obj[k]=d[k];\r\n                            }                           \r\n\r\n                        }\r\n                    }  \r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        var cloneData = isData === true ? {} : ObjectUtil.cloneObj(d);\r\n        cloneData.nodes = getData(nodeKeys, self.nodes);\r\n        cloneData.links = getData(linkKeys, self.links, true);\r\n        cloneData.groups = getData(groupKeys, self.groups);\r\n        //还原数据\r\n        if(nodes) {\r\n            d.nodes = nodes;\r\n        }\r\n        if(links) {\r\n            d.links = links;\r\n        }\r\n        if(groups) {\r\n            d.groups = groups;\r\n        }\r\n        //把该baseChart的数据转换成json字符串\r\n        str = JSON.stringify(cloneData);\r\n        return str;\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"EditorTopo info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   showLevel:\" + self.showLevel()  +\r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var searchTextHandler = function(event) {\r\n        var str = event.detail;\r\n        var nodes = self.searchNodesByName(str);\r\n        self.centerNodesAndSelected(nodes, true);\r\n    };\r\n    \r\n    /**\r\n     * 外部抛事件代码如下:\r\n     * <code><pre>\r\n     * const BaseEvent = ghca_charts.events.BaseEvent;\r\n     * const EventUtil = ghca_charts.view.util.eventUtil;\r\n     * const evt = EventUtil.createCustomEvent(BaseEvent.TOPO_NODE_FOCUS_IN, true, true, \"10.4.42.1\");\r\n     * d3.selectAll(\"g.seriesTopo\").node().dispatchEvent(evt);\r\n     * </pre></code>\r\n     */\r\n    var topoNodeFocusInHandler = function(event) {\r\n        var id = event.detail;\r\n        //移动该节点到中心位置并选中，然后突出显示节点\r\n        self.centerAndFocusInNode(id)\r\n    };\r\n    \r\n    /**\r\n     * 节点单击事件的监听相关处理方法\r\n     */\r\n    var nodeClickHandler = function(event) {\r\n        if(self.isEditMode() || !self.focusEffect()) {\r\n            if(_nodeClickHandler){\r\n                _nodeClickHandler(event);\r\n            }\r\n            return;\r\n        }\r\n        //获取当前双击的节点数据对象\r\n        var data = d3.select(event.currentTarget).data();\r\n        if(data.length === 0) {\r\n            return;\r\n        }\r\n        var node = data[0];\r\n        var nodeIns = node.ins;\r\n        var items = self.selectedNodeItems();\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            if (item.ins.selected()&&nodeIns!==item.ins) {\r\n                item.ins.selected(false);\r\n            }\r\n        }\r\n        if(nodeIns && nodeIns.selected()) {\r\n            //若该节点已经处于选中状态，则取消选选中和聚焦状态\r\n            self.focusOutAllNodes();\r\n            item.ins.selected(false);\r\n        } else {\r\n            //移动该节点到中心位置并选中，然后突出显示节点\r\n            self.centerAndFocusInNode(node);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 子节点收放按钮点击事件的监听相关处理方法\r\n     */\r\n    var expandToolClickHandler = function(event) {\r\n        event.stopImmediatePropagation();\r\n        var node = event.detail;\r\n        if(!node) {\r\n            return;\r\n        }\r\n        self.expandOrCollapseNodeInUI(node);\r\n    };\r\n    \r\n    /**\r\n     * 实时更新渲染数据的监听相关处理方法\r\n     */\r\n    this.tickHandler = function() {        \r\n        if(!self.layout().fixed()) {\r\n            self.renderPosition();\r\n            self.mainContainer().node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG_CHANGE,true,true,{enable:false}));\r\n        }       \r\n    };\r\n    this.tickEndHandler = function() {\r\n        if(!self.layout().fixed()) {\r\n            self.renderPosition();\r\n            self.mainContainer().node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG_CHANGE,true,true,{enable:true}));\r\n        }\r\n    };\r\n    \r\n    var multSelectMode=false;\r\n    this.multSelectMode=function(value){\r\n        if(arguments.length===0){\r\n            return multSelectMode;\r\n        }\r\n        multSelectMode=value;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 节点开始拖动\r\n     */\r\n    this.node_dragStartHandler = function(d) {\r\n        var items=self.selectedNodeItems();\r\n        if(!self.multSelectMode()){\r\n            items.forEach(function(node){\r\n                node.ins.selected(false);\r\n            });\r\n        }else{\r\n            if(items.indexOf(d)==-1){//不在多选列表\r\n                items.forEach(function(node){\r\n                    node.ins.selected(false);\r\n                });\r\n            }\r\n        }\r\n        d.ins.selected(true);\r\n        dragMoveX=d3.event.x-d.x;\r\n        dragMoveY=d3.event.y-d.y;\r\n        if(self.layout().fixed()) {\r\n            // d.x = d3.event.x;\r\n            // d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.updateDragedObjectPos(d);\r\n        } else {\r\n             if (!d3.event.active) {\r\n                self.model.alphaTarget(0.3).restart();\r\n            }\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点拖动中\r\n     */\r\n    this.node_dragHandler = function(d) {\r\n        dragMoveX=d3.event.x-d.x;\r\n        dragMoveY=d3.event.y-d.y;\r\n        if(self.layout().fixed()) {\r\n            // d.x = d3.event.x;\r\n            // d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.updateDragedObjectPos(d);\r\n        } else {\r\n            d.fx = d3.event.x;\r\n            d.fy = d3.event.y;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点结束拖动\r\n     */\r\n    this.node_dragEndHandler = function(d) {\r\n        dragMoveX=d3.event.x-d.x;\r\n        dragMoveY=d3.event.y-d.y;\r\n        var evt = EventUtil.createCustomEvent(\"node_drag_end\", true, true); //通知节点拖动事件\r\n        d3.selectAll(\"g.seriesTopo\").node().dispatchEvent(evt);\r\n        if(self.layout().fixed()) {\r\n            // d.x = d3.event.x;\r\n            // d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.updateDragedObjectPos(d);\r\n        } else {\r\n            if (!d3.event.active) {\r\n                self.model.alphaTarget(0);\r\n            }\r\n            d.fx = null;\r\n            d.fy = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 渲染鼠标拖动对象以及其相关联的对象的位置 \r\n     */\r\n    this.updateDragedObjectPos = function(d) {\r\n    \tif(!d) {\r\n    \t\treturn;\r\n        }\r\n        \r\n        var nodesIns = self.nodesIns;\r\n        var nodes = [];\r\n        for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().each(function(d) {\r\n                if(d.ins.selected()){\r\n                    d.x+=dragMoveX;\r\n                    d.y+=dragMoveY;\r\n                    nodes.push(d);\r\n                }\r\n               nodeIns.x(Math.round(d.x));\r\n               nodeIns.y(Math.round(d.y));\r\n               nodeIns.renderTransform();\r\n            });\r\n        }\r\n        dragMoveX=dragMoveY=0;\r\n\r\n\r\n    \t// var nodeIns = d.dragIns;\r\n    \t// if(nodeIns) {\r\n    \t// \tnodeIns.x(Math.round(d.x));\r\n        //     nodeIns.y(Math.round(d.y));\r\n        //     nodeIns.renderTransform();\r\n    \t// }\r\n        \r\n        for(var n=0;n<nodes.length;n++){\r\n            d=nodes[n];\r\n            var links = d.links;\r\n            if(ObjectUtil.isArray(links)) {\r\n                for(var link, linkIns, i = 0, len = links.length; i < len; i++) {\r\n                    link = links[i];\r\n                    // link.source && nodes.indexOf(link.source) === -1 && nodes.push(link.source);\r\n                    // link.target && nodes.indexOf(link.target) === -1 && nodes.push(link.target);\r\n                    linkIns = link.dragIns;\r\n                    if(!linkIns) {\r\n                        continue;\r\n                    }\r\n                    if(linkIns.normalChild()){\r\n                        linkIns.normalChild().update();\r\n                    } else {\r\n                        linkIns.render();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n//        //刷新所有节点组path数据\r\n//        refreshGroupsData();\r\n//        var groupsIns = self.groupsIns;\r\n//        for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n//            groupIns = groupsIns[i];\r\n//            if(groupIns.normalChild()) {\r\n//                groupIns.normalChild().update();\r\n//            } else {\r\n//                groupIns.render();\r\n//            }\r\n//        }\r\n        \r\n        //刷新相关节点组path数据\r\n        var groups = self.findGroupsByNodes(nodes);\r\n        for(var groupData, groupIns, i = 0, len = groups.length; i < len; i++) {\r\n            groupData = groups[i];\r\n            setGroupPath(groupData);\r\n            \r\n            groupIns = groupData.dragIns;\r\n            if(groupIns.normalChild()) {\r\n                groupIns.normalChild().update();\r\n            } else {\r\n                groupIns.render();\r\n            }\r\n        }\r\n\r\n        //延时触发鹰眼变更\r\n        self.sendMsgToEye(fireContentChange, 1000);\r\n    };\r\n\r\n    /*\r\n    * 找到多个节点所在的节点组列表\r\n    * @param arguments[0] 一个或者多个节点，一个节点直接传入，多个节点用数组包装再传入\r\n    * @return 返回节点组列表数组，若没有则返回空数组\r\n    */\r\n   this.findGroupsByNodes = function() {\r\n       if(ObjectUtil.isObject(arguments[0])) {\r\n           return self.findGroupsByNode(arguments[0]);\r\n       } \r\n       if(ObjectUtil.isArray(arguments[0])) {\r\n           var nodes = arguments[0];\r\n           var result = [];\r\n           for(var groups, i = 0, len = nodes.length; i < len; i++) {\r\n               groups = self.findGroupsByNode(nodes[i]);\r\n               for(var group, j = 0, len1 = groups.length; j < len1; j++) {\r\n                   group = groups[j];\r\n                   if(result.indexOf(group) === -1) {\r\n                       result.push(group);\r\n                   }\r\n               }\r\n           }\r\n           return result;\r\n       }\r\n       return [];\r\n   };\r\n   \r\n   /**\r\n    * 找到节点所在的节点组列表\r\n    * @param node 节点数据对象\r\n    * @return 返回节点组列表数组，若没有则返回空数组\r\n    */\r\n   this.findGroupsByNode = function(node) {\r\n       var result = [];\r\n       if(!node) {\r\n           return result;\r\n       }\r\n       var groups = self.groups;\r\n       for(var group, nodes, i = 0, len = groups.length; i < len; i++) {\r\n           group = groups[i];\r\n           nodes = group.nodes;\r\n           if(nodes.indexOf(node) !== -1) {\r\n               result.push(group);\r\n           }\r\n       }\r\n       return result;\r\n   };\r\n   \r\n   /**\r\n    \r\n    \r\n    /**\r\n     * 点击保存按钮事件处理方法\r\n     */\r\n    var saveBtnClickHandler = function() {\r\n        //向外部抛出保存数据\r\n        self.node().dispatchEvent(EventUtil.createCustomEvent(\r\n           BaseEvent.EV_EVENT_DATA_STORAGE, true, true, {data:self.toJSON(true)}));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 设置传入的对象是否显示选中状态\r\n     * @param selected 对象是否显示选中状态\r\n     * @param insArray 要设置的对象数组，若不传则为图表中的所有对象(节点+连线)\r\n     */\r\n    this.setSelected = function(selected, insArray) {\r\n        if(insArray) {\r\n            for (var i = 0, len = insArray.length; i < len; i++) {\r\n                insArray[i].selected(selected);\r\n            }\r\n        } else {\r\n            var nodes = self.nodes;\r\n            for (var i = 0, len = nodes.length; i < len; i++) {\r\n                nodes[i].ins.selected(selected);\r\n            }\r\n            var links = self.links;\r\n            for (var i = 0, len = links.length; i < len; i++) {\r\n                links[i].ins.selected(selected);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 将当前框选项显示选中效果\r\n     */\r\n    this.setSelectedItemsInSelectArea = function() {\r\n        var con = self.parent().parent().mainContainer();\r\n        var rect = con.select(\"rect.select\");\r\n        // var rect = self.editCon.mainContainer().select(\"rect.select\");\r\n        var rectNode = rect.node();\r\n        if(rectNode) {\r\n            selectedNodeItems.length = 0;\r\n            selectedLinkItems.length = 0;\r\n            selectedGroupItems.length = 0;\r\n            //选中区域内的所有节点\r\n            var node, link, ins, insRect, source, target, intersections, isCollision, \r\n                nodes = self.nodes, \r\n                links = self.links,\r\n                groups = self.groups,\r\n                rect = {},\r\n                selectRect = {\r\n                    x:parseInt(rectNode.getAttribute(\"x\")),\r\n                    y:parseInt(rectNode.getAttribute(\"y\")),\r\n                    width:parseInt(rectNode.getAttribute(\"width\")),\r\n                    height:parseInt(rectNode.getAttribute(\"height\"))\r\n                };\r\n                if(isNaN(selectRect.height)){\r\n                    selectRect.height=0;\r\n                }\r\n                if(isNaN(selectRect.width)){\r\n                    selectRect.width=0;\r\n                }\r\n                // selectRect = rectNode.getBBox();\r\n                // var nodeBox=self.nodesContainer.node().getBBox();\r\n                selectRect.x=(selectRect.x-self.x())/self.scaleX();\r\n                selectRect.y=(selectRect.y-self.y())/self.scaleY();\r\n                selectRect.width=selectRect.width/self.scaleX();\r\n                selectRect.height=selectRect.height/self.scaleY();\r\n\r\n                // var re=self.mainContainer().select(\"rect.select1\");\r\n                // if(re.node()===null){\r\n                //     re=self.mainContainer().append(\"rect\")                   \r\n                // }\r\n                // re.attr(\"class\",\"select1\")\r\n                // .attr(\"x\",selectRect.x)\r\n                // .attr(\"y\",selectRect.y)\r\n                // .attr(\"width\",selectRect.width)\r\n                // .attr(\"height\",selectRect.height)\r\n            for (var i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                ins = node.ins;\r\n                if(!ins){\r\n                    continue;\r\n                }\r\n//                insRect = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.el.node().getBBox();\r\n                // insRect = ins instanceof BaseComponent ? ins.node().getBBox() : ins.mainPlugin.getBBox();\r\n                insRect = ins instanceof BaseComponent ? ins.getBBox() : ins.mainPlugin.getBBox();\r\n                //这样重新创建一个对象是因为ie中getBBox()返回的对象属性是只读的\r\n                rect.x = node.x + insRect.x;\r\n                rect.y = node.y + insRect.y;\r\n                rect.width = insRect.width;\r\n                rect.height = insRect.height;\r\n                if(math.isCollisionInTwoRects(selectRect, rect)) {\r\n                    ins.selected(true);\r\n                    selectedNodeItems.push(node);\r\n                } else {\r\n                    ins.selected(false);\r\n                }\r\n            }\r\n            selectedNodeItems.forEach(function(node){\r\n                groups.forEach(function(g){\r\n                    \r\n                    if(ObjectUtil.contains(g.nodes,node)&&!ObjectUtil.contains(selectedGroupItems,g)){\r\n                        selectedGroupItems.push(g);\r\n                    }\r\n                });\r\n            });\r\n\r\n\r\n            //选中区域内的所有连线\r\n            // var rectPath =  \"M\"+selectRect.x+\",\"+selectRect.y +\r\n            //                 \" L\"+(selectRect.x+selectRect.width)+\",\"+selectRect.y+\r\n            //                 \" L\"+(selectRect.x+selectRect.width)+\",\"+(selectRect.y+selectRect.height)+\r\n            //                 \" L\"+(selectRect.x)+\",\"+(selectRect.y+selectRect.height) + \"Z\";\r\n            // for (var i = 0, len = links.length; i < len; i++) {\r\n            //     link = links[i];\r\n            //     ins = link.ins;\r\n            //     source = link.source;\r\n            //     target = link.target;\r\n            //     //矩形框选区域是否包含该连线\r\n            //     if(math.isPointInsideBBox(source.x, source.y, selectRect) && \r\n            //        math.isPointInsideBBox(target.x, target.y, selectRect)) {\r\n            //         isCollision = true;\r\n            //     } else {\r\n            //         //若不包含则判断是否有交点\r\n            //         intersections = Raphael.pathIntersection(ins.el.select(\"path\").attr(\"d\"), rectPath);\r\n            //         if(intersections.length > 0) {\r\n            //             isCollision = true;\r\n            //         } else {\r\n            //             isCollision = false;\r\n            //         }\r\n            //     }\r\n            //     if(isCollision) {\r\n            //         ins.selected(true);\r\n            //         selectedLinkItems.push(link);\r\n            //     } else {\r\n            //         ins.selected(false);\r\n            //     }\r\n            // }\r\n        }\r\n\r\n        return selectedNodeItems;\r\n    };\r\n    \r\n    /**\r\n     * 移动该节点到中心位置并选中，然后突出显示节点\r\n     * @param arguments[0] 节点id或者节点数据对象\r\n     */\r\n    this.centerAndFocusInNode = function() {\r\n        if(arguments.length === 0) {\r\n            return;\r\n        }\r\n        var node;\r\n        if(ObjectUtil.isString(arguments[0])) {\r\n            node = self.findNode(arguments[0]);\r\n        } else if(ObjectUtil.isObject(arguments[0])) {\r\n            node = arguments[0];\r\n        }\r\n        if(!node) {\r\n            return;\r\n        }\r\n        //移动该节点到中心位置并选中\r\n        self.centerNodesAndSelected(node,true);\r\n        //突出显示节点\r\n        self.focusInNode(node);\r\n    };\r\n    \r\n    var _isFocusNode=false;\r\n    this.isFocusNode=function(){\r\n        return _isFocusNode;\r\n    }\r\n\r\n\r\n    /**\r\n     * 突出显示节点\r\n     * @param node 要突出显示的节点数据对象\r\n     */\r\n    this.focusInNode = function(node) {\r\n        if(!node || !node.id) {\r\n            return;\r\n        }\r\n        var i, len, ins, nodeIns, linkIns, groupIns, nodeData, linkData, links, id = node.id, opacity = 0.1, \r\n            nodesIns = self.nodesIns, linksIns = self.linksIns, groupsIns = self.groupsIns, insAry = [];\r\n        var duration = self.animation() ? 300 : 0;\r\n        //找到目标对象，并淡化所有节点、连线、分组的显示效果\r\n        for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().attr(\"opacity\", opacity);\r\n            if(nodeIns.mainContainer().data()[0].id === id) {\r\n                ins = nodesIns[i];\r\n            }\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            linkIns = linksIns[i];\r\n            linkIns.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = groupsIns.length; i < len; i++) {\r\n            groupIns = groupsIns[i];\r\n            groupIns.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        //添加要突出显示的对象到数组中\r\n        nodeData = ins.mainContainer().data()[0];\r\n        insAry.push(nodeData.ins);\r\n        links = nodeData.links;\r\n        if(links) {\r\n            for(i = 0, len = links.length; i < len; i++) {\r\n                linkData = links[i];\r\n                insAry.push(linkData.ins);\r\n                if(linkData.target && linkData.target.ins) {\r\n                    insAry.push(linkData.target.ins);\r\n                }\r\n                if(linkData.source && linkData.source.ins) {\r\n                    insAry.push(linkData.source.ins);\r\n                }\r\n            }\r\n        }\r\n        //突出显示\r\n        for(i = 0, len = insAry.length; i < len; i++) {\r\n            ins = insAry[i];\r\n            if(ins instanceof BaseComponent) {\r\n                ins = ins.mainContainer();\r\n            } else {\r\n                ins = d3.select(ins.el.node().parentNode);\r\n            }\r\n            ins && ins.attr(\"opacity\", 1);\r\n        }\r\n\r\n        _isFocusNode=true;\r\n    };\r\n    \r\n    /**\r\n     * 取消所有节点的突出显示效果\r\n     */\r\n    this.focusOutAllNodes = function() {\r\n        if(!self.nodesIns || !self.linksIns) {\r\n            return;\r\n        }\r\n        var i, len, ins, opacity = 1, nodesIns = self.nodesIns, \r\n            linksIns = self.linksIns, groupsIns = self.groupsIns;\r\n        for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            ins = nodesIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            ins = linksIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = groupsIns.length; i < len; i++) {\r\n            ins = groupsIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n\r\n        _isFocusNode=false;\r\n    };\r\n    \r\n    /**\r\n     * 对传入的节点居中并设置显示选中状态(选中状态根据传入参数设置)\r\n     * @param arguments[0] 节点数据对象数组或者单个节点数据对象\r\n     * @param arguments[1] 是否选中传入的节点，默认为否\r\n     */\r\n    this.centerNodesAndSelected = function() {\r\n        var nodes = self.nodes;\r\n        var isSelect = arguments.length > 1 ? arguments[1] === true : false;\r\n        //取消所有节点选中状态\r\n        var nodesIns = [];\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            nodesIns.push(nodes[i].ins);\r\n        }\r\n        self.setSelected(false, nodesIns);\r\n        \r\n        var ratio = 1, currentX = NaN, currentY = NaN;\r\n        if (ObjectUtil.isArray(arguments[0])) {//传入参数为数组\r\n            nodes = arguments[0];\r\n            if(nodes.length === 0) {\r\n                return;\r\n            }\r\n            //计算搜索结果点外接矩形中心\r\n            var minX = NaN, minY = NaN, maxX = NaN, maxY = NaN,\r\n                leftNodeW = NaN, rightNodeW = NaN, topNodeH = NaN, bottomNodeH = NaN;\r\n            for (var node, nodeIns, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                nodeIns = node.ins;\r\n                if(isSelect) {\r\n                    nodeIns.selected(true);\r\n                }\r\n                if(isNaN(minX) || node.x < minX) {\r\n                    minX = node.x;\r\n                    leftNodeW = nodeIns.actualWidth();\r\n                }\r\n                if(isNaN(minY) || node.y < minY) {\r\n                    minY = node.y;\r\n                    topNodeH = nodeIns.actualHeight();\r\n                }\r\n                if(isNaN(maxX) || node.x > maxX) {\r\n                    maxX = node.x;\r\n                    rightNodeW = nodeIns.actualWidth();\r\n                }\r\n                if(isNaN(maxY) || node.y > maxY) {\r\n                    maxY = node.y;\r\n                    bottomNodeH = nodeIns.actualHeight();\r\n                }\r\n            }\r\n            currentX = (maxX + minX)/2, currentY = (maxY + minY)/2;\r\n            //搜索结果点外接矩形是否大于图表显示范围，若是则缩小内容\r\n            var ratioX = 1, ratioY = 1, \r\n                areaW = maxX - minX + (leftNodeW + rightNodeW) / 2, \r\n                areaH = maxY - minY + (topNodeH + bottomNodeH) / 2;\r\n            if(areaW > self.width()) {\r\n                ratioX = self.width() / areaW;\r\n            }\r\n            if(areaH > self.height()) {\r\n                ratioY = self.height() / areaH;\r\n            }\r\n            ratio = ratioX > ratioY ? ratioY : ratioX;\r\n            self.scaleX(ratio);\r\n            self.scaleY(ratio);\r\n        } else if(ObjectUtil.isObject(arguments[0])) {//传入参数为单个点\r\n            var node = arguments[0];\r\n            var nodeIns = node.ins;\r\n            if(isSelect) {\r\n                nodeIns.selected(true);\r\n            }\r\n            currentX = node.x;\r\n            currentY = node.y;\r\n        }\r\n        if(isNaN(currentX) || isNaN(currentY)) {\r\n            return;\r\n        }\r\n        \r\n        //把搜索结果点外接矩形中心点移动到图 表中心位置\r\n        var x = self.x(), y = self.y(), \r\n            moveX = self.width()/2, moveY = self.height()/2;\r\n        x = (moveX - currentX * self.scaleX()) * self.graph().scaleX();\r\n        y = (moveY - currentY * self.scaleY()) * self.graph().scaleY();\r\n        self.x(Math.round(x));\r\n        self.y(Math.round(y));\r\n        self.layout().model().stop();\r\n        var transition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n        self.renderTransform(transition);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // data control\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 增加一个节点 \r\n     * @param node 节点数据对象\r\n     */\r\n    this.addNode = function(node) {\r\n        self.nodes.push(node);        \r\n    };\r\n\r\n    /**\r\n     * 批量增加节点 \r\n     * @param nodes 节点数据对象数组\r\n     */\r\n    this.addNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n            for(var i = 0, len = nodes.length; i < len; i++) {\r\n                self.addNode(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n\r\n    this.addAutoGroupNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n            for(var i = 0, len = nodes.length; i < len; i++) {\r\n                self.addNodeToAutoGroup(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 增加一条连线 \r\n     * @param link 连线数据对象 \r\n     */\r\n    this.addLink = function(link) {\r\n        //寻找该连线起点和终点\r\n        link.source = self.findNode(link.source);\r\n        link.target = self.findNode(link.target);\r\n        var source = link.source, \r\n            target = link.target;\r\n        //寻找具有相同起点和终点的连线，生成lineIndex，并把该连线添加到起点和终点对应的连线数据数组里面\r\n        if(!source.hasOwnProperty(\"links\")) {\r\n            source.links = [];\r\n        }\r\n        //刷新lineIndex\r\n        var lineIndex = self.refreshLineIndex(link);\r\n        link.lineIndex = lineIndex > 0 ? lineIndex : 0;\r\n        source.links.push(link);\r\n        if(!target.hasOwnProperty(\"links\")) {\r\n            target.links = [];\r\n        }\r\n        target.links.push(link);\r\n        self.links.push(link);\r\n    };\r\n\r\n    /**\r\n     * 批量增加连线 \r\n     * @param links 连线数据对象数组\r\n     */\r\n    this.addLinks = function(links) {\r\n        if (ObjectUtil.isArray(links)) {\r\n            for(var i = 0, len = links.length; i < len; i++) {\r\n                self.addLink(links[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点 \r\n     * @param node 要删除的节点data\r\n     */\r\n    this.removeNode = function(node) {\r\n        var i = 0,id=node.id, n = self.findNode(id), links = self.links;\r\n        //删除该节点相关的连线\r\n        while (i < links.length) {\r\n            links[i]['source'] === n || links[i]['target'] === n ? links.splice(i, 1) : ++i;\r\n        }\r\n        //删除该节点\r\n        self.nodes.splice(self.findNodeIndex(id), 1);\r\n        //在所有分组中删除该节点\r\n        self.removeNodeFromAllGroup(n);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除节点 \r\n     * @param ids 要删除的节点id数组\r\n     */\r\n    this.removeNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n            for(var i = 0, len = nodes.length; i < len; i++) {\r\n                self.removeNode(nodes[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除连线 \r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLink = function(link) {\r\n        //删除连线自身\r\n        var links = self.links;\r\n        var index = links.indexOf(link);\r\n        if(index !== -1) {\r\n            links.splice(index, 1);\r\n        }\r\n        var source = link.source, \r\n            target = link.target;\r\n        //删除连线起点中对应的该连线\r\n        self.removeLinkFromNode(source, link);\r\n        //删除连线终点中对应的该连线\r\n        self.removeLinkFromNode(target, link);\r\n        //刷新lineIndex\r\n        self.refreshLineIndex(link);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除连线 \r\n     * @param links 要删除的连线数据对象数组\r\n     */\r\n    this.removeLinks = function(links) {\r\n        if (ObjectUtil.isArray(links)) {\r\n            for(var i = 0, len = links.length; i < len; i++) {\r\n                self.removeLink(links[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点中对应的连线引用\r\n     * @param node 包含该连线引用的节点数据对象\r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLinkFromNode = function(node, link) {\r\n        if(node && node.links) {\r\n            links = node.links;\r\n            for(var l, i = 0, len = links.length; i < len; i++) {\r\n                l = links[i];\r\n                if(l === link) {\r\n                    links.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点下的子节点，同时清除link信息 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeChildNodes = function(id) {\r\n        var   node = self.findNode(id), //要删除的节点\r\n              nodes = self.nodes,       //所有节点\r\n              link = null,\r\n              links = self.links,       //所有连线 \r\n              delateLinks = [],         //要删除的连线索引数组\r\n              childNodes = [];          //当前节点的所有子节点数组\r\n\r\n        //找到所有要删除的连线索引，以及当前节点的所有子节点\r\n        links.forEach(function(link, index) {\r\n            //若节点是此条连线的起点\r\n            if(link['source'] === node) {\r\n                delateLinks.push(index);\r\n                childNodes.push(link['target']);\r\n            }\r\n        });\r\n\r\n        //删除上面找到的所有需要删除的连线\r\n        delateLinks.reverse().forEach(function(index) {\r\n            links.splice(index, 1);\r\n        });\r\n\r\n        //迭代删除节点\r\n        var remove = function(node) {\r\n            var length = links.length;\r\n            for (var i = length - 1; i >= 0; i--) {\r\n                if (links[i]['source'] === node) {\r\n                    var target = links[i]['target'];\r\n                    links.splice(i, 1);\r\n                    nodes.splice(self.findNodeIndex(node.id), 1);\r\n                    remove(target);\r\n                }\r\n            }\r\n        };\r\n\r\n        //删除上面找到当前节点的所有子节点\r\n        childNodes.forEach(function(node) {\r\n            remove(node);\r\n        });\r\n\r\n        //清除没有连线的节点\r\n        for (var i = nodes.length - 1, len = links.length; i >= 0; i--) {\r\n            var isFoundNode = false;\r\n            node = nodes[i];\r\n            for (var j = 0; j < len; j++) {\r\n                link = links[j];\r\n                if(link['source'] === node || link['target'] === node) {\r\n                    isFoundNode = true;\r\n                }\r\n            }\r\n            if(!isFoundNode) {\r\n                nodes.splice(i, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 查找节点\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象，若没有查找到则返回null\r\n     */\r\n    this.findNode = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] === id)\r\n                return nodes[i];\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * 获取LINk\r\n     * @param id\r\n     * @returns {*}\r\n     */\r\n    this.findLink = function(id) {\r\n        var links = self.links;\r\n        for (var i = 0, len = links.length; i < len; i++) {\r\n            if (links[i]['id'] === id)\r\n                return links[i];\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * 查找节点数据对象所在数组的索引值\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象所在数组的索引值，若没有查找到则返回-1\r\n     */\r\n    this.findNodeIndex = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] === id)\r\n                return i;\r\n        }\r\n        return -1;\r\n    };\r\n    \r\n    /**\r\n     * 刷新变更(添加、删除)目标连线所在的两端点之间的连线的索引值\r\n     * @param link 变更(添加、删除)目标连线数据对象\r\n     * @return 返回下一个要添加的连线索引值\r\n     */\r\n    this.refreshLineIndex = function(link) {\r\n        var sourceLink, \r\n            lineIndex = 0, \r\n            source = link.source, \r\n            target = link.target,\r\n            sourceLinks = source.links;\r\n        for(var i = 0, len = sourceLinks.length; i < len; i++) {\r\n            sourceLink = sourceLinks[i];\r\n            //寻找具有相同节点的连线\r\n            if((sourceLink.target === source || sourceLink.source === source) && \r\n               (sourceLink.target === target || sourceLink.source === target)) {\r\n                sourceLink.lineIndex = lineIndex;\r\n                lineIndex++;\r\n                //记录变更集\r\n                addItemsToChangeData(sourceLink, changeData.links.update);\r\n            }\r\n        }\r\n        return lineIndex;\r\n    };\r\n    \r\n    /**\r\n     * 增加一个节点组\r\n     * @param group 节点数据对象\r\n     */\r\n    this.addGroup = function(group) {\r\n        var nodes = group.nodes;\r\n        //替换group中的节点id为对应的节点数据对象\r\n        for (var node, i = 0, len = nodes.length; i < len; i++) {\r\n            node = self.findNode(nodes[i]);\r\n            nodes[i] = node;\r\n        }\r\n        self.groups.push(group);\r\n    };\r\n    \r\n    /**\r\n     * 批量增加节点组\r\n     * @param groups 节点组数据对象数组\r\n     */\r\n    this.addGroups = function(groups) {\r\n        if (ObjectUtil.isArray(groups)) {\r\n            for(var i = 0, len = groups.length; i < len; i++) {\r\n                self.addGroup(groups[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除一个节点组\r\n     * @param group 节点数据对象\r\n     */\r\n    this.removeGroup = function(group) {\r\n        var groups = self.groups;\r\n        var index = groups.indexOf(group);\r\n        if(index !== -1) {\r\n            //删除该节点组\r\n            groups.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    var resetAutoGroups=function(){\r\n        autoGroupKeys=self.data().renderers.groupNode&&self.data().renderers.groupNode.autoGroupKeys&&self.data().renderers.groupNode.autoGroupKeys.split(\",\");\r\n        autoGroupKeys=autoGroupKeys?autoGroupKeys:\"\";\r\n        var groups=self.groups;\r\n        groups.forEach(function(group){\r\n            if(group.groupKey&&autoGroupKeys.indexOf(group.groupKey)==-1){\r\n                 self.removeGroup(group);\r\n            }\r\n//            //by lizheng 此处分组存在与否，不应与业务逻辑挂钩\r\n//            else if(group.nodes.length<2){\r\n//                self.removeGroup(group);\r\n//            }\r\n        })\r\n\r\n        self.addAutoGroupNodes(self.nodes);\r\n    }\r\n\r\n    var autoGroupsInfos=null;\r\n    this.setAutoGroupInfo=function(infos){\r\n        autoGroupsInfos=infos;\r\n    }\r\n\r\n\r\n      /**\r\n     * 添加节点到自动组\r\n     */\r\n    this.addNodeToAutoGroup=function(nodeData){\r\n        var allgroup=self.groups;\r\n        var num=allgroup.length;\r\n        var putGkeys=[];\r\n        var nodes = self.nodes;\r\n        for(var i=0;i<num;i++){\r\n            var group=allgroup[i];\r\n            var index=autoGroupKeys.indexOf(group.groupKey);\r\n            var copyNodes=[];\r\n            group.nodes.forEach(function(n){\r\n                copyNodes.push(n);\r\n            });\r\n\r\n            copyNodes.forEach(function(n){\r\n               if(nodes.indexOf(n)===-1){//不存在的节点要移除\r\n                    self.removeNodeFromGroup(n,group);\r\n               }\r\n            });\r\n            var node = self.findNode(nodeData.id);\r\n            if(index!=-1&&group.nodes.length>0&&group.nodes[0][group.groupKey]===nodeData[group.groupKey]){\r\n                var nameN=\"自动组_\"+getAutoName(group.groupKey);\r\n                if(group.name!=nameN){\r\n                    group.name=nameN;\r\n                    addItemsToChangeData(group, changeData.groups.update);\r\n                }\r\n                self.addNodeToGroup(node,group);\r\n                putGkeys.push(group.groupKey);               \r\n            }\r\n        }\r\n\r\n       \r\n        for(var k=0;k<autoGroupKeys.length;k++){\r\n            var key=autoGroupKeys[k];\r\n            var groupIDs=[];\r\n            if(putGkeys.indexOf(key)===-1){\r\n                for(var j=0;j<nodes.length;j++){\r\n                    var gNode=nodes[j];\r\n                    if(gNode.id!=nodeData.id&&gNode[key]&&nodeData[key]&&gNode[key]===nodeData[key]){\r\n                        groupIDs.push(gNode.id);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(groupIDs.length!=0){\r\n                groupIDs.push(nodeData.id);\r\n                var data = [{\r\n                    id: UUIDUtil.generateUUID(),\r\n                     renderer: \"groupNode\", \r\n                     name: \"自动组_\"+getAutoName(key), \r\n                     nodes: groupIDs, \r\n                     visible: true,\r\n                     groupKey:key,\r\n                     radius:20,\r\n                     fill:\"#e3dec8\",\r\n                     fillOp: 0.3,\r\n                     lbBgFill:\"#f8f8f8\",\r\n                     lbFill:\"#2c2c2c\",                     \r\n                     lbOp:1\r\n                    }];\r\n                self.addGroups(data);    \r\n            }\r\n        }  \r\n    }\r\n\r\n    function getAutoName(key){\r\n        // console.log(key,autoGroupsInfos);\r\n        if(!autoGroupsInfos){\r\n            return key;\r\n        }\r\n\r\n        for(var i=0;i<autoGroupsInfos.length;i++){\r\n            if(autoGroupsInfos[i].props===key){\r\n                return autoGroupsInfos[i].name;\r\n            }\r\n        }\r\n        return key;\r\n    }\r\n    \r\n    /**\r\n     * 为指定的节点组中添加一个节点\r\n     * @param node 要删除的节点\r\n     * @param group 节点组\r\n     */\r\n    this.addNodeToGroup = function(node, group) {\r\n        if(!group.nodes) {\r\n            group.nodes = [];\r\n        }\r\n        var groupNodes = group.nodes;\r\n        var index = groupNodes.indexOf(node);\r\n        if(index === -1) {\r\n            groupNodes.push(node);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从指定的节点组中删除一个节点\r\n     * @param node 要删除的节点\r\n     * @param group 节点组\r\n     */\r\n    this.removeNodeFromGroup = function(node, group) {\r\n        var groupNodes = group.nodes;\r\n        var index = groupNodes.indexOf(node);\r\n        if(index !== -1) {\r\n            groupNodes.splice(index, 1);\r\n             //记录变更集\r\n             addItemsToChangeData(group, changeData.groups.update);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从所有的节点组中删除一个节点\r\n     * @param node 要删除的节点\r\n     */\r\n    this.removeNodeFromAllGroup = function(node) {\r\n        var groups = self.groups;\r\n        for(var group, i = 0, len = groups.length; i < len; i++) {\r\n            group = groups[i];\r\n            self.removeNodeFromGroup(node, group);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据指定节点的id找到该节点的所有子孙节点\r\n     * @param id 指定节点的id\r\n     * @param isAll 是否返回所有子孙节点(无论是否展开)，默认为是，若为false，则只返回展开的子孙节点\r\n     * @return 返回指定节点的所有子孙节点数据对象数组，若没有找到则返回空数组\r\n     */\r\n    this.findAllChildNodes = function(id, isAll) {\r\n        var nodes = [];\r\n        var node = self.findNode(id);\r\n        if(!node) return nodes;\r\n        if(isAll === undefined) {\r\n            isAll = true;\r\n        }\r\n        \r\n        //有待优化--start\r\n        var getNode;\r\n        if(isAll) {\r\n            getNode = function(nodeId) {\r\n                self.nodes.forEach(function(node) {\r\n                    if(node.parentId === nodeId) {\r\n                        nodes.push(node);\r\n                        getNode(node.id);\r\n                    }\r\n                });\r\n            };\r\n            getNode(id);\r\n        } else {\r\n            getNode = function(parentNode, isFirst) {\r\n                var isExpanded = isFirst \r\n                    || parentNode.isExpanded === undefined \r\n                    || parentNode.isExpanded === true;\r\n                self.nodes.forEach(function(node) {\r\n                    if(isExpanded && node.parentId === parentNode.id) {\r\n                        nodes.push(node);\r\n                        getNode(node, false);\r\n                    }\r\n                });\r\n            };\r\n            getNode(node, true);\r\n        }\r\n        //有待优化--end\r\n        \r\n        return nodes;\r\n    }\r\n    \r\n    /**\r\n     * 设置指定节点是否可见\r\n     * @param nodes 要设置的指定节点对象数组\r\n     * @param visible 设置指定节点是否可见\r\n     */\r\n    this.setNodesVisible = function(nodes, visible) {\r\n        if(!nodes || nodes.length === 0) return;\r\n        if(visible === undefined)  {\r\n            visible = true;\r\n        }\r\n        for(var i = 0, len = nodes.length; i < len; i++) {\r\n            nodes[i].visible = visible;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 展开节点\r\n     * @param id 要展开的节点id\r\n     * @param isExpandAll 是否强制展开所有子孙节点，默认为false,\r\n     * 若为false则原先合拢的子孙节点在父节点展开后保持原有状态；若为true则强制展开所有子孙节点\r\n     */\r\n    this.expandNode = function(id, isExpandAll) {\r\n        var nodes = self.findAllChildNodes(id, isExpandAll === undefined ? false : isExpandAll);\r\n        self.setNodesVisible(nodes, true);\r\n    };\r\n    \r\n    /**\r\n     * 合拢节点\r\n     * @param id 要合拢的节点id\r\n     */\r\n    this.collapseNode = function(id) {\r\n        var nodes = self.findAllChildNodes(id, true);\r\n        self.setNodesVisible(nodes, false);\r\n    };\r\n    \r\n    /**\r\n     * 展开或者合拢节点\r\n     * @param node 当前要展开或者合拢的节点数据对象\r\n     */\r\n    this.expandOrCollapseNode = function(node) {\r\n        if(!node.enabledExpand) {\r\n            return;\r\n        }\r\n        if(node.isExpanded) {\r\n            self.collapseNode(node.id);\r\n            node.isExpanded = false;\r\n        } else {\r\n            self.expandNode(node.id, false);\r\n            node.isExpanded = true;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从指定的连线数据数组中获取可见的所有连线\r\n     * @param links 指定的连线数据数组\r\n     * @return 返回可见的所有连线数组，若没有满足条件的数组，则返回空数组\r\n     */\r\n    this.getVisibleLinks = function(links) {\r\n        var result = [];\r\n        if(!links || links.length === 0){\r\n            return result;\r\n        }\r\n        var link;\r\n        for (var i = 0, len = links.length; i < len; i++) {\r\n            link = links[i];\r\n            if (link.source.visible && link.target.visible) {\r\n                if(link.hasOwnProperty(\"visible\")) {\r\n                    if(link.visible) {\r\n                        result.push(link);\r\n                    }\r\n                } else {\r\n                    result.push(link);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * 根据搜索字符串内容从节点的name属性中搜索匹配的节点，并把所有满足搜索条件的节点数据放入一个数组中\r\n     * @param str 搜索条件字符串\r\n     * @return 所有满足搜索条件的节点数据数组，若没有搜索到则返回空数组\r\n     */\r\n    this.searchNodesByName = function(str) {\r\n        var result = [];\r\n        if(str === undefined || str === null || str.replace(/ /g,'') === \"\") {\r\n            return result;\r\n        }\r\n        var nodes = self.nodes;\r\n        for (var node, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            if(node.name.indexOf(str) > -1) {\r\n                result.push(node);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // edit code\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var drawlinkIns,\r\n        drawLinkSource,\r\n        oldDragable = false,\r\n        selectRectX = 0, \r\n        selectRectY = 0;\r\n        \r\n    var modeChangeHandler = function(evt) {\r\n        self.mode((evt || window.event).detail ? \"edit\" : \"normal\");\r\n        validateMode();\r\n    };\r\n    \r\n    /**\r\n     * 监听外部抛出开启和关闭编辑模式的事件\r\n     */\r\n    var openEditHandler = function(evt) {\r\n        self.mode((evt || window.event).detail.data === true ? \"edit\" : \"normal\");\r\n        validateMode();\r\n    };\r\n    \r\n    var validateMode = function() {\r\n        if(!isValidateMode) {\r\n            return;\r\n        }\r\n        isValidateMode = false;\r\n        if(self.isEditMode()) {\r\n            self.focusOutAllNodes();\r\n            addEditContainer();\r\n            setListenersInEditLink();\r\n            // self.addEventListener(BaseEvent.OPERATION_TYPE, operationChangeHandler);\r\n            self.addEventListener(BaseEvent.OPEN_FLUX_TYPE, openFluxChangeHandler);\r\n            self.addEventListener(BaseEvent.OPEN_ALARM_TYPE, openAlarmChangeHandler);\r\n            // self.addEventListener(BaseEvent.OPERATION_CLEAR, operationClearHandler);\r\n            self.addEventListener(BaseEvent.ADD_ITEMS, addItemsHandler);\r\n            self.addEventListener(BaseEvent.REMOVE_ITEMS, removeItemsHandler);\r\n            // self.addEventListener(BaseEvent.REOMVE_ALL_SELECTED_ITEMS, removeAllSelectedItemsHandler);\r\n            // self.parent().mainContainer().on(\"mousedown.edit\", edit_mouseDownHandler);\r\n            // self.parent().mainContainer().on(\"mousemove.edit\", edit_mouseMoveHandler);\r\n            // self.parent().mainContainer().on(\"mouseup.edit\", edit_mouseUpHandler);\r\n        } else {\r\n            removeEditContainer();\r\n            // self.removeEventListener(BaseEvent.OPERATION_TYPE, operationChangeHandler);\r\n            // self.removeEventListener(BaseEvent.OPERATION_CLEAR, operationClearHandler);\r\n            self.removeEventListener(BaseEvent.ADD_ITEMS, addItemsHandler);\r\n            self.removeEventListener(BaseEvent.REMOVE_ITEMS, removeItemsHandler);\r\n            // self.removeEventListener(BaseEvent.REOMVE_ALL_SELECTED_ITEMS, removeAllSelectedItemsHandler);\r\n            // self.parent().mainContainer().on(\"mousedown.edit\", null);\r\n            // self.parent().mainContainer().on(\"mousemove.edit\", null);\r\n            // self.parent().mainContainer().on(\"mouseup.edit\", null);\r\n            setListenersInNormal();\r\n        }\r\n    };\r\n \r\n\r\n    /**\r\n     * 开启流量\r\n     * @param event\r\n     */\r\n    var openFluxChangeHandler = function(event){\r\n        if(event.detail){\r\n            var detail = event.detail;\r\n            //[{id:1,flux:{}}]\r\n            var link = self.findLink(detail.id);\r\n            if(link){\r\n                link.flux = detail.flux;\r\n                if(link.ins)\r\n                    link.ins.render();\r\n            }\r\n        }else{\r\n            self.links.forEach(function(link){\r\n                delete link.flux;\r\n                if(link.ins)\r\n                    link.ins.render();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开启告警\r\n     * @param event\r\n     */\r\n    var openAlarmChangeHandler = function(event){\r\n        if(event.detail){\r\n            //[{id:1,type:\"link/node\",value:{}}]\r\n            var detail = event.detail;\r\n            switch(detail.type){\r\n                case \"link\":{\r\n                    var link = self.findLink(detail.id);\r\n                    if(link){\r\n                        link.value = detail.value;\r\n                        if(link.ins)\r\n                            link.ins.render();\r\n                    }\r\n                    break;\r\n                }\r\n                case \"node\":{\r\n                    var node = self.findNode(detail.id);\r\n                    if(Global.isDebug) {\r\n                        console.log(node);\r\n                    }\r\n                    if(node){\r\n                        node.value = detail.value;\r\n                        if(Global.isDebug) {\r\n                            console.log(node);\r\n                        }\r\n                        if(node.ins)\r\n                            node.ins.render();\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }else{\r\n            self.links.forEach(function(link){\r\n                if(Global.isDebug) {\r\n                    console.log(link);\r\n                }\r\n                \r\n                delete link.value;\r\n                if(link.ins)\r\n                    link.ins.render();\r\n            });\r\n            self.nodes.forEach(function(node){\r\n                if(Global.isDebug) {\r\n                    console.log(node);\r\n                }\r\n                delete node.value;\r\n                if(node.ins)\r\n                    node.ins.render();\r\n            });\r\n        }\r\n    }\r\n\r\n    var addItemsHandler = function(event) {\r\n        var data = event.detail;\r\n        switch (data.type){\r\n            case \"link\":{\r\n                self.addLinksInUI(data.data)\r\n                break;\r\n            }\r\n            case \"group\":{\r\n                self.addGroupsInUI(data.data)\r\n                break;\r\n            }\r\n\r\n            default:{\r\n                self.addNodesInUI(data.data);\r\n                break;\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n    var _mouseDownHandler=undefined;\r\n    this.addMouseDownHandler=function(handler){\r\n        _mouseDownHandler=handler;\r\n    }\r\n    var _nodeClickHandler=undefined;\r\n    this.addNodeClickHandler=function(handler){\r\n        _nodeClickHandler=handler;\r\n    }\r\n    var _mouseMoveHandler=undefined;\r\n    this.addMouseMoveHandler=function(handler){\r\n        _mouseMoveHandler=handler;\r\n    }\r\n    var _mouseUpHandler=undefined;\r\n    this.addMouseUpHandler=function(handler){\r\n        _mouseUpHandler=handler;\r\n    }\r\n\r\n    //缓存 mouse down 响应对象\r\n    var downTargetD = undefined;\r\n    var edit_mouseDownHandler = function() {    \r\n        if(_mouseDownHandler){\r\n            _mouseDownHandler(self);\r\n        }    \r\n\r\n        /* if(!operationData)return;\r\n        var target = d3.event.target;\r\n        var d = target.__data__;\r\n        if(d && d.ins) {\r\n            downTargetD = d;\r\n        }\r\n        switch(operationData.type){\r\n            case \"node\":{\r\n                break;\r\n            }\r\n            case \"delete\":{\r\n                var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n                createSelectRect(coordinates[0], coordinates[1]);\r\n                break;\r\n            }\r\n            case \"group\":{\r\n                var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n                createSelectRect(coordinates[0], coordinates[1]);\r\n                break;\r\n            }\r\n            case \"link\":{\r\n                endDrawLink();\r\n                drawLinkSource = undefined;\r\n                if(downTargetD) {\r\n                    var ins = downTargetD.ins;\r\n                    var linkData = {renderer:operationData.renderer, name:\"\", lineIndex:0, visible:true};\r\n                    if(ins instanceof Node) {\r\n                        drawLinkSource = d;\r\n                        startDrawLink(d.x, d.y, linkData);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        } */\r\n    };\r\n    \r\n    var edit_mouseMoveHandler = function() {\r\n        if(_mouseMoveHandler){\r\n            _mouseMoveHandler(self);\r\n        }\r\n        /* if(self.isEditMode()&&drawLinkSource){\r\n            var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n            drawLink(drawLinkSource.x, drawLinkSource.y, coordinates[0], coordinates[1]);\r\n        } */\r\n    };\r\n    \r\n    var edit_mouseUpHandler = function() {\r\n        if(_mouseUpHandler){\r\n            _mouseUpHandler(self);\r\n        }\r\n        \r\n\r\n        /* if(self.isEditMode()){\r\n            var target = d3.event.target;\r\n            var coordinates  = MouseUtil.mouse(self.mainContainer().node(), self.graph());\r\n            var d = target.__data__;\r\n            var data = {};\r\n            data.type=\"mouse_up\";\r\n            data.x = coordinates[0];\r\n            data.y = coordinates[1];\r\n            self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.TOPO_EDIT_POSITON,true,true,data));\r\n        } */\r\n        \r\n        /* switch(operationData.type){\r\n            case \"node\":{\r\n                var data = ObjectUtil.cloneObj(operationData);\r\n                data.x = coordinates[0];\r\n                data.y = coordinates[1];\r\n                self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                break;\r\n            }\r\n            case \"group\":{\r\n                self.setSelectedItemsInSelectArea();\r\n                removeSelectRect();\r\n                var data = ObjectUtil.cloneObj(operationData);\r\n                data.items = selectedNodeItems;\r\n                self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                break;\r\n            }\r\n            case \"link\":{\r\n                var d = target.__data__;\r\n                if(d && d.ins) {\r\n                    var ins = d.ins;\r\n                    if(drawLinkSource && ins instanceof Node && drawLinkSource!==d) {\r\n                        var data = ObjectUtil.cloneObj(operationData);\r\n                        data.source = drawLinkSource;\r\n                        data.target = d;\r\n                        self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                    }\r\n                }\r\n                drawLinkSource = null;\r\n                endDrawLink();\r\n                break;\r\n            }\r\n            case \"delete\":{\r\n                var d = target.__data__;\r\n                if(d && d.ins) {\r\n                    var ins = d.ins;\r\n                    if(ins instanceof GroupNode)\r\n                        selectedGroupItems.push(d);\r\n                    if(ins instanceof Node)\r\n                        selectedNodeItems.push(d);\r\n                }\r\n                self.setSelectedItemsInSelectArea();\r\n                removeSelectRect();\r\n                var data = ObjectUtil.cloneObj(operationData);\r\n                data.nodeItems = selectedNodeItems;\r\n                data.linkItems = selectedLinkItems;\r\n                data.groupItems = selectedGroupItems;\r\n                self.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.OPERATION_END,true,true,data));\r\n                break;\r\n            }\r\n        } */\r\n    };\r\n    \r\n    var removeItemsHandler = function(event) {\r\n        self.removeAllSelectedInUI();\r\n    };\r\n\r\n    \r\n    /**\r\n     * 当处于编辑状态时添加编辑容器\r\n     */\r\n    var addEditContainer = function() {\r\n        var editCon = new BaseComponent();\r\n        editCon.className(\"edit-container\");\r\n        editCon.percentWidth(100);\r\n        editCon.percentHeight(100);\r\n        self.addChild(editCon);\r\n        editCon.mainContainer().attr(\"pointer-events\", \"none\");\r\n        self.editCon = editCon;\r\n    };\r\n    \r\n    /**\r\n     * 移除编辑容器\r\n     */\r\n    var removeEditContainer = function() {\r\n        if(self.editCon) {\r\n            self.removeChild(self.editCon);\r\n            delete self.editCon;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 创建框选矩形\r\n     */\r\n    this.createSelectRect = function() {\r\n        if(self.editCon) {\r\n            var con = self.parent().parent().mainContainer();\r\n            var coordinates  = MouseUtil.mouse(con.node(), self.graph());\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node() === null) {\r\n                selectRectX = coordinates[0];\r\n                selectRectY = coordinates[1];\r\n                con.append(\"rect\")\r\n                    .attr(\"class\", \"select\")\r\n                    .attr(\"x\", selectRectX)\r\n                    .attr(\"y\", selectRectY)\r\n                    .attr(\"stroke\", \"#0078d7\")\r\n                    .attr(\"stroke-width\", 1)\r\n                    .attr(\"fill\", \"#0078d7\")\r\n                    .attr(\"fill-opacity\", 0.1)\r\n                    .attr(\"pointer-events\",\"none\")\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 绘制框选矩形\r\n     */\r\n    this.drawSelectRect = function() {\r\n        if(self.editCon) {\r\n            var con = self.parent().parent().mainContainer();\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node()) {\r\n                var sx, sy, mp = MouseUtil.mouse(con.node(), self.graph());//d3.mouse(con.node());\r\n                mp[0]=mp[0];\r\n                mp[1]=mp[1];\r\n\r\n                if(mp[0] < selectRectX) {\r\n                    w = selectRectX - mp[0];\r\n                    sx = mp[0];\r\n                } else {\r\n                    w = mp[0] - selectRectX;\r\n                    sx = selectRectX;\r\n                }\r\n                if(mp[1] < selectRectY) {\r\n                    h = selectRectY - mp[1];\r\n                    sy = mp[1];\r\n                } else {\r\n                    h = mp[1] - selectRectY;\r\n                    sy = selectRectY;\r\n                }\r\n                rect.attr(\"x\", sx).attr(\"y\", sy)\r\n                    .attr(\"width\", w).attr(\"height\", h);\r\n            }\r\n        }\r\n    };\r\n    \r\n     /**\r\n     * 移除框选矩形\r\n     */\r\n    this.removeSelectRect = function() {\r\n        if(self.editCon) {\r\n            self.parent().parent().mainContainer().select(\"rect.select\").remove();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 准备开始画连线\r\n     * @param x1, y1 起点坐标\r\n     * @param d 连线数据对象\r\n     */\r\n    this.startDrawLink = function(x1, y1, d) {\r\n        // if(!isDrawLink) {\r\n        //     return;\r\n        // }\r\n        d.source = {x:x1, y:y1};\r\n        d.target = {x:x1+1, y:y1+1};\r\n        var rendererConfig;\r\n        //获取节点渲染器配置\r\n        if(d.renderer) {\r\n            rendererConfig = self.data().renderers[d.renderer];\r\n        }\r\n        drawlinkIns = ClassFactory.newLinkInstance(rendererConfig.clazz, [self.linksContainer.mainContainer(), d]);\r\n        drawlinkIns.config(rendererConfig.config)\r\n        drawlinkIns.render();\r\n    };\r\n    \r\n    /**\r\n     * 画连线\r\n     * @param x1, y1 起点坐标\r\n     * @param x2, y2 终点坐标\r\n     */\r\n    this.drawLink = function(x1, y1, x2, y2) {\r\n        if(drawlinkIns) {\r\n            var d = drawlinkIns.itemData();\r\n            d.source.x = x1;\r\n            d.source.y = y1;\r\n            d.target.x = x2;\r\n            d.target.y = y2;\r\n            drawlinkIns.update();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 结束画连线\r\n     */\r\n    this.endDrawLink = function() {\r\n        // if(!isDrawLink) {\r\n        //     return;\r\n        // }\r\n        if(drawlinkIns) {\r\n            drawlinkIns.el.remove();\r\n            drawlinkIns = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 增加一个节点界面操作\r\n     * @param node 节点数据对象\r\n     */\r\n    this.addNodeInUI = function(node) {\r\n        self.addNode(node);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 批量增加节点界面操作 \r\n     * @param nodes 节点数据对象数组\r\n     */\r\n    this.addNodesInUI = function(nodes) {\r\n        self.addNodes(nodes);\r\n        self.addAutoGroupNodes(nodes);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 增加一条连线界面操作\r\n     * @param link 连线数据对象 \r\n     */\r\n    this.addLinkInUI = function(link) {\r\n        self.addLink(link);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 批量增加连线界面操作\r\n     * @param links 连线数据对象数组\r\n     */\r\n    this.addLinksInUI = function(links) {\r\n        self.addLinks(links);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 批量增加组操作\r\n     * @param groups 组对象数组\r\n     */\r\n    this.addGroupsInUI = function(groups) {\r\n        self.addGroups(groups);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 批量增加组操作\r\n     * @param groups 组对象数组\r\n     */\r\n    this.removeGroupsInUI = function(groups) {\r\n        if(!groups.length)return;\r\n        groups.forEach(function(group){\r\n            self.removeGroup(group);\r\n        })\r\n        self.update(true);\r\n    }\r\n    \r\n\r\n    /**\r\n     * 删除节点界面操作 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeNodeInUI = function(node) {\r\n        self.removeNode(node);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除节点界面操作 \r\n     * @param ids 要删除的节点id数组\r\n     */\r\n    this.removeNodesInUI = function(nodes) {\r\n        if(!nodes.length)return;\r\n        self.removeNodes(nodes);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 删除连线界面操作 \r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLinkInUI = function(link) {\r\n        self.removeLink(link);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除连线界面操作 \r\n     * @param links 要删除的连线数据对象数组\r\n     */\r\n    this.removeLinksInUI = function(links) {\r\n        if(!links ||!links.length)return;\r\n        self.removeLinks(links);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除选中节点和连线界面操作 \r\n     */\r\n    this.removeAllSelectedInUI = function() {\r\n        // var plugin, links = [], nodeIds = [];\r\n        // self.nodesIns.forEach(function(ins) {\r\n        //     plugin = ins.normalChild();\r\n        //     if(plugin && plugin.selected()){\r\n        //         nodeIds.push(plugin.el.data()[0].id);\r\n        //     }\r\n        // });\r\n        // self.linksIns.forEach(function(ins) {\r\n            // plugin = ins.normalChild();\r\n        //     if(plugin && plugin.selected()){\r\n        //      links.push(plugin.el.data()[0]);\r\n        //     }\r\n        // });\r\n        // self.removeNodes(nodeIds);\r\n        self.removeGroupsInUI(selectedGroupItems);\r\n        self.removeLinksInUI(selectedLinkItems)\r\n        self.removeNodesInUI(selectedNodeItems);\r\n    };\r\n    \r\n    /**\r\n     * 删除节点下的子节点，同时清除link信息界面操作 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeChildNodesInUI = function(id) {\r\n        self.removeChildNodes(id);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 展开节点界面操作\r\n     * @param id 要展开的节点id\r\n     * @param isExpandAll 是否强制展开所有子孙节点，默认为false,\r\n     *                    若为false则原先合拢的子孙节点在父节点展开后保持原有状态；若为true则强制展开所有子孙节点\r\n     */\r\n    this.expandNodeInUI = function(id, isExpandAll) {\r\n        self.expandNode(id, isExpandAll);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 合拢节点界面操作\r\n     * @param id 要合拢的节点id\r\n     */\r\n    this.collapseNodeInUI = function(id) {\r\n        self.collapseNode(id);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 展开或者合拢节点界面操作\r\n     * @param node 当前要展开或者合拢的节点数据对象\r\n     */\r\n    this.expandOrCollapseNodeInUI = function(node) {\r\n        if(!node.enabledExpand) {\r\n            return;\r\n        }\r\n        self.expandOrCollapseNode(node);\r\n        self.update(true);\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    // change data control\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 清空变更集数据\r\n     */\r\n    var clearChangeData = function() {\r\n        changeData.nodes.enter = {};\r\n        changeData.nodes.update = {};\r\n        changeData.links.enter = {};\r\n        changeData.links.update = {};\r\n        changeData.groups.enter = {};\r\n        changeData.groups.update = {};\r\n    };\r\n    \r\n    /**\r\n     * 添加数据到变更集\r\n     * @param arguments[0] 变更数据\r\n     * @param arguments[1] 目标源对象\r\n     */\r\n    var addItemsToChangeData = function() {\r\n        var source = arguments[1];\r\n        if(!ObjectUtil.isObject(source)) {\r\n            return;\r\n        }\r\n        if(ObjectUtil.isArray(arguments[0])) {\r\n            var items = arguments[0];\r\n            for(var item, i = 0, len = items.length; i < len; i++) {\r\n                item = items[i];\r\n                source[self.bindKeyFn(item)] = item;\r\n            }\r\n        } else {\r\n            var item = arguments[0];\r\n            source[self.bindKeyFn(item)] = item;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 数据是否在变更集中\r\n     * @param arguments[0] 带检测项数据对象\r\n     * @param arguments[1] 目标源对象\r\n     * @return 返回检测结果\r\n     */\r\n    var isItemInChangeData = function() {\r\n        var source = arguments[1];\r\n        if(!ObjectUtil.isObject(source)) {\r\n            return false;\r\n        }\r\n        return source.hasOwnProperty(self.bindKeyFn(arguments[0]));\r\n    };\r\n    \r\n    /**\r\n     * 触发鹰眼变更\r\n     */\r\n    function fireContentChange(){\r\n        self.mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.CONTENT_CHANGE,true,true));\r\n    }\r\n    \r\n    EditorTopology.clazzName = \"EditorTopology\";\r\n    \r\n    // 初始化\r\n    this.init();\r\n};\r\n\r\nEditorTopology.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    EditorTopology.prototype = Object.create(BaseChart.prototype);\r\n    EditorTopology.prototype.constructor = EditorTopology;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n//显示所有节点\r\nEditorTopology.SHOW_ALL_LEVEL_NODES = 99999;\r\n\r\n//显示第一层级所有节点\r\nEditorTopology.SHOW_FIRST_LEVEL_NODES = 0;\r\n\r\nmodule.exports = EditorTopology;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/editorTopology.js\n// module id = 32\n// module chunks = 0","//图表底部标题类\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _parent 标题所在组件实例\r\n * @param _config 整体配置数据\r\n * @param _headingConfig 标题配置数据\r\n */\r\nvar Heading = function (_parent, _config, _headingConfig) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    if(arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",应至少传入1个参数\");\r\n    }\r\n    \r\n    //判断是否传入有效配置信息\r\n    if(!_config || !_headingConfig) {\r\n        return;\r\n    }\r\n    \r\n    var self = this, mainTextIns, subTextIns;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  xPos\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平位置 left|center|right|具体数值(默认值left)\r\n     */\r\n    var xPos = \"left\";\r\n    this.xPos = function(value) {\r\n        if (!arguments.length) return xPos;\r\n        xPos = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  yPos\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直位置 top|middle|bottom|具体数值(默认值top)\r\n     */\r\n    var yPos = \"top\";\r\n    this.yPos = function(value) {\r\n        if (!arguments.length) return yPos;\r\n        yPos = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  text\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 主标题数据对象\r\n     */\r\n    var mainText = {text:\"\", \"font-size\":16, \"font-family\":\"Microsoft YaHei\", \"fill\":\"black\", \"pointer-events\":\"none\"};\r\n    this.mainText = function(value) {\r\n        if (!arguments.length) return mainText;\r\n        mainText = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  subText\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 子标题数据对象\r\n     */\r\n    var subText = {text:\"\", \"font-size\":12, \"font-family\":\"Microsoft YaHei\", \"fill\":\"black\", \"pointer-events\":\"none\"};\r\n    this.subText = function(value) {\r\n        if (!arguments.length) return subText;\r\n        subText = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  padding\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 标题Padding(默认10px)\r\n     * 格式为{left:left,right:right,top:top,bottom:bottom}或者一个数值，\r\n     * 配置中padding:10等同于padding:{left:10,right:10,top:10,bottom:10}\r\n     */\r\n    var padding = {left:10,right:10,top:10,bottom:10};\r\n    this.padding = function(value) {\r\n        if (!arguments.length) return padding;\r\n        padding = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  itemGap\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 标题项之间间距(默认10px)\r\n     */\r\n    var itemGap = 10;\r\n    this.itemGap = function(value) {\r\n        if (!arguments.length) return itemGap;\r\n        itemGap = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  visible\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 标题是否可见，(默认值true)\r\n     */\r\n    var visible = true;\r\n    this.visible = function(value) {\r\n        if (!arguments.length) return visible;\r\n        visible = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // config\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 整体配置数据\r\n     */\r\n    var config = _config;\r\n    this.config = function(value) {\r\n        if (!arguments.length)\r\n            return config;\r\n        config = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        if (!_parent) {\r\n            throw new Error('Heading构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n        }\r\n        self.parent = _parent;\r\n        self.itemsList = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化标题包含的各个层级\r\n     */\r\n    var initAllContainers = function() {\r\n        //放置所有内容的最外层g元素\r\n    \tif(self.visible() && !self.headingContainer) {\r\n    \t\tself.headingContainer = self.parent.mainContainer().append(\"g\").attr(\"class\", \"heading\");\r\n    \t} else if(!self.visible() && self.headingContainer) {\r\n    \t\tself.headingContainer.remove();\r\n    \t\tself.headingContainer = null;\r\n    \t\tmainTextIns = null;\r\n    \t\tsubTextIns = null;\r\n    \t\tself.itemsList.length = 0;\r\n    \t}\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 刷新传入配置数据到相应标题参数的方法\r\n     */\r\n    this.refreshData = function() {\r\n        var heading = _headingConfig;\r\n        self.xPos(heading.hasOwnProperty(\"xPos\") ? heading.xPos : xPos);\r\n        self.yPos(heading.hasOwnProperty(\"yPos\") ? heading.yPos : yPos);\r\n        self.visible(heading.hasOwnProperty(\"visible\") ? heading.visible : visible);\r\n        if(heading.hasOwnProperty(\"padding\")) {\r\n        \tvar configPadding = heading.padding;\r\n        \tvar defaultPadding = self.padding();\r\n        \tif(!isNaN(configPadding)) {\r\n        \t\tdefaultPadding.left = configPadding;\r\n        \t\tdefaultPadding.right = configPadding;\r\n        \t\tdefaultPadding.top = configPadding;\r\n        \t\tdefaultPadding.bottom = configPadding;\r\n        \t} else {\r\n        \t\tfor(var key in configPadding) {\r\n                    defaultPadding[key] = configPadding[key];\r\n                }\r\n        \t}\r\n        } else {\r\n        \tself.padding(padding);\r\n        }\r\n        self.itemGap(heading.hasOwnProperty(\"itemGap\") ? heading.itemGap : itemGap);\r\n        if(heading.hasOwnProperty(\"mainText\")) {\r\n        \tvar defaultMainText = self.mainText();\r\n        \tvar configText = heading.mainText;\r\n        \tfor(var key in configText) {\r\n        \t\tdefaultMainText[key] = configText[key];\r\n        \t}\r\n        }\r\n        if(heading.hasOwnProperty(\"subText\")) {\r\n            var defaultSubText = self.subText();\r\n            var configSubText = heading.subText;\r\n            for(var key in configSubText) {\r\n                defaultSubText[key] = configSubText[key];\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染主标题方法\r\n     */\r\n    this.mainTextRender = function() {\r\n    \tvar p = self.mainText();\r\n        if(!self.visible() || p.visible === false) {\r\n            return;\r\n        }\r\n        if(!mainTextIns) {\r\n        \tvar itemCon = self.headingContainer.append(\"g\").attr(\"class\", \"mainText-container\");\r\n            mainTextIns = itemCon.append(\"text\").attr(\"class\", \"mainText\");\r\n            self.itemsList.push(itemCon);\r\n        }\r\n        var content = self.getResultLabel(p.text);\r\n        mainTextIns.text(content);\r\n        //保留svg text元素中文本的空格显示\r\n        StringUtil.fixTextSpace(mainTextIns.node());\r\n        for(var key in p) {\r\n        \tif(key !== \"visible\") {\r\n        \t\tmainTextIns.attr(key, p[key]);\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染子标题方法\r\n     */\r\n    this.subTextRender = function() {\r\n    \tvar p = self.subText();\r\n    \tif(!self.visible() || p.visible === false) {\r\n    \t\treturn;\r\n    \t}\r\n    \tif(!subTextIns) {\r\n    \t\tvar itemCon = self.headingContainer.append(\"g\").attr(\"class\", \"subText-container\");\r\n            subTextIns = itemCon.append(\"text\").attr(\"class\", \"subText\");\r\n            self.itemsList.push(itemCon);\r\n    \t}\r\n        var content = self.getResultLabel(p.text);\r\n        subTextIns.text(content);\r\n        //保留svg text元素中文本的空格显示\r\n        StringUtil.fixTextSpace(subTextIns.node());\r\n        for(var key in p) {\r\n        \tif(key !== \"visible\") {\r\n        \t\tsubTextIns.attr(key, p[key]);\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 重新计算布局\r\n     */\r\n    this.resetLayout = function(isUpdate) {\r\n        if(!self.headingContainer || (!mainTextIns && !subTextIns)) {\r\n            return;\r\n        }\r\n        \r\n        var padding = self.padding(),\r\n            itemX = 0, \r\n            itemY = 0, \r\n            itemGap = self.itemGap(),\r\n            maxItemW = 0,\r\n            maxItemH = 0,\r\n            xPos = self.xPos(),\r\n            yPos = self.yPos(),\r\n            parentBox = self.parent.bgNode().getBBox();\r\n            parentW = parentBox.width,\r\n            parentH = parentBox.height,\r\n            layoutW = parentW - padding.left - padding.right;//可用于布局标题区域的宽度，不包括padding\r\n            layoutH = parentH - padding.top - padding.bottom;//可用于布局标题区域的高度，不包括padding\r\n            itemIns = null, \r\n            itemBox = null;\r\n        \r\n        var itemsY = [];\r\n        for(var i = 0, len = self.itemsList.length; i < len; i++) {\r\n            itemIns = self.itemsList[i];\r\n            itemBox = itemIns.node().getBBox();\r\n            itemY += itemBox.height;\r\n            maxItemW = itemBox.width > maxItemW ? itemBox.width : maxItemW;\r\n            if(itemY + itemGap <= layoutH) {\r\n                itemIns.attr(\"transform\", \"translate(\" + itemX + \",\" + itemY + \")\");\r\n            } else {\r\n                itemX += (maxItemW + itemGap);\r\n                itemY = 0;\r\n                maxItemW = 0;\r\n                itemIns.attr(\"transform\", \"translate(\" + itemX + \",\" + itemY + \")\");\r\n            }\r\n            itemsY.push(itemY);\r\n            itemY += itemGap;\r\n        }\r\n            \r\n        //计算heading容器位置\r\n        var x = 0,\r\n            y = 0,\r\n            headingBox = self.headingContainer.node().getBBox(),\r\n            headingW = headingBox.width,\r\n            headingH = headingBox.height;\r\n        //计算水平定位\r\n        if(!isNaN(xPos)) {\r\n            x = xPos;\r\n        } else if(xPos === \"left\") {\r\n            x = padding.left;\r\n        } else if(xPos === \"right\")  {\r\n            x = parentW - headingW - padding.right;\r\n        } else {//default center\r\n            x = (parentW - headingW) / 2;\r\n            for(var i = 0, len = self.itemsList.length; i < len; i++) {\r\n                itemIns = self.itemsList[i];\r\n                itemBox = itemIns.node().getBBox();\r\n                itemX = (headingW - itemBox.width) / 2;\r\n                itemIns.attr(\"transform\", \"translate(\" + itemX + \",\" + itemsY[i] + \")\");\r\n            }\r\n        }\r\n        \r\n        //计算垂直定位\r\n        if(!isNaN(yPos)) {\r\n            y = yPos;\r\n        } else if(yPos === \"middle\") {\r\n            y = (parentH - headingH) / 2;\r\n        } else if(yPos === \"bottom\")  {\r\n            y = parentH - headingH - padding.bottom;\r\n        } else {//defult top\r\n            y = padding.top;\r\n        }\r\n        \r\n        if(isUpdate) {\r\n        \tself.headingContainer\r\n                .attr(\"transform\", \"translate(\" + x + \",\" + y + \")scale(1)\");\r\n        } else {\r\n        \tself.headingContainer\r\n                .attr(\"transform-origin\", \"center center\")\r\n                .attr(\"transform\", \"translate(\" + x + \",\" + y + \")scale(1)\")\r\n                .attr(\"opacity\", 0)\r\n                .transition().duration(500).ease(d3.easeExpIn)\r\n                .attr(\"opacity\", 1)\r\n                .attr(\"transform\", \"translate(\" + x + \",\" + y + \")scale(1)\");\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染方法\r\n     */\r\n    this.render = function() {\r\n        self.refreshData();\r\n        //初始化图列包含的各个层级\r\n        initAllContainers();\r\n        self.mainTextRender();\r\n        self.subTextRender();\r\n        self.resetLayout();\r\n        Global.isDebug && console.log(\"Heading.render()\");\r\n    };\r\n    \r\n    /**\r\n     * 更新方法\r\n     */\r\n    this.update = function() {\r\n        self.refreshData();\r\n        initAllContainers();\r\n        self.mainTextRender();\r\n        self.subTextRender();\r\n        self.resetLayout(true);\r\n        Global.isDebug && console.log(\"Heading.update()\");\r\n    };\r\n    \r\n    /**\r\n     * 根据labelFormat获取最终label的方法\r\n     * @param label labelFormat\r\n     */\r\n    this.getResultLabel = function(label) {\r\n    \tif(label === null || label === undefined) {\r\n    \t\treturn \"\";\r\n    \t}\r\n    \tif(ObjectUtil.isNumber(label)) {\r\n    \t\tlabel = label.toString();\r\n    \t}\r\n    \tvar config = self.config();\r\n        var isSeriesConfig = config.hasOwnProperty(\"seriesConfig\");\r\n        var series = config.series;\r\n        var data = isSeriesConfig ? series : series[0].data;//供传入方法调用\r\n        return label.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 && data.length > 0 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"Heading info: \"    +\r\n                \"\\n   xPos:\"        + self.xPos()       + \r\n                \"\\n   yPos:\"        + self.yPos());\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nHeading.struct = function(ghca_charts) {\r\n    Heading.prototype.constructor = Heading;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Heading;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/heading.js\n// module id = 33\n// module chunks = 0","//水平坐标轴\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _parent 坐标轴项所在容器对象\r\n * @param _data 坐标轴项数据\r\n */\r\nvar HorAxis = function(_parent, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseAxis = ghca_charts.view.component.charts.baseAxis;\r\n    \r\n    BaseAxis.apply(this, arguments);\r\n\r\n    var self = this,\r\n        superRenderAxis = self.renderAxis;\r\n    \r\n    //设置坐标轴默认位置\r\n    self.position(\"bottom\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    //------------------------------\r\n    //  attribute\r\n    //------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.toString = function() {\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 渲染坐标轴\r\n     */\r\n    this.renderAxis = function() {\r\n    \tsuperRenderAxis();\r\n    \t\r\n        var xScale, xAxis, boundBox, boundW, boundH, axisX, axisY,\r\n            domain = self.domain(), type = self.type(), padding = self.padding(), isReverse = self.isReverse();\r\n        if(type === \"time\") {\r\n            xScale = d3.scaleTime().clamp(true);\r\n        } else if(type === \"enum\") {\r\n            xScale = d3.scaleBand();\r\n        } else {\r\n            //type is value\r\n            xScale = d3.scaleLinear().clamp(true);\r\n        }\r\n        boundBox = self.parentChart().bgNode().getBBox();\r\n        boundW = boundBox.width;\r\n        boundH = boundBox.height;\r\n        axisW = boundW - padding.left - padding.right;\r\n        axisX = padding.left;\r\n        xScale.domain(domain).range(isReverse ? [axisW, 0] : [0, axisW]);\r\n            \r\n        if(self.position() === \"top\") {\r\n            xAxis = d3.axisTop(xScale);\r\n            axisY = padding.top;\r\n        } else {\r\n            xAxis = d3.axisBottom(xScale);\r\n            axisY = boundH - padding.bottom;\r\n        }\r\n        self.x(axisX);\r\n        self.y(axisY);\r\n        self.width(axisW);\r\n        //set tick opt\r\n        var tick = self.tick();\r\n        for(var key in tick) {\r\n            if(xAxis.hasOwnProperty(key)) {\r\n                xAxis[key](tick[key]);\r\n            }\r\n        }\r\n        //render x axis\r\n        if(!self.axisContainer) {\r\n            self.axisContainer = self.parent.append(\"g\").attr(\"class\", \"xAxis\");\r\n        }\r\n        self.axisContainer\r\n            .style(\"visibility\", self.visible() === false ? \"hidden\" : \"visible\")\r\n            .call(xAxis)\r\n            .attr(\"transform\", \"translate(\" + axisX + \",\" + axisY + \")\");\r\n            \r\n        self.scaleIns(xScale);\r\n        self.axisIns(xAxis);\r\n    };\r\n    \r\n    /**\r\n     * 渲染坐标轴说明标签\r\n     */\r\n    this.renderAxisLabel = function() {\r\n        var x, y, label,\r\n            config = self.axisLabel(), \r\n            text = config.text;\r\n            pos = config.pos, \r\n            padding = config.padding;\r\n        if(text === \"\" || text === null || text === undefined) {\r\n        \treturn;\r\n        }\r\n        \r\n        label = self.axisContainer.selectAll(\"text.axisLabel\");\r\n        if(label.node() === null) {\r\n        \tlabel = self.axisContainer.append(\"text\").attr(\"class\", \"axisLabel\");\r\n        }\r\n        label.text(text);\r\n        \r\n        //设置坐标轴说明标签样式\r\n        self.setAxisLabelStyle();\r\n        \r\n        //计算布局\r\n        var labelBox = label.node().getBBox();\r\n        var maxTickWidth = 0;\r\n        var maxTickHeight = 0;\r\n        self.axisContainer.selectAll(\"g.tick\").each(function(d){\r\n            var tickBox = d3.select(this).node().getBBox();\r\n            if(tickBox.width > maxTickWidth) {\r\n            \tmaxTickWidth = tickBox.width;\r\n            }\r\n            if(tickBox.height > maxTickHeight) {\r\n                maxTickHeight = tickBox.height;\r\n            }\r\n        });\r\n        if(pos === \"left\") {\r\n            x = labelBox.width / 2;\r\n        } else if(pos === \"center\") {\r\n            x = self.width() / 2;    \r\n        } else {\r\n            x = self.width() - labelBox.width / 2;         \r\n        }\r\n        if(self.position() === \"bottom\") {\r\n        \ty = labelBox.height + maxTickHeight + padding;\r\n        } else {\r\n            y = -labelBox.height - maxTickHeight - padding;\r\n        }\r\n        label.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\r\n    };\r\n    \r\n    /**\r\n     * 渲染刻度对应网格\r\n     * @rect 网格区域矩形\r\n     */\r\n    this.renderTickLine = function(rect) {\r\n    \tvar x, y1, y2;\r\n    \tif(self.position() === \"bottom\") {\r\n    \t\ty1 = 0;\r\n    \t\ty2 = -rect.h;\r\n    \t} else {\r\n    \t\ty1 = 0;\r\n            y2 = rect.h;\r\n    \t}\r\n    \t\r\n    \tvar ticks = self.axisContainer.selectAll(\"g.tick\");\r\n    \tvar pathNode = self.axisContainer.select(\"path.domain\").node();\r\n        var axisPathWidth = pathNode ? pathNode.getBBox().width : NaN;\r\n    \tticks.each(function() {\r\n    \t\tvar transform = d3.select(this).attr(\"transform\");\r\n            var tx = parseFloat(transform.replace(/[^0-9.\\-, ]/g,'').split(/[, ]/g)[0]) + 0.5;\r\n            //与y轴重叠的网格线不渲染，否会遮挡y轴线\r\n            if(!isNaN(axisPathWidth) && (Math.abs(tx - axisPathWidth) < 1 || tx < 1)) {\r\n                return;\r\n            }\r\n            x = tx;\r\n    \t\tvar line = self.gridLineContainer.append(\"line\").attr(\"class\", \"tickLine\")\r\n                .attr(\"x1\", x).attr(\"y1\", y1).attr(\"x2\", x).attr(\"y2\", y2);\r\n    \t});\r\n    };\r\n    \r\n    /**\r\n     * 渲染刻度间对应网格\r\n     * @rect 网格区域矩形\r\n     */\r\n    this.renderInnerLine = function(rect) {\r\n        var x, y1, y2, \r\n        gapNum = self.gridLine().innerLine.gapNum;\r\n        if(gapNum < 1) {\r\n        \treturn;\r\n        }\r\n        if(self.position() === \"bottom\") {\r\n            y1 = 0;\r\n            y2 = -rect.h;\r\n        } else {\r\n            y1 = 0;\r\n            y2 = rect.h;\r\n        }\r\n        \r\n        var ticks = self.axisContainer.selectAll(\"g.tick\");\r\n        var dx, minX = NaN, maxX = NaN, n = gapNum + 1;\r\n        ticks.each(function() {\r\n            var transform = d3.select(this).attr(\"transform\");\r\n            var tx = parseFloat(transform.replace(/[^0-9.\\-, ]/g,'').split(/[, ]/g)[0]) + 0.5;\r\n            if(isNaN(tx)) {\r\n            \ttx = 0;\r\n            }\r\n            if(isNaN(minX)) {\r\n            \tminX = tx;\r\n            }\r\n            if(isNaN(maxX)) {\r\n                maxX = tx;\r\n            }\r\n            if(tx < minX) {\r\n            \tminX = tx;\r\n            }\r\n            if(tx > maxX) {\r\n                maxX = tx;\r\n            }\r\n        });\r\n        dx = (maxX - minX) / (ticks.nodes().length - 1) / n;\r\n        //tick left part\r\n        for(x = minX - dx; x > 0; x -= dx) {\r\n            self.gridLineContainer.append(\"line\").attr(\"class\", \"innerLine\")\r\n                .attr(\"x1\", x).attr(\"y1\", y1).attr(\"x2\", x).attr(\"y2\", y2);\r\n        }\r\n        //tick part and right part\r\n        var i = 0, axisW = self.width();\r\n        for(x = minX; x < axisW; x += dx, i++) {\r\n        \t//若有tickLine,则跳过\r\n        \tif(i % n !== 0) {\r\n        \t\tself.gridLineContainer.append(\"line\").attr(\"class\", \"innerLine\")\r\n                    .attr(\"x1\", x).attr(\"y1\", y1).attr(\"x2\", x).attr(\"y2\", y2);\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 获取刻度坐标数据数组，该数组按升序排序。\r\n     * 若为水平坐标轴，则格式为[x1,...,xn]；若为垂直坐标轴，则格式为[y1,...,yn]\r\n     */\r\n    this.getTicksPos = function() {\r\n    \tvar result = [];\r\n        var ticks = self.axisContainer.selectAll(\"g.tick\");\r\n        ticks.each(function() {\r\n            var transform = d3.select(this).attr(\"transform\");\r\n            var tx = parseFloat(transform.replace(/[^0-9.\\-, ]/g,'').split(/[, ]/g)[0]) + 0.5;\r\n            result.push(tx);\r\n        });\r\n        result.sort(function(a, b){return a - b;});\r\n        return result;\r\n    };\r\n    \r\n};\r\n\r\nHorAxis.struct = function(ghca_charts) {\r\n\tvar BaseAxis = ghca_charts.view.component.charts.baseAxis;\r\n    BaseAxis.struct(ghca_charts);\r\n    HorAxis.prototype = Object.create(BaseAxis.prototype);\r\n    HorAxis.prototype.constructor = HorAxis;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = HorAxis;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/horAxis.js\n// module id = 34\n// module chunks = 0","//图例类\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _parent 图例所在组件实例\r\n * @param _config 整体配置数据\r\n */\r\nvar Legend = function (_parent, _config) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const LegendItem = ghca_charts.view.component.charts.legendItem;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const Global = ghca_charts.global;\r\n    \r\n    if(arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",应至少传入1个参数\");\r\n    }\r\n    \r\n    //判断是否传入有效配置信息\r\n    if(!_config || !_config.legend) {\r\n        return;\r\n    }\r\n    \r\n    var self = this,\r\n    \tdefaultPadding = 10;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  xPos\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 水平位置 left|center|right|具体数值(默认值center)\r\n     */\r\n    var xPos = \"center\";\r\n    this.xPos = function(value) {\r\n        if (!arguments.length) return xPos;\r\n        xPos = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  yPos\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 垂直位置 top|middle|bottom|具体数值(默认值top)\r\n     */\r\n    var yPos = \"top\";\r\n    this.yPos = function(value) {\r\n        if (!arguments.length) return yPos;\r\n        yPos = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  onlyOneColumn\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否只有一列内容(默认值false)\r\n     */\r\n    var onlyOneColumn = false;\r\n    this.onlyOneColumn = function(value) {\r\n        if (!arguments.length) return onlyOneColumn;\r\n        onlyOneColumn = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  onlyOneRow\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否只有一行内容(默认值false)\r\n     */\r\n    var onlyOneRow = false;\r\n    this.onlyOneRow = function(value) {\r\n        if (!arguments.length) return onlyOneRow;\r\n        onlyOneRow = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  visible\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图例是否可见(默认值true)\r\n     */\r\n    var visible = true;\r\n    this.visible = function(value) {\r\n        if (!arguments.length) return visible;\r\n        visible = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  keyPath\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 针对下面key属性，设置该key所在对象路径，从图表数据本身开始，图表本身数据所在路径为xxx..series[n]，\r\n     * 要取topo的节点为图例，则这里传\"nodes\",相当于xxx..series[n].nodes， \r\n     * 要取topo的连线为图例，则这里传\"links\",,相当于xxx..series[n].links，\r\n     * 若不传，则下面的key就是var array = xxx..series[n];array[n].key(默认值\"\")\r\n     */\r\n    var keyPath = \"\";\r\n    this.keyPath = function(value) {\r\n        if (!arguments.length) return keyPath;\r\n        keyPath = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  key\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用来进行图例项分组的键名称，比如\"level\"，(默认值name)\r\n     */\r\n    var key = \"name\";\r\n    this.key = function(value) {\r\n        if (!arguments.length) return key;\r\n        key = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  items\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图例项说明文字数组，若不传则默认为key对应的值组成的数组，若传入值，比如[0, 1]，\r\n     * 则只对key对应值为0或者1的数据对象分组标注图例，其他值的数据对象渲染成第三种颜色，图例项文本为“其他”\r\n     */\r\n    var items = [];\r\n    this.items = function(value) {\r\n        if (!arguments.length) return items;\r\n        items = StringUtil.parseArray(value);\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  labelFormat\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图例项说明文字组成规则，比如\"等级{v}\",{v}表示items对应的值，\r\n     * 若items为[0, 1]，则最终显示为\"等级0\"或者\"等级1\"，若不传，默认显示为items的值\r\n     */\r\n    var labelFormat = null;\r\n    this.labelFormat = function(value) {\r\n        if (!arguments.length) return labelFormat;\r\n        labelFormat = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  colors\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用户自定义图例颜色数组\r\n     */\r\n    var colors = null;\r\n    this.colors = function(value) {\r\n        if (!arguments.length) return colors;\r\n        colors = StringUtil.parseArray(value);\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  icon\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用户自定义图例图形相关配置，统一形式。定义了icons以后该属性无效\r\n     */\r\n    var icon = null;\r\n    this.icon = function(value) {\r\n        if (!arguments.length) return icon;\r\n        icon = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  icons\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用户自定义图例图形相关配置，枚举形式\r\n     */\r\n    var icons = null;\r\n    this.icons = function(value) {\r\n        if (!arguments.length) return icons;\r\n        icons = StringUtil.parseArray(value);\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  label\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用户自定义图例文本相关配置，统一形式。定义了labels以后该属性无效\r\n     */\r\n    var label = null;\r\n    this.label = function(value) {\r\n        if (!arguments.length) return label;\r\n        label = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  labels\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 用户自定义图例文本相关配置，枚举形式\r\n     */\r\n    var labels = null;\r\n    this.labels = function(value) {\r\n        if (!arguments.length) return labels;\r\n        labels = StringUtil.parseArray(value);\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  domain\r\n    //------------------------------\r\n    \r\n    /**\r\n     * colors数组对应的范围值数组，默认null，比如用户要定义0-24,25-49,50-74,75-100这些范围，可以传入[25, 50, 75]\r\n     */\r\n    var domain = null;\r\n    this.domain = function(value) {\r\n        if (!arguments.length) return domain;\r\n        domain = StringUtil.parseArray(value);\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // showTotal\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 在图例标签后是否显示该图列所对应的实例总个数，默认为否\r\n     */\r\n    var showTotal = false;\r\n    this.showTotal = function(value) {\r\n        if (!arguments.length)\r\n            return showTotal;\r\n        showTotal = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // mouseOverEffect\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 在鼠标经过图例项时，是否在图例对应的所有实例上播放效果动画，默认为否\r\n     */\r\n    var mouseOverEffect = false;\r\n    this.mouseOverEffect = function(value) {\r\n        if (!arguments.length)\r\n            return mouseOverEffect;\r\n        mouseOverEffect = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  itemGap\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图例间距\r\n     */\r\n    var itemGap = 10;\r\n    this.itemGap = function(value) {\r\n        if (!arguments.length) return itemGap;\r\n        itemGap = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // config\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 整体配置数据\r\n     */\r\n    var config = _config;\r\n    this.config = function(value) {\r\n        if (!arguments.length)\r\n            return config;\r\n        config = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        if (!_parent) {\r\n            throw new Error('Legend构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n        }\r\n        self.parent = _parent;\r\n        self.itemsList = [];//图例项实例列表\r\n        self.itemsData = [];//生成的用来实例化图例项的数据\r\n    };\r\n    \r\n    /**\r\n     * 初始化图列包含的各个层级\r\n     */\r\n    var initAllContainers = function() {\r\n        //放置所有内容的最外层g元素\r\n    \tif(self.visible() && !self.legendContainer) {\r\n    \t\tself.legendContainer = self.parent.mainContainer().append(\"g\").attr(\"class\", \"legend\");\r\n    \t} else if(!self.visible() && self.legendContainer) {\r\n    \t\tself.legendContainer.remove();\r\n    \t}\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 刷新传入配置数据到相应图例参数的方法\r\n     */\r\n    this.refreshData = function() {\r\n        var isSetItems = false,\r\n            parseDomain = false,\r\n            legend = self.config().legend;\r\n        self.xPos(legend.hasOwnProperty(\"xPos\") ? legend.xPos : \"center\");\r\n        self.yPos(legend.hasOwnProperty(\"yPos\") ? legend.yPos : \"top\");\r\n        self.visible(legend.hasOwnProperty(\"visible\") ? legend.visible : true);\r\n        self.onlyOneColumn(legend.hasOwnProperty(\"onlyOneColumn\") ? legend.onlyOneColumn : false);\r\n        self.onlyOneRow(legend.hasOwnProperty(\"onlyOneRow\") ? legend.onlyOneRow : false);\r\n        self.showTotal(legend.hasOwnProperty(\"showTotal\") ? legend.showTotal : false);\r\n        self.mouseOverEffect(legend.hasOwnProperty(\"mouseOverEffect\") ? legend.mouseOverEffect : false);\r\n        self.itemGap(legend.hasOwnProperty(\"itemGap\") ? legend.itemGap : 10);\r\n        self.keyPath(legend.hasOwnProperty(\"keyPath\") ? legend.keyPath : \"\");\r\n        self.labelFormat(legend.hasOwnProperty(\"labelFormat\") ? legend.labelFormat : null);\r\n        if(legend.hasOwnProperty(\"colors\") && legend.colors) {\r\n            self.colors(legend.colors);\r\n            parseDomain = true;\r\n        }\r\n        if(legend.hasOwnProperty(\"icon\") && legend.icon) {\r\n            self.icon(legend.icon);\r\n            parseDomain = true;\r\n        }\r\n        if(legend.hasOwnProperty(\"label\") && legend.label) {\r\n            self.label(legend.label);\r\n            parseDomain = true;\r\n        }\r\n        if(legend.hasOwnProperty(\"icons\") && legend.icons) {\r\n            self.icons(legend.icons);\r\n            parseDomain = true;\r\n        }\r\n        if(legend.hasOwnProperty(\"labels\") && legend.labels) {\r\n            self.labels(legend.labels);\r\n            parseDomain = true;\r\n        }\r\n        if(parseDomain && legend.hasOwnProperty(\"domain\") && legend.domain) {\r\n            self.domain(legend.domain);\r\n        }\r\n        if(legend.hasOwnProperty(\"key\") && ObjectUtil.isString(legend.key)) {\r\n            self.key(legend.key);\r\n        } else {\r\n            self.key(\"name\");\r\n        }\r\n        //若没有传入items，则根据key获取items，否则直接使用items\r\n        if(legend.hasOwnProperty(\"items\") && ObjectUtil.isArray(legend.items) &&　legend.items.length > 0) {\r\n            isSetItems = true;\r\n            self.items(legend.items);\r\n        } else {\r\n            isSetItems = false;\r\n            self.items([]);\r\n        }\r\n        var index = 0, series = self.config().series;\r\n        if(series) {\r\n            var itemsData;\r\n            var outerPlugins = ghca_charts.global.outerPlugins;\r\n            series.forEach(function(chartData) {\r\n                if(outerPlugins && outerPlugins.chartMap && outerPlugins.chartMap[chartData.type]) {\r\n                \t//检查外部注册的图表类\r\n                \titemsData = self.keyPath() === \"\" ? chartData.data : eval('chartData.'+self.keyPath());\r\n                } else {\r\n                \t//检查内部注册的图表类\r\n                \tswitch(chartData.type.toLowerCase()) {\r\n                        case \"topology\":\r\n                        case \"biztopology\":\r\n                        case \"sankey\":\r\n                        case \"tree\":\r\n                        case \"sunburst\":\r\n                        case \"pack\":\r\n                        case \"radialtree\":\r\n                           itemsData = self.keyPath() === \"\" ? chartData.nodes : eval('chartData.'+self.keyPath());\r\n                           break;\r\n                        case \"pie\":\r\n                        case \"scatter\":\r\n                        case \"area\":\r\n                        case \"line\":\r\n                        case \"bar\":\r\n                        case \"treemap\":\r\n                        case \"calendar\":\r\n                        case \"progressbar\":\r\n                            itemsData = self.keyPath() === \"\" ? chartData.data : eval('chartData.'+self.keyPath());\r\n                           break;\r\n                        default:\r\n                           itemsData = null;\r\n                           break;\r\n                    }\r\n                }\r\n                if(itemsData) {\r\n                    self.concat(self.itemsData, self.getItemsData(itemsData, chartData, isSetItems, index));\r\n                }\r\n                index++;\r\n            });\r\n        }\r\n    };\r\n    \r\n    var getItemValue = function(d, key) {\r\n    \tvar value = null;\r\n    \ttry {\r\n    \t\tif(RegexUtil.jsRegex.test(key)) {\r\n    \t\t\tvalue = key.replace(RegexUtil.jsRegex, function() {\r\n                    return arguments.length > 1 ?  eval(arguments[1]) : \"\";\r\n                });\r\n    \t\t} else {\r\n    \t\t\tvalue = key.indexOf(\".\") !== -1 ? eval(\"d.\" + key) : d[key];\r\n    \t\t}\r\n    \t} catch(e) {\r\n    \t\tvalue = null;\r\n    \t}\r\n    \treturn value;\r\n    }\r\n    \r\n    /**\r\n     * 获取图例项数据\r\n     * @param data 图例项控制需要的数据数组\r\n     * @param chartData 图表数据\r\n     * @param isSetItems 是否在初始化配置中定义items内容\r\n     * @param index 本图表数据在series中的索引值\r\n     * @return 返回生成的图例项数据\r\n     */\r\n    this.getItemsData = function(data, chartData, isSetItems, index) {\r\n        var result = [];\r\n        if(!data || data.length == 0){\r\n            return result;\r\n        }\r\n        var itemColor, itemData, itemValue, \r\n            chartType = chartData.type;\r\n            keyMap = {}, \r\n            key = self.key(),\r\n            colors = self.colors(),\r\n            colorIndex = 0;\r\n            labelFormat = self.labelFormat();\r\n        //是否在初始化配置中定义items内容\r\n        if(isSetItems) {\r\n            /*若items传入值，比如[0, 1]，则生成的图例项渲染数据itemsData中，只对由key指定属性对应的值为0或者1的数据对象分组标注图例，\r\n                   图列项文本由labelFormat属性确定，其他值的数据对象渲染成第三种颜色，图例项文本为“其他”*/\r\n            var otherData = [], items = self.items();\r\n            for(var i = 0, len = data.length; i < len; i++) {\r\n                itemData = data[i];\r\n                itemValue = getItemValue(itemData, key);\r\n                //根据items中的某个值,查找对应的data中的所有指定key属性对应的值为该值的节点，生成需要的数据\r\n                if(!keyMap[itemValue] && items.indexOf(itemValue) !== -1) {\r\n                    itemColor = ColorUtil.getColor(colorIndex === 0 ? index : colorIndex, colors);\r\n                    result.push({\r\n                        iconShape:Legend.ITEM_ICON_MAP[chartType],\r\n                        color:itemColor,\r\n                        showTotal:showTotal,\r\n                        mouseOverEffect:mouseOverEffect,\r\n                        label:self.getResultLabel(labelFormat, itemValue, itemValue, data, itemData), \r\n                        chartData:chartData,\r\n                        data:data.filter(function(item) {\r\n                            if(getItemValue(item, key) === itemValue) {\r\n                                item.legendColor = itemColor;\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        })\r\n                    });\r\n                    keyMap[itemValue] = 1;\r\n                    colorIndex++;\r\n                } else if(items.indexOf(itemValue) === -1) {\r\n                    //记录其他\r\n                    otherData.push(itemData);\r\n                }\r\n            }\r\n            //若有其他项数据，则添加图例其他项\r\n            if(otherData.length > 0) {\r\n            \tvar otherColorIndex = colorIndex === 1 ? (index + 1) : colorIndex;\r\n            \tvar otherTypeColor = ColorUtil.getColor(otherColorIndex, colors);\r\n            \tfor(var i = 0, len = otherData.length; i < len; i++) {\r\n            \t\titemData = otherData[i];\r\n            \t\titemData.legendColor = otherTypeColor;\r\n            \t}\r\n                result.push({\r\n                    iconShape:Legend.ITEM_ICON_MAP[chartType],\r\n                    color:otherTypeColor,\r\n                    showTotal:showTotal,\r\n                    mouseOverEffect:mouseOverEffect,\r\n                    label:\"其他\", \r\n                    chartData:chartData,\r\n                    data:otherData\r\n                });\r\n            }\r\n        } else {\r\n            //若items不传值，则生成的图例项渲染数据itemsData默认为由key指定属性对应的值组成的数组，且数组内容不能重复\r\n            var useDomainColor = self.colors() != null && self.domain() != undefined;\r\n            //判断是否使用用户自定义图例颜色\r\n            var colorFn = useDomainColor ? \r\n                d3.scaleThreshold().domain(self.domain()).range(self.colors()) : \r\n                ColorUtil.getColor;\r\n            var iconConfig = self.icons() === null ? \r\n                self.icon() === null ? null : [self.icon] : \r\n                self.icons();\r\n            var iconFn = iconConfig !== null ? \r\n                d3.scaleThreshold().domain(self.domain() && self.icons() ? self.domain() : []).range(iconConfig) : \r\n                null;\r\n            var labelConfig = self.labels() === null ? \r\n                self.label() === null ? null : [self.label()] : \r\n                self.labels();\r\n            var labelFn = labelConfig !== null ? \r\n                d3.scaleThreshold().domain(self.domain() && self.labels() ? self.domain() : []).range(labelConfig) : \r\n                null;\r\n            //定义使用用户自定义颜色时，获取labelFormat属性中{v}代表的范围说明字符串的方法\r\n            var getValueLabel = function(itemValue) {\r\n                if(useDomainColor) {\r\n                    var scoreAry = colorFn.invertExtent(itemValue);\r\n                    var valueLabel;\r\n                    if(scoreAry[0] === undefined) {\r\n                        valueLabel = scoreAry[1] + \"(不含)以下\";\r\n                    } else if(scoreAry[1] === undefined) {\r\n                        valueLabel = scoreAry[0] + \"(含)以上\";\r\n                    } else {\r\n                        valueLabel = scoreAry.join(\"(含)-\") + \"(不含)\";\r\n                    }\r\n                    return valueLabel;\r\n                }\r\n                return itemValue;\r\n            };\r\n            //拼装图例项渲染数据\r\n            for(var i = 0, len = data.length; i < len; i++) {\r\n                itemData = data[i];\r\n                itemValue = useDomainColor ? colorFn(getItemValue(itemData, key)) : getItemValue(itemData, key);\r\n                if(itemValue !== undefined && itemValue !== null && !keyMap[itemValue]) {\r\n                    itemColor = useDomainColor ? itemValue : colorFn(colorIndex === 0 ? index : colorIndex, colors);\r\n                    result.push({\r\n                        iconShape:Legend.ITEM_ICON_MAP[chartType],\r\n                        customIcon:iconFn ? iconFn(getItemValue(itemData, key)) : null,\r\n                        customLabel:labelFn ? labelFn(getItemValue(itemData, key)) : null,\r\n                        color:itemColor,\r\n                        showTotal:showTotal,\r\n                        mouseOverEffect:mouseOverEffect,\r\n                        label:self.getResultLabel(labelFormat, getValueLabel(itemValue), itemValue, data, itemData), \r\n                        chartData:chartData,\r\n                        data:data.filter(function(item) {\r\n                            if((useDomainColor ? colorFn(getItemValue(item, key)) : getItemValue(item, key)) === itemValue) {\r\n                                item.legendColor = itemColor;\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        })\r\n                    });\r\n                    keyMap[itemValue] = 1;\r\n                    colorIndex++;\r\n                }\r\n            }\r\n            //若使用自定义颜色，则按自定义颜色数组顺序对图例项排序\r\n            if(useDomainColor) {\r\n                var colors = self.colors();\r\n                result.forEach(function(obj) {\r\n                    return obj.index = colors.indexOf(obj.color);\r\n                });\r\n                result.sort(function(a, b){\r\n                    return a.index > b.index;\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * 把目标数组中的元素添加到源数组中的方法\r\n     * @param ary1 源数组\r\n     * @param ary2 目标数组\r\n     * @return 返回添加元素后的源数组\r\n     */\r\n    this.concat = function(ary1, ary2) {\r\n        if(!ary2 || !ObjectUtil.isArray(ary2)) {\r\n            return ary1;\r\n        }\r\n        for(var i = 0, len = ary2.length; i < len; i++) {\r\n            ary1.push(ary2[i]);\r\n        }\r\n        return ary1;\r\n    };\r\n    \r\n    /**\r\n     * 渲染所有图例项方法\r\n     */\r\n    this.ItemsRender = function() {\r\n        var itemsData = self.itemsData;\r\n        if(!itemsData || !self.visible()) {\r\n            return;\r\n        }\r\n        for(var i = 0, len = itemsData.length; i < len; i++) {\r\n            self.ItemRender(itemsData[i]);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染单个图例项方法\r\n     * @param itemData 图例项数据\r\n     */\r\n    this.ItemRender = function(itemData) {\r\n        var itemCon = self.legendContainer.append(\"g\").attr(\"class\", \"legendItem\");\r\n        var item = new LegendItem(itemCon, itemData);\r\n        item.render();\r\n        self.itemsList.push(item);\r\n    };\r\n    \r\n    /**\r\n     * 更新内容\r\n     */\r\n    this.update = function() {\r\n    \t//clear\r\n    \tself.xPos(\"center\");\r\n        self.yPos(\"top\");\r\n        self.visible(true);\r\n        self.onlyOneColumn(false);\r\n        self.onlyOneRow(false);\r\n        self.showTotal(false);\r\n        self.mouseOverEffect(false);\r\n        self.keyPath(\"\");\r\n        self.labelFormat(null);\r\n        self.colors(null);\r\n        self.icons(null);\r\n        self.labels(null);\r\n        self.icon(null);\r\n        self.label(null);\r\n        self.domain(null);\r\n        self.key(\"name\");\r\n        self.items([]);\r\n    \tself.itemsList = [];\r\n        self.itemsData = [];\r\n    \tif(self.legendContainer) {\r\n    \t\tself.legendContainer.remove();\r\n    \t\tself.legendContainer = null;\r\n    \t}\r\n    \t\r\n    \tself.render();\r\n    };\r\n    \r\n    /**\r\n     * 重新计算布局\r\n     */\r\n    this.resetLayout = function() {\r\n        if(!self.legendContainer || self.itemsList.length === 0) {\r\n            return;\r\n        }\r\n        //计算legendItem容器位置\r\n        var padding = ObjectUtil.isObject(self.config().legend.padding) ? self.config().legend.padding : defaultPadding,\r\n        \tpaddingLeft = ObjectUtil.isObject(padding) && ObjectUtil.isNumber(padding.left) ? padding.left : defaultPadding;\r\n\t        paddingRight = ObjectUtil.isObject(padding) && ObjectUtil.isNumber(padding.right) ? padding.right : defaultPadding;\r\n\t        paddingTop = ObjectUtil.isObject(padding) && ObjectUtil.isNumber(padding.top) ? padding.top : defaultPadding;\r\n\t        paddingBottom = ObjectUtil.isObject(padding) && ObjectUtil.isNumber(padding.bottom) ? padding.bottom : defaultPadding;\r\n            itemX = 0, \r\n            itemY = 0, \r\n            itemGap = self.itemGap(),\r\n            maxItemW = 0,\r\n            maxItemH = 0,\r\n            xPos = self.xPos(),\r\n            yPos = self.yPos(),\r\n            parentBox = self.parent.bgNode().getBBox();\r\n            parentW = parentBox.width,\r\n            parentH = parentBox.height,\r\n            layoutW = parentW - paddingLeft - paddingRight;//可用于布局图列项区域的宽度，不包括padding\r\n            layoutH = parentH - paddingTop - paddingBottom;//可用于布局图列项区域的高度，不包括padding\r\n            itemIns = null, \r\n            itemBox = null;\r\n        \r\n        //若水平位置设置为居中模式，则使用行布局；否则使用列布局\r\n        if(onlyOneRow || (xPos === \"center\" && !onlyOneColumn)) {\r\n            for(var i = 0, len = self.itemsList.length; i < len; i++) {\r\n                itemIns = self.itemsList[i].ele;\r\n                itemBox = itemIns.node().getBBox();\r\n                maxItemH = itemBox.height > maxItemH ? itemBox.height : maxItemH;\r\n                if(itemX + itemBox.width + itemGap <= layoutW) {\r\n                    itemIns.attr(\"transform\", \"translate(\" + itemX + \",\" + itemY + \")\");\r\n                } else {\r\n                    itemX = 0;\r\n                    itemY += (maxItemH + itemGap);\r\n                    maxItemH = 0;\r\n                    itemIns.attr(\"transform\", \"translate(\" + itemX + \",\" + itemY + \")\");\r\n                }\r\n                itemX += (itemBox.width + itemGap);\r\n            }\r\n        } else {\r\n            for(var i = 0, len = self.itemsList.length; i < len; i++) {\r\n                itemIns = self.itemsList[i].ele;\r\n                itemBox = itemIns.node().getBBox();\r\n                maxItemW = itemBox.width > maxItemW ? itemBox.width : maxItemW;\r\n                if(itemY + itemBox.height + itemGap <= layoutH) {\r\n                    itemIns.attr(\"transform\", \"translate(\" + itemX + \",\" + itemY + \")\");\r\n                } else {\r\n                    itemX += (maxItemW + itemGap);\r\n                    itemY = 0;\r\n                    maxItemW = 0;\r\n                    itemIns.attr(\"transform\", \"translate(\" + itemX + \",\" + itemY + \")\");\r\n                }\r\n                itemY += (itemBox.height + itemGap);\r\n            }\r\n        }\r\n            \r\n        //计算legend容器位置\r\n        var x = 0,\r\n            y = 0,\r\n            legendBox = self.legendContainer.node().getBBox(),\r\n            legendW = legendBox.width,\r\n            legendH = legendBox.height;\r\n        //计算水平定位\r\n        if(!isNaN(xPos)) {\r\n            x = xPos;\r\n        } else if(xPos === \"left\") {\r\n            x = paddingLeft;\r\n        } else if(xPos === \"right\")  {\r\n            x = parentW - legendW - paddingRight;\r\n        } else {//default center\r\n            x = (parentW - legendW) / 2;\r\n        }\r\n        \r\n        //计算垂直定位\r\n        if(!isNaN(yPos)) {\r\n            y = yPos;\r\n        } else if(yPos === \"middle\") {\r\n            y = (parentH - legendH) / 2;\r\n        } else if(yPos === \"bottom\")  {\r\n            y = parentH - legendH - paddingBottom;\r\n        } else {//defult top\r\n            y = paddingTop;\r\n        }\r\n        \r\n        self.legendContainer.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\r\n    };\r\n    \r\n    /**\r\n     * 渲染方法\r\n     */\r\n    this.render = function() {\r\n        self.refreshData();\r\n        //初始化图列包含的各个层级\r\n        initAllContainers();\r\n        self.ItemsRender();\r\n        self.resetLayout();\r\n        if(Global.isDebug) {\r\n            console.log(\"Legend.render()\");\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据labelFormat获取最终label的方法\r\n     * @param label labelFormat\r\n     * @param value 替换内容，支持{#script#},其中script为js脚本内容；支持{v},相当于{#d[key]#}\r\n     * @param defaultResult 默认最终label\r\n     * @param data 所有项数据\r\n     * @param d 当前项数据\r\n     */\r\n    this.getResultLabel = function(label, value, defaultResult, data, d) {\r\n    \tif(!label) {\r\n    \t\treturn defaultResult;\r\n    \t}\r\n    \tvar result = label.replace(/{v}/ig, value);\r\n        return result.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n        return (\"Legend info: \"     +\r\n                \"\\n   xPos:\"        + self.xPos()       + \r\n                \"\\n   yPos:\"        + self.yPos()       + \r\n                \"\\n   key:\"         + self.key()        + \r\n                \"\\n   items:\"       + self.items()      + \r\n                \"\\n   labelFormat:\" + self.labelFormat());\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nLegend.struct = function(ghca_charts) {\r\n    Legend.prototype.constructor = Legend;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 根据图表类型提供相应的图例项图标的映射对象\r\n */\r\nLegend.ITEM_ICON_MAP = {\r\n    line:   \t\"line\",\r\n    area:   \t\"line\",\r\n    pie:    \t\"pie\",\r\n    sunburst:\t\"pie\"\r\n};\r\n\r\nmodule.exports = Legend;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/legend.js\n// module id = 35\n// module chunks = 0","//图例项类\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _ele 图例项所在容器对象\r\n * @param _data 图例项数据\r\n */\r\nvar LegendItem = function (_ele, _data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    if(arguments.length < 2) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",应至少传入2个参数\");\r\n    }\r\n    \r\n    var self = this,\r\n        lengedTimer = NaN;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // data\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 图例项数据\r\n     */\r\n    var data = _data;\r\n    this.data = function(value) {\r\n        if (!arguments.length)\r\n            return data;\r\n        data = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        //获取渲染容器实例\r\n        if (typeof(_ele) == 'string') {\r\n            _ele = document.getElementById(_ele);\r\n        }\r\n        if (!_ele) {\r\n            throw new Error('LegendItem构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n        }\r\n        self.ele = _ele;\r\n        self.isShow = true;\r\n        \r\n        //添加监听\r\n        addListeners();\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    var addListeners = function() {\r\n        self.ele.on(\"click.legendItem\", clickHandler);\r\n        self.ele.on(\"mouseover.legendItem\", mouseOverHandler);\r\n        self.ele.on(\"mouseout.legendItem\", mouseOutHandler);\r\n    };\r\n    \r\n        \r\n    /**\r\n     * 获取该图列所对应的实例总个数标签内容\r\n     */\r\n    var getTotalLabel = function(itemData) {\r\n        return (itemData.showTotal && itemData && itemData.data)  ? \"(\"+itemData.data.length+\")\" : \"\";\r\n    };\r\n    \r\n    /**\r\n     * 设置图例对应所有实例的属性\r\n     * @param key 样式名称\r\n     * @param value 样式值\r\n     */\r\n    var setLegendInsAttr = function(key, value) {\r\n        var data = self.data().data;\r\n        for (var i = 0, len = data.length; i < len; i++) {\r\n            var ins = data[i].legendIns;\r\n            ins = ins && ins.mainContainer ? ins.mainContainer() : ins;\r\n            ins && ins.attr(key, value);\r\n        };\r\n    };\r\n    \r\n    /**\r\n     * 在图例对应所有实例上播放闪烁效果\r\n     */\r\n    var playLegendAnimate = function() {\r\n    \tif(!self.data().mouseOverEffect) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar i = 0, minOpacity = 0.25;\r\n        setLegendInsAttr(\"opacity\", minOpacity);\r\n        lengedTimer = setInterval(function() {\r\n            if(i === 2 && !isNaN(lengedTimer)) {\r\n                clearInterval(lengedTimer);\r\n                lengedTimer = NaN;\r\n            }\r\n            setLegendInsAttr(\"opacity\", i % 2 === 0 ? 1 : minOpacity);\r\n            i++;\r\n        }, 400);\r\n    };\r\n    \r\n    /**\r\n     * 在图例对应所有实例上停止播放闪烁效果\r\n     */\r\n    var stopLegendAnimate = function() {\r\n    \tif(!self.data().mouseOverEffect) {\r\n            return;\r\n        }\r\n    \tif(!isNaN(lengedTimer)) {\r\n            clearInterval(lengedTimer);\r\n            lengedTimer = NaN;\r\n        }\r\n        setLegendInsAttr(\"opacity\", 1);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 点击事件\r\n     */\r\n    var clickHandler = function() {\r\n    \tvar e = (arguments.length > 0 && arguments[0]) || window.event || d3.event;\r\n    \te.stopImmediatePropagation();\r\n    \tstopLegendAnimate();\r\n    \t\r\n    \tvar itemData = self.data();\r\n        if(!itemData) {\r\n            return;\r\n        }\r\n    \tself.isShow = !self.isShow;\r\n    \t//是否自定义图标或者\r\n    \tif(itemData.customIcon || itemData.customLabel) {\r\n    \t\tif(self.isShow) {\r\n    \t\t\tself.shape.style(\"opacity\", 1);\r\n    \t\t} else {\r\n    \t\t\tself.shape.style(\"opacity\", 0.65);\r\n    \t\t}\r\n    \t} else {\r\n    \t\tvar hideColor = \"#ccc\", \r\n                showColor = \"#000\", \r\n                itemData = self.data(),\r\n                shape = itemData.iconShape ? itemData.iconShape : \"rect\";\r\n            if(self.isShow) {\r\n                self.shape.selectAll(\".icon\").attr(shape === \"line\" ? \"stroke\" : \"fill\", itemData.color);\r\n                self.label.attr(\"fill\", showColor);\r\n            } else {\r\n                self.shape.selectAll(\".icon\").attr(shape === \"line\" ? \"stroke\" : \"fill\", hideColor);\r\n                self.label.attr(\"fill\", hideColor);\r\n            }\r\n    \t}\r\n    \tvar data = self.data().data;\r\n    \tdata.forEach(function(itemData) {\r\n    \t\titemData.visible = self.isShow;\r\n    \t});\r\n    \t//抛出图例项鼠标点击事件\r\n    \tvar evt = EventUtil.createEvent(BaseEvent.LEGEND_ITEM_CLICK, {bubbles:true, cancelable:true});\r\n    \tself.ele.node().dispatchEvent(evt);\r\n    };\r\n    \r\n    /**\r\n     * 鼠标经过事件\r\n     */\r\n    var mouseOverHandler = function() {\r\n    \tif(self.isShow) {\r\n    \t\tself.ele.style(\"cursor\", \"pointer\");\r\n            self.shape.selectAll(\"*\").style(\"opacity\", 0.65);\r\n            self.label.style(\"opacity\", 0.5);\r\n            //闪烁效果\r\n            playLegendAnimate();\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 鼠标移出事件\r\n     */\r\n    var mouseOutHandler = function() {\r\n    \tif(self.isShow) {\r\n    \t\tself.shape.selectAll(\"*\").style(\"opacity\", 1);\r\n    \t\tself.label.style(\"opacity\", 1);\r\n    \t\tstopLegendAnimate();\r\n    \t}\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 创建内容\r\n     */\r\n    this.createContent = function() {\r\n        var itemData = self.data();\r\n        if(!itemData) {\r\n            return;\r\n        }\r\n        \r\n        var customIcon = itemData.customIcon;\r\n        var customLabel = itemData.customLabel;\r\n        var gap = (customIcon && customIcon.hasOwnProperty(\"gap\")) ? customIcon.gap : 2;\r\n        var iconWidth = (customIcon && customIcon.hasOwnProperty(\"iconWidth\")) ? customIcon.iconWidth : 24;\r\n        var iconHeight = (customIcon && customIcon.hasOwnProperty(\"iconHeight\")) ? customIcon.iconHeight : 12;\r\n         \r\n        //text\r\n        var content = itemData.label + getTotalLabel(itemData);\r\n        var maxLength = customLabel && customLabel.hasOwnProperty(\"maxLength\") ? customLabel.maxLength : 0;\r\n        if(maxLength > 0 && content.length > maxLength) {\r\n        \tself.ele.append(\"title\").text(content);\r\n        \tcontent = content.substring(0, maxLength) + \"...\";\r\n        }\r\n        self.label = self.ele\r\n          .append(\"text\")\r\n          .attr(\"class\", \"legendItemText\")\r\n          .attr(\"font-size\", \"12px\")\r\n          .attr(\"pointer-events\", \"none\")\r\n          .attr(\"x\", iconWidth + gap)\r\n          .text(content);\r\n        \r\n        //设置自定义文本样式\r\n        if(customLabel) {\r\n        \tElementUtil.setElementProperties(self.label, customLabel);\r\n        }\r\n        //保留svg text元素中文本的空格显示\r\n        StringUtil.fixTextSpace(self.label.node());\r\n        \r\n        var labelBox = self.label.node().getBBox();\r\n        var labelWidth = labelBox.width;\r\n        var labelHeight = labelBox.height;\r\n        var bgWidth = iconWidth + gap + labelWidth;\r\n        var bgHeight = iconHeight < labelHeight ? labelHeight : iconHeight;\r\n        \r\n        self.label.attr(\"y\", customIcon ? (labelHeight + iconHeight)/2 : iconHeight);\r\n        \r\n        //icon\r\n        self.shape = self.ele.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        if(customIcon) {\r\n        \t//custom icon\r\n        \tself.shape = self.shape\r\n                .append(customIcon.shape)\r\n                .attr(\"class\", \"icon\");\r\n            if(customIcon.shape === \"circle\") {\r\n            \tself.shape.attr(\"cx\", iconWidth/2).attr(\"cy\", bgHeight/2);\r\n            } else {\r\n            \tself.shape.attr(\"x\", 0)\r\n                    .attr(\"y\", (bgHeight - iconHeight)/2)\r\n                    .attr(\"width\", iconWidth)\r\n                    .attr(\"height\", iconHeight);\r\n            }\r\n            var iconStyle = customIcon.style;\r\n            if(iconStyle) {\r\n                ElementUtil.setElementProperties(self.shape, iconStyle);\r\n            }    \r\n        } else {\r\n        \t//icon, default is rect\r\n            var shape = itemData.iconShape ? itemData.iconShape : \"rect\";\r\n            if(shape === \"rect\") {\r\n                self.shape\r\n                    .append(\"rect\")\r\n                    .attr(\"class\", \"icon\")\r\n                    .attr(\"x\", 0)\r\n                    .attr(\"y\", (bgHeight - iconHeight)/2)\r\n                    .attr(\"width\", iconWidth)\r\n                    .attr(\"height\", iconHeight)\r\n                    .attr(\"rx\", 3)\r\n                    .attr(\"ry\", 3)\r\n                    .attr(\"fill\", itemData.color);\r\n            } else if(shape === \"line\") {\r\n                self.shape\r\n                    .append(\"line\")\r\n                    .attr(\"class\", \"icon\")\r\n                    .attr(\"x1\", 0)\r\n                    .attr(\"x2\", iconWidth)\r\n                    .attr(\"y1\", bgHeight/2)\r\n                    .attr(\"y2\", bgHeight/2)\r\n                    .attr(\"stroke-width\", 1.5)\r\n                    .attr(\"stroke\", itemData.color);\r\n                    \r\n                if(itemData.chartData.nodeShow) {\r\n                    self.shape\r\n                        .append(\"circle\")\r\n                        .attr(\"class\", \"icon\")\r\n                        .attr(\"cx\", iconWidth/2)\r\n                        .attr(\"cy\", bgHeight/2)\r\n                        .attr(\"r\", 3)\r\n                        .attr(\"stroke-width\", 1.5)\r\n                        .attr(\"fill\", itemData.color)\r\n                        .attr(\"stroke\", itemData.color);\r\n                }\r\n            } else if(shape === \"pie\") {\r\n                var arc = d3.arc()\r\n                    .outerRadius(iconHeight)\r\n                    .innerRadius(iconHeight/2);\r\n                    \r\n                self.shape\r\n                    .append(\"path\")\r\n                    .attr(\"class\", \"icon\")\r\n                    .attr(\"d\", arc({startAngle:-Math.PI/3.5, endAngle:Math.PI/3.5}))\r\n                    .attr(\"fill\", itemData.color)\r\n                    .attr(\"transform\", \"translate(\" + [iconHeight, \r\n                        iconHeight + (bgHeight - self.shape.node().getBBox().height)/2] + \")\");\r\n            }\r\n        }\r\n        \r\n        if(self.shape) {\r\n        \tself.shape.attr(\"pointer-events\", \"none\");\r\n        }\r\n        \r\n        //background rect\r\n        self.bgRect = self.ele\r\n            .insert(\"rect\", \":first-child\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", bgWidth)\r\n            .attr(\"height\", bgHeight)\r\n            .attr(\"fill\", \"red\")\r\n            .attr(\"opacity\", 0);\r\n    };\r\n    \r\n    /**\r\n     * 渲染方法\r\n     */\r\n    this.render = function() {\r\n        self.createContent();\r\n        Global.isDebug && console.log(\"LegendItem.render()\");\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function () {\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nLegendItem.struct = function(ghca_charts) {\r\n    LegendItem.prototype.constructor = LegendItem;\r\n};\r\n\r\nmodule.exports = LegendItem;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/legendItem.js\n// module id = 36\n// module chunks = 0","// 线图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 线图配置数据\r\n * @param _layout 线图布局对象，不传就为默认布局\r\n */\r\nvar Line = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const SvgUtil = ghca_charts.view.util.svgUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        nodesInsMap = {},\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        nodeInsMap = {};\r\n    \r\n    self.className(\"seriesLine\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"tension\", \"nodeShow\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // tension\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 连线弯曲率[0, 1],1时为折线，0和1之间(包括0)值为曲线(默认值为0)\r\n     */\r\n    var tension = 0;\r\n    this.tension = function(value){\r\n        if (!arguments.length) return tension;\r\n        tension = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // nodeShow\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 是否显示节点(默认值为false)\r\n     */\r\n    var nodeShow = false;\r\n    this.nodeShow = function(value){\r\n        if (!arguments.length) return nodeShow;\r\n        nodeShow = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.itemsIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n   \t    superRefreshData();\r\n        //生成visible属性，默认值为true\r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n            item = items[i];\r\n            item.bindKey = i;\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n        \r\n        if(self.lineContainer) {\r\n            self.lineContainer.renderTransform();\r\n        }\r\n    };\r\n    \r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        \r\n        //放置所有项的g元素\r\n        if(!self.lineContainer) {\r\n            var lineContainer = new BaseComponent();\r\n            lineContainer.className(\"line-Container\");\r\n            self.addChild(lineContainer);\r\n            self.lineContainer = lineContainer;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n        var items = self.data().data;\r\n        self.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n        //计算布局，获取项数据数组\r\n        self.layout().update();\r\n        \r\n        /*这里先清除所有的项元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n                                    但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n        var lineContainer = self.lineContainer;\r\n//        SvgUtil.removeAllChildren(lineContainer.node());\r\n//        self.itemsIns.length = 0;\r\n        \r\n//        //获取节点渲染器配置，并根据legend组件分配的颜色设置节点填充颜色,若没有legend相关配置，则pie组件始终强制使用自动生成的颜色填充\r\n//        for(var d, i = 0, len = itemsData.length; i < len; i++) {\r\n//            d = itemsData[i];\r\n//            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n//                d.legendColor = ColorUtil.getColor(i);\r\n//            }\r\n//            var config = self.getRendererConfig(d, \"fill\");\r\n//            //判断饼图外半径是否为auto,若为auto,则自动填满图表范围;若没有outerRadius属性，则等同于auto\r\n//            if(!config.hasOwnProperty(\"clazzProperties\")) {\r\n//                \r\n//            } else if(config.clazzProperties.hasOwnProperty(\"outerRadius\") && config.clazzProperties.outerRadius === \"auto\") {\r\n//                config.clazzProperties.outerRadius = Math.min(self.width(), self.height()) / 2;\r\n//            }\r\n//        }\r\n//        //渲染节点内容\r\n//        var itemsIns = ClassFactory.newRenderersInstanceByData(lineContainer, self, \"itemContainer\", itemsData);\r\n//        if(itemsIns) {\r\n//            for(var i = 0, len = itemsIns.length; i < len; i++) {\r\n//                self.itemsIns.push(itemsIns[i]);\r\n//            }\r\n//        }\r\n        \r\n        //渲染节点\r\n        var horAxis, verAxis, xScale, yScale, xPadding = 0, yPadding = 0, vAixsHeight = 0;\r\n        if(self.horAxis()) {\r\n            horAxis = self.horAxis();\r\n            xPadding = horAxis.padding();\r\n            xScale = horAxis.scaleIns();\r\n        }\r\n        if(self.verAxis()) {\r\n            verAxis = self.verAxis();\r\n            yPadding = verAxis.padding();\r\n            yScale = verAxis.scaleIns();\r\n            vAixsHeight = verAxis.height();\r\n        }\r\n        \r\n        var line = d3.line()\r\n            .x(function(d) { return d.x; })\r\n            .curve(d3.curveCardinal.tension(self.tension()));\r\n        \r\n        var defaultColor = ColorUtil.getColor(self.seriesIndex());\r\n        lineContainer = self.lineContainer.mainContainer();\r\n        self.lineContainer.x(xPadding.left);\r\n        self.lineContainer.y(yPadding.top);\r\n        \r\n        //根据字典中指定的渲染器数据生成节点渲染器数据\r\n        var visibleItems = self.visibleItems();\r\n        for(var d, i = 0, len = visibleItems.length; i < len; i++) {\r\n            d = visibleItems[i];\r\n            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n                d.legendColor = defaultColor;\r\n            }\r\n            self.getRendererConfig(d, \"fill\");\r\n        }\r\n        \r\n        //render path\r\n        var diffKey = self.diffKey();\r\n        var pathUpdate = lineContainer.selectAll(\"path.line-path\")\r\n            .data(visibleItems.length > 0 ? [visibleItems] : []);\r\n        \r\n        var pathExit = pathUpdate.exit();\r\n        pathExit.remove();\r\n        \r\n        pathUpdate\r\n            .transition().duration(self.animation() ? 500 : 0)\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"stroke\", function(d) {\r\n                var color = defaultColor;\r\n                if(d.hasOwnProperty(\"legendColor\")) {\r\n                    color = d.legendColor;\r\n                } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                    color = d[0].legendColor;\r\n                }\r\n                return color;\r\n            })\r\n            .attr(\"d\", line.y(vAixsHeight))\r\n            .attr(\"d\", line.y(function(d) { return d.y; }));\r\n        \r\n        pathUpdate.enter().append(\"path\")\r\n            .attr(\"class\", \"line-path\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"stroke\", function(d) {\r\n            \tvar color = defaultColor;\r\n                if(d.hasOwnProperty(\"legendColor\")) {\r\n                    color = d.legendColor;\r\n                } else if(d.length > 0 && d[0].hasOwnProperty(\"legendColor\")) {\r\n                    color = d[0].legendColor;\r\n                }\r\n                return color;\r\n            })\r\n            .each(function(d) {\r\n                if(d.length > 0) {\r\n                    d[0].legendIns = self.lineContainer;\r\n                }\r\n            })\r\n            .attr(\"d\", line.y(vAixsHeight))\r\n            .transition().duration(self.animation() ? 1000 : 0)\r\n            .attr(\"d\", line.y(function(d) { return d.y; }));\r\n         \r\n        //render items\r\n        if(self.nodeShow()) {\r\n        \tvar pointUpdate = lineContainer.selectAll(\"g.point-item\")\r\n        \t   .data(visibleItems, self.bindKeyFn);\r\n            var pointExit = pointUpdate.exit();\r\n            pointExit.each(function(d) {\r\n                var key = self.bindKeyFn(d);\r\n                if(nodesInsMap.hasOwnProperty(key)) {\r\n                    delete nodesInsMap[key];\r\n                }\r\n            }).remove();\r\n            \r\n            //update\r\n            pointUpdate.each(function(d) {\r\n                var key = self.bindKeyFn(d);\r\n                var ins = nodesInsMap[key];\r\n                if(ins) {\r\n                    ins.data(d);\r\n                    ins.update();\r\n                    d.ins = ins;\r\n                    d.legendIns = ins;\r\n                }\r\n            });\r\n                \r\n            //add\r\n            var pointsEnter = pointUpdate.enter().append(\"g\").attr(\"class\", \"point-item\");\r\n            pointsEnter.each(function(d){\r\n                if(!d.hasOwnProperty(\"legendColor\")) {\r\n                    d.legendColor = defaultColor;\r\n                }\r\n                var rendererConfig = self.getRendererConfig(d, \"stroke\");\r\n                var clazz = d.hasOwnProperty(\"renderer\") ? rendererConfig.clazz : \"lineNode\";\r\n                var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n                nodeIns.render();\r\n                d.ins = nodeIns;\r\n                d.legendIns = self.lineContainer;\r\n                var key = self.bindKeyFn(d);\r\n                nodesInsMap[key] = nodeIns;\r\n            });\r\n        } else {\r\n        \tlineContainer.selectAll(\"g.point-item\").remove();\r\n        }\r\n            \r\n        self.renderPosition();\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Line info: \"     +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    Line.clazzName = \"Line\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nLine.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    Line.prototype = Object.create(BaseChart.prototype);\r\n    Line.prototype.constructor = Line;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Line;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/line.js\n// module id = 37\n// module chunks = 0","// pack图类\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _data pack图配置数据\r\n * @param _layout pack图布局对象，不传就为默认布局\r\n */\r\nvar Pack = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ObjectUtil =  ghca_charts.view.util.objectUtil;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n\r\n    BaseChart.apply(this, arguments);\r\n\r\n    var self = this,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRefreshData = self.refreshData,\r\n        superRenderPosition = self.renderPosition;\r\n\r\n    self.className(\"pack\");\r\n\r\n    var isInit = true,\r\n        node;\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // nodeInsMap\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 节点实例map\r\n     */\r\n    var nodeInsMap = d3.map();\r\n    this.nodeInsMap = function(){\r\n        return nodeInsMap;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // xScale\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 水平方向比例尺\r\n     */\r\n    var xScale = d3.scaleLinear();\r\n    this.xScale = function(){\r\n        return xScale;\r\n    }\r\n    \r\n    // ------------------------------\r\n    // yScale\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 垂直方向比例尺\r\n     */\r\n    var yScale = d3.scaleLinear();\r\n    this.yScale = function(){\r\n        return yScale;\r\n    }\r\n    \r\n    \r\n    // ------------------------------\r\n    // scaleK\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前缩放系数\r\n     */\r\n    var scaleK = 1;\r\n    this.scaleK = function(){\r\n        return scaleK;\r\n    }\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n    };\r\n\r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        self.packContainer =  self.mainContainer().append(\"g\").attr(\"class\", \"pack-Container\");\r\n        //放置所有节点的g元素\r\n        self.nodesContainer =  self.packContainer.append(\"g\").attr(\"class\", \"nodes-Container\");\r\n    };\r\n\r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n        d3.select(window).on(\"click\", function() {\r\n            zoomNode(self.layout().root());\r\n        });\r\n    };\r\n    \r\n    var setNodeScale = function(d) {\r\n    \tvar radius = self.layout().radius();\r\n        var r = radius * 2;\r\n        scaleK = r / d.outerRadius / 2;\r\n        xScale.range([0, r]);\r\n        yScale.range([0, r]);\r\n        xScale.domain([d.data.x - d.outerRadius, d.data.x + d.outerRadius]);\r\n        yScale.domain([d.data.y - d.outerRadius, d.data.y + d.outerRadius]);\r\n    };\r\n    \r\n    var zoomNode = function(d, i) {\r\n    \td3.event && d3.event.stopPropagation();\r\n    \t\r\n    \tsetNodeScale(d);\r\n    \t\r\n    \t//update all nodes\r\n        self.packContainer.selectAll(\"g.packNode\").each(function(d) {\r\n            var ins = self.nodeInsMap().get(d.data.id);\r\n            if(ins) {\r\n                self.getRendererConfig(d.data, \"fill\");\r\n                ins.update(d);\r\n            }\r\n        });\r\n    \t\r\n//\t\tvar t =  self.packContainer.selectAll(\"g.pack-item\")\r\n//            .transition().duration(self.animation() ? 500 : 0);\r\n//\r\n//        t.selectAll(\"g.packNode\").attr(\"transform\", function(d){\r\n//            return \"translate(\" + xScale(d.data.x) + \",\" + yScale(d.data.y) + \")\";\r\n//        })\r\n//        .selectAll(\"path\")\r\n//            .attr(\"d\", function(d){\r\n//            \tvar arc = d3.arc()\r\n//                    .innerRadius(scaleK * d.innerRadius)\r\n//                    .outerRadius(scaleK * d.outerRadius);\r\n//                return arc(d);\r\n//            });\r\n\r\n//\t\tt.selectAll(\"text\")\r\n//            .attr(\"x\", function(d) {\r\n//\t\t\t\treturn xScale(d.x);\r\n//\t\t\t}).attr(\"y\", function(d) {\r\n//\t\t\t\treturn yScale(d.y);\r\n//\t\t\t}).style(\"opacity\", function(d) {\r\n//\t\t\t\treturn scaleK * d.r > 20 ? 1 : 0;\r\n//\t\t\t});\r\n\r\n\t\tnode = d;\r\n\t};\r\n\r\n    /**\r\n\t * 刷新数据内容，生成需要的属性和相关值\r\n\t */\r\n    this.refreshData = function() {\r\n        superRefreshData();\r\n    };\r\n\r\n    /**\r\n     * 渲染图表内容相关位置\r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n        //内容居中\r\n        self.packContainer.attr(\"transform\", function() {\r\n        \tvar r = self.layout().radius();\r\n            return \"translate(\" + (self.width()/2-r) + \",\" + (self.height()/2-r) + \")\";\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n    \t\r\n        if(!self.data() ||　!ObjectUtil.isArray(self.data().nodes) || self.data().nodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        self.layout().visibleData(self.filterArrayByElementProperty(self.data().nodes,\"visible\",true));\r\n        self.layout().radius(Math.min(self.width(), self.height()) / 2 - 35);\r\n        self.layout().update();\r\n        \r\n        node = self.layout().root();\r\n        \r\n        if(isInit) {\r\n            setNodeScale(node);\r\n        }\r\n        \r\n        //render items\r\n        var diffKey = self.diffKey();\r\n        var packItemsUpdate = self.nodesContainer.selectAll(\"g.pack-item\")\r\n            .data(self.layout().nodes(), self.bindKeyFn);\r\n        //delete\r\n        packItemsUpdate.exit().each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            var main = self.mainContainer();\r\n            var ins = self.nodeInsMap().get(key);\r\n            self.nodeInsMap().remove(key);\r\n            d3.select(this).remove();\r\n        });\r\n        //update\r\n        packItemsUpdate.each(function(d) {\r\n        \tvar key = self.bindKeyFn(d);\r\n            var ins = self.nodeInsMap().get(key);\r\n            if(ins) {\r\n            \tself.getRendererConfig(d.data, \"fill\");//把渲染器配置信息刷新到渲染器实例数据里面\r\n                ins.update(d);\r\n            }\r\n        });\r\n        //add\r\n        var packItemsUpdate = packItemsUpdate.enter().append(\"g\")\r\n            .attr(\"class\", \"pack-item\")\r\n            .each(function(d){\r\n                if(!d.data) {\r\n                    return;\r\n                }\r\n                var rendererConfig = self.getRendererConfig(d.data, \"fill\");\r\n                var clazz = (rendererConfig && rendererConfig.clazz) ? rendererConfig.clazz : \"packNode\";\r\n                var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d, self]);\r\n                nodeIns.isChartFirstInit(isInit);\r\n                nodeIns.graph(self.graph());\r\n                nodeIns.render();\r\n                var key = self.bindKeyFn(d);\r\n                self.nodeInsMap().set(key, nodeIns);\r\n                d.data.legendIns = d3.select(this);\r\n            })\r\n            .on(\"click\", function(d) { \r\n                return zoomNode(node == d ? self.layout().root() : d); \r\n            });\r\n\r\n        isInit = false;\r\n        self.renderPosition();\r\n    };\r\n    \r\n    //override\r\n    this.filterArrayByElementProperty = function(nodes, name, value) {\r\n        var visibleNodes = [],unvisibleNodeKeys = [];\r\n        function contains(d){\r\n            var i = unvisibleNodeKeys.length;\r\n            while (i--) {\r\n                if (unvisibleNodeKeys[i] === d) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        var idField = self.data()[\"idField\"],\r\n            parentField = self.data()[\"parentField\"];\r\n        nodes.forEach(function(node){\r\n            if((node[name]==undefined || node[name]==true) && !contains(node[parentField])){\r\n                visibleNodes.push(node);\r\n            }else{\r\n                unvisibleNodeKeys.push(node[idField]);\r\n            }\r\n        });\r\n        return visibleNodes;\r\n    };\r\n    \r\n    /**\r\n     * override 用于绑定数据区别是否变更的属性内容获取方式回调，用于selectAll(\"\").data(data, bindKeyFn);\r\n     */\r\n    this.bindKeyFn = function(d) {\r\n        var diffKey = self.diffKey();\r\n        return (diffKey && d[diffKey]) ? d[diffKey] : d.data.id;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    Pack.clazzName = \"pack\";\r\n    \r\n    // 初始化\r\n    this.init();\r\n};\r\n\r\nPack.struct = function(ghca_charts) {\r\n\tvar BaseChart = ghca_charts.view.component.charts.baseChart;\r\n\tBaseChart.struct(ghca_charts);\r\n    Pack.prototype = Object.create(BaseChart.prototype);\r\n    Pack.prototype.constructor = Pack;\r\n};\r\n\r\nmodule.exports = Pack;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/pack.js\n// module id = 38\n// module chunks = 0","// 饼图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 饼图配置数据\r\n * @param _layout 饼图布局对象，不传就为默认布局\r\n */\r\nvar Pie = function(_data, _layout) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        nodesInsMap = {},\r\n        isInit = true,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData;\r\n    \r\n    self.className(\"seriesPie\");\r\n    //添加可从配置文件读取的属性名称\r\n//    self.addAttributes(\"attribute\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.itemsIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        //放置所有项的g元素\r\n        var itemsContainer = new BaseComponent();\r\n        itemsContainer.className(\"pie-ItemsContainer\");\r\n        self.addChild(itemsContainer);\r\n        self.itemsContainer = itemsContainer;\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n   \t    superRefreshData();\r\n   \t    \r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n            item = items[i];\r\n            item.bindKey = i;\r\n            //生成visible属性，默认值为true\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        };\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n    \tsuperRenderPosition();\r\n    \t\r\n    \t//饼图内容居中\r\n        self.itemsContainer.x(self.width() / 2);\r\n        self.itemsContainer.y(self.height() / 2);\r\n        self.itemsContainer.renderTransform();\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n    \t//只用当前可见的项作为渲染数据源\r\n        var items = self.data().data;\r\n        self.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n        \r\n        //计算布局，获取项数据数组\r\n        self.layout().update();\r\n        var visibleItems = self.visibleItems();\r\n        \r\n        /*这里先清除所有的项元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n                                    但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n    \tvar itemsContainer = self.itemsContainer;\r\n//      itemsContainer.mainContainer().selectAll(\"g.pie-item\").remove();\r\n//        self.itemsIns.length = 0;\r\n        \r\n        //获取节点渲染器配置，并根据legend组件分配的颜色设置节点填充颜色,若没有legend相关配置，则pie组件始终强制使用自动生成的颜色填充\r\n        for(var d, i = 0, len = visibleItems.length; i < len; i++) {\r\n        \td = visibleItems[i];\r\n            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n                d.legendColor = ColorUtil.getColor(i);\r\n            }\r\n            var config = self.getRendererConfig(d, \"fill\");\r\n            validateRadius(config, d);\r\n        }\r\n//        //渲染节点内容\r\n//        var itemsIns = ClassFactory.newRenderersInstanceByData(itemsContainer, self, \"itemContainer\", visibleItems);\r\n//        if(itemsIns) {\r\n//        \tfor(var i = 0, len = itemsIns.length; i < len; i++) {\r\n//        \t\tself.itemsIns.push(itemsIns[i]);\r\n//        \t}\r\n//        }\r\n        \r\n        //render items\r\n        var pieItemsUpdate = itemsContainer.mainContainer().selectAll(\"g.pie-item\")\r\n            .data(visibleItems, self.bindKeyFn);\r\n        //update\r\n        pieItemsUpdate.each(function(d){\r\n            var key = self.bindKeyFn(d);\r\n            var ins = nodesInsMap[key];\r\n            if(ins) {\r\n                ins.data(d);\r\n                ins.update();\r\n                d.ins = ins;\r\n                d.legendIns = ins;\r\n            }\r\n        });\r\n        //add\r\n        var pieItemsEnter = pieItemsUpdate.enter().append(\"g\").attr(\"class\", \"pie-item\");\r\n        pieItemsEnter.each(function(d){\r\n            var clazz = d.hasOwnProperty(\"data\") && d.data ? d.data.clazz : \"arcClass\";\r\n            var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n            nodeIns.isChartFirstInit(isInit);\r\n            nodeIns.graph(self.graph());\r\n            nodeIns.render();\r\n            d.ins = nodeIns;\r\n            d.legendIns = d3.select(this);\r\n            var key = self.bindKeyFn(d);\r\n            nodesInsMap[key] = nodeIns;\r\n        });\r\n        //delete\r\n        var pieItemsExit = pieItemsUpdate.exit();\r\n        pieItemsExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(nodesInsMap.hasOwnProperty(key)) {\r\n                delete nodesInsMap[key];\r\n            }\r\n        }).remove();\r\n        \r\n        self.renderPosition();\r\n        \r\n        isInit = false;\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Pie info: \"   +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 校验内外半径方法\r\n     */\r\n    var validateRadius = function(config, d) {\r\n    \tif(!config) {\r\n    \t\treturn;\r\n    \t}\r\n        var maxSize = Math.min(self.width(), self.height());\r\n        if(!config.hasOwnProperty(\"clazzProperties\")) {\r\n            config.clazzProperties = {outerRadius:\"auto\"};\r\n        }\r\n        //outerRadius\r\n        if(!config.clazzProperties.hasOwnProperty(\"outerRadius\")) {\r\n            config.clazzProperties.outerRadius = \"auto\";\r\n        }\r\n        var outerRadius = config.clazzProperties.outerRadius;\r\n        if(ObjectUtil.isString(outerRadius)) {\r\n        \tif(outerRadius === \"auto\") {\r\n                outerRadius = maxSize / 2;\r\n            } else if(outerRadius.indexOf(\"{\") !== -1) {\r\n            \touterRadius = parseFloat(RegexUtil.replace(RegexUtil.dataRegex, outerRadius, d));\r\n            } else {\r\n            \tvar parseOR = StringUtil.parsePercent(outerRadius);\r\n                if(!isNaN(parseOR)) {\r\n                    outerRadius = parseInt(parseOR / 100 * maxSize);\r\n                }\r\n            }\r\n            config.clazzProperties.outerRadius = outerRadius;\r\n        }\r\n        \r\n        //innerRadius\r\n        if(!config.clazzProperties.hasOwnProperty(\"innerRadius\")) {\r\n            config.clazzProperties.innerRadius = \"auto\";\r\n        }\r\n        var innerRadius = config.clazzProperties.innerRadius;\r\n        if(ObjectUtil.isString(innerRadius)) {\r\n        \tif(innerRadius === \"auto\") {\r\n                innerRadius = 0;\r\n            } else if(innerRadius.indexOf(\"{\") !== -1) {\r\n                innerRadius = parseFloat(RegexUtil.replace(RegexUtil.dataRegex, innerRadius, d));\r\n            } else {\r\n                var parseIR = StringUtil.parsePercent(innerRadius);\r\n                if(!isNaN(parseIR)) {\r\n                    innerRadius = parseInt(parseIR / 100 * maxSize);\r\n                }\r\n            }\r\n            config.clazzProperties.innerRadius = innerRadius;\r\n        }\r\n    };\r\n    \r\n    Pie.clazzName = \"Pie\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nPie.struct = function(ghca_charts) {\r\n\tvar BaseChart = ghca_charts.view.component.charts.baseChart;\r\n\tBaseChart.struct(ghca_charts);\r\n    Pie.prototype = Object.create(BaseChart.prototype);\r\n    Pie.prototype.constructor = Pie;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Pie;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/pie.js\n// module id = 39\n// module chunks = 0","// 进度条图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 进度条图配置数据\r\n * @param _layout 进度条图布局对象，不传就为默认布局\r\n */\r\nvar ProgressBar = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        nodesInsMap = {},\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData;\r\n    \r\n    self.className(\"seriesProgressBar\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.itemsIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n        superRefreshData();\r\n        //生成visible属性，默认值为true\r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n            item = items[i];\r\n            item.bindKey = i;\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n    };\r\n    \r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        \r\n        //放置所有项的g元素\r\n        if(!self.barContainer) {\r\n            var barContainer = new BaseComponent();\r\n            barContainer.className(\"progressBar-Container\");\r\n            self.addChild(barContainer);\r\n            self.barContainer = barContainer;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n        self.refreshData();\r\n        var items = self.data().data;\r\n        self.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n        //计算布局，获取项数据数组\r\n        self.layout().update();\r\n        \r\n        var visibleItems = self.visibleItems();\r\n        var barContainer = self.barContainer;\r\n        \r\n        //渲染节点\r\n        //获取节点渲染器配置，并根据legend组件分配的颜色设置节点填充颜色,若没有legend相关配置，则始终强制使用自动生成的颜色填充\r\n        for(var d, i = 0, len = visibleItems.length; i < len; i++) {\r\n            d = visibleItems[i];\r\n//            if(d.legendColor === null || d.legendColor === undefined || d.legendColor === \"\") {\r\n//                d.legendColor = ColorUtil.getColor(i);\r\n//            }\r\n            var config = self.getRendererConfig(d, \"fill\");\r\n        }\r\n        \r\n        //render items\r\n        var diffKey = self.diffKey();\r\n        var barItemsUpdate = barContainer.mainContainer().selectAll(\"g.bar-item\")\r\n            .data(visibleItems, self.bindKeyFn);\r\n        //delete\r\n        var barItemsExit = barItemsUpdate.exit();\r\n        barItemsExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(nodesInsMap.hasOwnProperty(key)) {\r\n                delete nodesInsMap[key];\r\n            }\r\n        }).remove();\r\n        //update\r\n        barItemsUpdate.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            var ins = nodesInsMap[key];\r\n            if(ins) {\r\n                ins.data(d);\r\n                ins.update();\r\n                d.ins = ins;\r\n                d.legendIns = ins;\r\n            }\r\n        });\r\n        //add\r\n        var barItemsEnter = barItemsUpdate.enter().append(\"g\").attr(\"class\", \"bar-item\");\r\n        barItemsEnter.each(function(d){\r\n            var clazz = d.hasOwnProperty(\"data\") && d.data ? d.data.clazz : \"node\";\r\n            var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n            nodeIns.render();\r\n            d.ins = nodeIns;\r\n            d.legendIns = nodeIns;\r\n            var key = self.bindKeyFn(d);\r\n            nodesInsMap[key] = nodeIns;\r\n        });\r\n            \r\n        self.renderPosition();\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"ProgressBar info: \"      +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    ProgressBar.clazzName = \"ProgressBar\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nProgressBar.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    ProgressBar.prototype = Object.create(BaseChart.prototype);\r\n    ProgressBar.prototype.constructor = ProgressBar;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = ProgressBar;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/progressBar.js\n// module id = 40\n// module chunks = 0","// sankey图类\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data sankey图配置数据\r\n * @param _layout sankey图布局对象，不传就为默认布局\r\n */\r\nvar Sankey = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const Chart = ghca_charts.view.component.charts.chart;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const SankeyLayout = ghca_charts.layout.sankeyLayout;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const DataParser = ghca_charts.view.util.dataParser;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        superSetData = self.setData;\r\n    \tdefaultNodeTextStyle = {\r\n\t\t\t\"font-family\":\"微软雅黑\", \r\n\t\t\t\"font-size\":\"13px\", \r\n\t\t\t\"fill\":\"#000000\", \r\n\t\t\t\"pointer-events\":\"none\"\r\n\t\t};\r\n    \r\n    self.className(\"seriesSankey\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"nodeDragDir\", \"focusEffect\", \"nodeTextStyle\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // nodeDragDir\r\n    // ------------------------------\r\n        \r\n    /**\r\n     * 节点拖动类型 hor|ver|free|fix(默认值free)\r\n     * @see Const\r\n     */\r\n    var nodeDragDir = Const.FREE_DRAG_TYPE;\r\n    this.nodeDragDir = function(value) {\r\n        if (!arguments.length) return nodeDragDir;\r\n        nodeDragDir = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // focusEffect\r\n    // ------------------------------\r\n        \r\n    /**\r\n     * 鼠标移动到节点上时，是否显示凸显效果(默认值true)\r\n     */\r\n    var focusEffect = true;\r\n    this.focusEffect = function(value) {\r\n        if (!arguments.length) return focusEffect;\r\n        focusEffect = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // nodeTextStyle\r\n    // ------------------------------\r\n        \r\n    /**\r\n     * 节点文本样式对象\r\n     */\r\n    var nodeTextStyle = {};\r\n    this.nodeTextStyle = function(value) {\r\n        if (!arguments.length) return nodeTextStyle;\r\n        nodeTextStyle = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        self.nodes = self.layout().nodes();\r\n        self.links = self.layout().links();\r\n        self.nodesIns = [];\r\n        self.linksIns = [];\r\n        \r\n        //添加初始化数据中的所有节点和连线\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        \r\n        //放置所有连线的g元素\r\n        var linksContainer = new BaseComponent();\r\n        linksContainer.className(\"sankey-linksContainer\");\r\n        self.addChild(linksContainer);\r\n        self.linksContainer = linksContainer;\r\n        \r\n        //放置所有节点的g元素\r\n        var nodesContainer = new BaseComponent();\r\n        nodesContainer.className(\"sankey-nodesContainer\");\r\n        self.addChild(nodesContainer);\r\n        self.nodesContainer = nodesContainer;\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n        \r\n        self.addEventListener(BaseEvent.NODE_MOUSE_OVER, self.node_nodeMouseMoveHandler);\r\n        self.addEventListener(BaseEvent.NODE_MOUSE_OUT, self.node_nodeMouseOutHandler);\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n   \t   superRefreshData();\r\n       var data = self.data(),\r\n           nodes = data.nodes;\r\n        \r\n        //生成visible属性，默认值为true\r\n        nodes.forEach(function(node) {\r\n        \tif(!node.hasOwnProperty(\"visible\")) {\r\n        \t\tnode.visible = true;\r\n        \t}\r\n        });\r\n        \r\n        for(var key in defaultNodeTextStyle) {\r\n        \tif(!nodeTextStyle.hasOwnProperty(key)) {\r\n        \t\tnodeTextStyle[key] = defaultNodeTextStyle[key];\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n    \tsuperRenderPosition();\r\n    \t\r\n        var nodesIns = self.nodesIns;\r\n        for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n        \tnodeIns = nodesIns[i];\r\n        \tnodeIns.mainContainer().each(function(d) {\r\n        \t   nodeIns.x(d.x);\r\n        \t   nodeIns.y(d.y);\r\n        \t   nodeIns.renderTransform();\r\n        \t});\r\n        }\r\n            \r\n        self.linksContainer.mainContainer().selectAll(\"g.linkContainer path\")\r\n            .attr(\"d\", self.layout().model().linkPath());\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n        //计算布局\r\n        self.layout().update();\r\n        //重新计算节点level属性\r\n        refreshLevel();\r\n        \r\n        /*这里先清除所有的连线和节点元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n                                    但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n        var linksContainer = self.linksContainer;\r\n        linksContainer.removeAllChildren();\r\n        self.linksIns.length = 0;\r\n        var nodesContainer = self.nodesContainer;\r\n        nodesContainer.removeAllChildren();\r\n        self.nodesIns.length = 0;\r\n        \r\n        //只用当前可见的连线作为渲染数据源\r\n        var linksData = self.getVisibleLinks(self.links);\r\n        var pluginCallBack = function(linkIns) {\r\n        \tlinkIns.pathFunction(self.layout().model().linkPath);\r\n            linkIns.sortFunction(function(a, b) { \r\n                return b.dy - a.dy; \r\n            });\r\n        };\r\n        //渲染连线内容   \r\n        var linksIns = ClassFactory.newRenderersInstanceByData(linksContainer, self, \"linkContainer\", \r\n            linksData, false, \"stroke\", pluginCallBack);\r\n        if(linksIns) {\r\n            for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n                linkIns = linksIns[i];\r\n                self.linksIns.push(linkIns);\r\n                linkIns.mainContainer().each(function(d) {\r\n                \td.ins = linkIns;\r\n                });\r\n            }\r\n        }\r\n        \r\n        //只用当前可见的节点作为渲染数据源\r\n        var nodesData = self.filterArrayByElementProperty(self.nodes, \"visible\", true);\r\n        //若节点渲染器是一个组件，则重新设置一些配置数据\r\n        for(var i = 0, len = nodesData.length; i < len; i++) {\r\n        \tvar nodeData = nodesData[i];\r\n        \tvar rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n            if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n            \tvar chartData, series = rendererConfig.series;\r\n            \tfor(var j = 0, len1 = series.length; j < len1; j++) {\r\n            \t\tchartData = series[j];\r\n            \t\t//这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n                    chartData.width = nodeData.dy;\r\n                    chartData.height = nodeData.dy;\r\n                    //pie的位置特殊处理\r\n                    if(chartData.type === \"pie\") {\r\n                    \tchartData.x = -chartData.width / 2;\r\n                    }\r\n                    //组装图表数据\r\n                    DataParser.createChartData(chartData, nodeData);\r\n            \t}\r\n            }\r\n        }\r\n        //渲染节点内容\r\n        var pluginCallBack = function(linkIns) {\r\n            linkIns.isDragable(self.nodeDragDir() !== Const.FIX_DRAG_TYPE);\r\n        };\r\n        var nodesIns = ClassFactory.newRenderersInstanceByData(nodesContainer, self, \"nodeContainer\", \r\n            nodesData, true, \"fill\", pluginCallBack);\r\n        if(nodesIns) {\r\n            for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            \tnodeIns = nodesIns[i];\r\n            \tnodeIns.mainContainer().call(d3.drag()\r\n                    .on(\"start\", self.node_dragStartHandler)\r\n                    .on(\"drag\", self.node_dragHandler)\r\n                    .on(\"end\", self.node_dragEndHandler));\r\n                //这里addEventListener内的this为nodeIns.node()对象，故这样写\r\n                (function(ins){\r\n                \tins.addEventListener(\"mouseover\", function(event) {\r\n                \t\tvar evt = EventUtil.createCustomEvent(BaseEvent.NODE_MOUSE_OVER, true, true);\r\n                        ins.dispatchEvent(evt);\r\n                    });\r\n                    ins.addEventListener(\"mouseout\", function(event) {\r\n                    \tvar evt = EventUtil.createCustomEvent(BaseEvent.NODE_MOUSE_OUT, true, true);\r\n                        ins.dispatchEvent(evt);\r\n                    });\r\n                })(nodeIns);\r\n                \r\n                self.nodesIns.push(nodeIns);\r\n                \r\n                //-----临时写法-----start\r\n                //添加节点标签\r\n                var labelGap = 4;\r\n                var isPlugin = nodeIns.normalChild() === null ? false : true;\r\n                var nodeWidth = self.layout().model().nodeWidth();\r\n                var text = nodeIns.mainContainer().append(\"text\")\r\n                    .attr(\"class\", \"sankey-node-text\")\r\n                    .attr(\"x\", function(d) { return isPlugin ? -6 : -(d.dy/2 +　labelGap);})\r\n                    .attr(\"y\", function(d) { return d.dy/2; })\r\n                    .attr(\"dy\", \".35em\")\r\n                    .attr(\"text-anchor\", \"end\");\r\n                ElementUtil.setElementStyles(text, self.nodeTextStyle());\r\n                text.text(function(d) { return d.name; })\r\n                    .filter(function(d) { return d.x < self.width() / 2; })\r\n                    .attr(\"x\", function(d) { return isPlugin ? 6 + nodeWidth : d.dy/2 + labelGap + nodeWidth;})\r\n                    .attr(\"text-anchor\", \"start\");\r\n                var duration = self.animation() ? 300 : 0;\r\n                text.attr(\"opacity\", 0)\r\n                    .transition().duration(duration).ease(d3.easeLinear)\r\n                    .delay(function(d){\r\n                        return d.level * (duration - 10);\r\n                    })\r\n                    .attr(\"opacity\", 1);\r\n                //-----临时写法-----end\r\n                    \r\n                nodeIns.mainContainer().each(function(d) {\r\n                    d.ins = nodeIns;\r\n                    d.textIns = text;\r\n                });\r\n            }\r\n        }\r\n        \r\n        self.renderPosition();\r\n    };\r\n    \r\n    /**\r\n     * 设置数据内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}等\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setData = function(value) {\r\n    \tvar result = superSetData(value);\r\n    \t\r\n    \tself.layout().nodes().length = 0;\r\n    \tself.layout().links().length = 0;\r\n    \tself.nodes.length = 0;\r\n        self.links.length = 0;\r\n        self.nodesIns.length = 0;;\r\n        self.linksIns.length = 0;;\r\n        \r\n        //添加初始化数据中的所有节点和连线\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n        \r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Sankey info: \"   +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 节点开始拖动\r\n     */\r\n    this.node_dragStartHandler = function(d) {\r\n    \t//把拖动节点添加到父容器最外层\r\n        this.parentNode.appendChild(this);\r\n    };\r\n    \r\n    /**\r\n     * 节点拖动中\r\n     */\r\n    this.node_dragHandler = function(d) {\r\n        dragMoveNode(this, d);\r\n    };\r\n    \r\n    /**\r\n     * 节点结束拖动\r\n     */\r\n    this.node_dragEndHandler = function(d) {\r\n       dragMoveNode(this, d);\r\n    };\r\n    \r\n    /**\r\n     * 自定义鼠标移动到某个节点上\r\n     */\r\n    this.node_nodeMouseMoveHandler = function(event) {\r\n    \tevent.stopPropagation();\r\n    \tif(self.focusEffect()) {\r\n    \t\tfocusInNode(event.detail.target);\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 自定义鼠标移出某个节点\r\n     */\r\n    this.node_nodeMouseOutHandler = function(event) {\r\n    \tevent.stopPropagation();\r\n    \tif(self.focusEffect()) {\r\n    \t\tfocusOutAllNodes();\r\n    \t}\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 增加一个节点 \r\n     * @param node 节点数据对象\r\n     */\r\n    this.addNode = function(node) {\r\n    \tnode.sourceLinks = [];\r\n        node.targetLinks = [];\r\n        self.nodes.push(node);\r\n    };\r\n\r\n    /**\r\n     * 批量增加节点 \r\n     * @param nodes 节点数据对象数组\r\n     */\r\n    this.addNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n            nodes.forEach(function(node) {\r\n                self.addNode(node);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 增加一条连线 \r\n     * @param link 连线数据对象 \r\n     */\r\n    this.addLink = function(link) {\r\n        link.source = self.findNode(link.source);\r\n        link.target = self.findNode(link.target);\r\n        link.source.sourceLinks.push(link);\r\n        link.target.targetLinks.push(link);\r\n        self.links.push(link);\r\n    };\r\n\r\n    /**\r\n     * 批量增加连线 \r\n     * @param links 连线数据对象数组\r\n     */\r\n    this.addLinks = function(links) {\r\n        if (ObjectUtil.isArray(links)) {\r\n            links.forEach(function(link) {\r\n                self.addLink(link);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 删除节点 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeNode = function(id) {\r\n        var i = 0, n = self.findNode(id), links = self.links;\r\n        //删除该节点相关的连线\r\n        while (i < links.length) {\r\n            links[i]['source'] == n || links[i]['target'] == n ? links.splice(i, 1) : ++i;\r\n        }\r\n        //删除该节点\r\n        self.nodes.splice(self.findNodeIndex(id), 1);\r\n    };\r\n    \r\n    /**\r\n     * 删除节点下的子节点，同时清除link信息 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeChildNodes = function(id) {\r\n        var   node = self.findNode(id), //要删除的节点\r\n              nodes = self.nodes,       //所有节点\r\n              link = null,\r\n              links = self.links,       //所有连线 \r\n              delateLinks = [],         //要删除的连线索引数组\r\n              childNodes = [];          //当前节点的所有子节点数组\r\n\r\n        //找到所有要删除的连线索引，以及当前节点的所有子节点\r\n        links.forEach(function(link, index) {\r\n            //若节点是此条连线的起点\r\n            if(link['source'] == node) {\r\n                delateLinks.push(index);\r\n                childNodes.push(link['target']);\r\n            }\r\n        });\r\n\r\n        //删除上面找到的所有需要删除的连线\r\n        delateLinks.reverse().forEach(function(index) {\r\n            links.splice(index, 1);\r\n        });\r\n\r\n        //迭代删除节点\r\n        var remove = function(node) {\r\n            var length = links.length;\r\n            for (var i = length - 1; i >= 0; i--) {\r\n                if (links[i]['source'] == node) {\r\n                    var target = links[i]['target'];\r\n                    links.splice(i, 1);\r\n                    nodes.splice(self.findNodeIndex(node.id), 1);\r\n                    remove(target);\r\n                }\r\n            }\r\n        };\r\n\r\n        //删除上面找到当前节点的所有子节点\r\n        childNodes.forEach(function(node) {\r\n            remove(node);\r\n        });\r\n\r\n        //清除没有连线的节点\r\n        for (var i = nodes.length - 1; i >= 0; i--) {\r\n            var isFoundNode = false;\r\n            node = nodes[i];\r\n            for (var j = 0, len = links.length; j < len; j++) {\r\n                link = links[j];\r\n                if(link['source'] == node || link['target'] == node) {\r\n                    isFoundNode = true;\r\n                }\r\n            }\r\n            if(!isFoundNode){\r\n                nodes.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 查找节点\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象，若没有查找到则返回null\r\n     */\r\n    this.findNode = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] == id)\r\n                return nodes[i];\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * 查找节点数据对象所在数组的索引值\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象所在数组的索引值，若没有查找到则返回-1\r\n     */\r\n    this.findNodeIndex = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] == id)\r\n                return i;\r\n        }\r\n        return -1;\r\n    };\r\n    \r\n    /**\r\n     * 设置指定节点的所有子孙级别的所有节点是否可见\r\n     * @param id 要设置的指定节点id\r\n     * @param visible 设置指定节点的所有子孙级别的所有节点是否可见,值为true、false\r\n     */\r\n    this.setAllChildLevelNodesVisible = function(id, visible) {\r\n        var node = self.findNode(id);\r\n        if(!node) return;\r\n        \r\n        if(arguments.length < 2)  {\r\n            visible = true;\r\n        }\r\n        \r\n        //有待优化--start\r\n        var visibleNode = function(nodeId){\r\n            self.nodes.forEach(function(node) {\r\n                if(node.parentId === nodeId) {\r\n                    node.visible = visible;\r\n                    visibleNode(node.id);\r\n                }\r\n            });\r\n        };\r\n        //有待优化--end\r\n        \r\n        visibleNode(id);\r\n    };\r\n    \r\n    /**\r\n     * 设置指定节点的下一级所有节点是否可见\r\n     * @param id 要设置的指定节点id\r\n     * @param visible 设置指定节点的下一级所有节点是否可见,值为true、false\r\n     */\r\n    this.setNextLevelNodesVisible = function(id, visible) {\r\n        var node = self.findNode(id);\r\n        if(!node) return;\r\n        \r\n        if(arguments.length < 2)  {\r\n            visible = true;\r\n        }\r\n            \r\n        self.nodes.forEach(function(node) {\r\n            if(node.parentId === id) {\r\n                node.visible = visible;\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 展开节点\r\n     * @param id 要展开的节点id\r\n     * @param isExpandAll 是否展开所有子孙节点，默认为false,若为false则只展开该节点的下一级节点\r\n     */\r\n    this.expandNode = function(id, isExpandAll) {\r\n        if(isExpandAll) {\r\n            self.setAllChildLevelNodesVisible(id, true);\r\n        } else {\r\n            self.setNextLevelNodesVisible(id, true);\r\n        }\r\n        //根据当前数据重新渲染内容\r\n        self.update();\r\n    }\r\n    \r\n    /**\r\n     * 合拢节点\r\n     * @param id 要合拢的节点id\r\n     */\r\n    this.collapseNode = function(id) {\r\n        self.setAllChildLevelNodesVisible(id, false);\r\n        //根据当前数据重新渲染内容\r\n        self.update();\r\n    }\r\n    \r\n    /**\r\n     * 从指定的连线数据数组中获取可见的所有连线\r\n     * @param links 指定的连线数据数组\r\n     * @return 返回可见的所有连线数组，若没有满足条件的数组，则返回空数组\r\n     */\r\n    this.getVisibleLinks = function(links) {\r\n        var result = [];\r\n        if(!links || links.length === 0){\r\n            return result;\r\n        }\r\n        var link;\r\n        for (var i = 0, len = links.length; i < len; i++) {\r\n            link = links[i];\r\n            if (link.source.visible && link.target.visible) {\r\n                if(link.hasOwnProperty(\"visible\")) {\r\n                    if(link.visible) {\r\n                        result.push(link);\r\n                    }\r\n                } else {\r\n                    result.push(link);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 拖动节点\r\n     * @param node 被拖动的节点显示对象\r\n     * @param d 被拖动的节点数据对象\r\n     */\r\n    var dragMoveNode = function(node, d) {\r\n        var drageType = self.nodeDragDir();\r\n        if(drageType === Const.FIX_DRAG_TYPE) {\r\n            return;\r\n        } else if(drageType === Const.HOR_DRAG_TYPE) {\r\n            d.x = Math.max(0, Math.min(self.width() - d.dx, d3.event.x))\r\n        } else if(drageType === Const.VER_DRAG_TYPE) {\r\n            d.y = Math.max(0, Math.min(self.height() - d.dy, d3.event.y))\r\n        } else {\r\n            d.x = d3.event.x;\r\n            d.y = d3.event.y;\r\n        }\r\n        //重绘节点位置变换\r\n        var nodesIns = self.nodesIns;\r\n        for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().each(function(k) {\r\n               nodeIns.x(k.x);\r\n               nodeIns.y(k.y);\r\n               nodeIns.renderTransform();\r\n            });\r\n        }\r\n        //重绘连线\r\n        self.layout().model().relayoutLinkDepths();\r\n        self.linksContainer.mainContainer().selectAll(\"g.linkContainer path\")\r\n            .attr(\"d\", self.layout().model().linkPath());\r\n    };\r\n    \r\n    /**\r\n     * 突出显示节点\r\n     * @param nodeIns 要突出显示的节点对象\r\n     */\r\n    var focusInNode = function(target) {\r\n    \tif(!target) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar i, len, ins, nodeIns, linkIns, nodeData, linkData, sourceLinks, targetLinks, \r\n    \t    opacity = 0.2, nodesIns = self.nodesIns, linksIns = self.linksIns, insAry = [];\r\n\t    var duration = self.animation() ? 300 : 0;\r\n    \t//找到目标对象，并淡化所有节点和连线的显示效果\r\n\t    for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().attr(\"opacity\", opacity);\r\n            if(nodeIns === target) {\r\n                ins = nodesIns[i];\r\n            }\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            linkIns = linksIns[i];\r\n            linkIns.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        //添加要突出显示的对象到数组中\r\n    \tnodeData = ins.mainContainer().data()[0];\r\n    \tinsAry.push(nodeData.ins);\r\n    \tinsAry.push(nodeData.textIns);\r\n    \tsourceLinks = nodeData.sourceLinks;\r\n    \tfor(i = 0, len = sourceLinks.length; i < len; i++) {\r\n    \t\tlinkData = sourceLinks[i];\r\n    \t\tinsAry.push(linkData.ins);\r\n    \t\tif(linkData.target) {\r\n    \t\t\tinsAry.push(linkData.target.ins);\r\n    \t\t\tinsAry.push(linkData.target.textIns);\r\n    \t\t}\r\n    \t}\r\n    \ttargetLinks = nodeData.targetLinks;\r\n        for(i = 0, len = targetLinks.length; i < len; i++) {\r\n            linkData = targetLinks[i];\r\n            insAry.push(linkData.ins);\r\n            if(linkData.source) {\r\n                insAry.push(linkData.source.ins);\r\n                insAry.push(linkData.source.textIns);\r\n            }\r\n        }\r\n        //突出显示\r\n        for(i = 0, len = insAry.length; i < len; i++) {\r\n            ins = insAry[i];\r\n            if(ins instanceof BaseComponent) {\r\n            \tins = ins.mainContainer();\r\n            }\r\n            ins.attr(\"opacity\", 1);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 取消所有节点的突出显示效果\r\n     */\r\n    var focusOutAllNodes = function() {\r\n            var i, len, ins, opacity = 1, nodesIns = self.nodesIns, linksIns = self.linksIns;\r\n        for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            ins = nodesIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            ins = linksIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        self.mainContainer().selectAll(\"text.sankey-node-text\").attr(\"opacity\", opacity);\r\n    };\r\n    \r\n    /**\r\n     * 生成level属性，若visible为false，则删除该属性，且该节点的子节点level减少1\r\n     */\r\n    var refreshLevel = function() {\r\n    \tvar data = self.data(),\r\n            nodes = data.nodes,\r\n            rootNodes = [];\r\n        nodes.forEach(function(node) {\r\n            if(node.targetLinks.length === 0) {\r\n                rootNodes.push(node);\r\n            }\r\n        });\r\n        \r\n        function setLevel(node, level) {\r\n            if(node.visible) {\r\n                node.level = level;\r\n                level++;\r\n            } else if(node.hasOwnProperty(\"level\")) {\r\n                delete node.level;\r\n            }\r\n            node.sourceLinks.forEach(function(link) {\r\n                setLevel(link.target, level);\r\n            });\r\n        }\r\n        rootNodes.forEach(function(node) {\r\n        \tsetLevel(node, 0);\r\n        });\r\n    };\r\n    \r\n    Sankey.clazzName = \"Sankey\";\r\n    \r\n    // 初始化\r\n    this.init();\r\n};\r\n\r\nSankey.struct = function(ghca_charts) {\r\n\tvar BaseChart = ghca_charts.view.component.charts.baseChart;\r\n\tBaseChart.struct(ghca_charts);\r\n    Sankey.prototype = Object.create(BaseChart.prototype);\r\n    Sankey.prototype.constructor = Sankey;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Sankey;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/sankey.js\n// module id = 41\n// module chunks = 0","// 散点图类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data 散点图配置数据\r\n * @param _layout 散点图布局对象，不传就为默认布局\r\n */\r\nvar Scatter = function(_data, _layout) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const SvgUtil = ghca_charts.view.util.svgUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const DataParser = ghca_charts.view.util.dataParser;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var self = this,\r\n        nodesInsMap = {},\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData;\r\n    \r\n    self.className(\"seriesScatter\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.nodesIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n        superRefreshData();\r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n        \titem = items[i];\r\n        \titem.bindKey = i;\r\n            //生成visible属性，默认值为true\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        };\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n        \r\n        if(self.itemsContainer) {\r\n            self.itemsContainer.renderTransform();\r\n        }\r\n        \r\n        if(!self.layout().isTimeLine()) {\r\n        \tvar nodesIns = self.nodesIns;\r\n            for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n                nodeIns = nodesIns[i];\r\n                if(nodeIns instanceof BaseComponent) {\r\n                \t nodeIns.mainContainer().each(function(d) {\r\n                       nodeIns.x(d.x);\r\n                       nodeIns.y(d.y);\r\n                       nodeIns.renderTransform();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    this.initAllContainers = function() {\r\n    \tsuperInitAllContainers();\r\n    \t\r\n    \t//放置所有项的g元素\r\n    \tif(!self.itemsContainer) {\r\n    \t\tvar itemsContainer = new BaseComponent();\r\n            itemsContainer.className(\"scatter-ItemsContainer\");\r\n            self.addChild(itemsContainer);\r\n            self.itemsContainer = itemsContainer;\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n        //只用当前可见的项作为渲染数据源\r\n        var items = self.data().data;\r\n        self.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n        \r\n        //计算布局，获取项数据数组\r\n        self.layout().update();\r\n        \r\n         /*这里先清除所有的项元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n                                    但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n        var itemsContainer = self.itemsContainer;\r\n        if(self.layout().isTimeLine()) {\r\n\t        SvgUtil.removeAllChildren(itemsContainer.node());\r\n        }\r\n        self.nodesIns.length = 0;\r\n        \r\n        //渲染节点\r\n        var horAxis, verAxis, xPadding = 0, yPadding = 0;\r\n        if(self.horAxis()) {\r\n        \thorAxis = self.horAxis();\r\n        \txPadding = horAxis.padding();\r\n        }\r\n        if(self.verAxis()) {\r\n        \tverAxis = self.verAxis();\r\n            yPadding = verAxis.padding();\r\n        }\r\n        var itemsContainer = self.itemsContainer.mainContainer(), \r\n            defaultColor = ColorUtil.getColor(self.seriesIndex());\r\n        self.itemsContainer.x(xPadding.left);\r\n        self.itemsContainer.y(yPadding.top);\r\n        //只用当前可见的节点作为渲染数据源\r\n        var nodesData = self.visibleItems();\r\n        var diffKey = self.diffKey();\r\n        if(self.layout().isTimeLine()) {\r\n        \titemsContainer.selectAll(\"rect.scatter-point\").data(nodesData, self.bindKeyFn)\r\n        \t    .enter().append(\"rect\")\r\n                .attr(\"class\", \"scatter-point\")\r\n                .attr(\"y\", function(d) {\r\n                    return d.y;\r\n                })\r\n                .attr(\"x\", function(d) {\r\n                    return d.x;\r\n                })\r\n                .attr(\"width\", function(d) {\r\n                    return d.dx;\r\n                })\r\n                .attr(\"height\", function(d) {\r\n                    return d.dy;\r\n                })\r\n                .attr(\"fill\",  function(d) {\r\n                    return d.hasOwnProperty(\"legendColor\") ? d.legendColor :　defaultColor;\r\n                })\r\n                .attr(\"stroke\", function(d) {\r\n                    return d.hasOwnProperty(\"legendColor\") ? d.legendColor :　defaultColor;\r\n                })\r\n                .each(function(d) {\r\n                    d.legendIns = d3.select(this);\r\n                })\r\n                .on('click', function(d) {\r\n                    var evt = EventUtil.createCustomEvent(BaseEvent.NODE_CLICK, true, true, d);\r\n                    d3.select(this).node().dispatchEvent(evt);\r\n                });\r\n        } else {\r\n            //若节点渲染器是一个组件，则重新设置一些配置数据\r\n        \tvar isChartRenderer = false;\r\n            for(var i = 0, len = nodesData.length; i < len; i++) {\r\n                var nodeData = nodesData[i];\r\n                var rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n                if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n                \tisChartRenderer = true;\r\n                    var chartData, series = rendererConfig.series;\r\n                    for(var j = 0, len1 = series.length; j < len1; j++) {\r\n                        chartData = series[j];\r\n                        //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n                        chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n                        chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n                        //pie的位置特殊处理\r\n                        if(chartData.type === \"pie\") {\r\n                            chartData.x = -chartData.width / 2;\r\n                            chartData.y = -chartData.height / 2;\r\n                        }\r\n                        //组装图表数据\r\n                        DataParser.createChartData(chartData, nodeData);\r\n                    }\r\n                }\r\n            }\r\n            //渲染节点内容\r\n            if(isChartRenderer) {\r\n            \tSvgUtil.removeAllChildren(itemsContainer.node());\r\n\t            var nodesIns = ClassFactory.newRenderersInstanceByData(self.itemsContainer, self, \"scatter-point\", nodesData);\r\n                if(nodesIns) {\r\n                    for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n                        nodeIns = nodesIns[i];\r\n                        self.nodesIns.push(nodeIns);\r\n                    }\r\n                }\r\n            } else {\r\n            \tvar pointUpdate = itemsContainer.selectAll(\".scatter-point\")\r\n                   .data(nodesData, self.bindKeyFn);\r\n                var pointExit = pointUpdate.exit();\r\n                pointExit.each(function(d) {\r\n                \tvar key = self.bindKeyFn(d);\r\n                \tif(nodesInsMap.hasOwnProperty(key)) {\r\n                \t\tdelete nodesInsMap[key];\r\n                \t}\r\n                }).remove();\r\n                \r\n                //update\r\n                pointUpdate.each(function(d) {\r\n                \tvar key = self.bindKeyFn(d);\r\n                    var ins = nodesInsMap[key];\r\n                    if(ins) {\r\n                    \tins.data(d);\r\n                        ins.update(true);\r\n                        d.ins = ins;\r\n                        d.legendIns = ins;\r\n                        self.nodesIns.push(ins);\r\n                    }\r\n                });\r\n                \r\n                //add\r\n                var pointsEnter = pointUpdate.enter();\r\n                pointsEnter.each(function(d){\r\n                    if(!d.hasOwnProperty(\"legendColor\")) {\r\n                        d.legendColor = defaultColor;\r\n                    }\r\n                    var rendererConfig = self.getRendererConfig(d, \"fill\");\r\n                    var clazz = d.hasOwnProperty(\"renderer\") ? rendererConfig.clazz : \"circleShape\";\r\n                    var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n                    nodeIns.className(\"scatter-point\");\r\n                    nodeIns.render();\r\n                    d.ins = nodeIns;\r\n                    d.legendIns = nodeIns;\r\n                    self.nodesIns.push(nodeIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    nodesInsMap[key] = nodeIns;\r\n                });\r\n            }\r\n        }\r\n        \r\n        self.renderPosition();\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Scatter info: \"  +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    Scatter.clazzName = \"Scatter\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nScatter.struct = function(ghca_charts) {\r\n    var BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    BaseChart.struct(ghca_charts);\r\n    Scatter.prototype = Object.create(BaseChart.prototype);\r\n    Scatter.prototype.constructor = Scatter;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Scatter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/scatter.js\n// module id = 42\n// module chunks = 0","// 旭日图类\r\n\t\r\n/**\r\n * 构造方法\r\n * @param _data 旭日图配置数据\r\n * @param _layout 旭日图布局对象，不传就为默认布局\r\n */\r\nvar Sunburst = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const PercentageInfo = ghca_charts.view.elements.plugins.tool.percentageInfo;\r\n    const ToolTip = ghca_charts.view.elements.plugins.tool.toolTip;\r\n    const ObjectUtil =  ghca_charts.view.util.objectUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const Label = ghca_charts.view.elements.plugins.label.label;\r\n\r\n    BaseChart.apply(this, arguments);\r\n\r\n    var self = this,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRefreshData = self.refreshData,\r\n        superRenderPosition = self.renderPosition;\r\n\r\n    self.className(\"sunburst\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"isFillMiddle\", \"isShowNavigation\");\r\n\r\n    // Breadcrumb dimensions: width, height, spacing, width of tip/tail.\r\n    var b = {\r\n        w: 75, h: 30, s: 3, t: 10\r\n    };\r\n\r\n    var defaultWidth = 300;\r\n    var percentageDefaultFontSize= 30;\r\n    var percentageInfo;\r\n    var totalSize = 0;\r\n    var isInit = true;\r\n    var oldLabelPos = \"innerRing\";\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // nodeInsMap\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 节点实例map\r\n     */\r\n    var nodeInsMap = d3.map();\r\n    this.nodeInsMap = function(){\r\n        return nodeInsMap;\r\n    }\r\n\r\n    // ------------------------------\r\n    // isFillMiddle\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 是否把中间部分填满\r\n     */\r\n    var isFillMiddle = false;\r\n    this.isFillMiddle = function(){\r\n        if(!arguments.length)return isFillMiddle;\r\n        isFillMiddle = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // isShowNavigation\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 是否显示上方导航元素\r\n     */\r\n    var isShowNavigation = true;\r\n    this.isShowNavigation = function(){\r\n        if(!arguments.length)return isShowNavigation;\r\n        isShowNavigation = arguments[0];\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n    };\r\n\r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        //放置所有项的g元素\r\n        self.sunburstContainer =  self.mainContainer().append(\"g\").attr(\"class\", \"sunburst-Container\");\r\n        //所有扇形元素\r\n        self.arcsContainer = self.sunburstContainer.append(\"g\").attr(\"class\", \"sunburst-arcsContainer\");\r\n        //中间显示百分比元素\r\n        self.percentageContainer = self.sunburstContainer.append(\"g\").attr(\"class\", \"percentage-labelsContainer\");\r\n        //上方导航元素\r\n        self.navigationContainer =  self.mainContainer().append(\"g\").attr(\"class\", \"navigation-Container\");\r\n        //环信息元素\r\n        self.ringInfoContainer =  self.sunburstContainer.append(\"g\").attr(\"class\", \"ringInfo-Container\");\r\n\r\n        // percentageInfo = classFactory.newPluginInstance(\"percentageinfo\",[self.percentageContainer,{name:\"\",value:\"111\"}]);\r\n        percentageInfo = new PercentageInfo(self.percentageContainer,{value:\"\"});\r\n        percentageInfo.config(self.data().percentageInfo);\r\n    };\r\n\r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n        \r\n        self.sunburstContainer.on(\"mouseleave\", mouseleaveHandler);\r\n    };\r\n\r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n    this.refreshData = function() {\r\n        superRefreshData();\r\n    };\r\n\r\n    /**\r\n     * 渲染图表内容相关位置\r\n     */\r\n    this.renderPosition = function() {\r\n        superRenderPosition();\r\n        //旭日图内容居中\r\n        self.sunburstContainer.attr(\"transform\", function() {\r\n            return \"translate(\" + self.width()/2 + \",\" + self.height()/2 + \")\";\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n    \t\r\n    \t//当渲染器标签位置变换时，删除所有节点实例重新渲染，仅通过外部setConfigPropertyAndUpdate设置的配置有效 - start\r\n    \tvar labelPos = \"innerRing\";\r\n    \ttry {\r\n    \t\tlabelPos = self.data().renderers.node.clazzProperties.labelPos;\r\n    \t} catch(e) {\r\n    \t\tlabelPos = oldLabelPos;\r\n    \t}\r\n    \tif(labelPos !== oldLabelPos) {\r\n    \t\toldLabelPos = labelPos;\r\n    \t\tself.arcsContainer.selectAll(\"*\").remove();\r\n    \t}\r\n    \t//当渲染器标签位置变换时，删除所有节点实例重新渲染，仅通过外部setConfigPropertyAndUpdate设置的配置有效 - end\r\n    \t\r\n        self.navigationContainer.selectAll(\"*\").remove();\r\n        \r\n        if(!self.data() ||　!ObjectUtil.isArray(self.data().nodes) || self.data().nodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        self.layout().visibleData(self.filterArrayByElementProperty(self.data().nodes,\"visible\",true));\r\n        self.layout().radius(Math.min(self.width(), self.height()) / 2 - 35);\r\n        self.layout().update();\r\n        \r\n        // Bounding circle underneath the sunburst, to make it easier to detect\r\n        // when the mouse leaves the parent g.\r\n        if(!self.arcsCircle) {\r\n        \tself.arcsCircle = self.arcsContainer.append(\"svg:circle\").style(\"opacity\", 0);\r\n        }\r\n        self.arcsCircle.attr(\"r\", self.layout().radius());\r\n        \r\n        //render items\r\n        var diffKey = self.diffKey();\r\n        var sunburstItemsUpdate = self.arcsContainer.selectAll(\"g.sunburst-item\")\r\n            .data(self.layout().nodes(), function(d, i) {\r\n                return (diffKey && d[diffKey]) ? d[diffKey] : d.data.id;\r\n            });\r\n        //delete\r\n        sunburstItemsUpdate.exit().each(function(d) {\r\n            var id = d.data.id;\r\n            var main = self.mainContainer();\r\n            main.select(self.graph().getCustomId(\"#labelCon_\",id)).remove();\r\n            main.select(self.graph().getCustomId(\"#polyline_\",id)).remove();\r\n            var ins = self.nodeInsMap().get(id);\r\n            if(ins) {\r\n            \tins.polyline = null;\r\n            }\r\n            self.nodeInsMap().remove(id);\r\n            d3.select(this).remove();\r\n        });\r\n        //update\r\n        sunburstItemsUpdate.each(function(d) {\r\n            var ins = self.nodeInsMap().get(d.data.id);\r\n            if(ins) {\r\n            \tself.getRendererConfig(d.data, \"fill\");//把渲染器配置信息刷新到渲染器实例数据里面\r\n                ins.update(d);\r\n            }\r\n        });\r\n        //add\r\n        var sunburstItemsEnter = sunburstItemsUpdate.enter().append(\"g\")\r\n            .attr(\"class\", \"sunburst-item\")\r\n            .on(\"mouseover\", mouseOverHandler)\r\n            .each(function(d){\r\n                if(!d.data || !d.parent) {\r\n                    return;\r\n                }\r\n                var rendererConfig = self.getRendererConfig(d.data, \"fill\");\r\n                var clazz = (rendererConfig && rendererConfig.clazz) ? rendererConfig.clazz : \"sunburstNode\";\r\n                var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d, self]);\r\n                nodeIns.isChartFirstInit(isInit);\r\n                nodeIns.graph(self.graph());\r\n                nodeIns.render();\r\n                self.nodeInsMap().set(d.data.id, nodeIns);\r\n                d.data.legendIns = d3.select(this);\r\n            });\r\n        \r\n        updateRingInfo(self.layout().nodes());\r\n\r\n        totalSize = sunburstItemsUpdate.merge(sunburstItemsEnter).datum().value;\r\n        isInit = false;\r\n    };\r\n    \r\n    //override\r\n    this.filterArrayByElementProperty = function(nodes, name, value) {\r\n        var visibleNodes = [],unvisibleNodeKeys = [];\r\n        function contains(d){\r\n            var i = unvisibleNodeKeys.length;\r\n            while (i--) {\r\n                if (unvisibleNodeKeys[i] === d) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        var idField = self.data()[\"idField\"],\r\n            parentField = self.data()[\"parentField\"];\r\n        nodes.forEach(function(node){\r\n            if((node[name]==undefined || node[name]==true) && !contains(node[parentField])){\r\n                visibleNodes.push(node);\r\n            }else{\r\n                unvisibleNodeKeys.push(node[idField]);\r\n            }\r\n        });\r\n        return visibleNodes;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var mouseOverHandler = function(d) {\r\n        d3.event.stopPropagation();\r\n        \r\n        var sequenceArray = d.ancestors().reverse();\r\n        var root = sequenceArray.shift(); // remove root node from the array\r\n\r\n        updatePercentageInfo(d,root);\r\n        updateBreadcrumbs(sequenceArray,root);\r\n\r\n        var paths = self.arcsContainer.selectAll(\"g.sunburstNode path\")\r\n            .style(\"fill-opacity\", 0.1)//这里用fill-opacity是因为opacity在chrome里渲染有问题\r\n            .each(function(d) {\r\n                visibleLabel(d, 0.1);\r\n            });\r\n            \r\n        paths\r\n            .filter(function(node) {\r\n            \tfor(var i = 0, id = node.data.id, len = sequenceArray.length; i < len; i++) {\r\n            \t\tif(sequenceArray[i].data.id === id) {\r\n            \t\t\treturn true;\r\n            \t\t}\r\n            \t}\r\n                return false;\r\n            })\r\n            .style(\"fill-opacity\", 1)\r\n            .each(function(d) {\r\n                visibleLabel(d, 1);\r\n            });\r\n    };\r\n    \r\n    var mouseleaveHandler = function() {\r\n    \tif(self.isShowNavigation()) {\r\n    \t\tself.navigationContainer.style(\"visibility\", \"hidden\");\r\n    \t}\r\n\r\n        // Transition each segment to full opacity and then reactivate it.\r\n        self.arcsContainer.selectAll(\"g.sunburstNode path\")\r\n            .style(\"fill-opacity\", 1)\r\n            .each(function(d) {\r\n            \tvisibleLabel(d, 1);\r\n            });\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var visibleLabel = function(d, opacity) {\r\n    \tvar id = d.data.id;\r\n        var main = self.mainContainer();\r\n        main.select(self.graph().getCustomId(\"#labelCon_\",id)).style(\"fill-opacity\", opacity);\r\n        main.select(self.graph().getCustomId(\"#polyline_\",id)).style(\"opacity\", opacity);\r\n    };\r\n    \r\n    var updateRingInfo = function(nodes) {\r\n    \t//remove content\r\n        self.ringInfoContainer.selectAll(\"polyline\").remove();\r\n        self.ringInfoContainer.selectAll(\"g.label\").remove();\r\n        \r\n        var ringInfoData = self.data().ringInfo;\r\n        if(!ringInfoData) {\r\n        \treturn;\r\n        }\r\n        var ringInfoVisible = ringInfoData.visible !== false;\r\n        if(!ringInfoVisible) {\r\n            return;\r\n        }\r\n        var gap = isNaN(ringInfoData.gap) ? 5 : ringInfoData.gap ;\r\n        var labelData = ringInfoData.label;\r\n        var lineData = ringInfoData.line;\r\n        \r\n        //create ring info data\r\n        var infosObj = {};\r\n        for(var d, info, i = 0, len = nodes.length; i < len; i++) {\r\n        \td = nodes[i];\r\n        \tif(d.visible === false) {\r\n        \t\tcontinue;\r\n        \t}\r\n        \tinfo = infosObj[d.depth];\r\n        \tif(!info) {\r\n        \t\tinfo = {depth:d.depth};\r\n        \t\tinfo.total = 1;\r\n        \t\tinfo.name = d.data && d.data.groupName ? d.data.groupName : \"\";\r\n        \t\tinfo.innerRadius = d.innerRadius;\r\n        \t\tinfo.outerRadius = d.outerRadius;\r\n        \t\tinfo.startAngle = 0;\r\n        \t\tinfo.endAngle = Math.PI;\r\n        \t\tinfo.data = d;\r\n        \t\tinfosObj[d.depth] = info;\r\n        \t} else {\r\n        \t\tinfo.total++;\r\n        \t}\r\n        }\r\n        var infos = [];\r\n        for(var key in infosObj) {\r\n        \tinfos.push(infosObj[key]);\r\n        }\r\n        if(infos.length > 1) {\r\n        \tinfos.sort(function(a, b) {\r\n                return a.depth - b.depth;\r\n            });\r\n        }\r\n        \r\n        //render content\r\n        var transition = d3.transition().delay(self.animation() ? isInit ? 500 : 0 : 0)\r\n            .duration(self.animation() ? 1000 : 0).ease(d3.easeExpOut);\r\n        for(var i = 0, len = infos.length; i < len; i++) {\r\n        \tvar ud = infos[i];\r\n        \tif(ud.depth === 0) {\r\n        \t\tcontinue;\r\n        \t}\r\n        \t\r\n        \t//render polyline\r\n            var ir = ud.innerRadius;\r\n            var or = ud.outerRadius;\r\n            var distance = or * 0.2;\r\n            distance = distance < 10 ? 10 : (distance > 20 ? 20 : distance);\r\n            var outerArc1 = d3.arc().innerRadius(ir).outerRadius(or);\r\n            var outerArcRadius = self.layout().radius() + 35 + distance;\r\n            var outerArc2 = d3.arc().innerRadius(outerArcRadius).outerRadius(outerArcRadius);\r\n            ud.outerArc1 = outerArc1;\r\n            ud.outerArc2 = outerArc2;\r\n            ud.lineSize = isNaN(lineData.lineSize) ? 20 : lineData.lineSize;\r\n            \r\n            var lineStyle = lineData.style;\r\n            var polyline = self.ringInfoContainer.append(\"polyline\");\r\n            polyline.datum(ud)\r\n            ElementUtil.setElementStyles(polyline, lineStyle);\r\n            polyline.attr(\"fill\", \"none\")\r\n                .transition(transition)\r\n                .attrTween(\"points\", polylineRenderTween);\r\n                \r\n            //render label\r\n            var label = new Label(self.ringInfoContainer, ud);\r\n            label.config(labelData.config);\r\n            label.render();\r\n            var pos = polylineRenderTween(ud)(1)[2];\r\n            pos[0] += gap;\r\n            pos[1] -= label.mainContainer().node().getBBox().height / 2;\r\n            label.mainContainer()\r\n                .attr(\"opacity\", 0)\r\n                .attr(\"cursor\", \"default\")\r\n                .attr(\"transform\", \"translate(\" + [pos[0] + 100, pos[1]] + \")\")\r\n                .on(\"mousedown\", function(d) {\r\n                    var evt = EventUtil.createCustomEvent(BaseEvent.RING_LABEL_CLICK, true, true, d);\r\n                    d3.select(this).node().dispatchEvent(evt);\r\n                })\r\n                .transition(transition)\r\n                .attr(\"opacity\", 1)\r\n                .attr(\"transform\", \"translate(\" + pos + \")\");\r\n        }\r\n    };\r\n    \r\n    var midAngle = function (d){\r\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n    };\r\n    \r\n    var polylineRenderTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n        this._current = interpolate(0);\r\n        var outerArc1 = d.outerArc1;\r\n        var outerArc2 = d.outerArc2;\r\n        var r = self.layout().radius() + 5;\r\n        return function(t) {\r\n            var d2 = interpolate(t);\r\n            var startP = outerArc1.centroid(d2);\r\n            var centerP = [r, -(r-startP[0])];\r\n            var endP = [centerP[0], centerP[1]];\r\n            centerP[1] = (centerP[1] - startP[1]) * t + startP[1];\r\n            endP[1] = (endP[1] - startP[1]) * t + startP[1];\r\n            endP[0] += d.lineSize * (midAngle(d2) < Math.PI ? 1 : -1);\r\n            return [startP, centerP, endP];\r\n        };          \r\n    };\r\n\r\n    var updatePercentageInfo = function(d, root) {\r\n    \tif(!self.data().percentageInfo || !self.data().percentageInfo.visible === false) {\r\n    \t\treturn;\r\n    \t}\r\n        var r = root.outerRadius;\r\n        var percentage = (100 * d.data.value / totalSize).toPrecision(3);\r\n        var percentageString = percentage + \"%\";\r\n        if (percentage < 0.1) {\r\n            percentageString = \"< 0.1%\";\r\n        }\r\n        var length = percentageString.length;\r\n        var fontSize = r*2/(length-1);\r\n        //更改字体大小，适应窗口大小\r\n        // percentageInfo.config().label.config.fontSize = defaultWidth/ Math.min(self.width(), self.height())*percentageDefaultFontSize;\r\n        percentageInfo.config().label.config.fontSize = fontSize;\r\n        percentageInfo.data({value:percentageString});\r\n        percentageInfo.render();\r\n    \tself.percentageContainer.style(\"visibility\", \"\");\r\n    };\r\n\r\n    // Update the breadcrumb trail to show the current sequence and percentage.\r\n    var updateBreadcrumbs = function(nodeArray) {\r\n        if(!self.isShowNavigation()) {\r\n        \treturn;\r\n        }\r\n        var count = Math.floor(self.width()/(b.w+b.s));\r\n        var secondArray = [];\r\n        if(nodeArray.length>count){\r\n            var i=0,n=nodeArray.length-count;\r\n            for(i=0;i<n;i++){\r\n                secondArray.push(nodeArray[count+i]);\r\n            }\r\n            nodeArray.splice(count-1,n);\r\n        }\r\n        initBreadcrumbs(nodeArray,0);\r\n        initBreadcrumbs(secondArray,1);\r\n    };\r\n    \r\n    var initBreadcrumbs = function(nodeArray, rows) {\r\n        // Data join; key function combines name and depth (= position in sequence).\r\n        var trail = self.navigationContainer.selectAll(rows==0?\"g.first\":\"g.second\")\r\n            .data(nodeArray, function(d) { return d.data.id; });\r\n\r\n        // Remove exiting nodes.\r\n        trail.exit().remove();\r\n\r\n        // Add breadcrumb and label for entering nodes.\r\n        var entering = trail.enter().append(\"svg:g\").attr(\"class\",rows==0?\"first\":\"second\");\r\n        entering.append(\"svg:polygon\")\r\n            .attr(\"points\", function breadcrumbPoints(d, i) {\r\n                var points = [];\r\n                points.push(\"0,\"+rows*(b.h+b.s));\r\n                points.push(b.w + \",\"+rows*(b.h+b.s));\r\n                points.push(b.w + b.t + \",\" + (b.h / 2+rows*(b.h+b.s)));\r\n                points.push(b.w + \",\" + (b.h+rows*(b.h+b.s)));\r\n                points.push(\"0,\" + (b.h+rows*(b.h+b.s)));\r\n                if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.\r\n                    points.push(b.t + \",\" + (b.h / 2+rows*(b.h+b.s)));\r\n                }\r\n                return points.join(\" \");\r\n            })\r\n            .style(\"fill\", function(d) { return d.data.legendColor; });\r\n\r\n        entering.append(\"svg:text\")\r\n            .attr(\"x\", (b.w + b.t) / 2 + 3)\r\n            .attr(\"y\", b.h*rows+b.h / 2)\r\n            .attr(\"dy\", \"0.35em\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"12px\")\r\n            .style(\"font-family\", \"微软雅黑\")\r\n            .each(function(d) {\r\n                var text = d3.select(this);\r\n                var content = d.data.name;\r\n                var texts = StringUtil.splitByLine(content, b.w - 12, 12, 1);\r\n                text.selectAll(\"tspan\")\r\n                    .data(texts)\r\n                    .enter()\r\n                    .append(\"tspan\")\r\n                    .text(function(d) {\r\n                        return d;\r\n                    });\r\n                text.attr(\"title\", content.indexOf(\"...\") !== -1 ? content : \"\");\r\n            })\r\n\r\n        // Merge enter and update selections; set position for all nodes.\r\n        entering.merge(trail).attr(\"transform\", function(d, i) {\r\n            return \"translate(\" + i * (b.w + b.s) + \", 0)\";\r\n        });\r\n\r\n        // Make the breadcrumb trail visible, if it's hidden.\r\n        self.navigationContainer.style(\"visibility\", \"\");\r\n    };\r\n\r\n    Sunburst.clazzName = \"sunburst\";\r\n    \r\n    // 初始化\r\n    this.init();\r\n};\r\n\r\nSunburst.struct = function(ghca_charts) {\r\n\tvar BaseChart = ghca_charts.view.component.charts.baseChart;\r\n\tBaseChart.struct(ghca_charts);\r\n    Sunburst.prototype = Object.create(BaseChart.prototype);\r\n    Sunburst.prototype.constructor = Sunburst;\r\n};\r\n\r\nmodule.exports = Sunburst;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/sunburst.js\n// module id = 43\n// module chunks = 0","// 拓扑图类\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data 拓扑图配置数据\r\n * @param _layout 拓扑图布局对象，不传就为默认布局\r\n */\r\nvar Topology = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const TopoLayout = ghca_charts.layout.topoLayout;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const DataParser = ghca_charts.view.util.dataParser;\r\n    const Const = ghca_charts.view.util.constant;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const Node = ghca_charts.view.elements.plugins.nodes.node;\r\n    const math = ghca_charts.view.util.math;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const MouseUtil = ghca_charts.view.util.mouseUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n\tBaseChart.apply(this, arguments);\r\n\t\r\n\tvar self = this,\r\n\t\tsuperInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        superSetData = self.setData,\r\n        nodesInsMap = {},\r\n        linksInsMap = {},\r\n        groupsInsMap = {},\r\n        isInFocus = false,\r\n        isValidateMode = false,\r\n        changeData = {\r\n            nodes:{enter:{}, update:{}}, \r\n            links:{enter:{}, update:{}}, \r\n            groups:{enter:{}, update:{}}\r\n        };//数据变更集\r\n\r\n    self.className(\"seriesTopo\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"showLevel\", \"mode\", \"focusEffect\", \"mouseOverFocusEffect\");\r\n    \r\n\t// --------------------------------------------------------------------------\r\n\t//\r\n\t// Attributes\r\n\t//\r\n\t// --------------------------------------------------------------------------\r\n\r\n\t// ------------------------------\r\n    // showLevel\r\n    // ------------------------------\r\n\t\r\n\t/**\r\n     * 设置节点显示层级，默认全部节点都显示\r\n     * (暂时没有实现)\r\n     */\r\n\tvar showLevel = Topology.SHOW_ALL_LEVEL_NODES;\r\n    this.showLevel = function(value) {\r\n        if (!arguments.length)\r\n            return showLevel;\r\n        showLevel = value;\r\n        if(_data) {\r\n            _data.showLevel = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // mode\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 组件模式，normal|edit，默认为普通模式\r\n     */\r\n    var mode = Topology.MODE_NORMAL;\r\n    this.mode = function(value) {\r\n        if (!arguments.length)\r\n            return mode;\r\n        if(mode !== value) {\r\n        \tisValidateMode = true;\r\n        }\r\n        mode = value;\r\n        if(_data) {\r\n        \t_data.mode = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // focusEffect\r\n    // ------------------------------\r\n        \r\n    /**\r\n     * 鼠标单击节点时，是否显示凸显效果(默认值true)\r\n     */\r\n    var focusEffect = true;\r\n    this.focusEffect = function(value) {\r\n        if (!arguments.length) return focusEffect;\r\n        focusEffect = value;\r\n        if(_data) {\r\n            _data.focusEffect = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // mouseOverFocusEffect\r\n    // ------------------------------\r\n        \r\n    /**\r\n     * 鼠标单击节点时，是否显示凸显效果(默认值false)\r\n     */\r\n    var mouseOverFocusEffect = false;\r\n    this.mouseOverFocusEffect = function(value) {\r\n        if (!arguments.length) return mouseOverFocusEffect;\r\n        mouseOverFocusEffect = value;\r\n        if(_data) {\r\n            _data.mouseOverFocusEffect = value;\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // isEditMode\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 组件是否处于编辑模式，默认为否\r\n     */\r\n    this.isEditMode = function() {\r\n        return mode === Topology.MODE_EDIT;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // selectedItems\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前选中的项数据对象数组\r\n     */\r\n    var selectedItems = [];\r\n    this.selectedItems = function(value) {\r\n        if (!arguments.length)\r\n            return selectedItems;\r\n        selectedItems = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        self.nodes = self.layout().nodes();\r\n        self.links = self.layout().links();\r\n        self.groups = [];\r\n        self.nodesIns = [];\r\n        self.linksIns = [];\r\n        self.groupsIns = [];\r\n        \r\n        //添加初始化数据中的所有节点和连线和节点分组内容\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n        self.addGroups(self.data().groups);\r\n        \r\n        self.visibleItems(self.nodes);\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        \r\n        //放置所有连线节点组背景的g元素\r\n        var groupsContainer = new BaseComponent();\r\n        groupsContainer.className(\"topo-groupsContainer\");\r\n        self.addChild(groupsContainer);\r\n        groupsContainer.mainContainer().attr(\"pointer-events\", \"none\");\r\n        self.groupsContainer = groupsContainer;\r\n        \r\n        //放置所有连线的g元素\r\n        var linksContainer = new BaseComponent();\r\n        linksContainer.className(\"topo-linksContainer\");\r\n        self.addChild(linksContainer);\r\n        self.linksContainer = linksContainer;\r\n        \r\n        //放置所有节点的g元素\r\n        var nodesContainer = new BaseComponent();\r\n        nodesContainer.className(\"topo-nodesContainer\");\r\n        self.addChild(nodesContainer);\r\n        self.nodesContainer = nodesContainer;\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n        //若点不固定，则添加实时刷新数据监听\r\n\r\n        self.model.on(\"tick\", self.tickHandler);\r\n        self.model.on(\"end\", self.tickEndHandler);\r\n\r\n        self.addEventListener(BaseEvent.MODE_CHANGE, modeChangeHandler);\r\n        //self.addEventListener(BaseEvent.EV_EVENT_OPEN_EDIT, openEditHandler);\r\n        self.addEventListener(BaseEvent.SEARCH_TEXT, searchTextHandler);\r\n        self.addEventListener(BaseEvent.TOPO_NODE_FOCUS_IN, topoNodeFocusInHandler);\r\n        \r\n        self.mainContainer().node().addEventListener(BaseEvent.EAGLE_EYE_DRAG, function(e) {\r\n            event.stopImmediatePropagation();\r\n            var detail = e.detail;\r\n            self.x(detail.x);\r\n            self.y(detail.y);\r\n            self.renderTransform();\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n        superRefreshData();\r\n        var  nodes = self.nodes,\r\n             links = self.links,\r\n             groups = self.groups,\r\n             level = self.showLevel();\r\n        \r\n        //根据showLevel设置每一个节点是否可见，以及是否展开\r\n        for(var node, nodeLevel, nodeEnabledExpand, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            node.bindKey = i;\r\n            if(node.hasOwnProperty(\"visible\")) {\r\n                continue;\r\n            }\r\n            nodeLevel = node.level === undefined ? 0 : node.level;  \r\n            nodeEnabledExpand = node.enabledExpand === undefined ? false : node.enabledExpand;  \r\n            if(nodeLevel < level) {\r\n                node.visible = true;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = true;\r\n                }\r\n            } else if(nodeLevel == level) {\r\n                node.visible = true;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = false;\r\n                }\r\n            } else {\r\n                node.visible = false;\r\n                if(nodeEnabledExpand) {\r\n                    node.isExpanded = false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(var link, i = 0, len = links.length; i < len; i++) {\r\n            link = links[i];\r\n            link.bindKey = i;\r\n            if(link.hasOwnProperty(\"visible\")) {\r\n                continue;\r\n            }\r\n            link.visible = true;\r\n        }\r\n        \r\n        for(var group, i = 0, len = groups.length; i < len; i++) {\r\n            group = groups[i];\r\n            group.bindKey = i;\r\n            if(group.hasOwnProperty(\"visible\")) {\r\n                continue;\r\n            }\r\n            group.visible = true;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置\r\n     * @param isRenderByChange 是否根据当前变更集渲染\r\n     */\r\n    this.renderPosition = function(isRenderByChange) {\r\n        superRenderPosition();\r\n        \r\n        var nodesIns = self.nodesIns;\r\n        for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().each(function(d) {\r\n            \t//在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n                if(isRenderByChange && !isItemInChangeData(d, changeData.nodes.enter)) {\r\n                    return;\r\n                }\r\n                nodeIns.x(Math.round(d.x));\r\n                nodeIns.y(Math.round(d.y));\r\n                nodeIns.renderTransform();\r\n            });\r\n        }\r\n        \r\n        var linksIns = self.linksIns;\r\n        for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n            linkIns = linksIns[i];\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isRenderByChange && !isItemInChangeData(linkIns.mainContainer().node().__data__, changeData.links.enter)) {\r\n                continue;\r\n            }\r\n            if(linkIns.normalChild()){\r\n                linkIns.normalChild().update();\r\n            } else {\r\n                linkIns.render();\r\n            }\r\n        }\r\n        \r\n        //刷新所有节点组path数据\r\n        refreshGroupsData();\r\n        var groupsIns = self.groupsIns;\r\n        for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n            groupIns = groupsIns[i];\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isRenderByChange && !isItemInChangeData(groupIns.mainContainer().node().__data__, changeData.groups.enter)) {\r\n                continue;\r\n            }\r\n            if(groupIns.normalChild()){\r\n                groupIns.normalChild().update();\r\n            } else {\r\n                groupIns.render();\r\n            }\r\n        }\r\n\r\n        //延时触发鹰眼变更\r\n        self.useEagleEye() && self.sendMsgToEye(fireContentChange, 1000);\r\n    };\r\n    \r\n    /**\r\n     * 渲染鼠标拖动对象以及其相关联的对象的位置 \r\n     */\r\n    this.updateDragedObjectPos = function(d) {\r\n    \tif(!d) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar nodes = [d];\r\n    \tvar nodeIns = d.dragIns;\r\n    \tif(nodeIns) {\r\n    \t\tnodeIns.x(Math.round(d.x));\r\n            nodeIns.y(Math.round(d.y));\r\n            nodeIns.renderTransform();\r\n    \t}\r\n        \r\n        var links = d.links;\r\n        if(ObjectUtil.isArray(links)) {\r\n        \tfor(var link, linkIns, i = 0, len = links.length; i < len; i++) {\r\n        \t\tlink = links[i];\r\n                linkIns = link.dragIns;\r\n                if(!linkIns) {\r\n                \tcontinue;\r\n                }\r\n                if(linkIns.normalChild()){\r\n                    linkIns.normalChild().update();\r\n                } else {\r\n                    linkIns.render();\r\n                }\r\n            }\r\n        }\r\n        \r\n        //刷新相关节点组\r\n        var groups = self.findGroupsByNodes(nodes);\r\n        for(var groupData, groupIns, i = 0, len = groups.length; i < len; i++) {\r\n            groupData = groups[i];\r\n            setGroupPath(groupData);\r\n            \r\n            groupIns = groupData.dragIns;\r\n            if(groupIns.normalChild()) {\r\n                groupIns.normalChild().update();\r\n            } else {\r\n                groupIns.render();\r\n            }\r\n        }\r\n\r\n        //延时触发鹰眼变更\r\n        self.useEagleEye() && self.sendMsgToEye(fireContentChange, 1000);\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     * @param isUpdateByChange 是否按照变更集刷新\r\n     * @param isResize 是否通过resize调用本方法\r\n     */\r\n    this.update = function(isUpdateByChange, isResize) {\r\n    \tif(Global.isDebug) {\r\n    \t\tvar otAll = new Date().getTime();\r\n    \t}\r\n    \t//刷新当前数据\r\n        self.refreshData();\r\n        //只用当前可见的项作为渲染数据源\r\n        self.visibleItems(self.filterArrayByElementProperty(self.nodes, \"visible\", true));\r\n        //计算布局\r\n        self.layout().update(isResize);\r\n        if(Global.isDebug) {\r\n        \tvar nt = new Date().getTime();\r\n            console.log(\"update refreshData and layout cost time \" + (nt-ot1) + \" ms.\");\r\n        }\r\n        \r\n        //更新节点\r\n        updateNodes(isUpdateByChange);\r\n        //更新连线\r\n        updateLinks(isUpdateByChange);\r\n        //更新节点组\r\n        updateGroups(isUpdateByChange);\r\n        \r\n        if(Global.isDebug) {\r\n        \tvar nt = new Date().getTime();\r\n        }\r\n        //若是固定节点模式，移动所有对象正确位置\r\n        if(self.layout().fixed()) {\r\n            self.renderPosition(isUpdateByChange);\r\n        }\r\n        if(Global.isDebug) {\r\n        \tvar nt = new Date().getTime();\r\n            console.log(\"renderPosition cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        \r\n        //清空变更集\r\n        clearChangeData();\r\n        \r\n        //等待初始化完成再验证mode是否改变，否则会出现各种问题\r\n        var timer = setTimeout(function() {\r\n            clearTimeout(timer);\r\n            validateMode();\r\n        }, 0);\r\n        \r\n        if(Global.isDebug) {\r\n        \tvar ntAll = new Date().getTime();\r\n            console.log(\"update cost time \" + (ntAll-otAll) + \" ms.\");\r\n        }\r\n    };\r\n    \r\n//    /**\r\n//     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n//     */\r\n//    this.update = function() {\r\n//        self.refreshData();\r\n//        //只用当前可见的项作为渲染数据源\r\n//        self.visibleItems(self.filterArrayByElementProperty(self.nodes, \"visible\", true));\r\n//        \r\n//        //计算布局\r\n//        self.layout().update();\r\n//        \r\n//        /*这里先清除所有的连线和节点元素，然后再创建新的数据，否则动态添加的数据显示会有重复的问题。\r\n//                                    但是这样做在ie和edge中会造成闪烁，且效率极低，有待优化。*/\r\n//        var linksContainer = self.linksContainer;\r\n//        linksContainer.removeAllChildren();\r\n//        self.linksIns.length = 0;\r\n//        var nodesContainer = self.nodesContainer;\r\n//        nodesContainer.removeAllChildren();\r\n//        self.nodesIns.length = 0;\r\n//        var groupsContainer = self.groupsContainer;\r\n//        groupsContainer.removeAllChildren();\r\n//        self.groupsIns.length = 0;\r\n//        \r\n//        //只用当前可见的节点作为渲染数据源\r\n//        var nodesData = self.visibleItems();\r\n//        //若节点渲染器是一个组件，则重新设置一些配置数据\r\n//        for(var i = 0, len = nodesData.length; i < len; i++) {\r\n//            var nodeData = nodesData[i];\r\n//            var rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n//            if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n//                var chartData, series = rendererConfig.series;\r\n//                for(var j = 0, len1 = series.length; j < len1; j++) {\r\n//                    chartData = series[j];\r\n//                    //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n//                    chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n//                    chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n//                    //pie的位置特殊处理\r\n//                    if(chartData.type === \"pie\") {\r\n//                        rendererConfig.x = -chartData.width / 2;\r\n//                        rendererConfig.y = -chartData.height / 2;\r\n//                    }\r\n//                    //组装图表数据\r\n//                    DataParser.createChartData(chartData, nodeData);\r\n//                }\r\n//            }\r\n//        }\r\n//        //渲染节点内容\r\n//        var nodesIns = ClassFactory.newRenderersInstanceByData(nodesContainer, self, \"nodeContainer\", nodesData);\r\n//        if(nodesIns) {\r\n//            for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n//                nodeIns = nodesIns[i];\r\n//                //添加子节点收放按钮点击监听，可控制节点的展开,合拢\r\n//                nodeIns.addEventListener(\"expandTool_collapsed\", expandToolClickHandler);\r\n//                //添加节点单击监听，点击节点自动居中，显示子级节点，淡化其他节点\r\n//                nodeIns.addEventListener(\"click\", nodeClickHandler);\r\n//                nodeIns.addEventListener(\"mouseover\", nodeMouseOverHandler);\r\n//                nodeIns.addEventListener(\"mouseout\", nodeMouseOutHandler);\r\n//                //添加节点拖拽监听\r\n//                nodeIns.mainContainer().call(d3.drag()\r\n//                    .on(\"start\", self.node_dragStartHandler)\r\n//                    .on(\"drag\", self.node_dragHandler)\r\n//                    .on(\"end\", self.node_dragEndHandler));\r\n//                self.nodesIns.push(nodeIns);\r\n//            }\r\n//        }\r\n//        //只用当前可见的连线作为渲染数据源\r\n//        var linksData = self.getVisibleLinks(self.links);\r\n//        //渲染连线内容   \r\n//        var linksIns = ClassFactory.newRenderersInstanceByData(linksContainer, self, \"linkContainer\", linksData, false, \"stroke\");\r\n//        if(linksIns) {\r\n//            for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n//                linkIns = linksIns[i];\r\n//                self.linksIns.push(linkIns);\r\n//            }\r\n//        }\r\n//        \r\n//        //用当前可见的点渲染节点组\r\n//        var groupsData = self.groups;\r\n//        //刷新所有节点组path数据\r\n//        refreshGroupsData();\r\n//        var groupsIns = ClassFactory.newRenderersInstanceByData(groupsContainer, self, \"groupContainer\", groupsData);\r\n//        if(groupsIns) {\r\n//            for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n//                groupIns = groupsIns[i];\r\n//                self.groupsIns.push(groupIns);\r\n//            }\r\n//        }\r\n//        \r\n//        if(self.layout().fixed()) {\r\n//        \tself.renderPosition();\r\n//        }\r\n//        \r\n//        //等待初始化完成再验证mode是否改变，否则会出现各种问题\r\n//        var timer = setTimeout(function() {\r\n//        \tclearTimeout(timer);\r\n//        \tvalidateMode();\r\n//        }, 0);\r\n//    };\r\n    \r\n    /**\r\n     * 设置数据内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}等\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setData = function(value) {\r\n        var result = superSetData(value);\r\n        \r\n        self.layout().nodes().length = 0;\r\n        self.layout().links().length = 0;\r\n        self.nodes.length = 0;\r\n        self.links.length = 0;\r\n        self.groups.length = 0;\r\n        // self.nodesIns.length = 0;\r\n        // self.linksIns.length = 0;\r\n        // self.groupsIns.length = 0;\r\n        \r\n        //添加初始化数据中的所有节点和连线\r\n        self.addNodes(self.data().nodes);\r\n        self.addLinks(self.data().links);\r\n        self.addGroups(self.data().groups);\r\n        \r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * 更新节点内容\r\n     * @param isUpdateByChange 是否按照变更集刷新\r\n     */\r\n    var updateNodes = function(isUpdateByChange) {\r\n        //只用当前可见的节点作为渲染数据源\r\n        var nodesData = self.visibleItems();\r\n        //渲染节点内容\r\n        var nodesUpdate = self.nodesContainer.mainContainer().selectAll(\"g.nodeContainer\")\r\n            .data(nodesData, self.bindKeyFn);\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //update\r\n        nodesUpdate.each(function(d) {\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isUpdateByChange && !isItemInChangeData(d, changeData.nodes.update)) {\r\n                return;\r\n            }\r\n            //根据配置刷新数据内容\r\n            self.getRendererConfig(d, \"fill\");\r\n            var key = self.bindKeyFn(d);\r\n            var ins = nodesInsMap[key];\r\n            if(ins) {\r\n                var child = ins.normalChild();\r\n                if(child instanceof Plugin) {\r\n                    child.data(d);\r\n                    child.config(d.data.config);\r\n                    child.update();\r\n                    d.ins = child;\r\n                    d.legendIns = child;\r\n                    d.dragIns = ins;\r\n                    return;\r\n                }\r\n                var children = ins.children();\r\n                children.forEach(function(child) {\r\n                    if(child instanceof BaseComponent) {\r\n                        child.setDataAndUpdate(d);\r\n                        d.ins = child;\r\n                        d.legendIns = child;\r\n                        d.dragIns = ins;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"nodes update cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        \r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //enter\r\n        var nodesEnter = [];\r\n        nodesUpdate.enter().each(function(d) {\r\n            nodesEnter.push(d);\r\n            //若节点渲染器是一个组件，则重新设置一些配置数据\r\n            var nodeData = d;\r\n            var rendererConfig = self.getRendererConfig(nodeData, \"fill\");\r\n            if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n                var chartData, series = rendererConfig.series;\r\n                for(var j = 0, len1 = series.length; j < len1; j++) {\r\n                    chartData = series[j];\r\n                    //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n                    chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n                    chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n                    //pie的位置特殊处理\r\n                    if(chartData.type === \"pie\") {\r\n                        rendererConfig.x = -chartData.width / 2;\r\n                        rendererConfig.y = -chartData.height / 2;\r\n                    }\r\n                    //组装图表数据\r\n                    DataParser.createChartData(chartData, nodeData);\r\n                }\r\n            }\r\n            var nodesIns = ClassFactory.newRenderersInstanceByData(self.nodesContainer, self, \"nodeContainer\", [d]);\r\n            if(nodesIns) {\r\n                for(var nodeIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n                    nodeIns = nodesIns[i];\r\n                    //添加子节点收放按钮点击监听，可控制节点的展开,合拢\r\n                    nodeIns.addEventListener(\"expandTool_collapsed\", expandToolClickHandler);\r\n                    //添加节点单击监听，点击节点自动居中，显示子级节点，淡化其他节点\r\n                    nodeIns.addEventListener(\"click\", nodeClickHandler);\r\n                    nodeIns.addEventListener(\"mouseover\", nodeMouseOverHandler);\r\n                    nodeIns.addEventListener(\"mouseout\", nodeMouseOutHandler);\r\n                    //添加节点拖拽监听\r\n                    nodeIns.mainContainer().call(d3.drag()\r\n                        .on(\"start\", self.node_dragStartHandler)\r\n                        .on(\"drag\", self.node_dragHandler)\r\n                        .on(\"end\", self.node_dragEndHandler));\r\n                    self.nodesIns.push(nodeIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    nodesInsMap[key] = nodeIns;\r\n                }\r\n            }\r\n        });\r\n        //添加新建节点数据到变更集\r\n        addItemsToChangeData(nodesEnter, changeData.nodes.enter);\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"nodes enter cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        \r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        \r\n        //delete\r\n        var nodesExit = nodesUpdate.exit();\r\n        nodesExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(nodesInsMap.hasOwnProperty(key)) {\r\n                delete nodesInsMap[key];\r\n            }\r\n            var index = self.nodesIns.indexOf(d.dragIns);\r\n            if(index !== -1) {\r\n                self.nodesIns.splice(index, 1);\r\n            }\r\n        }).remove();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"nodes remove cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 更新连线内容\r\n     * @param isUpdateByChange 是否按照变更集刷新\r\n     */\r\n    var updateLinks = function(isUpdateByChange) {\r\n        //只用当前可见的连线作为渲染数据源\r\n        var linksData = self.getVisibleLinks(self.links);\r\n        //渲染连线内容   \r\n        var linksUpdate = self.linksContainer.mainContainer().selectAll(\"g.linkContainer\")\r\n            .data(linksData, self.bindKeyFn);\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //update\r\n        linksUpdate.each(function(d){\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isUpdateByChange && !isItemInChangeData(d, changeData.links.update)) {\r\n                return;\r\n            }\r\n            //根据配置刷新数据内容\r\n            self.getRendererConfig(d, \"stroke\");\r\n            var key = self.bindKeyFn(d);\r\n            var ins = linksInsMap[key];\r\n            if(ins) {\r\n                var child = ins.normalChild();\r\n                if(child instanceof Plugin) {\r\n                    child.data(d);\r\n                    child.config(d.data.config);\r\n                    child.update();\r\n                    d.ins = child;\r\n                    d.legendIns = child;\r\n                    d.dragIns = ins;\r\n                    return;\r\n                }\r\n                var children = ins.children();\r\n                children.forEach(function(child) {\r\n                    if(child instanceof BaseComponent) {\r\n                        child.setDataAndUpdate(d);\r\n                        d.ins = child;\r\n                        d.legendIns = child;\r\n                        d.dragIns = ins;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"link update cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //enter\r\n        var linksEnter = [];\r\n        linksUpdate.enter().each(function(d) {\r\n            linksEnter.push(d);\r\n            var linksIns = ClassFactory.newRenderersInstanceByData(self.linksContainer, self, \"linkContainer\", [d], false, \"stroke\");\r\n            if(linksIns) {\r\n                for(var linkIns, i = 0, len = linksIns.length; i < len; i++) {\r\n                    linkIns = linksIns[i];\r\n                    self.linksIns.push(linkIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    linksInsMap[key] = linkIns;\r\n                }\r\n            }\r\n        });\r\n        //添加新建连线数据到变更集\r\n        addItemsToChangeData(linksEnter, changeData.links.enter);\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"link enter cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //delete\r\n        var linksExit = linksUpdate.exit();\r\n        linksExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(linksInsMap.hasOwnProperty(key)) {\r\n                delete linksInsMap[key];\r\n            }\r\n            var index = self.linksIns.indexOf(d.dragIns);\r\n            if(index !== -1) {\r\n                self.linksIns.splice(index, 1);\r\n            }\r\n        }).remove();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"link remove cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 更新节点组内容\r\n     * @param isUpdateByChange 是否按照变更集刷新\r\n     */\r\n    var updateGroups = function(isUpdateByChange) {\r\n        //用当前可见的点渲染节点组\r\n        var groupsData = self.groups;\r\n        //刷新所有节点组path数据\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        refreshGroupsData();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"refreshGroupsData cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        var groupsUpdate = self.groupsContainer.mainContainer().selectAll(\"g.groupContainer\")\r\n            .data(groupsData, self.bindKeyFn);\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //update\r\n        groupsUpdate.each(function(d){\r\n            //在按照变更集刷新模式下检测当前数据对象是否在变更集中\r\n            if(isUpdateByChange && !isItemInChangeData(d, changeData.groups.update)) {\r\n                return;\r\n            }\r\n            //根据配置刷新数据内容\r\n            self.getRendererConfig(d, \"fill\");\r\n            var key = self.bindKeyFn(d);\r\n            var ins = groupsInsMap[key];\r\n            if(ins) {\r\n                var child = ins.normalChild();\r\n                if(child instanceof Plugin) {\r\n                    child.data(d);\r\n                    child.update();\r\n                    d.ins = child;\r\n                    d.legendIns = child;\r\n                    d.dragIns = ins;\r\n                    return;\r\n                }\r\n                var children = ins.children();\r\n                children.forEach(function(child) {\r\n                    if(child instanceof BaseComponent) {\r\n                        child.setDataAndUpdate(d);\r\n                        d.ins = child;\r\n                        d.legendIns = child;\r\n                        d.dragIns = ins;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"group update cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //enter\r\n        var groupsEnter = [];\r\n        groupsUpdate.enter().each(function(d) {\r\n            groupsEnter.push(d);\r\n            var groupsIns = ClassFactory.newRenderersInstanceByData(self.groupsContainer, self, \"groupContainer\", [d]);\r\n            if(groupsIns) {\r\n                for(var groupIns, i = 0, len = groupsIns.length; i < len; i++) {\r\n                    groupIns = groupsIns[i];\r\n                    self.groupsIns.push(groupIns);\r\n                    var key = self.bindKeyFn(d);\r\n                    groupsInsMap[key] = groupIns;\r\n                }\r\n            }\r\n        });\r\n        //添加新建节点组数据到变更集\r\n        addItemsToChangeData(groupsEnter, changeData.groups.enter);\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"group enter cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n        if(Global.isDebug) {\r\n            var ot = new Date().getTime();\r\n        }\r\n        //delete\r\n        var groupsExit = groupsUpdate.exit();\r\n        groupsExit.each(function(d) {\r\n            var key = self.bindKeyFn(d);\r\n            if(groupsInsMap.hasOwnProperty(key)) {\r\n                delete groupsInsMap[key];\r\n            }\r\n            var index = self.groupsIns.indexOf(d.dragIns);\r\n            if(index !== -1) {\r\n                self.groupsIns.splice(index, 1);\r\n            }\r\n        }).remove();\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"group remove cost time \" + (nt-ot) + \" ms.\");\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 刷新节点分组路径数据\r\n     */\r\n    var refreshGroupsData = function() {\r\n        var groupsData = self.groups;\r\n        for(var groupData, i = 0, len = groupsData.length; i < len; i++) {\r\n            groupData = groupsData[i];\r\n            setGroupPath(groupData);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 设置节点分组路径字符串数据到节点分组数据对象中\r\n     * @param groupData 节点分组数据对象\r\n     */\r\n    var setGroupPath = function(groupData) {\r\n        //判断整个节点分组是否可见\r\n        if(groupData.visible === false) {\r\n            groupData.path = \"\";\r\n            groupData.pathPoints = [];\r\n            return;\r\n        }\r\n        var nodesData = groupData.nodes, points = [], \r\n        radius = (groupData.data &&　groupData.data.hasOwnProperty(\"radius\")) ? RegexUtil.replace(RegexUtil.dataRegex,groupData.data.radius,groupData): 20, \r\n        extendedSize = (groupData.data &&　groupData.data.hasOwnProperty(\"extendedSize\")) ? groupData.data.extendedSize : 10;\r\n        if(ObjectUtil.isString(radius)&&radius.indexOf(\"{\")!=-1){\r\n            radius=20;\r\n        }\r\n        for(var ins, node, box, halfW, halfH, i = 0, len = nodesData.length; i < len; i++) {\r\n            node = nodesData[i];\r\n            if(!node.visible || !node.ins) {\r\n                continue;\r\n            }\r\n            ins = node.ins;\r\n            box = ins instanceof BaseComponent ? ins.getBBox() : ins.mainPlugin.getBBox();\r\n            halfW = box.width/2 + extendedSize;\r\n            halfH = box.height/2 + extendedSize;\r\n            points.push([node.x - halfW, node.y - halfH]);\r\n            points.push([node.x + halfW, node.y - halfH]);\r\n            points.push([node.x + halfW, node.y + halfH]);\r\n            points.push([node.x - halfW, node.y + halfH]);\r\n        }\r\n        var path = math.pointsToPolygonHullRoundPath(points, radius, false);\r\n        groupData.path = path;\r\n        groupData.pathPoints = points;\r\n    };\r\n    \r\n    var addNodeDragListeners = function() {\r\n        for(var nodeIns, nodesIns = self.nodesIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            //添加节点拖拽监听\r\n            nodeIns.mainContainer().call(d3.drag()\r\n                .on(\"start\", self.node_dragStartHandler)\r\n                .on(\"drag\", self.node_dragHandler)\r\n                .on(\"end\", self.node_dragEndHandler));\r\n        }\r\n    };\r\n    \r\n    var removeNodeDragListeners = function() {\r\n        for(var nodeIns, nodesIns = self.nodesIns, i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            //移除节点拖拽监听\r\n            nodeIns.mainContainer().on(\"mousedown.drag\", null);\r\n        }\r\n    };\r\n    \r\n    var setListenersInNormal = function() {\r\n        self.addDragListeners();\r\n        addNodeDragListeners();\r\n    };\r\n    \r\n    var setListenersInEditLink = function() {\r\n        self.removeDragListeners();\r\n        removeNodeDragListeners();\r\n    };\r\n    \r\n    //override\r\n    this.toJSON = function(isData) {\r\n        var str = \"\";\r\n        var d = self.data();\r\n        if(!d) {\r\n            return str;\r\n        }\r\n        //清除数据属性节点的内容，然后克隆除数据内容外的配置内容，这样做是因为循环引用在toJson的时候会报错\r\n        var nodes = d.nodes;\r\n        var links = d.links;\r\n        var groups = d.groups;\r\n        if(nodes) {\r\n            d.nodes = [];\r\n        }\r\n        if(links) {\r\n            d.links = [];\r\n        }\r\n        if(groups) {\r\n            d.groups = [];\r\n        }\r\n        //根据需要的属性复制数据内容\r\n        var nodeKeys = [\"renderer\", \"id\", \"name\", \"parentId\", \"enabledExpand\", \"visible\", \"x\", \"y\"];\r\n        var linkKeys = [\"renderer\", \"name\",\"source\", \"target\", \"visible\"];\r\n        var groupKeys = [\"renderer\", \"id\", \"name\", \"nodes\", \"visible\"];\r\n        var getData = function(keys, data, isLink) {\r\n        \tvar result = [];\r\n        \tif(isLink) {\r\n        \t\tfor(var d, obj, i = 0, len = data.length; i < len; i++) {\r\n                    d = data[i];\r\n                    obj = {};\r\n                    result.push(obj);\r\n                    for(var key, j = 0, len1 = keys.length; j < len1; j++) {\r\n                        key = keys[j];\r\n                        if(d.hasOwnProperty(key)) {\r\n                        \tif(key === \"source\" || key === \"target\") {\r\n                        \t\tobj[key] = d[key].id;\r\n                        \t} else {\r\n                        \t\tobj[key] = d[key];\r\n                        \t}\r\n                        }\r\n                    }\r\n                }\r\n        \t} else {\r\n        \t\tfor(var d, obj, i = 0, len = data.length; i < len; i++) {\r\n                    d = data[i];\r\n                    obj = {};\r\n                    result.push(obj);\r\n                    for(var key, j = 0, len1 = keys.length; j < len1; j++) {\r\n                        key = keys[j];\r\n                        if(d.hasOwnProperty(key)) {\r\n                        \t//过滤group数据中的nodes元素，只记录节点id\r\n                        \tif(keys === groupKeys && key === \"nodes\") {\r\n                        \t\tvar nodes = d[key];\r\n                        \t\tvar resultNodes = [];\r\n                        \t\tfor(var k = 0, len2 = nodes.length; k < len2; k++) {\r\n                        \t\t\tresultNodes.push(nodes[k].id);\r\n                        \t\t}\r\n                        \t\tobj[key] = resultNodes;\r\n                        \t} else {\r\n                        \t\tobj[key] = d[key];\r\n                        \t}\r\n                        }\r\n                    }\r\n                }\r\n        \t}\r\n        \treturn result;\r\n        };\r\n        var cloneData = isData === true ? {} : ObjectUtil.cloneObj(d);\r\n        cloneData.nodes = getData(nodeKeys, self.nodes);\r\n        cloneData.links = getData(linkKeys, self.links, true);\r\n        cloneData.groups = getData(groupKeys, self.groups);\r\n        //还原数据\r\n        if(nodes) {\r\n            d.nodes = nodes;\r\n        }\r\n        if(links) {\r\n            d.links = links;\r\n        }\r\n        if(groups) {\r\n            d.groups = groups;\r\n        }\r\n        //把该baseChart的数据转换成json字符串\r\n        str = JSON.stringify(cloneData);\r\n        return str;\r\n    };\r\n    \r\n    /**\r\n     * override toString方法，用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Topology info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   showLevel:\" + self.showLevel()  +\r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var searchTextHandler = function(event) {\r\n        var str = event.detail;\r\n        var nodes = self.searchNodesByName(str);\r\n        self.centerNodesAndSelected(nodes, true);\r\n    };\r\n    \r\n    /**\r\n     * 外部抛事件代码如下:\r\n     * <code><pre>\r\n     * const BaseEvent = ghca_charts.events.BaseEvent;\r\n     * const EventUtil = ghca_charts.view.util.eventUtil;\r\n     * const evt = EventUtil.createCustomEvent(BaseEvent.TOPO_NODE_FOCUS_IN, true, true, \"10.4.42.1\");\r\n     * d3.selectAll(\"g.seriesTopo\").node().dispatchEvent(evt);\r\n     * </pre></code>\r\n     */\r\n    var topoNodeFocusInHandler = function(event) {\r\n        var id = event.detail;\r\n        //移动该节点到中心位置并选中，然后突出显示节点\r\n        self.centerAndFocusInNode(id)\r\n    };\r\n    \r\n    /**\r\n     * 节点单击事件的监听相关处理方法\r\n     */\r\n    var nodeClickHandler = function(event) {\r\n        if(self.isEditMode() || !self.focusEffect()) {\r\n            return;\r\n        }\r\n        event.stopImmediatePropagation();\r\n        //获取当前点击的节点数据对象\r\n        var data = d3.select(event.currentTarget).data();\r\n        if(data.length === 0) {\r\n            return;\r\n        }\r\n        var node = data[0];\r\n        var nodeIns = node.ins;\r\n        if(isInFocus) {\r\n            //若已经处于聚焦状态，则取消选选中和聚焦状态\r\n            self.focusOutAllNodes();\r\n        } else {\r\n            //移动该节点到中心位置并选中，然后突出显示节点\r\n            self.centerAndFocusInNode(node);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点鼠标移入事件的监听相关处理方法\r\n     */\r\n    var nodeMouseOverHandler = function(event) {\r\n    \tif(self.isEditMode() || !self.mouseOverFocusEffect()) {\r\n            return;\r\n        }\r\n        //获取当前鼠标移入的节点数据对象\r\n        var data = d3.select(event.currentTarget).data();\r\n        if(data.length === 0) {\r\n            return;\r\n        }\r\n        var node = data[0];\r\n        //突出显示节点\r\n        self.focusInNode(node);\r\n    };\r\n    \r\n    /**\r\n     * 节点鼠标移chu 事件的监听相关处理方法\r\n     */\r\n    var nodeMouseOutHandler = function(event) {\r\n        if(self.isEditMode() || !self.mouseOverFocusEffect()) {\r\n            return;\r\n        }\r\n        //若已经处于聚焦状态，则取消选选中和聚焦状态\r\n        isInFocus && self.focusOutAllNodes();\r\n    };\r\n    \r\n    /**\r\n     * 子节点收放按钮点击事件的监听相关处理方法\r\n     */\r\n    var expandToolClickHandler = function(event) {\r\n        event.stopImmediatePropagation();\r\n        var node = event.detail;\r\n        if(!node) {\r\n            return;\r\n        }\r\n        self.expandOrCollapseNodeInUI(node);\r\n    };\r\n    \r\n    /**\r\n     * 实时更新渲染数据的监听相关处理方法\r\n     */\r\n    this.tickHandler = function() {\r\n//    \tvar ot = new Date().getTime();\r\n        if(!self.layout().fixed()) {\r\n            self.renderPosition();\r\n            self.mainContainer().node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG_CHANGE,true,true,{enable:false}));\r\n        }   \r\n//        var nt = new Date().getTime();\r\n//        console.log(\"tick cost time: \" + (nt-ot) + \" ms.\");\r\n    };\r\n    this.tickEndHandler = function() {\r\n        if(!self.layout().fixed()) {\r\n            self.mainContainer().node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG_CHANGE,true,true,{enable:true}));\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点开始拖动\r\n     */\r\n    this.node_dragStartHandler = function(d) {\r\n    \tif(isDrawLink) {\r\n    \t\treturn;\r\n    \t}\r\n    \tif(self.layout().fixed()) {\r\n    \t\td.x = d3.event.x;\r\n            d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.updateDragedObjectPos(d);\r\n        } else {\r\n             if (!d3.event.active) {\r\n                self.model.alphaTarget(0.3).restart();\r\n            }\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点拖动中\r\n     */\r\n    this.node_dragHandler = function(d) {\r\n    \tif(isDrawLink) {\r\n            return;\r\n        }\r\n    \tif(self.layout().fixed()) {\r\n            d.x = d3.event.x;\r\n            d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.updateDragedObjectPos(d);\r\n        } else {\r\n            d.fx = d3.event.x;\r\n            d.fy = d3.event.y;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 节点结束拖动\r\n     */\r\n    this.node_dragEndHandler = function(d) {\r\n    \tif(isDrawLink) {\r\n            return;\r\n        }\r\n    \tif(self.layout().fixed()) {\r\n            d.x = d3.event.x;\r\n            d.y = d3.event.y;\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n            self.updateDragedObjectPos(d);\r\n        } else {\r\n            if (!d3.event.active) {\r\n                self.model.alphaTarget(0);\r\n            }\r\n            d.fx = null;\r\n            d.fy = null;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 点击保存按钮事件处理方法\r\n     */\r\n    var saveBtnClickHandler = function() {\r\n        //向外部抛出保存数据\r\n        self.node().dispatchEvent(EventUtil.createCustomEvent(\r\n           BaseEvent.EV_EVENT_DATA_STORAGE, true, true, {data:self.toJSON(true)}));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 设置传入的对象是否显示选中状态\r\n     * @param selected 对象是否显示选中状态\r\n     * @param insArray 要设置的对象数组，若不传则为图表中的所有对象(节点+连线)\r\n     */\r\n    this.setSelected = function(selected, insArray) {\r\n        if(insArray) {\r\n            for (var i = 0, len = insArray.length; i < len; i++) {\r\n                insArray[i].selected(selected);\r\n            }\r\n        } else {\r\n            var nodes = self.nodes;\r\n            for (var i = 0, len = nodes.length; i < len; i++) {\r\n                nodes[i].ins.selected(selected);\r\n            }\r\n            var links = self.links;\r\n            for (var i = 0, len = links.length; i < len; i++) {\r\n                links[i].ins.selected(selected);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 将当前框选项显示选中效果\r\n     */\r\n    this.setSelectedItemsInSelectArea = function() {\r\n        var rect = self.editCon.mainContainer().select(\"rect.select\");\r\n        var rectNode = rect.node();\r\n        if(rectNode) {\r\n        \tselectedItems.length = 0;\r\n        \t//选中区域内的所有节点\r\n        \tvar node, link, ins, insRect, source, target, isCollision, \r\n        \t    nodes = self.nodes, \r\n        \t    links = self.links, \r\n        \t    rect = {},\r\n        \t    selectRect = {\r\n                    x:parseInt(rectNode.getAttribute(\"x\")),\r\n                    y:parseInt(rectNode.getAttribute(\"y\")),\r\n                    width:parseInt(rectNode.getAttribute(\"width\")),\r\n                    height:parseInt(rectNode.getAttribute(\"height\"))\r\n        \t    };\r\n            for (var i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                ins = node.ins;\r\n                insRect = ins instanceof BaseComponent ? ins.getBBox() : ins.mainPlugin.getBBox();\r\n                //这样重新创建一个对象是因为ie中getBBox()返回的对象属性是只读的\r\n                rect.x = Math.round(node.x + insRect.x);\r\n                rect.y = Math.round(node.y + insRect.y);\r\n                rect.width = Math.round(insRect.width);\r\n                rect.height = Math.round(insRect.height);\r\n                if(math.isCollisionInTwoRects(selectRect, rect)) {\r\n                    ins.selected(true);\r\n                    selectedItems.push(node);\r\n                } else {\r\n                    ins.selected(false);\r\n                }\r\n            }\r\n            \r\n            //选中区域内的所有连线\r\n            var rectPath =  \"M\"+selectRect.x+\",\"+selectRect.y +\r\n                            \" L\"+(selectRect.x+selectRect.width)+\",\"+selectRect.y+\r\n                            \" L\"+(selectRect.x+selectRect.width)+\",\"+(selectRect.y+selectRect.height)+\r\n                            \" L\"+(selectRect.x)+\",\"+(selectRect.y+selectRect.height) + \"Z\";\r\n            for (var i = 0, len = links.length; i < len; i++) {\r\n                link = links[i];\r\n                ins = link.ins;\r\n                source = link.source;\r\n                target = link.target;\r\n                //矩形框选区域是否包含该连线\r\n            \tif(math.isPointInsideBBox(source.x, source.y, selectRect) && \r\n            \t   math.isPointInsideBBox(target.x, target.y, selectRect)) {\r\n            \t\tisCollision = true;\r\n            \t} else {\r\n            \t\t//若不包含则判断是否有交点\r\n            \t\tisCollision = Raphael.isPathIntersection(ins.el.select(\"path\").attr(\"d\"), rectPath);\r\n            \t}\r\n            \tif(isCollision) {\r\n            \t\tins.selected(true);\r\n                    selectedItems.push(node);\r\n            \t} else {\r\n            \t\tins.selected(false);\r\n            \t}\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 移动该节点到中心位置并选中，然后突出显示节点\r\n     * @param arguments[0] 节点id或者节点数据对象\r\n     */\r\n    this.centerAndFocusInNode = function() {\r\n        if(arguments.length === 0) {\r\n            return;\r\n        }\r\n        var node;\r\n        if(ObjectUtil.isString(arguments[0])) {\r\n            node = self.findNode(arguments[0]);\r\n        } else if(ObjectUtil.isObject(arguments[0])) {\r\n            node = arguments[0];\r\n        }\r\n        if(!node) {\r\n            return;\r\n        }\r\n        //移动该节点到中心位置并选中\r\n        self.centerNodesAndSelected(node, true);\r\n        //突出显示节点\r\n        self.focusInNode(node);\r\n    };\r\n    \r\n    /**\r\n     * 突出显示节点\r\n     * @param node 要突出显示的节点数据对象\r\n     */\r\n    this.focusInNode = function(node) {\r\n        if(!node || !node.id) {\r\n            return;\r\n        }\r\n        var i, len, ins, nodeIns, linkIns, groupIns, nodeData, linkData, links, id = node.id, opacity = 0.1, \r\n            nodesIns = self.nodesIns, linksIns = self.linksIns, groupsIns = self.groupsIns, insAry = [];\r\n        var duration = self.animation() ? 300 : 0;\r\n        //找到目标对象，并淡化所有节点、连线、分组的显示效果\r\n        for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            nodeIns = nodesIns[i];\r\n            nodeIns.mainContainer().attr(\"opacity\", opacity);\r\n            if(nodeIns.mainContainer().data()[0].id === id) {\r\n                ins = nodesIns[i];\r\n            }\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            linkIns = linksIns[i];\r\n            linkIns.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = groupsIns.length; i < len; i++) {\r\n            groupIns = groupsIns[i];\r\n            groupIns.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        //添加要突出显示的对象到数组中\r\n        nodeData = ins.mainContainer().data()[0];\r\n        insAry.push(nodeData.ins);\r\n        links = nodeData.links;\r\n        if(links) {\r\n            for(i = 0, len = links.length; i < len; i++) {\r\n                linkData = links[i];\r\n                insAry.push(linkData.ins);\r\n                if(linkData.target && linkData.target.ins) {\r\n                    insAry.push(linkData.target.ins);\r\n                }\r\n                if(linkData.source && linkData.source.ins) {\r\n                    insAry.push(linkData.source.ins);\r\n                }\r\n            }\r\n        }\r\n        //突出显示\r\n        for(i = 0, len = insAry.length; i < len; i++) {\r\n            ins = insAry[i];\r\n            if(ins instanceof BaseComponent) {\r\n                ins = ins.parent().mainContainer();\r\n            } else {\r\n                ins = d3.select(ins.el.node().parentNode);\r\n            }\r\n            ins && ins.attr(\"opacity\", 1);\r\n        }\r\n        isInFocus = true;\r\n    };\r\n    \r\n    /**\r\n     * 取消所有节点的突出显示效果\r\n     */\r\n    this.focusOutAllNodes = function() {\r\n        if(!self.nodesIns || !self.linksIns) {\r\n            return;\r\n        }\r\n        var i, len, ins, opacity = 1, nodesIns = self.nodesIns, \r\n            linksIns = self.linksIns, groupsIns = self.groupsIns;\r\n        for(i = 0, len = nodesIns.length; i < len; i++) {\r\n            ins = nodesIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = linksIns.length; i < len; i++) {\r\n            ins = linksIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        for(i = 0, len = groupsIns.length; i < len; i++) {\r\n            ins = groupsIns[i];\r\n            ins.mainContainer().attr(\"opacity\", opacity);\r\n        }\r\n        isInFocus = false;\r\n    };\r\n    \r\n    /**\r\n     * 对传入的节点居中并设置显示选中状态(选中状态根据传入参数设置)\r\n     * @param arguments[0] 节点数据对象数组或者单个节点数据对象\r\n     * @param arguments[1] 是否选中传入的节点，默认为否\r\n     */\r\n    this.centerNodesAndSelected = function() {\r\n        var nodes = self.nodes;\r\n        var isSelect = arguments.length > 1 ? arguments[1] === true : false;\r\n        //取消所有节点选中状态\r\n        var nodesIns = [];\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n        \tnodesIns.push(nodes[i].ins);\r\n        }\r\n        self.setSelected(false, nodesIns);\r\n        \r\n        var ratio = 1, currentX = NaN, currentY = NaN;\r\n        if (ObjectUtil.isArray(arguments[0])) {//传入参数为数组\r\n            nodes = arguments[0];\r\n            if(nodes.length === 0) {\r\n            \treturn;\r\n            }\r\n            //计算搜索结果点外接矩形中心\r\n            var minX = NaN, minY = NaN, maxX = NaN, maxY = NaN,\r\n                leftNodeW = NaN, rightNodeW = NaN, topNodeH = NaN, bottomNodeH = NaN;\r\n            for (var node, nodeIns, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                nodeIns = node.ins;\r\n                if(isSelect) {\r\n                \tnodeIns.selected(true);\r\n                }\r\n                if(isNaN(minX) || node.x < minX) {\r\n                    minX = node.x;\r\n                    leftNodeW = nodeIns.actualWidth();\r\n                }\r\n                if(isNaN(minY) || node.y < minY) {\r\n                    minY = node.y;\r\n                    topNodeH = nodeIns.actualHeight();\r\n                }\r\n                if(isNaN(maxX) || node.x > maxX) {\r\n                    maxX = node.x;\r\n                    rightNodeW = nodeIns.actualWidth();\r\n                }\r\n                if(isNaN(maxY) || node.y > maxY) {\r\n                    maxY = node.y;\r\n                    bottomNodeH = nodeIns.actualHeight();\r\n                }\r\n            }\r\n            currentX = (maxX + minX)/2, currentY = (maxY + minY)/2;\r\n            //搜索结果点外接矩形是否大于图表显示范围，若是则缩小内容\r\n            var ratioX = 1, ratioY = 1, \r\n                areaW = maxX - minX + (leftNodeW + rightNodeW) / 2, \r\n                areaH = maxY - minY + (topNodeH + bottomNodeH) / 2;\r\n            if(areaW > self.width()) {\r\n            \tratioX = self.width() / areaW;\r\n            }\r\n            if(areaH > self.height()) {\r\n                ratioY = self.height() / areaH;\r\n            }\r\n            ratio = ratioX > ratioY ? ratioY : ratioX;\r\n            self.scaleX(ratio);\r\n            self.scaleY(ratio);\r\n        } else if(ObjectUtil.isObject(arguments[0])) {//传入参数为单个点\r\n            var node = arguments[0];\r\n            var nodeIns = node.ins;\r\n            if(isSelect) {\r\n            \tnodeIns.selected(true);\r\n            }\r\n            currentX = node.x;\r\n            currentY = node.y;\r\n        }\r\n        if(isNaN(currentX) || isNaN(currentY)) {\r\n            return;\r\n        }\r\n        \r\n        //把搜索结果点外接矩形中心点移动到图 表中心位置\r\n        var x = self.x(), y = self.y(), \r\n            moveX = self.width()/2, moveY = self.height()/2;\r\n        x = (moveX - currentX * self.scaleX()) * self.graph().scaleX();\r\n        y = (moveY - currentY * self.scaleY()) * self.graph().scaleY();\r\n        self.x(Math.round(x));\r\n        self.y(Math.round(y));\r\n        self.layout().model().stop();\r\n        var transition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n        self.renderTransform(transition);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // data control\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 增加一个节点 \r\n     * @param node 节点数据对象\r\n     */\r\n    this.addNode = function(node) {\r\n        self.nodes.push(node);\r\n    };\r\n\r\n    /**\r\n     * 批量增加节点 \r\n     * @param nodes 节点数据对象数组\r\n     */\r\n    this.addNodes = function(nodes) {\r\n        if (ObjectUtil.isArray(nodes)) {\r\n        \tfor(var i = 0, len = nodes.length; i < len; i++) {\r\n        \t\tself.addNode(nodes[i]);\r\n        \t}\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 增加一条连线 \r\n     * @param link 连线数据对象 \r\n     */\r\n    this.addLink = function(link) {\r\n    \t//寻找该连线起点和终点\r\n        link.source = self.findNode(link.source);\r\n        link.target = self.findNode(link.target);\r\n        var source = link.source, \r\n            target = link.target;\r\n        //寻找具有相同起点和终点的连线，生成lineIndex，并把该连线添加到起点和终点对应的连线数据数组里面\r\n        if(!source.hasOwnProperty(\"links\")) {\r\n        \tsource.links = [];\r\n        }\r\n        //刷新lineIndex\r\n        var lineIndex = self.refreshLineIndex(link);\r\n    \tlink.lineIndex = lineIndex > 0 ? lineIndex : 0;\r\n        source.links.push(link);\r\n        if(!target.hasOwnProperty(\"links\")) {\r\n            target.links = [];\r\n        }\r\n        target.links.push(link);\r\n        self.links.push(link);\r\n    };\r\n\r\n    /**\r\n     * 批量增加连线 \r\n     * @param links 连线数据对象数组\r\n     */\r\n    this.addLinks = function(links) {\r\n        if (ObjectUtil.isArray(links)) {\r\n        \tfor(var i = 0, len = links.length; i < len; i++) {\r\n                self.addLink(links[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeNode = function(id) {\r\n        var i = 0, n = self.findNode(id), links = self.links;\r\n        //删除该节点相关的连线\r\n        while (i < links.length) {\r\n            links[i]['source'] === n || links[i]['target'] === n ? links.splice(i, 1) : ++i;\r\n        }\r\n        //删除该节点\r\n        self.nodes.splice(self.findNodeIndex(id), 1);\r\n        //在所有分组中删除该节点\r\n        self.removeNodeFromAllGroup(n);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除节点 \r\n     * @param ids 要删除的节点id数组\r\n     */\r\n    this.removeNodes = function(ids) {\r\n        if (ObjectUtil.isArray(ids)) {\r\n        \tfor(var i = 0, len = ids.length; i < len; i++) {\r\n        \t\tself.removeNode(ids[i]);\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除连线 \r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLink = function(link) {\r\n    \t//删除连线自身\r\n        var links = self.links;\r\n        var index = links.indexOf(link);\r\n        if(index !== -1) {\r\n            links.splice(index, 1);\r\n        }\r\n        var source = link.source, \r\n            target = link.target;\r\n        //删除连线起点中对应的该连线\r\n        self.removeLinkFromNode(source, link);\r\n        //删除连线终点中对应的该连线\r\n        self.removeLinkFromNode(target, link);\r\n        //刷新lineIndex\r\n        self.refreshLineIndex(link);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除连线 \r\n     * @param links 要删除的连线数据对象数组\r\n     */\r\n    this.removeLinks = function(links) {\r\n        if (ObjectUtil.isArray(links)) {\r\n        \tfor(var i = 0, len = links.length; i < len; i++) {\r\n                self.removeLink(links[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点中对应的连线引用\r\n     * @param node 包含该连线引用的节点数据对象\r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLinkFromNode = function(node, link) {\r\n        if(node && node.links) {\r\n            links = node.links;\r\n            for(var l, i = 0, len = links.length; i < len; i++) {\r\n                l = links[i];\r\n                if(l === link) {\r\n                    links.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除节点下的子节点，同时清除link信息 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeChildNodes = function(id) {\r\n        var   node = self.findNode(id), //要删除的节点\r\n              nodes = self.nodes,       //所有节点\r\n              link = null,\r\n              links = self.links,       //所有连线 \r\n              delateLinks = [],         //要删除的连线索引数组\r\n              childNodes = [];          //当前节点的所有子节点数组\r\n\r\n        //找到所有要删除的连线索引，以及当前节点的所有子节点\r\n        links.forEach(function(link, index) {\r\n            //若节点是此条连线的起点\r\n            if(link['source'] === node) {\r\n                delateLinks.push(index);\r\n                childNodes.push(link['target']);\r\n            }\r\n        });\r\n\r\n        //删除上面找到的所有需要删除的连线\r\n        delateLinks.reverse().forEach(function(index) {\r\n            links.splice(index, 1);\r\n        });\r\n\r\n        //迭代删除节点\r\n        var remove = function(node) {\r\n            var length = links.length;\r\n            for (var i = length - 1; i >= 0; i--) {\r\n                if (links[i]['source'] === node) {\r\n                    var target = links[i]['target'];\r\n                    links.splice(i, 1);\r\n                    nodes.splice(self.findNodeIndex(node.id), 1);\r\n                    remove(target);\r\n                }\r\n            }\r\n        };\r\n\r\n        //删除上面找到当前节点的所有子节点\r\n        childNodes.forEach(function(node) {\r\n            remove(node);\r\n        });\r\n\r\n        //清除没有连线的节点\r\n        for (var i = nodes.length - 1, len = links.length; i >= 0; i--) {\r\n            var isFoundNode = false;\r\n            node = nodes[i];\r\n            for (var j = 0; j < len; j++) {\r\n                link = links[j];\r\n                if(link['source'] === node || link['target'] === node) {\r\n                    isFoundNode = true;\r\n                }\r\n            }\r\n            if(!isFoundNode) {\r\n                nodes.splice(i, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 查找节点\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象，若没有查找到则返回null\r\n     */\r\n    this.findNode = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] === id)\r\n                return nodes[i];\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * 获取LINk\r\n     * @param id\r\n     * @returns {*}\r\n     */\r\n    this.findLink = function(id) {\r\n        var links = self.links;\r\n        for (var i = 0, len = links.length; i < len; i++) {\r\n            if (links[i]['id'] === id)\r\n                return links[i];\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * 查找节点数据对象所在数组的索引值\r\n     * @param id 要查找的节点id\r\n     * @return 返回查找到的节点数据对象所在数组的索引值，若没有查找到则返回-1\r\n     */\r\n    this.findNodeIndex = function(id) {\r\n        var nodes = self.nodes;\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            if (nodes[i]['id'] === id)\r\n                return i;\r\n        }\r\n        return -1;\r\n    };\r\n    \r\n    /**\r\n     * 刷新变更(添加、删除)目标连线所在的两端点之间的连线的索引值\r\n     * @param link 变更(添加、删除)目标连线数据对象\r\n     * @return 返回下一个要添加的连线索引值\r\n     */\r\n    this.refreshLineIndex = function(link) {\r\n        var sourceLink, \r\n            lineIndex = 0, \r\n            source = link.source, \r\n            target = link.target,\r\n            sourceLinks = source.links;\r\n        for(var i = 0, len = sourceLinks.length; i < len; i++) {\r\n            sourceLink = sourceLinks[i];\r\n            //寻找具有相同节点的连线\r\n            if((sourceLink.target === source || sourceLink.source === source) && \r\n               (sourceLink.target === target || sourceLink.source === target)) {\r\n                sourceLink.lineIndex = lineIndex;\r\n                lineIndex++;\r\n                //记录变更集\r\n                addItemsToChangeData(sourceLink, changeData.links.update);\r\n            }\r\n        }\r\n        return lineIndex;\r\n    };\r\n    \r\n    /**\r\n     * 增加一个节点组\r\n     * @param group 节点数据对象\r\n     */\r\n    this.addGroup = function(group) {\r\n    \tvar nodes = group.nodes;\r\n    \t//替换group中的节点id为对应的节点数据对象\r\n    \tfor (var node, i = 0, len = nodes.length; i < len; i++) {\r\n            node = self.findNode(nodes[i]);\r\n            nodes[i] = node;\r\n        }\r\n        self.groups.push(group);\r\n    };\r\n    \r\n    /**\r\n     * 批量增加节点组\r\n     * @param groups 节点组数据对象数组\r\n     */\r\n    this.addGroups = function(groups) {\r\n        if (ObjectUtil.isArray(groups)) {\r\n        \tfor(var i = 0, len = groups.length; i < len; i++) {\r\n                self.addGroup(groups[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 删除一个节点组\r\n     * @param group 节点数据对象\r\n     */\r\n    this.removeGroup = function(group) {\r\n        var groups = self.groups;\r\n        var index = groups.indexOf(group);\r\n        if(index !== -1) {\r\n            //删除该节点组\r\n            groups.splice(index, 1);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 为指定的节点组中添加一个节点\r\n     * @param node 要删除的节点\r\n     * @param group 节点组\r\n     */\r\n    this.addNodeToGroup = function(node, group) {\r\n    \tif(!group.nodes) {\r\n    \t\tgroup.nodes = [];\r\n    \t}\r\n        var groupNodes = group.nodes;\r\n        var index = groupNodes.indexOf(node);\r\n        if(index === -1) {\r\n            groupNodes.push(node);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从指定的节点组中删除一个节点\r\n     * @param node 要删除的节点\r\n     * @param group 节点组\r\n     */\r\n    this.removeNodeFromGroup = function(node, group) {\r\n        var groupNodes = group.nodes;\r\n        var index = groupNodes.indexOf(node);\r\n        if(index !== -1) {\r\n            groupNodes.splice(index, 1);\r\n            //记录变更集\r\n            addItemsToChangeData(group, changeData.groups.update);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从所有的节点组中删除一个节点\r\n     * @param node 要删除的节点\r\n     */\r\n    this.removeNodeFromAllGroup = function(node) {\r\n        var groups = self.groups;\r\n        for(var group, i = 0, len = groups.length; i < len; i++) {\r\n        \tgroup = groups[i];\r\n        \tself.removeNodeFromGroup(node, group);\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 找到多个节点所在的节点组列表\r\n     * @param arguments[0] 一个或者多个节点，一个节点直接传入，多个节点用数组包装再传入\r\n     * @return 返回节点组列表数组，若没有则返回空数组\r\n     */\r\n    this.findGroupsByNodes = function() {\r\n        if(ObjectUtil.isObject(arguments[0])) {\r\n            return self.findGroupsByNode(arguments[0]);\r\n        } \r\n        if(ObjectUtil.isArray(arguments[0])) {\r\n            var nodes = arguments[0];\r\n            var result = [];\r\n            for(var groups, i = 0, len = nodes.length; i < len; i++) {\r\n                groups = self.findGroupsByNode(nodes[i]);\r\n                for(var group, j = 0, len1 = groups.length; j < len1; j++) {\r\n                    group = groups[j];\r\n                    if(result.indexOf(group) === -1) {\r\n                        result.push(group);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return [];\r\n    };\r\n    \r\n    /**\r\n     * 找到节点所在的节点组列表\r\n     * @param node 节点数据对象\r\n     * @return 返回节点组列表数组，若没有则返回空数组\r\n     */\r\n    this.findGroupsByNode = function(node) {\r\n        var result = [];\r\n        if(!node) {\r\n            return result;\r\n        }\r\n        var groups = self.groups;\r\n        for(var group, nodes, i = 0, len = groups.length; i < len; i++) {\r\n            group = groups[i];\r\n            nodes = group.nodes;\r\n            if(nodes.indexOf(node) !== -1) {\r\n                result.push(group);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * 根据指定节点的id找到该节点的所有子孙节点\r\n     * @param id 指定节点的id\r\n     * @param isAll 是否返回所有子孙节点(无论是否展开)，默认为是，若为false，则只返回展开的子孙节点\r\n     * @return 返回指定节点的所有子孙节点数据对象数组，若没有找到则返回空数组\r\n     */\r\n    this.findAllChildNodes = function(id, isAll) {\r\n    \tvar nodes = [];\r\n    \tvar node = self.findNode(id);\r\n        if(!node) return nodes;\r\n        if(isAll === undefined) {\r\n        \tisAll = true;\r\n        }\r\n        \r\n        //有待优化--start\r\n        var getNode;\r\n        if(isAll) {\r\n        \tgetNode = function(nodeId) {\r\n                self.nodes.forEach(function(node) {\r\n                    if(node.parentId === nodeId) {\r\n                        nodes.push(node);\r\n                        getNode(node.id);\r\n                    }\r\n                });\r\n            };\r\n            getNode(id);\r\n        } else {\r\n        \tgetNode = function(parentNode, isFirst) {\r\n        \t\tvar isExpanded = isFirst \r\n            \t\t|| parentNode.isExpanded === undefined \r\n            \t\t|| parentNode.isExpanded === true;\r\n                self.nodes.forEach(function(node) {\r\n                    if(isExpanded && node.parentId === parentNode.id) {\r\n                \t\tnodes.push(node);\r\n                \t\tgetNode(node, false);\r\n                    }\r\n                });\r\n            };\r\n            getNode(node, true);\r\n        }\r\n        //有待优化--end\r\n        \r\n        return nodes;\r\n    }\r\n    \r\n    /**\r\n     * 设置指定节点是否可见\r\n     * @param nodes 要设置的指定节点对象数组\r\n     * @param visible 设置指定节点是否可见\r\n     */\r\n    this.setNodesVisible = function(nodes, visible) {\r\n        if(!nodes || nodes.length === 0) return;\r\n        if(visible === undefined)  {\r\n            visible = true;\r\n        }\r\n        for(var i = 0, len = nodes.length; i < len; i++) {\r\n        \tnodes[i].visible = visible;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 展开节点\r\n     * @param id 要展开的节点id\r\n     * @param isExpandAll 是否强制展开所有子孙节点，默认为false,\r\n     *                    若为false则原先合拢的子孙节点在父节点展开后保持原有状态；若为true则强制展开所有子孙节点\r\n     */\r\n    this.expandNode = function(id, isExpandAll) {\r\n    \tvar nodes = self.findAllChildNodes(id, isExpandAll === undefined ? false : isExpandAll);\r\n        self.setNodesVisible(nodes, true);\r\n    };\r\n    \r\n    /**\r\n     * 合拢节点\r\n     * @param id 要合拢的节点id\r\n     */\r\n    this.collapseNode = function(id) {\r\n    \tvar nodes = self.findAllChildNodes(id, true);\r\n        self.setNodesVisible(nodes, false);\r\n    };\r\n    \r\n    /**\r\n     * 展开或者合拢节点\r\n     * @param node 当前要展开或者合拢的节点数据对象\r\n     */\r\n    this.expandOrCollapseNode = function(node) {\r\n    \tif(!node.enabledExpand) {\r\n    \t\treturn;\r\n    \t}\r\n        if(node.isExpanded) {\r\n            self.collapseNode(node.id);\r\n            node.isExpanded = false;\r\n        } else {\r\n            self.expandNode(node.id, false);\r\n            node.isExpanded = true;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 从指定的连线数据数组中获取可见的所有连线\r\n     * @param links 指定的连线数据数组\r\n     * @return 返回可见的所有连线数组，若没有满足条件的数组，则返回空数组\r\n     */\r\n    this.getVisibleLinks = function(links) {\r\n        var result = [];\r\n        if(!links || links.length === 0){\r\n            return result;\r\n        }\r\n        var link;\r\n        for (var i = 0, len = links.length; i < len; i++) {\r\n        \tlink = links[i];\r\n            if (link.source.visible && link.target.visible) {\r\n            \tif(link.hasOwnProperty(\"visible\")) {\r\n            \t\tif(link.visible) {\r\n            \t\t\tresult.push(link);\r\n            \t\t}\r\n            \t} else {\r\n            \t\tresult.push(link);\r\n            \t}\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    /**\r\n     * 根据搜索字符串内容从节点的name属性中搜索匹配的节点，并把所有满足搜索条件的节点数据放入一个数组中\r\n     * @param str 搜索条件字符串\r\n     * @return 所有满足搜索条件的节点数据数组，若没有搜索到则返回空数组\r\n     */\r\n    this.searchNodesByName = function(str) {\r\n    \tvar result = [];\r\n    \tif(str === undefined || str === null || str.replace(/ /g,'') === \"\") {\r\n            return result;\r\n        }\r\n        var nodes = self.nodes;\r\n        for (var node, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            if(node.name.indexOf(str) > -1) {\r\n                result.push(node);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // edit code\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var drawlinkIns, drawLinkData, drawLinkSource,\r\n        isDrawLink = false,\r\n        oldDragable = false,\r\n        selectRectX = 0, \r\n        selectRectY = 0;\r\n        \r\n    var modeChangeHandler = function(evt) {\r\n        self.mode((evt || window.event).detail ? Topology.MODE_EDIT : Topology.MODE_NORMAL);\r\n        validateMode();\r\n    };\r\n    \r\n    /**\r\n     * 监听外部抛出开启和关闭编辑模式的事件\r\n     */\r\n    var openEditHandler = function(evt) {\r\n        self.mode((evt || window.event).detail.data === true ? Topology.MODE_EDIT : Topology.MODE_NORMAL);\r\n        validateMode();\r\n    };\r\n    \r\n    var validateMode = function() {\r\n    \tif(!isValidateMode) {\r\n    \t\treturn;\r\n    \t}\r\n    \tisValidateMode = false;\r\n    \tif(self.isEditMode()) {\r\n            self.focusOutAllNodes();\r\n            oldDragable = self.dragable();\r\n            self.dragable(false);\r\n            addEditContainer();\r\n            self.removeDragListeners();\r\n            self.addEventListener(BaseEvent.ADD_ITEMS, addItemsHandler);\r\n            self.addEventListener(BaseEvent.REMOVE_ITEMS, removeItemsHandler);\r\n            self.addEventListener(BaseEvent.REOMVE_ALL_SELECTED_ITEMS, removeAllSelectedItemsHandler);\r\n            self.parent().mainContainer().on(\"mousedown.edit\", edit_mouseDownHandler);\r\n        } else {\r\n            isDrawLink = false;\r\n            self.dragable(oldDragable);\r\n            removeEditContainer();\r\n            self.removeEventListener(BaseEvent.ADD_ITEMS, addItemsHandler);\r\n            self.removeEventListener(BaseEvent.REMOVE_ITEMS, removeItemsHandler);\r\n            self.removeEventListener(BaseEvent.REOMVE_ALL_SELECTED_ITEMS, removeAllSelectedItemsHandler);\r\n            self.parent().mainContainer().on(\"mousedown.edit\", null);\r\n            setListenersInNormal();\r\n        }\r\n    };\r\n    \r\n    var addItemsHandler = function(event) {\r\n        var data = event.detail; \r\n        if(data.type === \"node\") {\r\n            self.addNodesInUI(data.data);\r\n        } else if(data.type === \"link\") {\r\n            setListenersInEditLink();\r\n            self.getRendererConfig(data.data, \"stroke\");\r\n            drawLinkData = data.data;\r\n            isDrawLink = true;\r\n        }\r\n    };\r\n    \r\n    var edit_mouseDownHandler = function() {\r\n    \tvar isAddListeners = false, \r\n            target = d3.event.target;\r\n    \tif(isDrawLink) {\r\n    \t\tdrawLinkSource = null;\r\n            var d = target.__data__;\r\n            if(d && d.ins) {\r\n                var ins = d.ins;\r\n                if(ins instanceof Node) {\r\n                \tisAddListeners = true;\r\n                    drawLinkSource = d;\r\n                    drawLinkData.ins = d.ins;\r\n                    startDrawLink(d.x, d.y, drawLinkData);\r\n                }\r\n            }\r\n    \t} else if(self.parent().bgRect.node() === target) {\r\n    \t\tisAddListeners = true;\r\n    \t\tvar sp = d3.mouse(self.editCon.bgNode());\r\n    \t\tcreateSelectRect(sp[0], sp[1]);\r\n    \t}\r\n    \tif(isAddListeners) {\r\n    \t\t//强制光标设置为箭头，否则会出现工字型光标\r\n    \t\tself.parent().mainContainer().attr(\"cursor\", \"default\");\r\n    \t\td3.select(window).on(\"mouseup.edit\", edit_mouseUpHandler);\r\n            d3.select(window).on(\"mousemove.edit\", edit_mouseMoveHandler);\r\n    \t}\r\n    };\r\n    \r\n    var edit_mouseMoveHandler = function() {\r\n    \tif(isDrawLink) {\r\n    \t\tvar m = d3.mouse(self.bgNode());\r\n            drawLink(drawLinkSource.x, drawLinkSource.y, m[0], m[1]);\r\n    \t} else {\r\n    \t\tdrawSelectRect();\r\n    \t\t//若实时框选效率低，可将该处屏蔽\r\n    \t\tself.setSelectedItemsInSelectArea();\r\n    \t}\r\n    };\r\n    \r\n    var edit_mouseUpHandler = function() {\r\n        d3.select(window).on(\"mousemove.edit\", null);\r\n        d3.select(window).on(\"mouseup.edit\", null);\r\n        \r\n        var target = d3.event.target;\r\n        if(isDrawLink) {\r\n        \tendDrawLink();\r\n            var d = target.__data__;\r\n            if(d && d.ins) {\r\n                var ins = d.ins;\r\n                if(drawLinkSource && ins instanceof Node) {\r\n                    drawLinkData.source = drawLinkSource.id;\r\n                    drawLinkData.target = d.id;\r\n                    self.addLinkInUI(drawLinkData);\r\n                }\r\n            }\r\n            \r\n            addNodeDragListeners();\r\n        } else {\r\n        \tself.setSelectedItemsInSelectArea();\r\n        \tremoveSelectRect();\r\n        }\r\n    };\r\n    \r\n    var removeItemsHandler = function(event) {\r\n        \r\n    };\r\n    \r\n    var removeAllSelectedItemsHandler = function(event) {\r\n        self.removeAllSelectedInUI();\r\n    };\r\n    \r\n    /**\r\n     * 当处于编辑状态时添加编辑容器\r\n     */\r\n    var addEditContainer = function() {\r\n    \tvar editCon = new BaseComponent();\r\n    \teditCon.className(\"edit-container\");\r\n    \teditCon.percentWidth(100);\r\n    \teditCon.percentHeight(100);\r\n    \tself.addChild(editCon);\r\n    \teditCon.mainContainer().attr(\"pointer-events\", \"none\");\r\n    \tself.editCon = editCon;\r\n    };\r\n    \r\n    /**\r\n     * 移除编辑容器\r\n     */\r\n    var removeEditContainer = function() {\r\n    \tif(self.editCon) {\r\n    \t\tself.removeChild(self.editCon);\r\n    \t\tdelete self.editCon;\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 创建框选矩形\r\n     */\r\n    var createSelectRect = function(x, y) {\r\n        if(self.editCon) {\r\n            var con = self.editCon.mainContainer();\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node() === null) {\r\n            \tselectRectX = x;\r\n            \tselectRectY = y;\r\n                con.append(\"rect\")\r\n                    .attr(\"class\", \"select\")\r\n                    .attr(\"x\", selectRectX)\r\n                    .attr(\"y\", selectRectY)\r\n                    .attr(\"stroke\", \"#0078d7\")\r\n                    .attr(\"stroke-width\", 1)\r\n                    .attr(\"fill\", \"#0078d7\")\r\n                    .attr(\"fill-opacity\", 0.1);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 绘制框选矩形\r\n     */\r\n    var drawSelectRect = function() {\r\n        if(self.editCon) {\r\n            var con = self.editCon.mainContainer();\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node()) {\r\n                var sx, sy, mp = MouseUtil.mouse(self.mainContainer().node(), self.graph());//d3.mouse(con.node());\r\n                if(mp[0] < selectRectX) {\r\n                    w = selectRectX - mp[0];\r\n                    sx = mp[0];\r\n                } else {\r\n                    w = mp[0] - selectRectX;\r\n                    sx = selectRectX;\r\n                }\r\n                if(mp[1] < selectRectY) {\r\n                    h = selectRectY - mp[1];\r\n                    sy = mp[1];\r\n                } else {\r\n                    h = mp[1] - selectRectY;\r\n                    sy = selectRectY;\r\n                }\r\n                rect.attr(\"x\", Math.round(sx)).attr(\"y\", Math.round(sy))\r\n                    .attr(\"width\", Math.round(w)).attr(\"height\", Math.round(h));\r\n            }\r\n        }\r\n    };\r\n    \r\n     /**\r\n     * 移除框选矩形\r\n     */\r\n    var removeSelectRect = function() {\r\n        if(self.editCon) {\r\n        \tself.editCon.mainContainer().select(\"rect.select\").remove();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 准备开始画连线\r\n     * @param x1, y1 起点坐标\r\n     * @param d 连线数据对象\r\n     */\r\n    var startDrawLink = function(x1, y1, d) {\r\n        if(!isDrawLink) {\r\n            return;\r\n        }\r\n        d.source = {x:x1, y:y1, ins:d.ins};\r\n        d.target = {x:x1+1, y:y1+1, ins:d.ins};\r\n        var rendererConfig;\r\n        //获取节点渲染器配置\r\n        if(d.renderer) {\r\n            rendererConfig = self.data().renderers[d.renderer];\r\n        }\r\n        drawlinkIns = ClassFactory.newLinkInstance(rendererConfig.clazz, [self.linksContainer.mainContainer(), d]);\r\n        drawlinkIns.config(rendererConfig.config)\r\n        drawlinkIns.render();\r\n    };\r\n    \r\n    /**\r\n     * 画连线\r\n     * @param x1, y1 起点坐标\r\n     * @param x2, y2 终点坐标\r\n     */\r\n    var drawLink = function(x1, y1, x2, y2) {\r\n        if(isDrawLink && drawlinkIns) {\r\n            var d = drawlinkIns.itemData();\r\n            d.source.x = x1;\r\n            d.source.y = y1;\r\n            d.target.x = x2;\r\n            d.target.y = y2;\r\n            drawlinkIns.update();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 结束画连线\r\n     */\r\n    var endDrawLink = function() {\r\n        if(!isDrawLink) {\r\n            return;\r\n        }\r\n        if(drawlinkIns) {\r\n            drawlinkIns.el.remove();\r\n            drawlinkIns = null;\r\n        }\r\n        isDrawLink = false;\r\n    };\r\n\r\n    /**\r\n     * 增加一个节点界面操作\r\n     * @param node 节点数据对象\r\n     */\r\n    this.addNodeInUI = function(node) {\r\n    \tself.addNode(node);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 批量增加节点界面操作 \r\n     * @param nodes 节点数据对象数组\r\n     */\r\n    this.addNodesInUI = function(nodes) {\r\n        self.addNodes(nodes);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 增加一条连线界面操作\r\n     * @param link 连线数据对象 \r\n     */\r\n    this.addLinkInUI = function(link) {\r\n    \tself.addLink(link);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 批量增加连线界面操作\r\n     * @param links 连线数据对象数组\r\n     */\r\n    this.addLinksInUI = function(links) {\r\n        self.addLinks(links);\r\n        self.update(true);\r\n    };\r\n\r\n    /**\r\n     * 删除节点界面操作 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeNodeInUI = function(id) {\r\n        self.removeNode(id);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除节点界面操作 \r\n     * @param ids 要删除的节点id数组\r\n     */\r\n    this.removeNodesInUI = function(ids) {\r\n        self.removeNodes(ids);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 删除连线界面操作 \r\n     * @param link 要删除的连线数据对象\r\n     */\r\n    this.removeLinkInUI = function(link) {\r\n        self.removeLink(link);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除连线界面操作 \r\n     * @param links 要删除的连线数据对象数组\r\n     */\r\n    this.removeLinksInUI = function(links) {\r\n        if(!links || !links.length) {\r\n            return;\r\n        }\r\n        self.removeLinks(links);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 批量删除选中节点和连线界面操作 \r\n     */\r\n    this.removeAllSelectedInUI = function() {\r\n    \tvar plugin, links = [], nodeIds = [];\r\n    \tself.nodesIns.forEach(function(ins) {\r\n            plugin = ins.normalChild();\r\n            if(plugin && plugin.selected()){\r\n                nodeIds.push(plugin.el.data()[0].id);\r\n            }\r\n        });\r\n    \tself.linksIns.forEach(function(ins) {\r\n    \t\tplugin = ins.normalChild();\r\n            if(plugin && plugin.selected()){\r\n            \tlinks.push(plugin.el.data()[0]);\r\n            }\r\n        });\r\n        self.removeNodes(nodeIds);\r\n        self.removeLinks(links);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 删除节点下的子节点，同时清除link信息界面操作 \r\n     * @param id 要删除的节点id\r\n     */\r\n    this.removeChildNodesInUI = function(id) {\r\n        self.removeChildNodes(id);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 展开节点界面操作\r\n     * @param id 要展开的节点id\r\n     * @param isExpandAll 是否强制展开所有子孙节点，默认为false,\r\n     *                    若为false则原先合拢的子孙节点在父节点展开后保持原有状态；若为true则强制展开所有子孙节点\r\n     */\r\n    this.expandNodeInUI = function(id, isExpandAll) {\r\n        self.expandNode(id, isExpandAll);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 合拢节点界面操作\r\n     * @param id 要合拢的节点id\r\n     */\r\n    this.collapseNodeInUI = function(id) {\r\n        self.collapseNode(id);\r\n        self.update(true);\r\n    };\r\n    \r\n    /**\r\n     * 展开或者合拢节点界面操作\r\n     * @param node 当前要展开或者合拢的节点数据对象\r\n     */\r\n    this.expandOrCollapseNodeInUI = function(node) {\r\n    \tif(!node.enabledExpand) {\r\n            return;\r\n        }\r\n        self.expandOrCollapseNode(node);\r\n        self.update(true);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // change data control\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 清空变更集数据\r\n     */\r\n    var clearChangeData = function() {\r\n        changeData.nodes.enter = {};\r\n        changeData.nodes.update = {};\r\n        changeData.links.enter = {};\r\n        changeData.links.update = {};\r\n        changeData.groups.enter = {};\r\n        changeData.groups.update = {};\r\n    };\r\n    \r\n    /**\r\n     * 添加数据到变更集\r\n     * @param arguments[0] 变更数据\r\n     * @param arguments[1] 目标源对象\r\n     */\r\n    var addItemsToChangeData = function() {\r\n    \tif(arguments.length < 2) {\r\n    \t\treturn false;\r\n    \t}\r\n        var source = arguments[1];\r\n        if(!ObjectUtil.isObject(source)) {\r\n            return;\r\n        }\r\n        if(ObjectUtil.isArray(arguments[0])) {\r\n            var items = arguments[0];\r\n            for(var item, i = 0, len = items.length; i < len; i++) {\r\n                item = items[i];\r\n                source[self.bindKeyFn(item)] = item;\r\n            }\r\n        } else {\r\n            var item = arguments[0];\r\n            source[self.bindKeyFn(item)] = item;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 数据是否在变更集中\r\n     * @param arguments[0] 带检测项数据对象\r\n     * @param arguments[1] 目标源对象\r\n     * @return 返回检测结果\r\n     */\r\n    var isItemInChangeData = function() {\r\n    \tif(arguments.length < 2) {\r\n    \t\treturn false;\r\n    \t}\r\n        var source = arguments[1];\r\n        if(!ObjectUtil.isObject(source)) {\r\n            return false;\r\n        }\r\n        return source.hasOwnProperty(self.bindKeyFn(arguments[0]));\r\n    };\r\n    \r\n    /**\r\n     * 触发鹰眼变更\r\n     */\r\n    function fireContentChange(){\r\n        self.mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.CONTENT_CHANGE,true,true));\r\n    }\r\n    \r\n    Topology.clazzName = \"Topology\";\r\n    \r\n    // 初始化\r\n    this.init();\r\n};\r\n\r\nTopology.struct = function(ghca_charts) {\r\n\tvar BaseChart = ghca_charts.view.component.charts.baseChart;\r\n\tBaseChart.struct(ghca_charts);\r\n    Topology.prototype = Object.create(BaseChart.prototype);\r\n    Topology.prototype.constructor = Topology;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n//显示所有节点\r\nTopology.SHOW_ALL_LEVEL_NODES = 99999;\r\n\r\n//显示第一层级所有节点\r\nTopology.SHOW_FIRST_LEVEL_NODES = 0;\r\n\r\n//模式常量\r\nTopology.MODE_NORMAL \t= \"normal\";\r\nTopology.MODE_EDIT \t\t= \"edit\";\r\n\r\nmodule.exports = Topology;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/topology.js\n// module id = 44\n// module chunks = 0","var Tree = function(_ele,_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n\tconst BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart    = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const Constant     = ghca_charts.view.util.constant;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const BaseEvent =  ghca_charts.events.BaseEvent;\r\n    const ObjectUtil =  ghca_charts.view.util.objectUtil;\r\n    const DataParser = ghca_charts.view.util.dataParser;\r\n\r\n    BaseChart.apply(this, arguments);\r\n\r\n    var self = this,\r\n        superZoomHandler = self.zoomHandler,\r\n        superResize = self.resize,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners;\r\n    self.className(\"tree\");\r\n    //开始拖动节点\r\n    var startDrag = false;\r\n    //拖动中的节点\r\n    var draggingNode = null;\r\n    //目标节点\r\n    var targetNode = null;\r\n\r\n    var self = this;\r\n\r\n    //保存节点实例数据 id:ins\r\n    var nodeInsMap = d3.map();\r\n    this.nodeInsMap = function(){\r\n        return nodeInsMap;\r\n    }\r\n    //保存连线实例数据 id:ins\r\n    var linkInsMap = d3.map();\r\n    this.linkInsMap = function(){\r\n        return linkInsMap;\r\n    }\r\n    \r\n    //use start  //////////////////////\r\n    //默认排序\r\n    var sort = function(a,b){\r\n        return b.data.name.localeCompare(a.data.name);\r\n    };\r\n\r\n    /**\r\n     * 设置排序方式\r\n     * @param func\r\n     */\r\n    this.sort = function(func){\r\n        if(arguments.length){\r\n            sort = func;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置拖动位置\r\n     * @param elem 目标元素\r\n     * @param x x\r\n     * @param y y\r\n     */\r\n    this.setDragPosition = function(ele,d){\r\n        ele.attr(\"transform\", \"translate(\" + [d.x, d.y] + \")\");\r\n        var children = d.children;\r\n        var linkIns = self.linkInsMap().get(d.data[self.idKey()]);\r\n        if(linkIns)linkIns.render();\r\n        if(children){\r\n            children.forEach(function (child){\r\n                linkIns = self.linkInsMap().get(child.data[self.idKey()]);\r\n                if(linkIns)linkIns.render();\r\n            });\r\n        }\r\n        setTimeout(self.fireContentChange,100);\r\n    }\r\n\r\n    /**\r\n     * 节点开始拖动\r\n     */\r\n    this.node_dragStartHandler = function(d) {\r\n        d.x0 = d.x;\r\n        d.y0 = d.y;\r\n        startDrag = true;\r\n        d3.event.sourceEvent.stopPropagation();\r\n    };\r\n\r\n    /**\r\n     * 节点拖动中\r\n     */\r\n    this.node_dragHandler = function(d) {\r\n        // if(!d.parent)return;\r\n        if(!self.editable()){\r\n            return;\r\n        }\r\n        if(startDrag){\r\n            draggingNode = d;\r\n            if(draggingNode){\r\n                //暂时注释，会出现图层闪动\r\n             /*   self.nodesContainer.mainContainer().selectAll(\"g.tree-nodeContainer\").sort(function(a, b) { // select the parent and sort the path's\r\n                    if (a.id != draggingNode.id) return 1; // a is not the hovered element, send \"a\" to the back\r\n                    else return -1; // a is the hovered element, bring \"a\" to the front\r\n                });*/\r\n                d.x = d3.event.x,d.y= d3.event.y;\r\n                d.data.x = d.x,d.data.y= d.y;\r\n                self.setDragPosition(d3.select(this),d);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 内容变更事件\r\n     */\r\n    this.fireContentChange = function(){\r\n        self.mainContainer().node().dispatchEvent(EventUtil.createEvent(BaseEvent.CONTENT_CHANGE,true,true));\r\n    }\r\n    /**\r\n     * 节点结束拖动\r\n     */\r\n    this.node_dragEndHandler = function(d) {\r\n        if(self.editable())\r\n            if (d.parent && draggingNode && targetNode && targetNode!=draggingNode && draggingNode.parent!=targetNode) {\r\n                draggingNode.data[self.parentKey()] = targetNode.data[self.idKey()];\r\n                self.update();\r\n            }else{\r\n                if(draggingNode) {\r\n                    d.x = d.x0,d.y=d.y0;\r\n                    self.setDragPosition(d3.select(this),d);\r\n                }\r\n            }\r\n        draggingNode = null;\r\n        startDrag = false;\r\n    };\r\n\r\n    var editable = false;\r\n    this.editable = function(value){\r\n        if(!arguments.length)return editable;\r\n        editable = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 节点唯一主键\r\n     * @type {string}\r\n     */\r\n    var idKey = \"id\";\r\n    this.idKey = function(value){\r\n        if(!arguments.length)return idKey;\r\n        idKey = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 节点唯一父主键\r\n     * @type {string}\r\n     */\r\n    var parentKey = \"parentId\";\r\n    this.parentKey = function(value){\r\n        if(!arguments.length)return parentKey;\r\n        parentKey = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 显示更多操作\r\n     * @type {Array}\r\n     */\r\n    var more = [];\r\n    this.more = function(value){\r\n        if(!arguments.length)return more;\r\n        if(value)\r\n            more = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 手动操作缩放\r\n     * @type {Array}\r\n     */\r\n    var useScale = true;\r\n    this.useScale = function(value){\r\n        if(!arguments.length)return useScale;\r\n        useScale = value;\r\n        return this;\r\n    }\r\n    //use end  //////////////////////\r\n\r\n    \r\n    //override start\r\n\r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function(ele) {\r\n        superInit(ele);\r\n        var data = self.data();\r\n        self.idKey(data[\"idField\"]);\r\n        self.parentKey(data[\"parentField\"]);\r\n        self.editable(data[\"editable\"]);\r\n        self.more(data[\"more\"]);\r\n        // self.autoLayout(data[\"autoLayout\"]);\r\n    };\r\n\r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        self.treeContainer =  self.mainContainer().append(\"g\").attr(\"class\", \"tree-Container\");\r\n        //放置所有连线的g元素\r\n        self.linksContainer = self.treeContainer.append(\"g\").attr(\"class\", \"tree-linksContainer\");\r\n        //放置所有节点的g元素\r\n//        self.nodesContainer = self.treeContainer.append(\"g\").attr(\"class\", \"tree-nodesContainer\");\r\n        \r\n        var nodesContainer = new BaseComponent();\r\n        nodesContainer.className(\"tree-nodesContainer\");\r\n        nodesContainer.isTransform(false);\r\n        self.addChild(nodesContainer);\r\n        self.nodesContainer = nodesContainer;\r\n    };\r\n\r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n        self.mainContainer().node().addEventListener(\"expandTool_collapsed\",function(e){\r\n            event.stopImmediatePropagation();\r\n            var detail = e.detail;\r\n            detail.data.collapsed = detail.collapsed;\r\n            detail.data.more = true;\r\n            self.update();\r\n        });\r\n        self.mainContainer().node().addEventListener(\"moreTool_expand\",function(e){\r\n            event.stopImmediatePropagation();\r\n            var detail = e.detail;\r\n            detail.data.moretool = false;\r\n            detail.parent.data.more = false;\r\n            self.update();\r\n        });\r\n        self.mainContainer().node().addEventListener(BaseEvent.EAGLE_EYE_DRAG,function(e){\r\n            event.stopImmediatePropagation();\r\n            var detail = e.detail;\r\n            self.x(detail.x);\r\n            self.y(detail.y);\r\n            self.renderTransform();\r\n            //IE 2013\r\n            self.linkInsMap().each(function(d){\r\n                d.render();\r\n            })\r\n        });\r\n    };\r\n\r\n    this.createLinkIns = function(target,d){\r\n        var ins = self.linkInsMap().get(d.data[self.idKey()]);\r\n        var rendererConfig;\r\n        //获取节点渲染器配置\r\n        if(d.data.edgeRenderer) {\r\n            rendererConfig = self.data().renderers[d.data.edgeRenderer];\r\n        }\r\n        if(!ins){\r\n            ins = ClassFactory.newLinkInstance(rendererConfig.clazz, [target, d]);\r\n            ins.config(rendererConfig.config);\r\n            // Concurrent.Thread.create(function(){\r\n            //      arguments[0].render();\r\n            // },ins);\r\n            // ins.render();\r\n            self.linkInsMap().set(d.data[self.idKey()],ins);\r\n        }else{\r\n            ins.data(d);\r\n            // ins.render();\r\n        }\r\n    }\r\n\r\n    this.createNodeIns = function(target,d){\r\n        // var d = node.data;\r\n        var ins = self.nodeInsMap().get(d.data[self.idKey()]);\r\n        // self.setNodeData(d);\r\n        if(!ins){\r\n            var rendererConfig;\r\n            //获取节点渲染器配置\r\n            if(d.data.nodeRenderer) {\r\n                rendererConfig = self.data().renderers[d.data.nodeRenderer];\r\n            }\r\n            if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n            \t//若节点渲染器是一个组件，则重新设置一些配置数据\r\n                var nodeData = d.data;\r\n                rendererConfig = self.getRendererConfig(nodeData, \"fill\", \"nodeRenderer\");\r\n                if(rendererConfig && rendererConfig.type === \"chart\" && rendererConfig.series) {\r\n                    var chartData, series = rendererConfig.series;\r\n                    for(var j = 0, len1 = series.length; j < len1; j++) {\r\n                        chartData = series[j];\r\n                        //这里config设置的width和height值无效，渲染器组件宽高为线的高度值\r\n                        chartData.width = rendererConfig.width ? rendererConfig.width : 0;\r\n                        chartData.height = rendererConfig.height ? rendererConfig.height : 0;\r\n                        //pie的位置特殊处理\r\n                        if(chartData.type === \"pie\") {\r\n                            rendererConfig.x = -chartData.width / 2;\r\n                            rendererConfig.y = -chartData.height / 2;\r\n                        }\r\n                        //组装图表数据\r\n                        DataParser.createChartData(chartData, nodeData);\r\n                        if(d.hasOwnProperty(\"children\"))\r\n                            nodeData.children = d.children;\r\n                    }\r\n                }\r\n                //渲染节点内容\r\n                ins = ClassFactory.newRenderersInstanceByData(d.nodeContainer, self, \"tree-node\", [nodeData])[0];\r\n            } else {\r\n            \t//节点为plugin\r\n            \tins = ClassFactory.newNodeInstance(rendererConfig.clazz, [target, d]);\r\n                ins.config(rendererConfig.config);\r\n            }\r\n        \t\r\n            if(ins.hasOwnProperty(\"ownerData\")) {\r\n                ins.ownerData(self.data());\r\n            }\r\n            \r\n            // Concurrent.Thread.create(function(){\r\n            //     arguments[0].render();\r\n            // },ins);\r\n            // ins.render();\r\n            // ins.addEventListener(\"collapsed\",function(e){\r\n            //     self.collapsed(e);\r\n            //     self.fireContentChange();\r\n            // });\r\n            self.nodeInsMap().set(d.data[self.idKey()],ins);\r\n        }else{\r\n        \tif(ins instanceof BaseComponent) {\r\n//        \t\tins.update(d);\r\n        \t} else {\r\n        \t\tins.data(d);\r\n        \t}\r\n        }\r\n        d.ins = ins;\r\n        d.data.legendIns = ins;\r\n    }\r\n    /**\r\n     * 更新位置\r\n     */\r\n    this.updatePosition = function(){\r\n        var nodeSelections = self.nodesContainer.mainContainer().selectAll(\"g.tree-nodeContainer\");\r\n        nodeSelections.transition()//这里有延时函数 可能会导致事件绑定过晚问题\r\n            .duration(function(d){\r\n                return d.depth*80;\r\n            })\r\n            .attr(\"transform\",function(d){\r\n                return \"translate(\" + [d.x,d.y]  + \")\";\r\n            }).on(\"start\",function(d){                \r\n            var nodeIns = self.nodeInsMap().get(d.data[self.idKey()]);\r\n            if(nodeIns){\r\n                nodeIns.render();\r\n            }\r\n        }).on(\"end\",function(d){\r\n            var linkIns = self.linkInsMap().get(d.data[self.idKey()]);\r\n            if(linkIns){\r\n                linkIns.render();\r\n            }\r\n        });\r\n        setTimeout(self.autoScaleHandler,800);\r\n    }\r\n\r\n    this.centerNodesAndSelected=function(id){\r\n        var nodes = self.nodeInsMap().values();\r\n        var node=null;\r\n        for(var i=0;i<nodes.length;i++){\r\n            if(nodes[i].data().id===id){\r\n                node=nodes[i];\r\n                break;\r\n            }\r\n        }\r\n        if(!node){\r\n            return;\r\n        }\r\n        var isSelect = arguments.length > 1 ? arguments[1] === true : false;\r\n        //取消所有节点选中状态\r\n        var nodesIns = nodes;\r\n    \r\n        self.setSelected(false, nodesIns);\r\n        \r\n        var currentX = NaN,\r\n            currentY = NaN;\r\n\r\n        var nodeIns = node;\r\n        if (isSelect) {\r\n            nodeIns.selected(true);\r\n        }\r\n        currentX = node.data().x;\r\n        currentY = node.data().y;\r\n     \r\n        if(isNaN(currentX) || isNaN(currentY)) {\r\n            return;\r\n        }\r\n        \r\n        //把搜索结果点外接矩形中心点移动到图 表中心位置\r\n        var x = self.x(), y = self.y(), \r\n            moveX = self.width()/2, moveY = self.height()/2;\r\n        x = (moveX - currentX * self.scaleX()) * self.graph().scaleX();\r\n        y = (moveY - currentY * self.scaleY()) * self.graph().scaleY();\r\n        self.x(Math.round(x));\r\n        self.y(Math.round(y));\r\n        // self.layout().model().stop();\r\n        var transition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n        self.renderTransform(transition);\r\n    }\r\n\r\n        /**\r\n     * 设置传入的对象是否显示选中状态\r\n     * @param selected 对象是否显示选中状态\r\n     * @param insArray 要设置的对象数组，若不传则为图表中的所有对象(节点+连线)\r\n     */\r\n    this.setSelected = function(selected, insArray) {\r\n        if(insArray) {\r\n            for (var i = 0, len = insArray.length; i < len; i++) {\r\n                insArray[i].selected(selected);\r\n            }\r\n        } else {\r\n            var nodes = self.nodeInsMap().values();\r\n            for (var i = 0, len = nodes.length; i < len; i++) {\r\n                nodes[i].selected(selected);\r\n            }\r\n        }\r\n    };\r\n\r\n    this.autoScaleHandler = function(){\r\n        if( self.useScale()){\r\n            setTimeout(self.fireContentChange,100);\r\n            return;\r\n        }\r\n        var node = self.mainContainer().node();\r\n\r\n        var rect = node.getBBox();\r\n        var targetWidth = rect.width,//边距\r\n            targetHeight = rect.height,//边距\r\n            width = self.width(),\r\n            height = self.height(),\r\n            x = 0;\r\n\r\n        var scale = width/targetWidth<height/targetHeight? width/targetWidth: height/targetHeight;\r\n\r\n        if(scale<1){\r\n            if(width>targetWidth*scale)x=(width-targetWidth*scale)/2;\r\n            self.scaleX(scale);\r\n            self.scaleY(scale);\r\n            self.x(x+Math.abs(rect.x*scale));\r\n            self.y((height-targetHeight*scale)/2+rect.y*scale);\r\n        }\r\n\r\n        self.renderTransform(\"position\");\r\n\r\n        //IE 2013\r\n        self.linkInsMap().each(function(d){\r\n            d.render();\r\n        })\r\n        setTimeout(self.fireContentChange,100);\r\n    }\r\n    \r\n    this.updateView = function(){\r\n        var root = self.layout().treeRootNode();\r\n        var nodeDatas = self.nodesContainer.mainContainer().selectAll(\"g.tree-nodeContainer\")\r\n            .data(root.descendants(),function(d){\r\n                return d.data[self.idKey()];\r\n            });\r\n        //删除实例映射\r\n        nodeDatas.exit().each(function(node){\r\n            self.nodeInsMap().remove(node.data[self.idKey()]);\r\n        });\r\n        nodeDatas.exit().remove();\r\n        nodeDatas.enter()\r\n            .each(function(d) {\r\n            \t//这样写是为了可以插入子组件到渲染器中，图表子组件的父容器必须是baseComponent组件\r\n                var nodeContainer = new BaseComponent();\r\n                nodeContainer.className(\"tree-nodeContainer\");\r\n                nodeContainer.isTransform(false);\r\n                self.nodesContainer.addChild(nodeContainer);\r\n                d.nodeContainer = nodeContainer;\r\n                nodeContainer.mainContainer()\r\n                    .data([d])\r\n                    .on(\"mouseover\", function(d) {\r\n                        targetNode = d;\r\n                    })\r\n                    .on(\"mouseout\", function() {\r\n                        targetNode = null;\r\n                    })\r\n                    .call(d3.drag()\r\n                        .on(\"start\", self.node_dragStartHandler)\r\n                        .on(\"drag\", self.node_dragHandler)\r\n                        .on(\"end\", self.node_dragEndHandler));\r\n                });\r\n\r\n        var nodeSelections = self.nodesContainer.mainContainer().selectAll(\"g.tree-nodeContainer\");\r\n        nodeSelections.each(function(d){\r\n            self.createNodeIns(d3.select(this),d);\r\n        });\r\n\r\n        var linkDatas = self.linksContainer.selectAll(\"g.tree-linkContainer\")\r\n            .data(root.descendants().slice(1),function(d){return d.data[self.idKey()]});\r\n        linkDatas.exit().each(function(node){\r\n            self.linkInsMap().remove(node.data[self.idKey()]);\r\n        });\r\n        linkDatas.exit().remove();\r\n        linkDatas.enter().append(\"g\")\r\n            .attr(\"class\", \"tree-linkContainer\");\r\n\r\n        var linkSelections = self.linksContainer.selectAll(\"g.tree-linkContainer\");\r\n        linkSelections.each(function(d){\r\n            self.createLinkIns(d3.select(this),d);\r\n        });\r\n        var callback = function(){\r\n            var self = arguments[0];\r\n            self.updatePosition();\r\n        }\r\n        if(Window.Concurrent)Concurrent.Thread.create(callback,self)\r\n        else callback(self);\r\n    }\r\n\r\n    this.zoomHandler = function(){\r\n        self.useScale(true);\r\n        superZoomHandler();\r\n    }\r\n\r\n    this.resize = function(){\r\n        self.useScale(false);\r\n        superResize();\r\n    }\r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tif(!self.data() ||　!ObjectUtil.isArray(self.data().nodes) || self.data().nodes.length === 0) {\r\n    \t\treturn;\r\n    \t}\r\n        self.layout().size([self.width(), self.height()/2]);\r\n        if(self.data().nodeSize){\r\n            self.layout().nodeSize(self.data().nodeSize);\r\n        }\r\n\r\n        var root = d3.stratify().id(function(d){\r\n            return d[idKey];\r\n        }).parentId(function(d){\r\n            return d[parentKey];\r\n        })(self.data().nodes);\r\n\r\n        root.sort(self.sort());\r\n\r\n        //删除不可见及不展开元素\r\n        root.descendants().forEach(function(node){\r\n            var data = node.data;\r\n            if(data[\"visible\"] === false){\r\n                var parent = node.parent,children = parent?parent.children:undefined;\r\n                if(children)\r\n                    children.splice(children.indexOf(node),1);\r\n            }\r\n            if(data[\"collapsed\"] === true){\r\n                node.children? node.children= undefined: delete node.children;\r\n            }\r\n            var more = self.more();\r\n            var length = more.length;\r\n            if(length>0 && node.depth<length && node.data.more!==false){\r\n                var count = more[node.depth],\r\n                children = node.children?node.children:[];\r\n                if(children.length>count){\r\n                    var v = count-1;//超出范围，这显示数量-1个加more\r\n                    children.splice(v-1,children.length-v);\r\n                    children[children.length-1].data.moretool = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        self.layout().treeRootNode(root);\r\n\r\n        var callback = function(){\r\n            var self = arguments[0];\r\n            //布局\r\n            self.layout().update();\r\n\r\n            self.updateView();\r\n        }\r\n        if(Window.Concurrent)Concurrent.Thread.create(callback,self)\r\n        else callback(self);\r\n    };\r\n\r\n    Tree.clazzName = \"Tree\";\r\n    \r\n    // 初始化\r\n    this.init(_ele);\r\n};\r\n\r\nTree.struct = function(ghca_charts) {\r\n\tvar BaseChart = ghca_charts.view.component.charts.baseChart;\r\n\tBaseChart.struct(ghca_charts);\r\n    Tree.prototype = Object.create(BaseChart.prototype);\r\n    Tree.prototype.constructor = Tree;\r\n};\r\n\r\nmodule.exports = Tree;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/tree.js\n// module id = 45\n// module chunks = 0","// treemap类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _data treemap配置数据\r\n * @param _layout treemap布局对象，不传就为默认布局\r\n */\r\nvar Treemap = function(_data, _layout) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const BaseChart = ghca_charts.view.component.charts.baseChart;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const ObjectUtil =  ghca_charts.view.util.objectUtil;\r\n\r\n    BaseChart.apply(this, arguments);\r\n    \r\n    var node,\r\n        self = this,\r\n        isInit = true,\r\n        superInit = self.init,\r\n        superInitAllContainers = self.initAllContainers,\r\n        superAddListeners = self.addListeners,\r\n        superRenderPosition = self.renderPosition,\r\n        superRefreshData = self.refreshData,\r\n        xScale = d3.scaleLinear(),\r\n        yScale = d3.scaleLinear();\r\n    \r\n    self.className(\"seriesTreemap\");\r\n    //添加可从配置文件读取的属性名称\r\n//    self.addAttributes(\"attribute\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    // ------------------------------\r\n    // nodeInsMap\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 节点实例map\r\n     */\r\n    var nodeInsMap = d3.map();\r\n    this.nodeInsMap = function(){\r\n        return nodeInsMap;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // override Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        var items = self.data().data;\r\n        self.visibleItems(items);\r\n        self.itemsIns = [];\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n        superInitAllContainers();\r\n        //放置所有项的g元素\r\n        if(!self.itemsContainer) {\r\n        \tvar itemsContainer = new BaseComponent();\r\n            itemsContainer.className(\"treemap-ItemsContainer\");\r\n            var size = self.layout().size();\r\n            itemsContainer.width(size[0]);\r\n            itemsContainer.height(size[1]);\r\n            self.addChild(itemsContainer);\r\n            itemsContainer.bgRect.attr(\"id\",  \"treemap-bg-\" + itemsContainer.id());\r\n            self.itemsContainer = itemsContainer;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 初始化添加所有监听的方法\r\n     */\r\n    this.addListeners = function() {\r\n        superAddListeners();\r\n    };\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n   this.refreshData = function() {\r\n        superRefreshData();\r\n        //生成visible属性，默认值为true\r\n        var items = self.data().data;\r\n        for(var item, i = 0, len = items.length; i < len; i++) {\r\n            item = items[i];\r\n            if(!item.hasOwnProperty(\"visible\")) {\r\n                item.visible = true;\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 渲染图表内容相关位置 \r\n     */\r\n    this.renderPosition = function() {\r\n    \tsuperRenderPosition();\r\n    \t\r\n    \tvar itemsContainer = self.itemsContainer;\r\n        if(itemsContainer) {\r\n        \tvar size = self.layout().size();\r\n        \t//内容居中\r\n            itemsContainer.x((self.width() - size[0]) / 2);\r\n            itemsContainer.y((self.height() - size[1]) / 2);\r\n            //刷新容器尺寸\r\n            itemsContainer.width(size[0]);\r\n            itemsContainer.height(size[1]);\r\n            itemsContainer.renderTransform();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据当前数据重新渲染内容，并重新计算布局内容\r\n     */\r\n    this.update = function() {\r\n    \tif(!self.data() ||　!ObjectUtil.isArray(self.data().data) || self.data().data.length === 0) {\r\n            return;\r\n        }\r\n    \tself.refreshData();\r\n    \t//只用当前可见的项作为渲染数据源\r\n        var items = self.data().data;\r\n        self.visibleItems(self.filterArrayByElementProperty(items, \"visible\", true));\r\n        \r\n        //计算布局，获取项数据数组\r\n        self.layout().update();\r\n        var leaves = self.layout().leaves();\r\n        node = self.layout().root();\r\n        \r\n    \t//添加遮罩\r\n        var itemsContainer = self.itemsContainer;\r\n    \tvar itemsCon = itemsContainer.mainContainer();\r\n    \tvar bgId = itemsContainer.bgRect.attr(\"id\");\r\n    \titemsCon\r\n    \t   .append(\"clipPath\").attr(\"id\", function(d) {\r\n                return \"treemap-clip-\" + bgId;\r\n            })\r\n            .append(\"use\").attr(\"xlink:href\", function(d) {\r\n                return \"#\" + bgId;\r\n            });\r\n        itemsCon.attr(\"clip-path\", function(d) {\r\n            return \"url(#treemap-clip-\" + bgId + \")\";\r\n        });\r\n    \t\r\n    \t//render items\r\n        var treemapItemsUpdate = itemsCon.selectAll(\"g.treemap-item\")\r\n            .data(leaves, function(d) {\r\n                return d.data[self.layout().stratifyId()];\r\n            });\r\n        //update\r\n        treemapItemsUpdate.\r\n            transition().duration(self.animation() ? 500 : 0)\r\n            .attr(\"transform\", function(d) {\r\n                return \"translate(\" + d.x0 + \",\" + d.y0 + \")\";\r\n            });\r\n        treemapItemsUpdate.each(function(d){\r\n            var ins = self.nodeInsMap().get(d.data[\"path\"]);\r\n            if(ins) {\r\n            \t//根据配置刷新数据内容\r\n                self.getRendererConfig(d.data, \"fill\");\r\n                ins.update(d);\r\n            }\r\n        });\r\n        //add\r\n        var treemapItemsEnter = treemapItemsUpdate.enter().append(\"g\").attr(\"class\", \"treemap-item\")\r\n            .attr(\"transform\", function(d) {\r\n                return \"translate(\" + d.x0 + \",\" + d.y0 + \")\";\r\n            })\r\n            .on(\"click\", cellClickHandler);\r\n        treemapItemsEnter.each(function(d){\r\n        \tvar rendererConfig = self.getRendererConfig(d.data, \"fill\");\r\n            var clazz = (rendererConfig && rendererConfig.clazz) ? rendererConfig.clazz : \"treemapNode\";\r\n            var nodeIns = ClassFactory.newNodeInstance(clazz, [d3.select(this), d]);\r\n            nodeIns.isChartFirstInit(isInit);\r\n            nodeIns.render();\r\n            self.nodeInsMap().set(d.data[\"path\"], nodeIns);\r\n            d.data.legendIns = nodeIns;\r\n        });\r\n        //delete\r\n        var treemapItemsExit = treemapItemsUpdate.exit();\r\n        treemapItemsExit.each(function(d){\r\n            self.nodeInsMap().remove(d.data[self.layout().stratifyId()]);\r\n        });\r\n        treemapItemsExit.remove();\r\n        \r\n        self.renderPosition();\r\n        isInit = false;\r\n    };\r\n    \r\n    /**\r\n\t * override toString方法，用于打印本对象的一些基本信息\r\n\t */\r\n    this.toString = function() {\r\n        return (\"Treemap info: \"   +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(self.data(), null, 4));\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var cellClickHandler = function(d) { \r\n        return zoomCell(node == d.parent ? self.layout().root() : d.parent); \r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var zoomCell = function(d) {\r\n    \tvar x = d.x0;\r\n    \tvar y = d.y0;\r\n    \tvar dx = d.x1 - d.x0;\r\n    \tvar dy = d.y1 - d.y0;\r\n    \tvar size = self.layout().size();\r\n        var kx = size[0] / dx, ky = size[1] / dy;\r\n        xScale.range([0, size[0]]);\r\n        yScale.range([0, size[1]]);\r\n        xScale.domain([x, x + dx]);\r\n        yScale.domain([y, y + dy]);\r\n\r\n        var t = self.itemsContainer.mainContainer().selectAll(\"g.treemap-item\")\r\n            .transition().duration(self.animation() ? 500 : 0)\r\n            .attr(\"transform\", function(d) { \r\n                return \"translate(\" + xScale(d.x0) + \",\" + yScale(d.y0) + \")\"; \r\n            });\r\n\r\n        t.select(\"g.treemapNode rect\")\r\n            .attr(\"width\", function(d) { \r\n                return kx * (d.x1 - d.x0);\r\n            })\r\n            .attr(\"height\", function(d) { \r\n                return ky * (d.y1 - d.y0); \r\n            })\r\n\r\n        t.select(\"g.treemapNode g\").attr(\"transform\", function(d) { \r\n        \tvar position = d.data.data.labelPosition;\r\n            if(!position) {\r\n                position = 'center';\r\n            }\r\n            \r\n            var labelPosition = position.toLowerCase(), tx = 0, ty = 0;\r\n            var labelBox = this.getBBox();\r\n            var nodeW = kx * (d.x1 - d.x0);\r\n            var nodeH = ky * (d.y1 - d.y0);\r\n            if(labelPosition == 'bottom') {\r\n                tx = labelBox.width / 2;\r\n                ty = nodeH - labelBox.height / 2;\r\n            } else if(labelPosition == 'left') {\r\n                tx = labelBox.width / 2;\r\n                ty = nodeH / 2;\r\n            } else if(labelPosition == 'right') {\r\n                tx = nodeW - labelBox.width / 2;\r\n                ty = nodeH / 2;\r\n            } else if(labelPosition == 'top') {\r\n                tx = labelBox.width / 2;\r\n                ty = labelBox.height / 2;\r\n            } else {\r\n                //default center\r\n                tx = nodeW / 2;\r\n                ty = nodeH / 2;\r\n            }\r\n            //水平边界判断\r\n            if(labelBox.width > nodeW) {\r\n                tx = labelBox.width / 2;\r\n            }\r\n            \r\n            return \"translate(\"+tx+\",\"+ty+\")\";\r\n        });\r\n\r\n        node = d;\r\n        d3.event.stopPropagation();\r\n    }\r\n    \r\n    Treemap.clazzName = \"Treemap\";\r\n    \r\n    // 初始化\r\n    self.init();\r\n};\r\n\r\nTreemap.struct = function(ghca_charts) {\r\n\tvar BaseChart = ghca_charts.view.component.charts.baseChart;\r\n\tBaseChart.struct(ghca_charts);\r\n    Treemap.prototype = Object.create(BaseChart.prototype);\r\n    Treemap.prototype.constructor = Treemap;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = Treemap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/treemap.js\n// module id = 46\n// module chunks = 0","//垂直坐标轴\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _parent 坐标轴项所在容器对象\r\n * @param _data 坐标轴项数据\r\n */\r\nvar VerAxis = function(_parent, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseAxis = ghca_charts.view.component.charts.baseAxis;\r\n    \r\n    BaseAxis.apply(this, arguments);\r\n\r\n    var self = this,\r\n        superRenderAxis = self.renderAxis;\r\n    \r\n    //设置坐标轴默认位置\r\n    self.position(\"left\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    //------------------------------\r\n    //  attribute\r\n    //------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 渲染坐标轴\r\n     */\r\n    this.renderAxis = function() {\r\n        superRenderAxis();\r\n        \r\n    \tvar yScale, yAxis, boundBox, boundW, boundH, axisX, axisY,\r\n            domain = self.domain(), type = self.type(), padding = self.padding(), isReverse = self.isReverse();\r\n        if(type === \"time\") {\r\n            yScale = d3.scaleTime().clamp(true);\r\n        } else if(type === \"enum\") {\r\n            yScale = d3.scaleBand();\r\n        } else {\r\n            //type is value\r\n            yScale = d3.scaleLinear().clamp(true);\r\n        }\r\n        boundBox = self.parentChart().bgNode().getBBox();\r\n        boundW = boundBox.width;\r\n        boundH = boundBox.height;\r\n        axisH = boundH - padding.top - padding.bottom;\r\n        axisY = padding.top;\r\n        yScale.domain(domain).range(isReverse ? [0, axisH] : [axisH, 0]);\r\n            \r\n        if(self.position() === \"right\") {\r\n            yAxis = d3.axisRight(yScale);\r\n            axisX = boundW - padding.right;\r\n        } else {\r\n            yAxis = d3.axisLeft(yScale);\r\n            axisX = padding.left;\r\n        }\r\n        self.x(axisX);\r\n        self.y(axisY);\r\n        self.height(axisH);\r\n        //set tick opt\r\n        var tick = self.tick();\r\n        for(var key in tick) {\r\n            if(yAxis.hasOwnProperty(key)) {\r\n                yAxis[key](tick[key]);\r\n            }\r\n        }\r\n        //render x axis\r\n        if(!self.axisContainer) {\r\n            self.axisContainer = self.parent.append(\"g\").attr(\"class\", \"yAxis\");\r\n        }\r\n        self.axisContainer\r\n            .style(\"visibility\", self.visible() === false ? \"hidden\" : \"visible\")\r\n            .call(yAxis)\r\n            .attr(\"transform\", \"translate(\" + axisX + \",\" + axisY + \")\");\r\n            \r\n        self.scaleIns(yScale);\r\n        self.axisIns(yAxis);\r\n    };\r\n    \r\n    /**\r\n     * 渲染坐标轴说明标签\r\n     */\r\n    this.renderAxisLabel = function() {\r\n        var x, y, label, labelBox,\r\n            config = self.axisLabel(), \r\n            text = config.text;\r\n            pos = config.pos, \r\n            padding = config.padding;\r\n        if(text === \"\" || text === null || text === undefined) {\r\n            return;\r\n        }\r\n        \r\n        label = self.axisContainer.selectAll(\"text.axisLabel\");\r\n        if(label.node() === null) {\r\n            label = self.axisContainer.append(\"text\").attr(\"class\", \"axisLabel\");\r\n        }\r\n        label.text(text);\r\n        \r\n        //设置坐标轴说明标签样式\r\n        self.setAxisLabelStyle();\r\n        \r\n        //计算布局\r\n        var labelBox = label.node().getBBox();\r\n        var maxTickWidth = 0;\r\n        var maxTickHeight = 0;\r\n        self.axisContainer.selectAll(\"g.tick\").each(function(d){\r\n            var tickBox = d3.select(this).node().getBBox();\r\n            if(tickBox.width > maxTickWidth) {\r\n                maxTickWidth = tickBox.width;\r\n            }\r\n            if(tickBox.height > maxTickHeight) {\r\n                maxTickHeight = tickBox.height;\r\n            }\r\n        });\r\n        var rotate = -90, isAxisTop = false;\r\n        if(pos === \"bottom\") {\r\n        \ty = self.height() - labelBox.width / 2; \r\n        } else if(pos === \"middle\") {\r\n            y = self.height() / 2;    \r\n        } else if(pos === \"axisTop\") {\r\n            y = -labelBox.height / 2;\r\n            rotate = 0;\r\n            isAxisTop = true;\r\n        } else {//top default\r\n        \ty = labelBox.width / 2;\r\n        }\r\n        if(self.position() === \"left\") {\r\n        \tx = isAxisTop ? -labelBox.width / 2 - padding : -maxTickWidth - padding;\r\n        } else {//right\r\n            x = isAxisTop ? labelBox.width / 2 + padding : labelBox.height + maxTickWidth + padding;\r\n        }\r\n        \r\n        label.attr(\"transform\", \"translate(\" + x + \",\" + y + \")rotate(\" + rotate + \")\");\r\n    };\r\n    \r\n     /**\r\n     * 渲染刻度对应网格\r\n     * @rect 网格区域矩形\r\n     */\r\n    this.renderTickLine = function(rect) {\r\n        var x1, x2, y;\r\n        if(self.position() === \"left\") {\r\n            x1 = 0;\r\n            x2 = rect.w;\r\n        } else {\r\n            x1 = 0;\r\n            x2 = -rect.w;\r\n        }\r\n        \r\n        var ticks = self.axisContainer.selectAll(\"g.tick\");\r\n        var pathNode = self.axisContainer.select(\"path.domain\").node();\r\n        var axisPathHeight = pathNode ? pathNode.getBBox().height : NaN;\r\n        ticks.each(function() {\r\n            var transform = d3.select(this).attr(\"transform\");\r\n            var ty = parseFloat(transform.replace(/[^0-9.\\-, ]/g,'').split(/[, ]/g)[1]) + 0.5;\r\n            //与x轴重叠的网格线不渲染，否会遮挡x轴线\r\n            if(!isNaN(axisPathHeight) && (Math.abs(ty - axisPathHeight) < 1 || ty < 1)) {\r\n                return;\r\n            }\r\n            y = ty;\r\n            var line = self.gridLineContainer.append(\"line\").attr(\"class\", \"tickLine\")\r\n                .attr(\"x1\", x1).attr(\"y1\", y).attr(\"x2\", x2).attr(\"y2\", y);\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * 渲染刻度间对应网格\r\n     * @rect 网格区域矩形\r\n     */\r\n    this.renderInnerLine = function(rect) {\r\n        var x1, x2, y,\r\n        gapNum = self.gridLine().innerLine.gapNum;\r\n        if(gapNum < 1) {\r\n            return;\r\n        }\r\n        if(self.position() === \"left\") {\r\n            x1 = 0;\r\n            x2 = rect.w;\r\n        } else {\r\n            x1 = 0;\r\n            x2 = -rect.w;\r\n        }\r\n        \r\n        var ticks = self.axisContainer.selectAll(\"g.tick\");\r\n        var dy, minY = NaN, maxY = NaN, n = gapNum + 1;\r\n        ticks.each(function() {\r\n            var transform = d3.select(this).attr(\"transform\");\r\n            var ty = parseFloat(transform.replace(/[^0-9.\\-, ]/g,'').split(/[, ]/g)[1]) + 0.5;\r\n            if(isNaN(ty)) {\r\n                ty = 0;\r\n            }\r\n            if(isNaN(minY)) {\r\n                minY = ty;\r\n            }\r\n            if(isNaN(maxY)) {\r\n                maxY = ty;\r\n            }\r\n            if(ty < minY) {\r\n                minY = ty;\r\n            }\r\n            if(ty > maxY) {\r\n                maxY = ty;\r\n            }\r\n        });\r\n        dy = (maxY - minY) / (ticks.nodes().length - 1) / n;\r\n        \r\n        //tick top part\r\n        for(y = minY - dy; y > 0; y -= dy) {\r\n            self.gridLineContainer.append(\"line\").attr(\"class\", \"innerLine\")\r\n                .attr(\"x1\", x1).attr(\"y1\", y).attr(\"x2\", x2).attr(\"y2\", y);\r\n        }\r\n        //tick part and bottom part\r\n        var i = 0, axisH = self.height();\r\n        for(y = minY; y < axisH; y += dy, i++) {\r\n            //若有tickLine,则跳过\r\n            if(i % n !== 0) {\r\n                self.gridLineContainer.append(\"line\").attr(\"class\", \"innerLine\")\r\n                    .attr(\"x1\", x1).attr(\"y1\", y).attr(\"x2\", x2).attr(\"y2\", y);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 获取刻度坐标数据数组，该数组按升序排序。\r\n     * 若为水平坐标轴，则格式为[x1,...,xn]；若为垂直坐标轴，则格式为[y1,...,yn]\r\n     */\r\n    this.getTicksPos = function() {\r\n        var result = [];\r\n        var ticks = self.axisContainer.selectAll(\"g.tick\");\r\n        ticks.each(function() {\r\n            var transform = d3.select(this).attr(\"transform\");\r\n            var ty = parseFloat(transform.replace(/[^0-9.\\-, ]/g,'').split(/[, ]/g)[1]) + 0.5;\r\n            result.push(ty);\r\n        });\r\n        result.sort(function(a, b){return a - b;});\r\n        return result;\r\n    };\r\n    \r\n    this.toString = function() {\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n};\r\n\r\nVerAxis.struct = function(ghca_charts) {\r\n    var BaseAxis = ghca_charts.view.component.charts.baseAxis;\r\n    BaseAxis.struct(ghca_charts);\r\n    VerAxis.prototype = Object.create(BaseAxis.prototype);\r\n    VerAxis.prototype.constructor = VerAxis;\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = VerAxis;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/charts/verAxis.js\n// module id = 47\n// module chunks = 0","/**\r\n * 鹰眼组件\r\n * @param renderSvgElement 渲染位置\r\n * @param viewWidth 视图可视宽度\r\n * @param viewHeight 视图可视高度\r\n * @param targetSourceElement 目标svg元素\r\n * @constructor\r\n */\r\nvar EagleEye = function (renderSvgElement,viewWidth,viewHeight,targetSourceElement) {\r\n    if(arguments.length<4){\r\n        console.error(\"缺少参数\");\r\n        return;\r\n    }\r\n\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const UUIDUtil = ghca_charts.view.util.UUIDUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    //力布局控制\r\n    var dragEnable = true;\r\n\r\n    //g0 用于居中 鹰眼视图内容，g1 缩放大小 g2 调整原始图在鹰眼中的位置 负为正，正为负，暂不考虑正情况\r\n    var\r\n        // g0Id = UUIDUtil.generateUUID(),\r\n        // g1Id = UUIDUtil.generateUUID(),\r\n        // g2Id=UUIDUtil.generateUUID(),\r\n        sourceGId = UUIDUtil.generateUUID(),\r\n        svgId = UUIDUtil.generateUUID(),\r\n        clipId = UUIDUtil.generateUUID(),\r\n        eyeActivityAreaId=UUIDUtil.generateUUID();\r\n        // bgId=UUIDUtil.generateUUID();\r\n    //鹰眼高宽度，模板\r\n    var  width = 200,\r\n         height = 200,\r\n         template =\r\n             \"<svg xmlns='http://www.w3.org/2000/svg' id='{svgId}'  width='{width}' height='{height}'>\" +\r\n             // \"<rect style='stroke-width: 1px;stroke:{eyeBgColor};fill:{eyeBgColor};' rx='5' ry='5' height='{height}' width='{width}'></rect>\"+\r\n             // \"<defs>\"+\r\n             //    \"<clipPath id='{clipId}'>\"+\r\n             //        \"<rect height='{eyeHeight}' width='{eyeWidth}'></rect>\"+\r\n             //    \"</clipPath>\"+\r\n             // \"</defs>\"+\r\n             \"<g style='clip-path: url(#{clipId});'>\"+\r\n                \"<clipPath id='{clipId}'>\"+\r\n                    \"<rect height='{height}' width='{width}'></rect>\"+\r\n                \"</clipPath>\"+\r\n                \"<g transform='translate({g0tran})')>\" +\r\n                    \"<rect style='stroke:none;fill:{eyeViewBgColor};' height='{eyeHeight}' width='{eyeWidth}'></rect>\"+\r\n                    \"<g transform='scale({g1scale})'>\" +\r\n                        \"<g transform='translate({g2tran})' id='{sourceGId}'></g>\" +\r\n                    \"</g>\" +\r\n                \"<rect id='{eyeActivityAreaId}' x='0' y='0' style='stroke-width: 1px;stroke:{eyeActivityAreaColor};fill: {eyeActivityAreaColor}; fill-opacity: 0.0' height='0' width='0'></rect>\" +\r\n                \"</g>\"+\r\n             \"</g>\";\r\n             //+\r\n            \"</svg>\";\r\n    this.width = function(value){\r\n        if (!arguments.length)\r\n            return width;\r\n        width = value;\r\n        return this;\r\n    };\r\n    this.height = function(value){\r\n        if (!arguments.length)\r\n            return height;\r\n        height = value;\r\n        return this;\r\n    };\r\n    this.dragEnable = function(value){\r\n        if (!arguments.length)\r\n            return dragEnable;\r\n        dragEnable = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * 鹰眼背景，视图背景，活动区域背景颜色\r\n     */\r\n    var eyeBgColor = 'none',eyeViewBgColor = '#42AFFF',eyeActivityAreaColor='red';\r\n    this.eyeBgColor = function(value){\r\n        if (!arguments.length)\r\n            return eyeBgColor;\r\n        eyeBgColor = value;\r\n        return this;\r\n    };\r\n    this.eyeViewBgColor = function(value){\r\n        if (!arguments.length)\r\n            return eyeViewBgColor;\r\n        eyeViewBgColor = value;\r\n        return this;\r\n    };\r\n    this.eyeActivityAreaColor = function(value){\r\n        if (!arguments.length)\r\n            return eyeActivityAreaColor;\r\n        eyeActivityAreaColor = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * 鹰眼视图缩放率\r\n     */\r\n    var scale = 1;\r\n    /**\r\n     * 目标元素的 缩放率，位置，旋转角度，宽，高，x,y\r\n     */\r\n    var targetScale,targetTran,targetRote,targetWidth,targetHight,targetX,targetY;\r\n    /**\r\n     * 目标元素的可视高宽\r\n     */\r\n    var targetViewWidth = viewWidth,targetViewHeight = viewHeight;\r\n    /**\r\n     * 鹰眼内容居中位置\r\n     */\r\n    var eyeContentX,eyeContentY,eyeWidth,eyeHeight;\r\n\r\n    /**\r\n     * 视图大小变更\r\n     * @param e\r\n     */\r\n    function changeViewWidth(e){\r\n        var detail = e.detail;\r\n        targetViewWidth  = detail.width;\r\n        targetViewHeight = detail.height;\r\n    }\r\n\r\n    /**\r\n     * 初始化要渲染的目标参数\r\n     */\r\n    function initTargetProperties(){\r\n\r\n        var traString = targetSourceElement.attr(\"transform\");\r\n        targetTran = RegexUtil.translate(traString);\r\n        targetScale = RegexUtil.scale(traString);\r\n        targetRote = RegexUtil.rotate(traString);\r\n        \r\n        var node = targetSourceElement.node();\r\n        var rect = node.getBBox();\r\n        targetWidth = rect.width;\r\n        targetHight = rect.height;\r\n        targetX = rect.x;\r\n        targetY = rect.y;\r\n    }\r\n\r\n    /**\r\n     * 初始化鹰眼视图的缩放率，及居中位置\r\n     */\r\n    function initEyeProperties(){\r\n        scale = width/targetWidth<height/targetHight? width/targetWidth: height/targetHight;\r\n        eyeWidth = targetWidth*scale-2;\r\n        eyeHeight =  targetHight*scale;\r\n        eyeContentX = eyeWidth<width?(width-eyeWidth)/2:0;\r\n        eyeContentY = eyeHeight<height?(height-eyeHeight)/2:0;\r\n    }\r\n\r\n    /**\r\n     * 添加源目标事件的变更，更新鹰眼视图\r\n     */\r\n    function addTargetListener(){\r\n        targetSourceElement.node().addEventListener(BaseEvent.POSITION_CHANGE,function(e){\r\n            initTargetProperties();\r\n            renderRangeRect();\r\n        });\r\n        targetSourceElement.node().addEventListener(BaseEvent.CONTENT_CHANGE,function(e){\r\n            initTargetProperties();\r\n            initEyeProperties();\r\n            renderContent();\r\n        });\r\n        targetSourceElement.node().addEventListener(BaseEvent.SIZE_CHANGE,function(e){\r\n            changeViewWidth(e);\r\n            renderContent();\r\n        });\r\n        targetSourceElement.node().addEventListener(BaseEvent.EAGLE_EYE_DRAG_CHANGE,function(e){\r\n            var detail = e.detail;\r\n            dragEnable = detail.enable;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 需要渲染是调用该方法\r\n     */\r\n    function initialize(){\r\n        initTargetProperties();\r\n        initEyeProperties();\r\n        addTargetListener();\r\n    };\r\n    /**\r\n     * 渲染入口方法\r\n     */\r\n    this.render = function (){\r\n        initialize();\r\n        renderContent();\r\n    }\r\n\r\n    function renderContent(){\r\n        // var source = targetSourceElement.html();//\r\n        var data = {\r\n            eyeBgColor:eyeBgColor,\r\n            eyeViewBgColor:eyeViewBgColor,\r\n            eyeActivityAreaColor:eyeActivityAreaColor,\r\n            eyeWidth:eyeWidth,\r\n            eyeHeight:eyeHeight,\r\n            // bgId:bgId,\r\n            width:width,\r\n            height:height,\r\n            clipId:clipId,\r\n            svgId:svgId,\r\n            // g0Id:g0Id,\r\n            g0tran:[eyeContentX,eyeContentY].toString(),\r\n            // g1Id:g1Id,\r\n            g1scale:[scale,scale].toString(),\r\n            // g2Id:g2Id,\r\n            g2tran:[Math.abs(targetX),Math.abs(targetY)].toString(),\r\n            // source:source,\r\n            sourceGId:sourceGId,\r\n            eyeActivityAreaId:eyeActivityAreaId};\r\n        // renderSvgElement.node().addEventListener(\"DOMNodeInserted\",function(){\r\n        //     // var g0 = d3.select(document.getElementById(g0Id));\r\n        //     // var g1 = d3.select(document.getElementById(g1Id));\r\n        //     // //     // var g1 = d3.select(\"g#\"+g1Id);  d3获取有问题\r\n        //     // var g2 = d3.select(document.getElementById(g2Id));\r\n        //     // g0.attr(\"transform\",\"translate(\"+[eyeContentX,eyeContentY]+\")\");\r\n        //     // g1.attr(\"transform\",\"scale(\"+[scale,scale]+\")\");\r\n        //     // g2.attr(\"transform\",\"translate(\"+[Math.abs(targetX),Math.abs(targetY)]+\")\");\r\n        // });\r\n\r\n        // renderSvgElement.html( RegexUtil.replace(RegexUtil.dataRegex,template,data));\r\n        // renderSvgElement.append();\r\n\r\n        // 通过 div 中转从 svg string 得到 svg nodes\r\n        var dummy = document.createElement('div');\r\n        dummy.innerHTML = RegexUtil.replace(RegexUtil.dataRegex,template,data);\r\n        renderSvgElement.selectAll(\"*\").remove();\r\n        renderSvgElement.node().appendChild( dummy.childNodes[0].childNodes[0]);\r\n        var node = document.getElementById(sourceGId);\r\n        var cloneNode = targetSourceElement.node().cloneNode(true);\r\n        var childNodes = cloneNode.childNodes;\r\n        for (var i = 0, length = childNodes.length; i < length; i++) {\r\n            node.appendChild(childNodes[0]);\r\n        }\r\n        //渲染活动区域\r\n        renderRangeRect();\r\n    }\r\n\r\n    /**\r\n     * 渲染活动区域\r\n     */\r\n    function renderRangeRect(){\r\n        var tranX = Number(targetTran[0]),tranY = Number(targetTran[1]);\r\n        var scaleX = Number(targetScale[0]),scaleY = Number(targetScale[1]);\r\n        var rangeRect = d3.select(document.getElementById(eyeActivityAreaId));\r\n        rangeRect.attr(\"width\",targetViewWidth/scaleX*scale);\r\n        rangeRect.attr(\"height\",targetViewHeight/scaleY*scale);\r\n        rangeRect.attr(\"x\",(Math.abs(targetX)-tranX/scaleX)*scale).attr(\"y\",(Math.abs(targetY)-tranY/scaleY)*scale);\r\n        rangeRect.style(\"cursor\", \"move\");\r\n        rangeRect.call(d3.drag()\r\n            .on(\"start\", range_dragStartHandler)\r\n            .on(\"drag\", range_dragHandler));\r\n    };\r\n\r\n    function range_dragStartHandler() {\r\n        d3.event.sourceEvent.stopPropagation();\r\n    };\r\n    /**\r\n     * 拖拽活动区域变更\r\n     */\r\n    function range_dragHandler() {\r\n        if(dragEnable==false)return;\r\n        var target = d3.select(this);\r\n        var rx = Number(target.attr(\"x\")),ry = Number(target.attr(\"y\"));\r\n        var x = rx+d3.event.dx,y = ry+d3.event.dy;\r\n        target.attr(\"x\",x).attr(\"y\",y);\r\n        changeTargetSourceViewPosition(x,y);\r\n        // targetSourceElement.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG,true,true,{x:tranX- (x -(Math.abs(targetX)-tranX/scaleX)*scale)/scale*scaleX,y:tranY- (y -(Math.abs(targetY)-tranY/scaleY)*scale)/scale*scaleY}))\r\n    };\r\n\r\n    /**\r\n     * 变更源视图位置\r\n     * @param x\r\n     * @param y\r\n     */\r\n    function changeTargetSourceViewPosition(x,y) {\r\n        var tranX = Number(targetTran[0]),tranY = Number(targetTran[1]);\r\n        var scaleX = Number(targetScale[0]),scaleY = Number(targetScale[1]);\r\n\r\n        var targetTranslateX = tranX- (x -(Math.abs(targetX)-tranX/scaleX)*scale)/scale*scaleX;\r\n        var targetTranslateY = tranY- (y -(Math.abs(targetY)-tranY/scaleY)*scale)/scale*scaleY;\r\n\r\n        // targetSourceElement.attr(\"transform\",  \"translate(\"+[targetTranslateX,targetTranslateY]+\")\" +\r\n        //     \"scale(\" + targetScale + \")\" +\r\n        //     \"rotate(\" + targetRote+ \")\");\r\n        targetSourceElement.node().dispatchEvent(EventUtil.createCustomEvent(BaseEvent.EAGLE_EYE_DRAG,true,true,{x:targetTranslateX,y:targetTranslateY}));\r\n    };\r\n\r\n};\r\n\r\nEagleEye.prototype.constructor = EagleEye;\r\nmodule.exports = EagleEye;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/eagleEye.js\n// module id = 48\n// module chunks = 0","var EagleEyeContainer = function(_data, _layout) {\r\n\r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const eagleEye = ghca_charts.view.component.eagleEye;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n\r\n    BaseComponent.apply(this, arguments);\r\n    var self = this,\r\n        superInit = self.init,\r\n        superRenderChildren = self.renderChildren;\r\n\r\n    self.className(\"eagleEyeContainer\");\r\n\r\n    var upTrianglePath = \"M-0 0 L20 0 10 -10 L0 0 Z\",\r\n        downTrianglePath  = \"M10 0 L20 -10 0 -10 L10 0 Z\";\r\n\r\n    var collapsed = false;\r\n    this.collapsed = function(p){\r\n        if(!arguments.length)return collapsed;\r\n        collapsed = p;\r\n        return this;\r\n    }\r\n    \r\n    var isShowCollapseBtn = true;\r\n    this.isShowCollapseBtn = function(p){\r\n        if(!arguments.length)return isShowCollapseBtn;\r\n        isShowCollapseBtn = p;\r\n        return this;\r\n    }\r\n\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        var width = self.width(),height = self.height();\r\n        upTrianglePath = \"M-\"+(width-20)+\" -1 L\"+width+\" -1 \"+(width-10)+\" -11 L\"+(width-20)+\" -1 Z\";\r\n        downTrianglePath = \"M\"+(width-10)+\" 0 L\"+width+\" -10 \"+(width-20)+\" -10 L\"+(width-10)+\" 0 Z\";\r\n        var inst = new eagleEye(self.mainContainer().append(\"g\"),self.parent().width(),self.parent().height(),self.parent().parent().mainContainer().select(\"g.\"+_data.eagleConfig.target.clazz));\r\n        inst.eyeViewBgColor(_data.eagleConfig.background.fill);\r\n        inst.width(self.width());\r\n        inst.height(self.height());\r\n        inst.render();\r\n        self.pathElement =  ElementUtil.createPath(self.mainContainer(),{\r\n        \t\"style\":\"cursor:hand\",\r\n        \t\"stroke-width\":2,\r\n        \t\"stroke\":_data.eagleConfig.collapsedToolColor,\r\n        \t\"fill\":_data.eagleConfig.collapsedToolColor, \r\n        \t\"display\": self.isShowCollapseBtn() ? \"block\" : \"none\"\r\n        \t});\r\n        self.pathElement.on(\"click\",function(){\r\n            d3.event.stopPropagation();\r\n            self.collapsed(!self.collapsed());\r\n            self.setCollapsedPath();\r\n            self.renderTransform();\r\n        });\r\n        self.setCollapsedPath();\r\n    };\r\n\r\n    this.setCollapsedPath = function(){\r\n        ElementUtil.setElementProperties(self.pathElement,{d:self.collapsed()?upTrianglePath:downTrianglePath});\r\n    }\r\n\r\n    this.renderTransform = function(transition) {\r\n        var con = transition ? self.mainContainer().transition(transition) : self.mainContainer();\r\n        con.attr(\"transform\", function(d) {\r\n            return  \"translate(\" + self.x() + \",\" + (self.collapsed()?(self.y()+self.height()+2):self.y()) + \")\" +\r\n                \"scale(\" + self.scaleX() + \",\" + self.scaleY() + \")\" +\r\n                \"rotate(\" + self.rotate() + \")\";\r\n        });\r\n    };\r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        var eagleConfig = _data.eagleConfig;\r\n        self.collapsed(eagleConfig.collapsed);\r\n        self.isShowCollapseBtn(eagleConfig.hasOwnProperty(\"isShowCollapseBtn\") ? eagleConfig.isShowCollapseBtn : true);\r\n    };\r\n\r\n    self.init();\r\n};\r\n\r\nEagleEyeContainer.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    EagleEyeContainer.prototype = Object.create(BaseComponent.prototype);\r\n    EagleEyeContainer.prototype.constructor = EagleEyeContainer;\r\n};\r\n\r\nmodule.exports = EagleEyeContainer;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/eagleEyeContainer.js\n// module id = 49\n// module chunks = 0","/**\r\n * 地图系统组件\r\n */\r\nfunction GisMap(_ele,_data){  \r\n    var BaseComponent = ghca_charts.view.component.baseComponent;   \r\n    const Global = ghca_charts.global;\r\n    BaseComponent.apply(this, [_data]);\r\n    var MAX_NUM=10;\r\n    var FileUtil = ghca_charts.view.util.fileUtil;\r\n    var self=this;\r\n    var superRender = self.render;\r\n    var superRenderChildren = self.renderChildren;\r\n    var superUpdate = self.update;\r\n    var map;\r\n    var markerClusterer;\r\n    var files=[];\r\n    var htmlLabel;\r\n    self.isCoordTransing=false;\r\n    self.coordTransIndex=0;\r\n\r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('GisMap构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n    \r\n    self.isLibsLoaded = false;\r\n    self.addAttributes(\"files\");\r\n    self.className(\"gisMap\");\r\n\tthis.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n\r\n\r\n     /**\r\n     * 父容器宽度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n   \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n\r\n    this.render = function() {\r\n        //等待第三方库加载完毕后，再操作render\r\n        self.isLibsLoaded = false;\r\n        loadMapLib();\r\n    };\r\n\r\n     /**\r\n     * 依赖库加载\r\n     * @param {} callback \r\n     */\r\n    function loadLibs(callback) {\r\n    \tGlobal.isDebug && console.log(\"loadLibs\");\r\n        var files = self.files();\r\n        FileUtil.loadFiles(files, callback);\r\n\r\n    };\r\n\r\n    function toLoadLibs(){\r\n        loadLibs(initMap);\r\n    }\r\n\r\n    function loadMapLib(){\r\n        var script=document.createElement(\"script\");\r\n        script.type = \"text/javascript\";\r\n        script.src = \"http://api.map.baidu.com/api?v=3.0&ak=\"+_data.mapKey+\"&callback=initBDMap\";\r\n        document.body.appendChild(script);\r\n        window.initBDMap=toLoadLibs;\r\n    }\r\n\r\n     /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //创建容器元素\r\n        var mapDiv = d3.select(self.parent()).append(\"div\")\r\n            .attr(\"class\", self.className())\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height());\r\n        self.mainContainer(mapDiv);\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n\r\n    /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        renderMap();\r\n    };\r\n\r\n    function renderMap() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        //移除并重新创建表格顶层容器\r\n        self.renderMainContainer();\r\n        self.updateOthers();\r\n    };\r\n\r\n    /**\r\n     * 初始化地图\r\n     */\r\n    function initMap(){\r\n        superRender();\r\n        self.isLibsLoaded = true;\r\n        BMapLib.TextIconOverlay.prototype.getStyleByText = function(text, styles){\r\n            return styles[0]; \r\n        }\r\n\r\n        Global.isDebug && console.log(\"initMap\");\r\n        var items=self.itemsData();\r\n        // items=null;\r\n        if(items){\r\n            createMap(new BMap.Point(items[0].pos[0],items[0].pos[1]));//配置定位\r\n        }else{\r\n            var myCity = new BMap.LocalCity();\r\n            myCity.get(function(result){//ip定位\r\n                var cityName = result.name;\r\n                createMap(cityName);\r\n            });\r\n        }                    \r\n    }\r\n\r\n    function createMap(cityName){\r\n        map=new BMap.Map(_ele.id,{enableMapClick: false});\r\n        map.centerAndZoom(new BMap.Point(116.331398,39.897445), 12);\r\n        map.enableScrollWheelZoom(true);\r\n        map.setMapStyle(self.mapStyle());\r\n        initMapControl();\r\n        self.data().textIconStyle.size=new BMap.Size(self.data().textIconStyle.size[0],self.data().textIconStyle.size[1]);\r\n        self.data().textIconStyle.anchor =new BMap.Size(self.data().textIconStyle.anchor[0],self.data().textIconStyle.anchor[1]);\r\n        markerClusterer= new BMapLib.MarkerClusterer(map,{styles:[self.data().textIconStyle]}); \r\n        map.setCenter(cityName);\r\n        if(self.data().coordType!=5){//非百度经纬度坐标系\r\n            self.isCoordTransing=true;\r\n            oneTransCoord();\r\n        }else{\r\n            self.update();\r\n        }\r\n    }\r\n\r\n    function oneTransCoord(){\r\n        var datas=self.itemsData();\r\n        var num=datas.length;\r\n        var points=[];\r\n       for(var i=self.coordTransIndex;i<self.coordTransIndex+MAX_NUM;i++){//每次最多支持转换10个            \r\n            if(i>=num){\r\n                break;\r\n            }\r\n            var itemData=datas[i];\r\n            var p=new BMap.Point(itemData.pos[0],itemData.pos[1]);\r\n            points.push(p);\r\n       }\r\n       var convertor = new BMap.Convertor();\r\n        convertor.translate(points, self.data().coordType, 5, translateCallback);\r\n    }\r\n\r\n    function translateCallback(data){\r\n        if(data.status===0){\r\n            var datas=self.itemsData();\r\n            var num=datas.length;\r\n            for (var i = 0; i < data.points.length; i++) {\r\n                var itemData=datas[self.coordTransIndex];\r\n                itemData.pos[0]=data.points[0];\r\n                itemData.pos[1]=data.points[1];\r\n                self.coordTransIndex++;                \r\n            }\r\n\r\n            if(self.coordTransIndex!=num){\r\n                oneTransCoord();\r\n            }else{\r\n                self.isCoordTransing=false;\r\n                self.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化地图控件\r\n     */\r\n    function initMapControl(){\r\n        if(self.data().scaleControl){\r\n            self.data().scaleControl.anchor=getBMapConst(self.data().scaleControl.anchor);\r\n            var scaleControl=new BMap.ScaleControl(self.data().scaleControl);\r\n            map.addControl(scaleControl);\r\n        }\r\n\r\n        if(self.data().navigationControl){\r\n            self.data().navigationControl.anchor=getBMapConst(self.data().navigationControl.anchor);\r\n            self.data().navigationControl.type=getBMapConst(self.data().navigationControl.type);\r\n            var navigationControl=new BMap.NavigationControl(self.data().navigationControl);\r\n            map.addControl(navigationControl);\r\n        }\r\n\r\n        if(self.data().mapTypeControl){\r\n            self.data().mapTypeControl.type=getBMapConst(self.data().mapTypeControl.type);\r\n            self.data().mapTypeControl.anchor=getBMapConst(self.data().mapTypeControl.anchor);\r\n            if(self.data().mapTypeControl.mapTypes){\r\n                for(var i=0;i<self.data().mapTypeControl.mapTypes.length;i++){\r\n                    self.data().mapTypeControl.mapTypes[i]=getBMapConst(self.data().mapTypeControl.mapTypes[i]);\r\n                }\r\n            }\r\n            var maptype=new BMap.MapTypeControl(self.data().mapTypeControl);\r\n            map.addControl(maptype);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将字符串转换为百度地图对应常量\r\n     * @param {string} value \r\n     */\r\n    function getBMapConst(value){\r\n        switch(value){\r\n            case \"BMAP_ANCHOR_TOP_LEFT\":\r\n            return BMAP_ANCHOR_TOP_LEFT;\r\n            case \"BMAP_ANCHOR_TOP_RIGHT\":\r\n            return BMAP_ANCHOR_TOP_RIGHT;\r\n            case \"BMAP_ANCHOR_BOTTOM_LEFT\":\r\n            return BMAP_ANCHOR_BOTTOM_LEFT;\r\n            case \"BMAP_ANCHOR_BOTTOM_RIGHT\":\r\n            return BMAP_ANCHOR_BOTTOM_RIGHT;\r\n            case \"BMAP_NAVIGATION_CONTROL_LARGE\":\r\n            return BMAP_NAVIGATION_CONTROL_LARGE;\r\n            case \"BMAP_NAVIGATION_CONTROL_SMALL\":\r\n            return BMAP_NAVIGATION_CONTROL_SMALL;\r\n            case \"BMAP_NAVIGATION_CONTROL_PAN\":\r\n            return BMAP_NAVIGATION_CONTROL_PAN;\r\n            case \"BMAP_NAVIGATION_CONTROL_ZOOM\":\r\n            return BMAP_NAVIGATION_CONTROL_ZOOM;\r\n            case \"BMAP_MAPTYPE_CONTROL_HORIZONTAL\":\r\n            return BMAP_MAPTYPE_CONTROL_HORIZONTAL;\r\n            case \"BMAP_MAPTYPE_CONTROL_DROPDOWN\":\r\n            return BMAP_MAPTYPE_CONTROL_DROPDOWN;\r\n            case \"BMAP_MAPTYPE_CONTROL_MAP\":\r\n            return BMAP_MAPTYPE_CONTROL_MAP;\r\n            case \"BMAP_NORMAL_MAP\":\r\n            return BMAP_NORMAL_MAP;\r\n            case \"BMAP_PERSPECTIVE_MAP\":\r\n            return BMAP_PERSPECTIVE_MAP;\r\n            case \"BMAP_SATELLITE_MAP\":\r\n            return BMAP_SATELLITE_MAP;\r\n            case \"BMAP_HYBRID_MAP\":\r\n            return BMAP_HYBRID_MAP;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 地图样式\r\n     */\r\n    this.mapStyle = function(){\r\n        return self.data() && self.data().mapStyle ? self.data().mapStyle : {style:\"midnight\"};\r\n    };\r\n\r\n    /**\r\n     * 地图数据\r\n     */\r\n    this.itemsData = function(){\r\n        return self.data() && self.data().data ? self.data().data : null;\r\n    };\r\n\r\n    /**\r\n     * 更新地图\r\n     */\r\n    this.update = function() {\r\n        if(self.isLibsLoaded===false||self.isCoordTransing===true){\r\n            return;\r\n        }\r\n        superUpdate();\r\n        renderMap();\r\n        Global.isDebug && console.log(\"update\");\r\n        self.addOverlay();\r\n    }\r\n    \r\n    this.addOverlay=function (){\r\n        markerClusterer.clearMarkers();\r\n        var items=self.itemsData();\r\n        var num=items.length;\r\n        var pt = null;\r\n        var itemData=null;\r\n        var markers = [];\r\n        for(var i=0;i<num;i++){\r\n            itemData=items[i];\r\n            var markerop={\r\n                title:itemData.title,\r\n            }\r\n            if(itemData.icon){\r\n                markerop.icon=new BMap.Icon(itemData.icon.url,new BMap.Size(itemData.icon.width,itemData.icon.height));\r\n            }\r\n            pt=new BMap.Point(itemData.pos[0],itemData.pos[1]);\r\n            var marker=new BMap.Marker(pt,markerop);\r\n            if(self.data().windowInfo){\r\n                addClickHandler(itemData,marker);               \r\n            }\r\n            markers.push(marker);\r\n        }\r\n        \r\n\r\n        if(self.data().mode===\"normal\"){\r\n            for(var i=0;i<markers.length;i++){\r\n                map.addOverlay(markers[i]);\r\n            }\r\n        }else if(self.data().mode===\"clusterer\"){\r\n            markerClusterer.addMarkers(markers);\r\n        }        \r\n    }\r\n\r\n    function addClickHandler(content, marker) {\r\n        marker.addEventListener(\"click\", function (e) {\r\n            openInfo(content, e)\r\n         }\r\n        );\r\n    }\r\n    \r\n    function test(){\r\n    \tGlobal.isDebug && console.log(\"test\");\r\n    }\r\n\r\n    function openInfo(content,e){\r\n        var htmlContent=self.getWindowInfo(content);\r\n\t\tvar p = e.target;\r\n        var point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);        \r\n        if(!htmlLabel){\r\n            var opts = {\r\n                position : point,    // 指定文本标注所在的地理位置\r\n                offset   : new BMap.Size(self.data().windowInfo.offset[0], self.data().windowInfo.offset[1])    //设置文本偏移量\r\n              }\r\n            htmlLabel = new BMap.Label(htmlContent, opts);  // 创建文本标注对象\r\n            htmlLabel.setStyle({\r\n                \"background-color\": \"rgba(0,0,0,0)\",\r\n                \"border-color\": \"rgba(0,0,0,0)\",\r\n                \"color\": \"#fff\",\r\n            });\r\n            map.addOverlay(htmlLabel);   \r\n            htmlLabel.addEventListener(\"click\",function(e){\r\n                if(htmlLabel.isVisible()){\r\n                    htmlLabel.hide();\r\n                }\r\n            })\r\n        }else{\r\n            htmlLabel.setContent(htmlContent);\r\n            htmlLabel.setPosition(point);\r\n        }\r\n        map.panTo(point);\r\n\t\thtmlLabel.show();\r\n\t} \r\n\r\n    self.init();\r\n}\r\n\r\n\r\n\r\nGisMap.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    GisMap.prototype = Object.create(BaseComponent.prototype);\r\n    GisMap.prototype.constructor = GisMap;\r\n    /**\r\n     * 信息弹窗获取函数（外部可重写）\r\n     * @param {*} data \r\n     */\r\n    GisMap.prototype.getWindowInfo = function (data) {\r\n        return '<svg id=\"info_window_svg_' + data.id + '\" verson=\"1.1\" style=\"position:absolute;width:50px;height:200px;\">' +\r\n            '<polyline points=\"0,195 25,50 50,50\" style=\"stroke:rgba(68,123,175,0.75);stroke-width:2;fill:none;\"/>' +\r\n            '</svg>' +\r\n            '<div id=\"info_window_content_' + data.id + '\" class=\"info_window_content\">' +\r\n            '<div class=\"tl_border\"></div>' +\r\n            '<div class=\"tr_border\"></div>' +\r\n            '<div class=\"bl_border\"></div>' +\r\n            '<div class=\"br_border\"></div>' +\r\n            '<div><span style=\"padding-left:26px;\">序号：</span>' + data.id + '</div>' +\r\n            '<div><span style=\"padding-left:26px;\">城市：</span>' + data.city + '</div>' +\r\n            '<div><span style=\"padding-left:2px;\">职场名称：</span>' + data.name + '</div>' +\r\n            '<div><span style=\"padding-left:26px;\">地址：</span>' + data.addr + '</div>' +\r\n            '<div><span style=\"padding-left:2px;\">人力规模：</span>' + data.peopleNum + '</div>' +\r\n            '<div><span style=\"padding-left:2px;\">UPS数量：</span>' + data.upsNum + '</div>' +\r\n            '<div><span style=\"padding-left:15px;\">配线间：</span>' + data.dnNum + '</div>' +\r\n            '<div><span style=\"padding-left:26px;\">容量：</span>' + data.progress + '%</div>' +\r\n            '</div>';\r\n    }\r\n};\r\n\r\nmodule.exports = GisMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/gis/gisMap.js\n// module id = 50\n// module chunks = 0","// comboBox类\r\n// api http://www.jeasyui.com/documentation/index.php\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _ele 组件所在容器对象或者容器id，比如一个div\r\n * @param _data 配置数据\r\n */\r\nvar ComboBox = function(_ele, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const FileUtil = ghca_charts.view.util.fileUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    BaseComponent.apply(this, [_data]);\r\n    \r\n    var self = this, \r\n        superRenderSize = self.renderSize,\r\n        superRender = self.render,\r\n        superUpdate = self.update,\r\n        superRenderChildren = self.renderChildren;\r\n        \r\n    if (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('ComboBox构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n    \r\n    self.isLibsLoaded = false;\r\n    self.className(\"comboBox\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"valueField\", \"textField\", \"editable\", \"files\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // valueField\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 选项值对应数据中的键名称\r\n     */\r\n    var valueField = \"id\";\r\n    this.valueField = function(value) {\r\n        if (!arguments.length)\r\n            return valueField;\r\n        valueField = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // textField\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 选项文本对应数据中的键名称\r\n     */\r\n    var textField = \"text\";\r\n    this.textField = function(value) {\r\n        if (!arguments.length)\r\n            return textField;\r\n        textField = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // editable\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 文本输入框是否可编辑\r\n     */\r\n    var editable = true;\r\n    this.editable = function(value) {\r\n        if (!arguments.length)\r\n            return editable;\r\n        editable = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // files\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 第三方库文件列表\r\n     */\r\n    var files = [\r\n        \"../js/easyui/themes/icon.css\",\r\n        \"../js/easyui/easyloader.js\"\r\n    ];\r\n    this.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.render = function() {\r\n        //等待第三方库加载完毕后，再操作render\r\n        self.isLibsLoaded = false;\r\n        loadLibs(afterLoadLibs);\r\n    };\r\n    \r\n    /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n            self.comboBox = null;\r\n            d3.selectAll(\".combo-p\").remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //创建comboBox容器元素\r\n        var mainContainer = d3.select(self.parent()).append(\"div\")\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height());\r\n        self.comboBox = mainContainer.append(\"div\")\r\n            .attr(\"class\", self.className())\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height());\r\n        self.mainContainer(mainContainer);\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n    \r\n    /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        renderComboBox();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n        superRenderSize();\r\n        \r\n        var mainContainer = self.mainContainer();\r\n        var comboBox = self.comboBox;\r\n        if(!mainContainer || !comboBox) {\r\n            return;\r\n        }\r\n        //设置图表容器大小\r\n        var w = self.width(), h = self.height();\r\n        mainContainer.attr(\"width\", w).attr(\"height\", h);\r\n        comboBox.attr(\"width\", w).attr(\"height\", h);\r\n        if($(comboBox.node()).combobox) {\r\n        \t$(comboBox.node()).combobox({ \r\n                width:w + 'px',\r\n                height:h + 'px'\r\n            });\r\n        }\r\n        validatePopScale();\r\n    };\r\n    \r\n    this.update = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        superUpdate();\r\n        \r\n        renderComboBox();\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"ComboBox info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var afterLoadLibs = function() {\r\n        self.isLibsLoaded = true;\r\n        superRender();\r\n    };\r\n    \r\n    var renderComboBox = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        //移除并重新创建表格顶层容器\r\n        self.renderMainContainer();\r\n        self.updateOthers();\r\n        \r\n        //渲染comboBox内容\r\n        var data = self.data().data;\r\n        var comboBox = $(self.comboBox.node());\r\n        var valueField = self.valueField();\r\n        var textField = self.textField();\r\n        var editable = self.editable();\r\n        easyloader.load('combobox', function() {\r\n            $(comboBox).combobox({ \r\n            \twidth:self.width() + 'px',\r\n            \theight:self.height() + 'px',\r\n                data:data, \r\n                valueField:valueField, \r\n                textField:textField,\r\n                editable:editable,\r\n                onChange:function(value) {\r\n                    for(var d, i = 0, len = data.length; i < len; i++) {\r\n                        d = data[i];\r\n                        if(d[valueField] == value) {\r\n                            var evt = EventUtil.createCustomEvent(BaseEvent.SELECT_CHANGE, true, true, d);\r\n                            this.dispatchEvent(evt);\r\n                            return;\r\n                        }\r\n                    }\r\n                } \r\n            });\r\n            validatePopScale();\r\n        });\r\n    };\r\n    \r\n    var loadLibs = function(callback) {\r\n        var files = self.files();\r\n        FileUtil.loadFiles(files, callback);\r\n    };\r\n    \r\n    var validatePopScale = function() {\r\n        var graph = self.graph();\r\n        if(!graph) return;\r\n        var h = self.height();\r\n        var ty = -h * (1 - graph.scaleY());\r\n        d3.selectAll(\".combo-p\")\r\n            .style(\"transform-origin\", \"left top\")\r\n            .style(\"transform\", \"translate(0px,\" + ty + \"px)scale(\" + graph.scaleX() + \",\" + graph.scaleY() + \")\");\r\n    };\r\n    \r\n    self.init();\r\n};\r\n\r\nComboBox.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    ComboBox.prototype = Object.create(BaseComponent.prototype);\r\n    ComboBox.prototype.constructor = ComboBox;\r\n};\r\n\r\nmodule.exports = ComboBox;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/importcomponents/comboBox.js\n// module id = 51\n// module chunks = 0","// dateTimeBox类\r\n// api http://www.jeasyui.com/documentation/index.php\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _ele 组件所在容器对象或者容器id，比如一个div\r\n * @param _data 配置数据\r\n */\r\nvar DateTimeBox = function(_ele, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const FileUtil = ghca_charts.view.util.fileUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    BaseComponent.apply(this, [_data]);\r\n    \r\n    var self = this, \r\n        superRenderSize = self.renderSize,\r\n        superRender = self.render,\r\n        superUpdate = self.update,\r\n        superRenderChildren = self.renderChildren;\r\n        \r\n    if (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('DateTimeBox构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n    \r\n    self.isLibsLoaded = false;\r\n    self.className(\"dateTimeBox\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"files\", \"value\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // value\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 默认日期字符串\r\n     */\r\n    var value = \"\";\r\n    this.value = function(value) {\r\n        if (!arguments.length)\r\n            return value;\r\n        value = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // files\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 第三方库文件列表\r\n     */\r\n    var files = [\r\n        \"../js/easyui/themes/icon.css\",\r\n        \"../js/easyui/easyloader.js\"\r\n    ];\r\n    this.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.render = function() {\r\n        //等待第三方库加载完毕后，再操作render\r\n        self.isLibsLoaded = false;\r\n        loadLibs(afterLoadLibs);\r\n    };\r\n    \r\n    /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //创建dateTimeBox容器元素\r\n        var dateTimeBox = d3.select(self.parent()).append(\"div\")\r\n            .attr(\"class\", self.className())\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height());\r\n        self.mainContainer(dateTimeBox);\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n    \r\n    /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        renderDateTimeBox();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n        superRenderSize();\r\n        var dateTimeBox = self.mainContainer();\r\n        if(!dateTimeBox) {\r\n            return;\r\n        }\r\n        //设置图表容器大小\r\n        var w = self.width(), h = self.height();\r\n        dateTimeBox.attr(\"width\", w);\r\n        dateTimeBox.attr(\"height\", h);\r\n//        renderDateTimeBox();\r\n    };\r\n    \r\n    this.update = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        superUpdate();\r\n        \r\n        renderDateTimeBox();\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"DateTimeBox info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var afterLoadLibs = function() {\r\n        self.isLibsLoaded = true;\r\n        superRender();\r\n    };\r\n    \r\n    var renderDateTimeBox = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        //移除并重新创建表格顶层容器\r\n        self.renderMainContainer();\r\n        self.updateOthers();\r\n        \r\n        //渲染dateTimeBox内容\r\n        var data = self.data().data;\r\n        var input = $(self.mainContainer().node());\r\n        easyloader.load('datetimebox', function() {\r\n            $(input).datetimebox({ \r\n                value: self.value(), \r\n                required: true, \r\n                showSeconds: true,\r\n                currentText: \"今日\",\r\n                okText: \"确定\",\r\n                closeText: \"关闭\",\r\n                onChange:function(value) {\r\n                    var evt = EventUtil.createCustomEvent(BaseEvent.SELECT_CHANGE, true, true, value);\r\n                    this.dispatchEvent(evt);\r\n                } \r\n            });\r\n        });\r\n    };\r\n    \r\n    var loadLibs = function(callback) {\r\n        var files = self.files();\r\n        FileUtil.loadFiles(files, callback);\r\n    };\r\n    \r\n    self.init();\r\n};\r\n\r\nDateTimeBox.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    DateTimeBox.prototype = Object.create(BaseComponent.prototype);\r\n    DateTimeBox.prototype.constructor = DateTimeBox;\r\n};\r\n\r\nmodule.exports = DateTimeBox;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/importcomponents/dateTimeBox.js\n// module id = 52\n// module chunks = 0","// IFrame类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _ele 组件所在容器对象或者容器id，比如一个div\r\n * @param _data 配置数据\r\n */\r\nvar IFrame = function(_ele, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const FileUtil = ghca_charts.view.util.fileUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    BaseComponent.apply(this, [_data]);\r\n    \r\n    var self = this, \r\n        superRenderSize = self.renderSize,\r\n        superRender = self.render,\r\n        superUpdate = self.update,\r\n        superRenderChildren = self.renderChildren;\r\n        \r\n    if (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('IFrame构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n    \r\n    self.isLibsLoaded = false;\r\n    self.className(\"iFrame\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"files\", \"frameborder\", \"sandbox\", \"scrolling\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // files\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 第三方库文件列表\r\n     */\r\n    var files = [];\r\n    this.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // src\r\n    // ------------------------------\r\n\r\n    /**\r\n     * iframe对应src\r\n     */\r\n    var src = \"\";\r\n    this.src = function(value) {\r\n        if (!arguments.length)\r\n            return src;\r\n        src = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // frameborder\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 规定是否显示框架周围的边框。0|1(默认值0)\r\n     */\r\n    var frameborder = 0;\r\n    this.frameborder = function(value) {\r\n        if (!arguments.length)\r\n            return frameborder;\r\n        frameborder = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // sandbox\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 启用一系列对 <iframe> 中内容的额外限制。可设置值：\r\n     * \"\" \r\n     * \"allow-forms\" \r\n     * \"allow-same-origin\" \r\n     * \"allow-scripts\" \r\n     * \"allow-top-navigation\"\r\n     */\r\n    var sandbox = \"allow-scripts\";\r\n    this.sandbox = function(value) {\r\n        if (!arguments.length)\r\n            return sandbox;\r\n        sandbox = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scrolling\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 规定是否在 iframe 中显示滚动条。\"yes\"|\"no\"|\"auto\"(默认值\"auto\")\r\n     */\r\n    var scrolling = \"auto\";\r\n    this.scrolling = function(value) {\r\n        if (!arguments.length)\r\n            return scrolling;\r\n        scrolling = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.render = function() {\r\n        //等待第三方库加载完毕后，再操作render\r\n        self.isLibsLoaded = false;\r\n        loadLibs(afterLoadLibs);\r\n    };\r\n    \r\n    /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n    \tif(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n    \t//创建iFrame元素\r\n        var iFrame = d3.select(self.parent()).append(\"iFrame\")\r\n            .attr(\"class\", self.className());\r\n        self.mainContainer(iFrame);\r\n        \r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        self.renderSize();\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n    \r\n    /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        renderIFrame();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n        superRenderSize();\r\n        //设置图表容器大小\r\n        self.mainContainer().attr(\"width\", self.width()).attr(\"height\", self.height());\r\n    };\r\n    \r\n    this.update = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        superUpdate();\r\n        \r\n        renderIFrame();\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"IFrame info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var afterLoadLibs = function() {\r\n        self.isLibsLoaded = true;\r\n        superRender();\r\n    };\r\n    \r\n    var renderIFrame = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        //移除并重新创建表格顶层容器\r\n        self.renderMainContainer();\r\n        self.updateOthers();\r\n        \r\n        //渲染iframe内容\r\n        var data = self.data().data;\r\n        if(ObjectUtil.isArray(data) && data.length > 0) {\r\n        \tself.src(data[0].src);\r\n        }\r\n        var attr = self.data().attr;\r\n        self.frameborder(attr.frameborder);\r\n        self.sandbox(attr.sandbox);\r\n        self.scrolling(attr.scrolling);\r\n        self.mainContainer()\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height())\r\n            .attr(\"src\", self.src())\r\n            .attr(\"frameborder\", self.frameborder())\r\n            .attr(\"sandbox\", self.sandbox())\r\n            .attr(\"scrolling\", self.scrolling());\r\n    };\r\n    \r\n    var loadLibs = function(callback) {\r\n        var files = self.files();\r\n        Global.isDebug && console.log(files)\r\n        FileUtil.loadFiles(files, callback);\r\n    };\r\n    \r\n    self.init();\r\n};\r\n\r\nIFrame.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    IFrame.prototype = Object.create(BaseComponent.prototype);\r\n    IFrame.prototype.constructor = IFrame;\r\n};\r\n\r\nmodule.exports = IFrame;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/importcomponents/iFrame.js\n// module id = 53\n// module chunks = 0","// linkButton类\r\n// api http://www.jeasyui.com/documentation/index.php\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _ele 组件所在容器对象或者容器id，比如一个div\r\n * @param _data 配置数据\r\n */\r\nvar LinkButton = function(_ele, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const FileUtil = ghca_charts.view.util.fileUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    BaseComponent.apply(this, [_data]);\r\n    \r\n    var self = this, \r\n        superRenderSize = self.renderSize,\r\n        superRender = self.render,\r\n        superUpdate = self.update,\r\n        superRenderChildren = self.renderChildren;\r\n        \r\n    if (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('LinkButton构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n    \r\n    self.isLibsLoaded = false;\r\n    self.className(\"linkButton\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"files\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // files\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 第三方库文件列表\r\n     */\r\n    var files = [\r\n        \"../js/easyui/themes/icon.css\",\r\n        \"../js/easyui/easyloader.js\"\r\n    ];\r\n    this.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.render = function() {\r\n        //等待第三方库加载完毕后，再操作render\r\n        self.isLibsLoaded = false;\r\n        loadLibs(afterLoadLibs);\r\n    };\r\n    \r\n    /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //创建linkButton容器元素\r\n        var linkButton = d3.select(self.parent()).append(\"div\")\r\n            .attr(\"class\", self.className())\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height());\r\n        self.mainContainer(linkButton);\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n    \r\n    /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        renderLinkButton();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n        superRenderSize();\r\n        var linkButton = self.mainContainer();\r\n        if(!linkButton) {\r\n            return;\r\n        }\r\n        //设置图表容器大小\r\n        var w = self.width(), h = self.height();\r\n        linkButton.attr(\"width\", w);\r\n        linkButton.attr(\"height\", h);\r\n//        renderLinkButton();\r\n    };\r\n    \r\n    this.update = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        superUpdate();\r\n        \r\n        renderLinkButton();\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"LinkButton info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var afterLoadLibs = function() {\r\n        self.isLibsLoaded = true;\r\n        superRender();\r\n    };\r\n    \r\n    var renderLinkButton = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        //移除并重新创建表格顶层容器\r\n        self.renderMainContainer();\r\n        self.updateOthers();\r\n        \r\n        //渲染linkButton内容\r\n        var data = self.data().data;\r\n        var linkBtn = $(self.mainContainer().node());\r\n        Global.isDebug && console.log(\"easyloader:\"+easyloader);\r\n        easyloader.load('linkbutton', function() {\r\n\t\t\tfor(var d, i = 0, len = data.length; i < len; i++) {\r\n\t\t\t\td = data[i];\r\n\t\t\t\tvar a = document.createElement(\"a\");\r\n\t\t\t\tlinkBtn.append(a);\r\n\t\t\t\t$(a).linkbutton(d).bind(\"click\", function() {\r\n\t\t\t\t\tvar options = $(this).linkbutton('options');\r\n\t\t\t\t\tif(options.selected === true) {\r\n\t\t\t\t\t\tvar evt = EventUtil.createCustomEvent(BaseEvent.NODE_CLICK, true, true, options);\r\n\t\t\t\t\t\tthis.dispatchEvent(evt);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n    };\r\n    \r\n    var loadLibs = function(callback) {\r\n        var files = self.files();\r\n        Global.isDebug && console.log(files)\r\n        FileUtil.loadFiles(files, callback);\r\n    };\r\n    \r\n    self.init();\r\n};\r\n\r\nLinkButton.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    LinkButton.prototype = Object.create(BaseComponent.prototype);\r\n    LinkButton.prototype.constructor = LinkButton;\r\n};\r\n\r\nmodule.exports = LinkButton;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/importcomponents/linkButton.js\n// module id = 54\n// module chunks = 0","var MultiTextLabel = function(_ele,_data){\r\n\tconst BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tconst FileUtil = ghca_charts.view.util.fileUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\tBaseComponent.apply(this,[_data]);\r\n\t\r\n    var self = this,\r\n\tsuperRenderSize = self.renderSize,\r\n    superRender = self.render,\r\n    superUpdate = self.update,\r\n    superRenderChildren = self.renderChildren;\r\n    var multiTextLabelContainer;\r\n    var multiTextLabel;\r\n\t\r\n\tif (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('LinkButton构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n\t}\r\n    \r\n    \r\n\tself.isLibsLoaded = false;\r\n\tself.className(\"multiTextLabel\");\r\n\tself.addAttributes(\"files\");\r\n\tvar files=[];\r\n\tthis.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n\t/**\r\n\t * 渲染\r\n\t */\r\n\tthis.render = function() {\r\n\t\tself.isLibsLoaded = false;\r\n        loadLibs(afterLoadLibs);\r\n\t}\r\n\t\r\n\tvar loadLibs = function(callback) {\r\n        var files = self.files();\r\n        FileUtil.loadFiles(files, callback);\r\n    };\r\n\t\r\n\tvar afterLoadLibs = function() {\r\n        self.isLibsLoaded = true;\r\n        superRender();\r\n    };\r\n\t\r\n\t  /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //创建容器元素\r\n        multiTextLabelContainer = d3.select(self.parent()).append(\"div\")\r\n        .attr(\"class\", self.className()+\"Container\");          \r\n        self.multiTextLabel=multiTextLabelContainer.append(\"div\").attr(\"class\",self.className());\r\n        self.mainContainer(multiTextLabelContainer);\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n\t\r\n\t  /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        renderTextLabel();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n        superRenderSize();\r\n       \r\n        var multiTextLabelJQ = $(self.multiTextLabel.node());\r\n        var multiTextLabelContainerJq=$(multiTextLabelContainer.node());\r\n        multiTextLabelContainerJq.css(\"width\",\"100%\");\r\n        multiTextLabelContainerJq.css(\"height\",\"100%\");\r\n        var dataCfg = self.data();\r\n        var labelCss=dataCfg.styles.labelStyle;\r\n        multiTextLabelJQ.css(\"position\",\"relative\");\r\n        if(labelCss[\"horizontalAlign\"]===\"center\"){//水平居中\r\n           multiTextLabelJQ.css(\"left\",(multiTextLabelContainerJq.width()-multiTextLabelJQ.width())*0.5);\r\n        }else if(labelCss[\"horizontalAlign\"]===\"left\"){\r\n           multiTextLabelJQ.css(\"left\",0);\r\n        }else{\r\n           multiTextLabelJQ.css(\"left\",multiTextLabelContainerJq.width()-multiTextLabelJQ.width());\r\n        }\r\n        if(labelCss[\"verticalAlign\"]===\"middle\"){//垂直居中\r\n           multiTextLabelJQ.css(\"top\",(multiTextLabelContainerJq.height()-multiTextLabelJQ.height())*0.5);\r\n        }else if(labelCss[\"verticalAlign\"]===\"top\"){\r\n           multiTextLabelJQ.css(\"top\",0);\r\n        }else{\r\n           multiTextLabelJQ.css(\"top\",multiTextLabelContainerJq.height()-multiTextLabelJQ.height());\r\n        }\r\n    };\r\n    \r\n    this.update = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        superUpdate();\r\n        \r\n        renderTextLabel();\r\n    };\r\n    \r\n    var renderTextLabel = function() {\r\n    \t if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n    \tself.renderMainContainer();\r\n        self.updateOthers();\r\n        if(!self.multiTextLabel){\r\n            return;\r\n        }\r\n         var multiTextLabelJQ = $(self.multiTextLabel.node());\r\n         var dataCfg = self.data();\r\n         var data=dataCfg.data[0];//因为后台数据必须是数组格式所以这儿只能这样\r\n         var formatCfg=dataCfg.label;\r\n         var dataValue=getItemValue(data,formatCfg.key);\r\n\r\n         var v=getResultLabel(formatCfg.labelFormat,dataValue,data);\r\n         var labelCss=dataCfg.styles.labelStyle;\r\n         multiTextLabelJQ.html(v);\r\n         var multiTextLabelContainerJq=$(multiTextLabelContainer.node());\r\n         var containerCss=getLabelContainerCss(dataCfg.styles);\r\n         multiTextLabelContainerJq.css(containerCss);\r\n         multiTextLabelJQ.css(labelCss);\r\n         self.renderSize();\r\n    }\r\n\r\n    function getLabelContainerCss(config){   \r\n        var result={};\r\n       for (var key in config) {\r\n           if (key!==\"labelStyle\") {\r\n                result[key]=config[key];\r\n           }\r\n       }\r\n        if(result[\"background-color\"]){\r\n            var c=d3.color(result[\"background-color\"]);\r\n            if(result[\"backGroundOpacity\"]){\r\n                c.opacity=result[\"backGroundOpacity\"];\r\n            }\r\n            result[\"background-color\"]=c.toString();\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    \r\n    var labelFormat = null;\r\n    this.labelFormat = function(value) {\r\n        if (!arguments.length) return labelFormat;\r\n        labelFormat = value;\r\n        return this;\r\n    }\r\n\r\n    var getItemValue = function(d, key) {\r\n    \tvar value = null;\r\n    \ttry {\r\n    \t\tif(RegexUtil.jsRegex.test(key)) {\r\n    \t\t\tvalue = key.replace(RegexUtil.jsRegex, function() {\r\n                    return arguments.length > 1 ?  eval(arguments[1]) : \"\";\r\n                });\r\n    \t\t} else {\r\n    \t\t\tvalue = key.indexOf(\".\") !== -1 ? eval(\"d.\" + key) : d[key];\r\n    \t\t}\r\n    \t} catch(e) {\r\n    \t\tvalue = null;\r\n    \t}\r\n    \treturn value;\r\n    }\r\n\r\n    /**\r\n     * 根据labelFormat获取最终label的方法\r\n     * @param label labelFormat\r\n     * @param value 替换内容，支持{#script#},其中script为js脚本内容；支持{v},相当于{#d[key]#}\r\n     * @param defaultResult 默认最终label\r\n     * @param date 所有项数据\r\n     * @param d 当前项数据\r\n     */\r\n    var getResultLabel = function(label, value, data) {\r\n    \t(value === null || value === undefined) && (value = \"\");\r\n    \tif(!label) {\r\n    \t\treturn value;\r\n    \t}\r\n        var result = label.replace(/{v}/ig, value);\r\n        if(!data){\r\n            return \"\";\r\n        }\r\n        return result.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    }\r\n\t\r\n\tthis.toString = function(){\r\n\r\n\t}\r\n\t\r\n\t    /**\r\n     * 父容器宽度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸 \r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    self.init();\r\n}\r\n\r\nMultiTextLabel.struct = function(ghca_charts){\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    MultiTextLabel.prototype = Object.create(BaseComponent.prototype);\r\n    MultiTextLabel.prototype.constructor = MultiTextLabel;\r\n}\r\n\r\nmodule.exports=MultiTextLabel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/importcomponents/multiTextLabel.js\n// module id = 55\n// module chunks = 0","var TextLabel = function(_ele,_data){\r\n\tconst BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tconst FileUtil = ghca_charts.view.util.fileUtil;\r\n\t const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\tBaseComponent.apply(this,[_data]);\r\n\t\r\n\tvar self = this,\r\n\tsuperRenderSize = self.renderSize,\r\n    superRender = self.render,\r\n    superUpdate = self.update,\r\n    superRenderChildren = self.renderChildren;\r\n\t\r\n\tif (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('LinkButton构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n\t}\r\n    \r\n    \r\n\tself.isLibsLoaded = false;\r\n\tself.className(\"textLabel\");\r\n\tself.addAttributes(\"files\");\r\n\tvar files=[];\r\n\tthis.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n\t/**\r\n\t * 渲染\r\n\t */\r\n\tthis.render = function() {\r\n\t\tself.isLibsLoaded = false;\r\n        loadLibs(afterLoadLibs);\r\n\t}\r\n\t\r\n\tvar loadLibs = function(callback) {\r\n        var files = self.files();\r\n        FileUtil.loadFiles(files, callback);\r\n    };\r\n\t\r\n\tvar afterLoadLibs = function() {\r\n        self.isLibsLoaded = true;\r\n        superRender();\r\n    };\r\n\t\r\n\t  /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //创建容器元素\r\n        var textLabel = d3.select(self.parent()).append(\"div\")\r\n            .attr(\"class\", self.className());          \r\n           \r\n        self.mainContainer(textLabel);\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n\t\r\n\t  /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        renderTextLabel();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n        superRenderSize();\r\n        var textLabel = self.mainContainer();\r\n        if(!textLabel) {\r\n            return;\r\n        }\r\n        //设置图表容器大小\r\n        var w = self.width(), h = self.height();\r\n        textLabel.attr(\"width\", w);\r\n        textLabel.attr(\"height\", h);\r\n        textLabel = $(self.mainContainer().node());\r\n        if(!textLabel) {\r\n            return;\r\n        }\r\n        $(textLabel).css(\"widht\",w);\r\n        $(textLabel).css(\"height\",h);\r\n    };\r\n    \r\n    this.update = function() {\r\n        if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        superUpdate();\r\n        \r\n        renderTextLabel();\r\n    };\r\n    \r\n    var renderTextLabel = function() {\r\n    \t if(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n    \tself.renderMainContainer();\r\n        self.updateOthers();\r\n        \r\n         var textLabel = $(self.mainContainer().node());\r\n         var dataCfg = self.data();\r\n         var data=dataCfg.data[0];//因为后台数据必须是数组格式所以这儿只能这样\r\n         var formatCfg=dataCfg.label;\r\n         var dataValue=getItemValue(data,formatCfg.key);\r\n\r\n         var v=getResultLabel(formatCfg.labelFormat,dataValue,data);\r\n         $(textLabel).css(dataCfg.styles);\r\n//         console.log(v);\r\n         \r\n         $(textLabel).html(v);\r\n         \r\n         self.renderSize();\r\n    }\r\n    \r\n    \r\n    var labelFormat = null;\r\n    this.labelFormat = function(value) {\r\n        if (!arguments.length) return labelFormat;\r\n        labelFormat = value;\r\n        return this;\r\n    }\r\n\r\n    var getItemValue = function(d, key) {\r\n    \tvar value = null;\r\n    \ttry {\r\n    \t\tif(RegexUtil.jsRegex.test(key)) {\r\n    \t\t\tvalue = key.replace(RegexUtil.jsRegex, function() {\r\n                    return arguments.length > 1 ?  eval(arguments[1]) : \"\";\r\n                });\r\n    \t\t} else {\r\n    \t\t\tvalue = key.indexOf(\".\") !== -1 ? eval(\"d.\" + key) : d[key];\r\n    \t\t}\r\n    \t} catch(e) {\r\n    \t\tvalue = null;\r\n    \t}\r\n    \treturn value;\r\n    }\r\n\r\n    /**\r\n     * 根据labelFormat获取最终label的方法\r\n     * @param label labelFormat\r\n     * @param value 替换内容，支持{#script#},其中script为js脚本内容；支持{v},相当于{#d[key]#}\r\n     * @param defaultResult 默认最终label\r\n     * @param date 所有项数据\r\n     * @param d 当前项数据\r\n     */\r\n    var getResultLabel = function(label, value, data, d) {\r\n    \t(value === null || value === undefined) && (value = \"\");\r\n    \tif(!label) {\r\n    \t\treturn value;\r\n    \t}\r\n    \tvar result = label.replace(/{v}/ig, value);\r\n        return result.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    }\r\n\t\r\n\tthis.toString = function(){\r\n\r\n\t}\r\n\t\r\n\t    /**\r\n     * 父容器宽度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸 \r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为本组件的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    self.init();\r\n}\r\n\r\nTextLabel.struct = function(ghca_charts){\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    TextLabel.prototype = Object.create(BaseComponent.prototype);\r\n    TextLabel.prototype.constructor = TextLabel;\r\n}\r\n\r\nmodule.exports=TextLabel;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/importcomponents/textLabel.js\n// module id = 56\n// module chunks = 0","// svg类\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _ele 组件所在容器对象或者容器id，比如一个div\r\n * @param _data 配置数据\r\n * @param _layout 布局对象，不传就为默认布局\r\n */\r\nvar SVG = function(_ele, _data, _layout) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    BaseComponent.apply(this, arguments);\r\n    \r\n    var self = this, \r\n        superRenderSize = self.renderSize,\r\n        superRender = self.render,\r\n        superRenderChildren = self.renderChildren;\r\n        \r\n    if (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n    \tself.parent(_ele);\r\n    } else {\r\n    \tthrow new Error('SVG构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    //------------------------------\r\n    //  className\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 类名称，默认作为该容器的css样式名称，比如<g class='mainContainer'>\r\n     */\r\n    this.className = function(){\r\n        return \"svgContainer\";\r\n    }\r\n    \r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为svg的父容器不是svg元素时，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n    \treturn ObjectUtil.isDomByTagName(self.parent(), \"g\") ? \r\n    \t   self.parent().getBBox().width : \r\n    \t   (self.parent() ? self.parent().clientWidth : 0);\r\n//        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为svg的父容器不是svg元素时，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n    \treturn ObjectUtil.isDomByTagName(self.parent(), \"g\") ? \r\n           self.parent().getBBox().height : \r\n           (self.parent() ? self.parent().clientHeight : 0);\r\n//        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // toolTipDiv\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * toolTip使用的div\r\n     */\r\n    var toolTipDiv = null;\r\n    this.toolTipDiv = function(value) {\r\n        if (!arguments.length) return toolTipDiv;\r\n        toolTipDiv = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //默认svg元素把父容器填满\r\n        self.percentWidth(100);\r\n        self.percentHeight(100);\r\n        //创建svg元素\r\n        var svg = d3.select(self.parent()).append(\"svg\")\r\n            .attr(\"class\", self.className())\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height())\r\n            //禁止选择svg中的文本内容\r\n            .attr(\"style\", \"-webkit-touch-callout: none;\" +\r\n                    \"-webkit-user-select: none;\" +\r\n                    \"-khtml-user-select: none;\" +\r\n                    \"-moz-user-select: none;\" +\r\n                    \"-ms-user-select: none;\" +\r\n                    \"user-select: none;\");\r\n        self.mainContainer(svg);\r\n    };\r\n    \r\n    /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n    \tsuperRenderChildren();\r\n    \t\r\n    \t//渲染toolTip使用的div\r\n        renderToolTipDiv();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n    \tsuperRenderSize();\r\n        svg = self.mainContainer();\r\n        if(!svg) {\r\n            return;\r\n        }\r\n        svg.attr(\"width\", self.width());\r\n        svg.attr(\"height\", self.height());\r\n    };\r\n    \r\n    /**\r\n     * 销毁本类实例的方法\r\n     */\r\n    this.destroy = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        var parentCon = d3.select(self.parent());\r\n        var divClass = \"toolTip-container-\" + self.graph().id();\r\n        parentCon.select(\"div.\" + divClass).remove();\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"SVG info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   layout:\"    + self.layout()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 渲染toolTip使用的div，该div处于body之下\r\n     */\r\n    var renderToolTipDiv = function() {\r\n//    \tvar parentCon = d3.select(\"body\");\r\n    \tvar parentCon = d3.select(self.parent());\r\n    \tvar divClass = \"toolTip-container-\" + self.graph().id();\r\n    \t//判断是否已创建div\r\n    \tif(parentCon.select(\"div.\" + divClass).node() !== null) {\r\n    \t\treturn;\r\n    \t}\r\n    \t//添加toolTip使用的div\r\n        var div = parentCon.append(\"div\").attr(\"class\", divClass);\r\n            \r\n        //默认样式\r\n        var style = div.node().style;\r\n        style.position          = \"absolute\";\r\n        style.display           = \"none\";\r\n        style.borderStyle       = \"solid\";\r\n        style.whiteSpace        = \"nowrap\";\r\n        style.transition        = \"left 0.2s, top 0.2s\";\r\n        style.backgroundColor   = \"rgba(50, 50, 50, 0.498039)\";\r\n        style.borderWidth       = \"0px\";\r\n        style.borderColor       = \"rgb(51, 51, 51)\";\r\n        style.borderRadius      = \"4px\";\r\n        style.color             = \"rgb(255, 255, 255)\";\r\n        style.fontFamily        = \"微软雅黑, Arial, Verdana, sans-serif\";\r\n        style.fontSize          = \"12px\";\r\n        style.padding           = \"5px\";\r\n        style.left              = \"0px\";\r\n        style.top               = \"0px\";\r\n        style.pointerEvents     = \"none\";\r\n        //发布到可视化平台中的tooltip强行设置textAlign为left,否则会被平台强行设置成center.\r\n        if(Global.isUseByEVPlatform) {\r\n        \tstyle.textAlign     = \"left\";\r\n        }\r\n        \r\n        self.toolTipDiv(div);\r\n    };\r\n    \r\n};\r\n\r\nSVG.struct = function(ghca_charts) {\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tBaseComponent.struct(ghca_charts);\r\n    SVG.prototype = Object.create(BaseComponent.prototype);\r\n    SVG.prototype.constructor = SVG;\r\n};\r\n\r\nmodule.exports = SVG;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/svg.js\n// module id = 57\n// module chunks = 0","/**\r\n * SVG画板类\r\n * 依赖项如下:\r\n * <link rel=\"stylesheet\" type=\"text/css\" href=\"../js/window/jquery.msgbox.css\"/>\r\n * <link rel=\"Stylesheet\" type=\"text/css\" href=\"../js/jpicker-1.1.6/css/jpicker-1.1.6.min.css\" />\r\n * <script type=\"text/javascript\" src=\"../js/window/jquery-latest.min.js\"></script>\r\n * <script type=\"text/javascript\" src=\"../js/window/jquery.dragndrop.min.js\"></script>\r\n * <script type=\"text/javascript\" src=\"../js/window/jquery.msgbox.js\"></script>\r\n * <script type=\"text/javascript\" src=\"../js/raphael.min.js\" charset=\"utf-8\"></script>\r\n * <script type=\"text/javascript\" src=\"../js/d3.min.js\" charset=\"utf-8\"></script>\r\n * <script type=\"text/javascript\" src=\"../js/ghca_charts.js\" charset=\"utf-8\"></script>\r\n * <script type=\"text/javascript\" src=\"../js/jpicker-1.1.6/jpicker-1.1.6.js\" charset=\"utf-8\"></script>\r\n * <script type=\"text/javascript\" src=\"../data/svgCanvas.js\" charset=\"utf-8\"></script>\r\n */\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data 画板配置数据\r\n * @param _layout 画板布局对象，不传就为默认布局\r\n */\r\nvar SvgCanvas = function(_data, _layout) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Const           = ghca_charts.view.util.constant;\r\n    const BaseComponent   = ghca_charts.view.component.baseComponent;\r\n    const BaseEvent       = ghca_charts.events.BaseEvent;\r\n    const SelectUtil      = ghca_charts.view.util.selectUtil;\r\n    const ObjectUtil      = ghca_charts.view.util.objectUtil;\r\n    const CommonUtil      = ghca_charts.view.util.commonUtil;\r\n    const SvgUtil         = ghca_charts.view.util.svgUtil;\r\n    const EventUtil       = ghca_charts.view.util.eventUtil;\r\n    const MouseUtil       = ghca_charts.view.util.mouseUtil;\r\n\r\n\tBaseComponent.apply(this, arguments);\r\n\t\r\n    var self = this, \r\n        superInit = self.init,\r\n        superResize = self.resize,\r\n        superUpdate = self.update,\r\n        superRenderBackground = self.renderBackground,\r\n        superRenderChildren = self.renderChildren;\r\n        \r\n    var currentCon, currentPath, pasteNodes, pasteNodesPos,\r\n        isMouseDown = false,\r\n        isDrawSelect = false,//是否正在执行框选操作过程\r\n        isShowWindow = false,//是否显示弹出窗口\r\n        startX = 0,\r\n        startY = 0,\r\n        toolBarBtns = [],\r\n        clipboard = null,//剪切板内容\r\n        cloneTx = 0, \r\n        cloneTy = 0,\r\n        fontFamilies = [\"sans-serif\", \"serif\", \"宋体\", \"微软雅黑\", \"黑体\", \"幼圆\", \"Arial\", \"Verdana\"],\r\n        fontSizes = [9, 10, 11, 12, 13, 14, 15, 18, 20, 25, 30, 40],\r\n        defaultFont = {fontFamily:\"serif\", fontSize:20, fontColor:\"#000000\"},\r\n        propertyBarHeight = 30,\r\n        colorPickerConfig = {\r\n            window:{\r\n            \ttitle:\"拖拽选择颜色\",\r\n                expandable:true,\r\n                alphaSupport:true,\r\n                effects:{\r\n                    type:'slide', // effect used to show/hide an expandable picker. Acceptable values \"slide\", \"show\", \"fade\"\r\n                    speed:{\r\n                        show:'fast', // duration of \"show\" effect. Acceptable values are \"fast\", \"slow\", or time in ms\r\n                        hide:'fast' // duration of \"hide\" effect. Acceptable value are \"fast\", \"slow\", or time in ms\r\n                    }\r\n                },\r\n                position:{\r\n                  x:\"20px\", // acceptable values \"left\", \"center\", \"right\", \"screenCenter\", or relative px value\r\n                  y:\"20px\" // acceptable values \"top\", \"bottom\", \"center\", or relative px value\r\n                }\r\n            },\r\n            color: {\r\n                active:new $.jPicker.Color()\r\n            },\r\n            images: {\r\n                clientPath:'' // Path to image files\r\n            },\r\n            localization:{\r\n                text:{\r\n                    title:'拖拽选择颜色',\r\n                    newColor:'新',\r\n                    currentColor:'旧',\r\n                    ok:'确定',\r\n                    cancel:'取消'\r\n                }\r\n            }\r\n        };\r\n\r\n    self.className(\"svgCanvas\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"mode\", \"dragable\", \"iconPath\", \"jpickerPath\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    //------------------------------\r\n    //  mode\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 画板当前模式(默认值edit) normal|edit\r\n     */\r\n    var mode = \"edit\";\r\n    this.mode = function(value) {\r\n        if (!arguments.length) \r\n            return mode;\r\n        if(mode !== value) {\r\n        \tmode = value;\r\n            validateMode();\r\n        }\r\n        return this;\r\n    }\r\n    \r\n    //------------------------------\r\n    //  state\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 画板当前状态(默认值select) normal|select|draw\r\n     */\r\n    var state = \"select\";\r\n    this.state = function(value) {\r\n        if (!arguments.length) \r\n            return state;\r\n        state = value;\r\n        \r\n        if(state === \"normal\") {\r\n        \tremoveEditListeners();\r\n        \tif(self.mode() === \"normal\") {\r\n        \t\tremoveDragListeners();\r\n                self.ownerSVG().bgNode().style.cursor = \"\";\r\n        \t} else {\r\n        \t\taddDragListeners();\r\n                self.ownerSVG().bgNode().style.cursor = \"move\";\r\n        \t}\r\n            self.content.attr(\"pointer-events\", \"none\");\r\n        } else {\r\n        \tself.ownerSVG().bgNode().style.cursor = \"\";\r\n        \tremoveDragListeners();\r\n            addEditListeners();\r\n            if(state === \"draw\") {\r\n            \tself.ownerSVG().bgNode().style.cursor = \"crosshair\";\r\n            \tself.content.attr(\"pointer-events\", \"none\");\r\n            } else {//select\r\n            \tself.content.attr(\"pointer-events\", \"\");\r\n            }\r\n        }\r\n        //移除选中相关渲染显示\r\n        if(state !== \"select\") {\r\n        \t//清除上一次的选中状态\r\n            removeControlPoints();\r\n        }\r\n        //若没有选中元素，则隐藏属性栏\r\n        var selectedNodes = SelectUtil.getSelectedNodes();\r\n        if(!selectedNodes || selectedNodes.length === 0) {\r\n        \tself.propertyBar.style(\"display\", \"none\");\r\n        }\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  drawType\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 画板处于draw状态时的类型(默认值null) null|pencil|line|polyline|rect|circle|ellipse|text|image\r\n     */\r\n    var drawType = null;\r\n    this.drawType = function(value) {\r\n        if (!arguments.length) \r\n            return drawType;\r\n        drawType = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  dragable\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 画板整体内容是否可以通过拖动鼠标移动(默认值true)\r\n     */\r\n    var dragable = true;\r\n    this.dragable = function(value) {\r\n        if (!arguments.length) \r\n            return dragable;\r\n        dragable = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  iconPath\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 图标资源路径\r\n     */\r\n    var iconPath = \"../image/svg_canvas/\";\r\n    this.iconPath = function(value) {\r\n        if (!arguments.length) \r\n            return iconPath;\r\n        iconPath = value;\r\n        SelectUtil.iconPath(iconPath);\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  jpickerPath\r\n    //------------------------------\r\n    \r\n    /**\r\n     * jpicker路径\r\n     */\r\n    var jpickerPath = \"../js/jpicker-1.1.6/\";\r\n    this.jpickerPath = function(value) {\r\n        if (!arguments.length) \r\n            return jpickerPath;\r\n        jpickerPath = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 监听外部抛出开启和关闭编辑模式的事件\r\n     */\r\n    var openEditHandler = function(evt) {\r\n        self.mode((evt || window.event).detail.data === true ? \"edit\" : \"normal\");\r\n    };\r\n    \r\n    /**\r\n     * 画板内容开始拖动平移监听处理方法\r\n     */\r\n    var dragStartHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n        if(!self.dragable()) {\r\n            return;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 画板内容拖动平移进行中监听处理方法\r\n     */\r\n    var dragHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n        if(!self.dragable()) {\r\n            return;\r\n        }\r\n        var x = self.x(), y = self.y();\r\n        self.x(x+d3.event.dx);\r\n        self.y(y+d3.event.dy);\r\n        self.renderTransform();\r\n    };\r\n    \r\n    /**\r\n     * 整个画板缩放的监听相关处理方法，鼠标滚轮触发\r\n     */\r\n    var zoomHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \tvar scaleType = self.scaleType();\r\n    \t//判断是否开启缩放功能\r\n    \tif(scaleType === Const.NO_SCALE_TYPE) {\r\n    \t\treturn;\r\n    \t}\r\n    \t//判断是否是对布局关系的缩放\r\n        var isLayoutZoom = self.scaleType() !== Const.COMPONENT_SCALE_TYPE;\r\n        if(isLayoutZoom) {\r\n        \t\r\n        } else {\r\n        \tself.zoom(d3.event.deltaY > 0);\r\n        }\r\n    };\r\n    \r\n    var keyDownHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \t//屏蔽moveArea容器响应事件\r\n    \tenableMoveAreaEvents(false);\r\n    \t//----ctrl组合按键----\r\n        if(d3.event.ctrlKey) {\r\n            switch(d3.event.keyCode) {\r\n                case 65://ctrl+a [select all nodes]\r\n                    selectAllNodes();\r\n                    return;\r\n                case 67://ctrl+c [copy nodes]\r\n                    copy();\r\n                    return;\r\n                case 88://ctrl+x [cut nodes]\r\n                    cut();\r\n                    return;\r\n                case 86://ctrl+v [paste nodes]\r\n                    paste();\r\n                    return;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        //----shift组合按键----\r\n        if(d3.event.shiftKey) {\r\n            switch(d3.event.keyCode) {\r\n                case 38://shift+up arrow [move up 1px]\r\n                    moveUp(1);\r\n                    return;\r\n                case 39://shift+right arrow [move right 1px]\r\n                    moveRight(1);\r\n                    return;\r\n                case 40://shift+down arrow [move down 1px]\r\n                    moveDown(1);\r\n                    return;\r\n                case 37://shift+left arrow [move left 1px]\r\n                    moveLeft(1);\r\n                    return;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    \t//----单个按键----\r\n    \tswitch(d3.event.keyCode) {\r\n    \t\tcase 46://delete [delete selected nodes]\r\n                removeSelectedNodes();\r\n                break;\r\n            case 27://esc [clear up selected state]\r\n                //若当前显示弹出窗口，则先关闭弹出窗口\r\n                if(!isShowWindow) {\r\n                    //清除上一次的选中状态\r\n                    removeControlPoints();\r\n                }\r\n                break;\r\n            case 38://up arrow [move up 5px]\r\n                moveUp(5);\r\n                break;\r\n            case 39://right arrow [move right 5px]\r\n                moveRight(5);\r\n                break;\r\n            case 40://down arrow [move down 5px]\r\n                moveDown(5);\r\n                break;\r\n            case 37://left arrow [move left 5px]\r\n                moveLeft(5);\r\n                break;\r\n    \t\tdefault:\r\n                break;\r\n    \t}\r\n    };\r\n    \r\n    var keyUpHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \t//解除屏蔽moveArea容器响应事件\r\n        enableMoveAreaEvents(true);\r\n    };\r\n    \r\n    var doubleClickHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \tvar target = d3.event.target;\r\n    \t//双击弹出元素对应编辑窗口\r\n    \tif(target.getAttribute(\"class\") === \"moveArea\") {\r\n    \t\tvar nodes = SelectUtil.getSelectedNodes();\r\n    \t\tif(nodes.length === 1) {\r\n    \t\t\tvar tagName = nodes[0].tagName;\r\n    \t\t\tshowEditWindow(tagName, nodes[0]);\r\n    \t\t}\r\n    \t}\r\n    };\r\n    \r\n    var updatePorpertiesHandler = function() {\r\n    \tself.propertyBar.style(\"display\", \"block\");\r\n    \trefreshProperties(event.detail);\r\n    };\r\n    \r\n    var hiddenPorpertiesHandler = function() {\r\n    \tself.propertyBar.style(\"display\", \"none\");\r\n    };\r\n    \r\n    var transformChangeHandler = function() {\r\n    \tvar nodes = SelectUtil.getSelectedNodes();\r\n    \tsetTransform(nodes);\r\n    };\r\n    \r\n    var fillChangeHandler = function(color, context) {\r\n        var nodes = SelectUtil.getSelectedNodes();\r\n        var fill = getRgba(color.val('rgba'));\r\n        setFill(nodes, fill);\r\n    };\r\n    \r\n    var strokeChangeHandler = function(color, context) {\r\n        var nodes = SelectUtil.getSelectedNodes();\r\n        var stroke = getRgba(color.val('rgba'));\r\n        setStroke(nodes, stroke);\r\n    };\r\n    \r\n    var strokeWidthChangeHandler = function(color, context) {\r\n        var nodes = SelectUtil.getSelectedNodes();\r\n        var strokeWidth = parseFloat(d3.event.currentTarget.value);\r\n        setStrokeWidth(nodes, strokeWidth);\r\n    };\r\n    \r\n    var moveLayerUpHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \tvar nodes = SelectUtil.getSelectedNodes();\r\n    \tif(nodes.length === 1) {\r\n    \t\tmoveLayerUp(nodes[0]);\r\n    \t}\r\n    };\r\n    \r\n    var moveLayerDownHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n        var nodes = SelectUtil.getSelectedNodes();\r\n        if(nodes.length === 1) {\r\n            moveLayerDown(nodes[0]);\r\n        }\r\n    };\r\n    \r\n    var moveLayerTopHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \tvar nodes = SelectUtil.getSelectedNodes();\r\n        if(nodes.length === 1) {\r\n            moveLayerTop(nodes[0]);\r\n        }\r\n    };\r\n    \r\n    var moveLayerBottomHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \tvar nodes = SelectUtil.getSelectedNodes();\r\n        if(nodes.length === 1) {\r\n            moveLayerBottom(nodes[0]);\r\n        }\r\n    };\r\n    \r\n    var mouseDownHandler = function() {\r\n        d3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n    \t//点击画板背景和元素之外的地方，则不执行绘制操作\r\n    \tvar nodes = SelectUtil.getAllNodes();\r\n    \tvar isOnBg = d3.event.target === self.ownerSVG().bgRect.node();\r\n    \tvar isOnNode = nodes.indexOf(d3.event.target) !== -1;\r\n        if(!isOnBg && !isOnNode) {\r\n            return;\r\n        }\r\n        d3.select(window).on(\"mousemove.svgCanvas\", mouseMoveHandler, false);\r\n        d3.select(window).on(\"mouseup.svgCanvas\", mouseUpHandler, false);\r\n        isMouseDown = true;\r\n        \r\n        var m = MouseUtil.mouse(self.content.node(), self.graph());\r\n        startX = parseInt(m[0]);\r\n        startY = parseInt(m[1]);\r\n        if(state === \"select\") {\r\n        \t//点击画板背景，执行框选过程\r\n        \tif(isOnBg) {\r\n        \t\tisDrawSelect = true;\r\n        \t\tcreateSelectRect();\r\n        \t} else if(isOnNode) {//点击元素\r\n        \t\tdoSelect([d3.event.target]);\r\n        \t}\r\n        } else if(state === \"draw\") {\r\n        \tif(self.drawType() === \"pencil\") {\r\n        \t\tcurrentPath = d3.path();\r\n                currentPath.moveTo(startX, startY);\r\n                currentCon = self.content.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"black\");\r\n        \t} else if(self.drawType() === \"line\") {\r\n        \t\tcurrentCon = self.content.append(\"line\").attr(\"fill\", \"none\").attr(\"stroke\", \"black\");\r\n        \t} else if(self.drawType() === \"polyline\") {\r\n                currentCon = self.content.append(\"polyline\").attr(\"fill\", \"none\").attr(\"stroke\", \"black\");\r\n            } else if(self.drawType() === \"rect\") {\r\n                currentCon = self.content.append(\"rect\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\r\n            } else if(self.drawType() === \"circle\") {\r\n                currentCon = self.content.append(\"circle\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\r\n            } else if(self.drawType() === \"ellipse\") {\r\n                currentCon = self.content.append(\"ellipse\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\r\n            } else if(self.drawType() === \"text\") {\r\n                currentCon = self.content.append(\"text\")\r\n                    .attr(\"x\", startX).attr(\"y\", startY)\r\n                    .attr(\"text-anchor\", \"start\")\r\n                    .attr(\"dy\", defaultFont.fontSize-1)\r\n                    .attr(\"font-family\", defaultFont.fontFamily)\r\n                    .attr(\"font-size\", defaultFont.fontSize)\r\n                    .attr(\"stroke-width\", 0)\r\n                    .attr(\"stroke\", defaultFont.fontColor)\r\n                    .attr(\"fill\", defaultFont.fontColor)\r\n                    .attr(\"opacity\", 1)\r\n                    .text(\"双击编辑\");\r\n            } else if(self.drawType() === \"image\") {\r\n                currentCon = self.content.append(\"image\")\r\n                    .attr(\"x\", startX).attr(\"y\", startY)\r\n                    .attr(\"preserveAspectRatio\", \"none\")//xMinYMin meet\r\n                    .attr(\"xlink:href\", self.iconPath() + \"image.svg\");\r\n            }\r\n        }\r\n    };\r\n    \r\n    var mouseMoveHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n        if(!isMouseDown) return;\r\n         \r\n        if(state === \"select\") {\r\n        \tif(isDrawSelect) {\r\n        \t\tdrawSelectRect();\r\n        \t}\r\n        } else if(state === \"draw\") {\r\n            var m = MouseUtil.mouse(self.content.node(), self.graph());\r\n            var mx = parseInt(m[0]);\r\n            var my = parseInt(m[1]);\r\n            if(self.drawType() === \"pencil\") {\r\n            \tcurrentPath.lineTo(mx, my);\r\n                currentCon.attr(\"d\", currentPath.toString());\r\n            } else if(self.drawType() === \"line\") {\r\n                currentCon.attr(\"x1\", startX).attr(\"y1\", startY).attr(\"x2\", mx).attr(\"y2\", my);\r\n            } else if(self.drawType() === \"polyline\") {\r\n            \tvar dx = mx - startX;\r\n            \tvar dy = my - startY;\r\n            \tvar isHor = Math.abs(dx) > Math.abs(dy);\r\n            \tvar cp = isHor ? Math.round(startX + dx / 2) : Math.round(startY + dy / 2);\r\n            \tvar points = isHor ? \r\n                \t[startX, startY, cp, startY, cp, my, mx, my] : \r\n                \t[startX, startY, startX, cp, mx, cp, mx, my];\r\n                currentCon.attr(\"points\", points);\r\n            } else if(self.drawType() === \"circle\") {\r\n                currentCon.attr(\"cx\", startX).attr(\"cy\", startY)\r\n                    .attr(\"r\", Math.floor(Math.sqrt(Math.pow(startX-mx, 2)+Math.pow(startY-my, 2))));\r\n            } else if(self.drawType() === \"ellipse\") {\r\n                var rw, rh, cx, cy;\r\n                if(mx < startX) {\r\n                    rw = (startX - mx) / 2;\r\n                    cx = mx + rw;\r\n                } else {\r\n                    rw = (mx - startX) / 2;\r\n                    cx = startX + rw;\r\n                }\r\n                if(my < startY) {\r\n                    rh = (startY - my) / 2;\r\n                    cy = my + rh;\r\n                } else {\r\n                    rh = (my - startY) / 2;\r\n                    cy = startY + rh;\r\n                }\r\n                currentCon.attr(\"cx\", cx).attr(\"cy\", cy).attr(\"rx\", rw).attr(\"ry\", rh);\r\n            } else if(self.drawType() === \"text\") {\r\n                currentCon.attr(\"x\", startX).attr(\"y\", startY);\r\n            } else {\r\n                var w, h, sx, sy;\r\n                if(mx < startX) {\r\n                    w = startX - mx;\r\n                    sx = mx;\r\n                } else {\r\n                    w = mx - startX;\r\n                    sx = startX;\r\n                }\r\n                if(my < startY) {\r\n                    h = startY - my;\r\n                    sy = my;\r\n                } else {\r\n                    h = my - startY;\r\n                    sy = startY;\r\n                }\r\n                currentCon.attr(\"x\", sx).attr(\"y\", sy).attr(\"width\", w).attr(\"height\", h);\r\n            }\r\n        }\r\n    };\r\n    \r\n    var mouseUpHandler = function() {\r\n    \td3.event && d3.event.stopImmediatePropagation && d3.event.stopImmediatePropagation();\r\n        d3.select(window).on(\"mousemove.svgCanvas\", null);\r\n        d3.select(window).on(\"mouseup.svgCanvas\", null);\r\n        isMouseDown = false;\r\n        \r\n        if(state === \"select\") {\r\n        \tif(isDrawSelect) {\r\n        \t\tdrawSelect();\r\n        \t\tisDrawSelect = false;\r\n        \t}\r\n        } else if(state === \"draw\") {\r\n        \tvar currentNode = currentCon.node();\r\n            var box = currentNode.getBBox();\r\n            if((box.width === 0 || box.height === 0) && self.drawType() !== \"text\") {\r\n                currentCon.remove();\r\n            } else {\r\n            \tSelectUtil.addNode(currentNode);\r\n            \trefreshNodesLayer();\r\n            \tdoSelect([currentNode]);\r\n        \t\tshowEditWindow(self.drawType(), currentNode);\r\n            }\r\n        }\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 刷新数据内容，生成需要的属性和相关值\r\n     */\r\n    this.refreshData = function() {\r\n        var data = self.data();\r\n        if(!data) {\r\n            return;\r\n        }\r\n        //从配置读取指定的属性值\r\n        var attrs = self.attributes();\r\n        if(attrs) {\r\n           for(var key, i = 0, len = attrs.length; i < len; i++) {\r\n                key = attrs[i];\r\n                if(self.hasOwnProperty(key) && data.hasOwnProperty(key)) {\r\n                    self[key](data[key]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n        \r\n        colorPickerConfig.images.clientPath = self.jpickerPath() + \"images/\";\r\n    };\r\n    \r\n    /**\r\n     * 初始化图表包含的各个层级\r\n     */\r\n    this.initAllContainers = function() {\r\n    \tself.content = self.mainContainer().append(\"g\").attr(\"class\", \"content\");\r\n    \tself.selectCon = self.mainContainer().append(\"g\").attr(\"class\", \"select-container\");\r\n    \tinitToolBar();\r\n    \tinitPropertyBar();\r\n    \tself.state(\"select\");\r\n    \tself.addEventListener(BaseEvent.EV_EVENT_OPEN_EDIT, openEditHandler);\r\n    };\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tself.refreshData();\r\n    \tvalidateMode();\r\n    \tsuperUpdate();\r\n        updateNodes();\r\n    };\r\n    \r\n    //override\r\n    this.addListeners = function() {\r\n    \tif(!self.parent()) {\r\n            return;\r\n        }\r\n        //添加缩放监听\r\n        self.parent().mainContainer().on(\"wheel\", zoomHandler);\r\n    };\r\n    \r\n    //override\r\n    this.renderBackground = function() {\r\n    \tsuperRenderBackground();\r\n    \tif(self.bgRect) {\r\n    \t\tself.bgRect.attr(\"pointer-events\", \"none\");\r\n    \t}\r\n    };\r\n    \r\n    //override\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        //初始化图表包含的各个层级\r\n        self.initAllContainers();\r\n        //根据当前数据重新布局并且渲染内容\r\n        self.update();\r\n    };\r\n    \r\n    //override\r\n    this.resize = function() {\r\n        superResize();\r\n        \r\n        var style = self.propertyBar.node().style;\r\n        style.top = (self.ownerSVG().height() - propertyBarHeight) + \"px\";\r\n    };\r\n    \r\n    //override\r\n    this.toJSON = function(isData) {\r\n    \tvar str = \"\";\r\n    \tvar d = self.data();\r\n    \tif(!d) {\r\n    \t\treturn str;\r\n    \t}\r\n    \td.data = cloneNodes(SelectUtil.getAllNodes(), true, false);\r\n    \tstr = JSON.stringify(isData === true ? {data:d.data} : d);\r\n        return str;\r\n    };\r\n    \r\n    //override\r\n    this.toString = function() {\r\n        return (\"BaseChart info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 验证当前画板模式\r\n     */\r\n    var validateMode = function() {\r\n    \tif(!self.parent()) {\r\n    \t\treturn;\r\n    \t}\r\n        if(self.mode() === \"edit\") {\r\n            self.state(\"select\");\r\n            self.propertyBar.node().style.visibility = \"visible\";\r\n            self.toolBar.node().style.visibility = \"visible\";\r\n        } else {\r\n            self.state(\"normal\");\r\n            self.propertyBar.node().style.visibility = \"hidden\";\r\n            self.toolBar.node().style.visibility = \"hidden\";\r\n        }\r\n    };\r\n    \r\n    var initPropertyBar = function() {\r\n    \tif(!self.ownerSVG() || !self.ownerSVG().parent()) {\r\n            return;\r\n        }\r\n        var svg = self.ownerSVG();\r\n        var parentCon = d3.select(svg.parent());\r\n        self.propertyBar = parentCon.insert(\"div\", \"div.toolTip-container\").attr(\"class\", \"property-bar\");\r\n        //背景默认样式\r\n        var style = self.propertyBar.node().style;\r\n        style.position = \"absolute\";\r\n        style.display = \"block\";\r\n        style.backgroundColor = \"rgb(242,242,242)\";\r\n        style.left = \"0px\";\r\n        style.top = (svg.height() - propertyBarHeight) + \"px\";\r\n        style.width = svg.width() + \"px\";\r\n        style.height = propertyBarHeight + \"px\";\r\n        \r\n        //x\r\n        var xLabel = self.propertyBar.append(\"div\").text(\"x:\").attr(\"style\", \"margin-left:5px;float:left;\");\r\n        self.xText = xLabel.append(\"input\").attr(\"type\", \"text\").attr(\"title\", \"修改x坐标\")\r\n            .attr(\"style\", \"width:50px;height:18px;margin-top:4px;margin-left:2px;\")\r\n            .on(\"change\", transformChangeHandler);\r\n        //y    \r\n        var yLabel = self.propertyBar.append(\"div\").text(\"y:\").attr(\"style\", \"margin-left:5px;float:left;\");\r\n        self.yText = yLabel.append(\"input\").attr(\"type\", \"text\").attr(\"title\", \"修改y坐标\")\r\n            .attr(\"style\", \"width:50px;height:18px;margin-top:4px;margin-left:2px;\")\r\n            .on(\"change\", transformChangeHandler);\r\n        //width    \r\n        var widthLabel = self.propertyBar.append(\"div\").text(\"宽:\").attr(\"style\", \"margin-left:10px;float:left;\");\r\n        self.widthText = widthLabel.append(\"input\").attr(\"type\", \"text\").attr(\"title\", \"修改宽度\")\r\n            .attr(\"style\", \"width:50px;height:18px;margin-top:4px;margin-left:2px;\")\r\n            .on(\"change\", transformChangeHandler);\r\n        //height    \r\n        var heightLabel = self.propertyBar.append(\"div\").text(\"高:\").attr(\"style\", \"margin-left:5px;float:left;\");\r\n        self.heightText = heightLabel.append(\"input\").attr(\"type\", \"text\").attr(\"title\", \"修改高度\")\r\n            .attr(\"style\", \"width:50px;height:18px;margin-top:4px;margin-left:2px;\")\r\n            .on(\"change\", transformChangeHandler);\r\n        //rotate    \r\n        var rotateLabel = self.propertyBar.append(\"div\").text(\"旋转:\").attr(\"style\", \"margin-left:10px;float:left;\");\r\n        self.rotatetText = rotateLabel.append(\"input\").attr(\"type\", \"text\").attr(\"title\", \"修改旋转角度\")\r\n            .attr(\"style\", \"width:50px;height:18px;margin-top:4px;margin-left:2px;\")\r\n            .on(\"change\", transformChangeHandler);\r\n            \r\n        //move up z-index    \r\n        var upZIndexLabel = self.propertyBar.append(\"div\").text(\"层级:\").attr(\"style\", \"margin-left:10px;float:left;\");\r\n        self.upZIndexBtn = upZIndexLabel.append(\"input\").attr(\"type\", \"button\").attr(\"value\", \"↑\")\r\n            .attr(\"style\", \"margin-top:4px;margin-left:2px;\").attr(\"title\", \"向上移动一个层级\")\r\n            .on(\"click\", moveLayerUpHandler);\r\n        //move down z-index\r\n        var downZIndexLabel = self.propertyBar.append(\"div\").text(\"\").attr(\"style\", \"margin-left:5px;float:left;\");\r\n        self.downZIndexBtn = downZIndexLabel.append(\"input\").attr(\"type\", \"button\").attr(\"value\", \"↓\")\r\n            .attr(\"style\", \"margin-top:4px;margin-left:2px;\").attr(\"title\", \"向下移动一个层级\")\r\n            .on(\"click\", moveLayerDownHandler);\r\n        //move top z-index\r\n        var topZIndexLabel = self.propertyBar.append(\"div\").text(\"\").attr(\"style\", \"margin-left:5px;float:left;\");\r\n        self.topZIndexBtn = topZIndexLabel.append(\"input\").attr(\"type\", \"button\").attr(\"value\", \"⇧\")\r\n            .attr(\"style\", \"margin-top:4px;margin-left:2px;\").attr(\"title\", \"移动到顶层\")\r\n            .on(\"click\", moveLayerTopHandler);\r\n        //move bottom z-index\r\n        var bottomZIndexLabel = self.propertyBar.append(\"div\").text(\"\").attr(\"style\", \"margin-left:5px;float:left;\");\r\n        self.bottomZIndexBtn = bottomZIndexLabel.append(\"input\").attr(\"type\", \"button\").attr(\"value\", \"⇩\")\r\n            .attr(\"style\", \"margin-top:4px;margin-left:2px;\").attr(\"title\", \"移动到底层\")\r\n            .on(\"click\", moveLayerBottomHandler);\r\n            \r\n        //fill color\r\n        var fillColorLabel = self.propertyBar.append(\"div\").attr(\"style\", \"margin-left:10px;margin-top:4px;float:left;\").attr(\"title\", \"修改填充色\");\r\n        fillColorLabel.append(\"img\").attr(\"src\", self.iconPath() + \"fill.svg\").attr(\"align\", \"top\").attr(\"style\", \"width:24px;height:24px;\");\r\n        self.fillCp = fillColorLabel.append(\"span\").attr(\"id\", \"fillColor\")\r\n            .attr(\"style\", \"margin-left:2px;\");\r\n        $('#fillColor').jPicker(colorPickerConfig, fillChangeHandler);\r\n        \r\n        //stroke color\r\n        var strokeColorLabel = self.propertyBar.append(\"div\").attr(\"style\", \"margin-left:10px;margin-top:4px;float:left;\").attr(\"title\", \"修改笔触色\");\r\n        strokeColorLabel.append(\"img\").attr(\"src\", self.iconPath() + \"stroke.svg\").attr(\"align\", \"top\").attr(\"style\", \"width:24px;height:24px;\");\r\n        self.strokeCp = strokeColorLabel.append(\"span\").attr(\"id\", \"strokeColor\")\r\n            .attr(\"style\", \"margin-left:2px;\");\r\n        $('#strokeColor').jPicker(colorPickerConfig, strokeChangeHandler);\r\n        \r\n        //stroke width\r\n        var strokeWidthLabel = self.propertyBar.append(\"div\").attr(\"style\", \"margin-left:5px;float:left;\");\r\n        self.strokeWidthText = strokeWidthLabel.append(\"input\").attr(\"type\", \"text\").attr(\"title\", \"修改笔触粗细\")\r\n            .attr(\"style\", \"width:30px;height:18px;margin-top:4px;margin-left:2px;\")\r\n            .on(\"change\", strokeWidthChangeHandler);\r\n    };\r\n    \r\n    var getRgba = function(all) {\r\n    \tvar r = all && all.r || '0';\r\n        var g = all && all.g || '0';\r\n        var b = all && all.b || '0';\r\n        var a = all && all.a/255 || '0';\r\n        var color = \"rgba(\" + [r,g,b,a] + \")\";\r\n        return color;\r\n    };\r\n    \r\n    var rgbaToColor = function(rgba) {\r\n    \tif(rgba === null || rgba === undefined || rgba === \"\" || rgba === \"none\") {\r\n    \t\trgba = \"rgba(0,0,0,0)\";\r\n    \t}\r\n    \tvar color = d3.color(rgba).rgb();\r\n    \tcolor.r = isNaN(color.r) ? 0 : color.r;\r\n    \tcolor.g = isNaN(color.g) ? 0 : color.g;\r\n    \tcolor.b = isNaN(color.b) ? 0 : color.b;\r\n    \treturn {r:color.r, g:color.g, b:color.b, a:Math.floor(color.opacity*255)};\r\n    };\r\n    \r\n    var refreshProperties = function(node) {\r\n    \tvar data = node.__data__;\r\n    \tself.xText.node().value = data.x;\r\n    \tself.yText.node().value = data.y;\r\n    \tself.widthText.node().value = data.width;\r\n    \tself.heightText.node().value = data.height;\r\n    \tself.rotatetText.node().value = data.rotate;\r\n    \t\r\n    \tvar fill = node.getAttribute(\"fill\");\r\n    \tfill = rgbaToColor(fill);\r\n    \t$('#fillColor')[0].color.active.val('rgba', fill);\r\n    \t\r\n    \tvar stroke = node.getAttribute(\"stroke\");\r\n        stroke = rgbaToColor(stroke);\r\n        $('#strokeColor')[0].color.active.val('rgba', stroke);\r\n        \r\n        var strokeWidth = node.getAttribute(\"stroke-width\");\r\n    \tstrokeWidth = strokeWidth === null ? \"1\" : strokeWidth.replace(\"px\", \"\");\r\n        self.strokeWidthText.node().value = strokeWidth;\r\n    };\r\n    \r\n    var setTransform = function(nodes) {\r\n    \tif(!nodes ||　nodes.length > 1) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar node = nodes[0];\r\n        var data = node.__data__;\r\n        var oldRects = [{x:data.x, y:data.y, width:data.width, height:data.height}];\r\n        data.x = parseFloat(self.xText.node().value);\r\n        data.y = parseFloat(self.yText.node().value);\r\n        data.width = parseFloat(self.widthText.node().value);\r\n        data.height = parseFloat(self.heightText.node().value);\r\n        data.rotate = parseFloat(self.rotatetText.node().value);\r\n        \r\n        var nodes = [node];\r\n        SelectUtil.validateNodes(nodes, oldRects);\r\n        removeControlPoints();\r\n        doSelect(nodes);\r\n    };\r\n    \r\n    var setFill = function(nodes, fill) {\r\n        if(!nodes ||　nodes.length > 1) {\r\n            return;\r\n        }\r\n        var node = nodes[0];\r\n        node.setAttribute(\"fill\", fill);\r\n    };\r\n    \r\n    var setStroke = function(nodes, stroke) {\r\n        if(!nodes ||　nodes.length > 1) {\r\n            return;\r\n        }\r\n        var node = nodes[0];\r\n        node.setAttribute(\"stroke\", stroke);\r\n    };\r\n    \r\n    var setStrokeWidth = function(nodes, strokeWidth) {\r\n        if(isNaN(strokeWidth) || !nodes ||　nodes.length > 1) {\r\n            return;\r\n        }\r\n        var node = nodes[0];\r\n        node.setAttribute(\"stroke-width\", strokeWidth+\"px\");\r\n    };\r\n    \r\n    var initToolBar = function() {\r\n    \tif(!self.ownerSVG()) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar parentCon = self.ownerSVG().mainContainer();\r\n        self.toolBar = parentCon.append(\"g\").attr(\"class\", \"toolbar\");\r\n        self.toolBar.attr(\"transform\", \"translate(\" + [5, 5] + \")\");\r\n        var btnSize = 24, btnGap = 5;\r\n        toolBarBtns.push(addButton(\"normal_btn\", btnSize, btnSize, self.iconPath() + \"normal.png\", \"拖拽\", false, true));\r\n        toolBarBtns.push(addButton(\"select_btn\", btnSize, btnSize, self.iconPath() + \"select.png\", \"选择\", true, true));\r\n        toolBarBtns.push(addButton(\"pencil_btn\", btnSize, btnSize, self.iconPath() + \"pencil.png\", \"铅笔工具\", false, true));\r\n        toolBarBtns.push(addButton(\"line_btn\", btnSize, btnSize, self.iconPath() + \"line.png\", \"直线\", false, true));\r\n        toolBarBtns.push(addButton(\"polyline_btn\", btnSize, btnSize, self.iconPath() + \"polyline.png\", \"折线\", false, true));\r\n        toolBarBtns.push(addButton(\"rect_btn\", btnSize, btnSize, self.iconPath() + \"rectangle.png\", \"矩形\", false, true));\r\n        toolBarBtns.push(addButton(\"circle_btn\", btnSize, btnSize, self.iconPath() + \"circle.png\", \"圆形\", false, true));\r\n        toolBarBtns.push(addButton(\"ellipse_btn\", btnSize, btnSize, self.iconPath() + \"ellipse.png\", \"椭圆\", false, true));\r\n        toolBarBtns.push(addButton(\"text_btn\", btnSize, btnSize, self.iconPath() + \"text.png\", \"文字\", false, true));\r\n        toolBarBtns.push(addButton(\"image_btn\", btnSize, btnSize, self.iconPath() + \"image.svg\", \"图片\", false, true));\r\n        toolBarBtns.push(addButton(\"delete_btn\", btnSize, btnSize, self.iconPath() + \"delete.png\", \"删除\", false, false));\r\n        toolBarBtns.push(addButton(\"save_btn\", btnSize, btnSize, self.iconPath() + \"save.png\", \"保存\", false, false));\r\n        for(var btn, btnX = 0, i = 0, len = toolBarBtns.length; i < len; i++) {\r\n        \tbtn = toolBarBtns[i];\r\n        \tbtn.attr(\"transform\", \"translate(\" + [btnX, 0] + \")\");\r\n        \tbtnX += btnSize + btnGap;\r\n        }\r\n        var box = self.toolBar.node().getBBox();\r\n        self.toolBar.insert(\"rect\", \".normal_btn\").attr(\"class\", \"toolbar-bg\")\r\n            .attr(\"x\",-1)\r\n            .attr(\"y\",-1)\r\n            .attr(\"width\", box.width+2)\r\n            .attr(\"height\", box.height+2)\r\n            .attr(\"rx\", 4)\r\n            .attr(\"ry\", 4)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"stroke\", \"#666\");\r\n    };\r\n    \r\n    var addButton = function(className, w, h, imgUrl, title, selected, isToggle) {\r\n    \tvar toolBar = self.toolBar;\r\n    \tvar btn = toolBar.append(\"g\").attr(\"class\", className);\r\n    \tbtn.on(\"mouseover\", function(){\r\n    \t\td3.event.stopImmediatePropagation();\r\n            bg.attr(\"stroke\",\"red\");\r\n        }, false);\r\n        btn.on(\"mouseout\", function(){\r\n        \td3.event.stopImmediatePropagation();\r\n            bg.attr(\"stroke\",\"none\");\r\n        }, false);\r\n        btn.on(\"mousedown\", function() {\r\n        \tif(!isToggle) {\r\n        \t\td3.select(window).on(\"mouseup\", function() {\r\n        \t\t\td3.event.stopImmediatePropagation();\r\n        \t\t\td3.select(window).on(\"mouseup\", null);\r\n                    btn.select(\".bg\").attr(\"fill\", \"white\");\r\n        \t\t}, false);\r\n        \t}\r\n        \tvar target = d3.select(d3.event.currentTarget);\r\n        \ttarget.select(\".bg\").attr(\"fill\", \"#ccc\");\r\n        \tif(isToggle) {\r\n        \t\ttoolBarBtns.forEach(function(b){\r\n                    if(b.node() !== target.node()) {\r\n                        b.select(\".bg\").attr(\"fill\", \"white\");\r\n                    }\r\n                });\r\n        \t}\r\n            var className = target.attr(\"class\");\r\n            if(className === \"normal_btn\") {\r\n            \tself.state(\"normal\");\r\n            } else if(className === \"select_btn\") {\r\n            \tself.state(\"select\");\r\n            } else if(className === \"pencil_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"pencil\");\r\n            } else if(className === \"line_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"line\");\r\n            } else if(className === \"polyline_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"polyline\");\r\n            } else if(className === \"rect_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"rect\");\r\n            } else if(className === \"circle_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"circle\");\r\n            } else if(className === \"ellipse_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"ellipse\");\r\n            } else if(className === \"text_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"text\");\r\n            } else if(className === \"image_btn\") {\r\n                self.state(\"draw\");\r\n                self.drawType(\"image\");\r\n            } else if(className === \"delete_btn\") {\r\n                removeSelectedNodes();\r\n            } else if(className === \"save_btn\") {\r\n            \t//向外部抛出保存数据\r\n            \tself.node().dispatchEvent(EventUtil.createCustomEvent(\r\n            \t   BaseEvent.EV_EVENT_DATA_STORAGE, true, true, {data:self.toJSON(true)}));\r\n            }\r\n            d3.event.stopImmediatePropagation();//避免点击按钮松开鼠标键后进入mouseUpHandler\r\n        });\r\n        var bg = btn.append(\"rect\")\r\n            .attr(\"class\", \"bg\")\r\n            .attr(\"x\",0)\r\n            .attr(\"y\",0)\r\n            .attr(\"width\",w+2)\r\n            .attr(\"height\",h+2)\r\n            .attr(\"stroke\",\"none\")\r\n            .attr(\"fill\",selected ? \"#ccc\" : \"white\");    \r\n        if(imgUrl) {\r\n            var img = btn.append(\"image\")\r\n                .attr(\"x\",1)\r\n                .attr(\"y\",1)\r\n                .attr(\"width\",w)\r\n                .attr(\"height\",h)\r\n                .attr(\"xlink:href\",imgUrl)\r\n                .attr(\"pointer-events\", \"none\");\r\n        }\r\n        if(title !== null || title !== undefined || title !== \"\") {\r\n            btn.append(\"title\").text(title);\r\n        }\r\n        return btn;\r\n    };\r\n    \r\n    var addDragListeners = function() {\r\n        self.parent().mainContainer().call(d3.drag()\r\n            .on(\"start\", dragStartHandler, false)\r\n            .on(\"drag\", dragHandler, false)\r\n        );\r\n    };\r\n    \r\n    var removeDragListeners = function() {\r\n        self.parent().mainContainer().on(\"mousedown.drag\", null, false);\r\n    };\r\n    \r\n    var addEditListeners = function() {\r\n\t\tself.parent().mainContainer().on(\"mousedown.svgCanvas\", mouseDownHandler, false);\r\n        self.parent().mainContainer().on(\"dblclick.svgCanvas\", doubleClickHandler, false);\r\n        d3.select(window).on(\"keydown.window\", keyDownHandler, false);\r\n        d3.select(window).on(\"keyup.window\", keyUpHandler, false);\r\n        self.ownerSVG().addEventListener(BaseEvent.UPDATE_PROPERTIES, updatePorpertiesHandler);\r\n        self.ownerSVG().addEventListener(BaseEvent.HIDDEN_PROPERTIES, hiddenPorpertiesHandler);\r\n    };\r\n    \r\n    var removeEditListeners = function() {\r\n\t\tself.parent().mainContainer().on(\"mousedown.svgCanvas\", null, false);\r\n        self.parent().mainContainer().on(\"dblclick.svgCanvas\", null, false);\r\n        d3.select(window).on(\"mousemove.svgCanvas\", null, false);\r\n        d3.select(window).on(\"mouseup.svgCanvas\", null, false);\r\n        self.ownerSVG().removeEventListener(BaseEvent.UPDATE_PROPERTIES, updatePorpertiesHandler);\r\n        self.ownerSVG().removeEventListener(BaseEvent.HIDDEN_PROPERTIES, hiddenPorpertiesHandler);\r\n    };\r\n    \r\n    /**\r\n     * 设置元素的innerHTML内容\r\n     */\r\n    var setInnerHTML = function(parent, html) {\r\n    \t//除了chrome/firefox以外的svg不支持innerHTML\r\n    \tif(CommonUtil.isChrome() || CommonUtil.isFirefox()) {\r\n    \t\tparent.innerHTML = html;\r\n    \t} else {\r\n    \t\tvar doc = new DOMParser().parseFromString(\r\n        \t\t'<svg xmlns=\"http://www.w3.org/2000/svg\">' + html + '</svg>', 'application/xml');\r\n            var svgChildNodes = doc.documentElement.childNodes;\r\n            for (var i = 0, length = svgChildNodes.length; i < length; i++) {\r\n                //这里索引设置为0是因为当node被添加到parent以后，会从doc中删除\r\n                parent.appendChild(svgChildNodes[0]);\r\n            }\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 克隆节点数组\r\n     */\r\n    var cloneNodes = function(nodes, isCloneData, isCloneNode) {\r\n        if(!nodes) {\r\n            return null;\r\n        }\r\n        var result = [];\r\n        for(var i = 0, len = nodes.length; i < len; i++) {\r\n            var node = nodes[i];\r\n            var cloneNode;\r\n            if(isCloneData) {\r\n            \tcloneNode = {};\r\n            \tvar html = node.outerHTML;\r\n                cloneNode.html = html;\r\n                var data = ObjectUtil.cloneObj(node.__data__);\r\n                data.tx += cloneTx;\r\n                data.ty += cloneTy;\r\n                cloneNode.data = data;\r\n                if(isCloneNode) {\r\n                \tvar cloneObj = node.cloneNode(true);\r\n                    cloneNode.node = cloneObj;\r\n                    cloneObj.__data__ = data;\r\n                }\r\n            } else {\r\n            \tcloneNode = node.cloneNode(true);\r\n            \tvar data = ObjectUtil.cloneObj(node.__data__);\r\n            \tcloneNode.__data__ = data;\r\n            }\r\n            \r\n            result.push(cloneNode);\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    //粘贴的元素位置是否产生的变化\r\n    var isPasteNodesPosChanged = function() {\r\n        if(!pasteNodes || !pasteNodesPos || pasteNodes.length !== pasteNodesPos.length) {\r\n            return false;\r\n        }\r\n        var pos = getPasteNodesPos();\r\n        for(var i = 0, len = pasteNodesPos.length; i < len; i++) {\r\n            if(pos[i].x !== pasteNodesPos[i].x ||　pos[i].y !== pasteNodesPos[i].y) {\r\n                return true;    \r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    \r\n    //获取当前粘贴元素的位置\r\n    var getPasteNodesPos = function() {\r\n        if(!pasteNodes) {\r\n            return null;\r\n        }\r\n        var pos = [];\r\n        for(var i = 0, len = pasteNodes.length; i < len; i++) {\r\n            pos.push(pasteNodes[i].getBBox());\r\n        }\r\n        return pos;\r\n    };\r\n    \r\n    var showEditWindow = function(type, node) {\r\n    \tif(!node){\r\n            return;\r\n        }\r\n        if(type === \"text\") {\r\n            showTextEditWindow(node);\r\n        } else if(type === \"image\") {\r\n            showImageEditWindow(node);\r\n        }\r\n        isShowWindow = true;\r\n    };\r\n    \r\n    var showTextEditWindow = function(node) {\r\n    \tvar textContent = node.textContent;\r\n    \tvar color = node.getAttribute(\"fill\");\r\n    \tvar family = node.getAttribute(\"font-family\");\r\n    \tvar size = parseInt(node.getAttribute(\"font-size\"));\r\n    \tvar familyOptions = \"\";\r\n        for(var i = 0, len = fontFamilies.length; i < len; i++) {\r\n            var fontFamily = fontFamilies[i];\r\n            familyOptions += '<option value=\"' + fontFamily + '\"' + (fontFamily === family ? ' selected=\"selected\"' : '') + '>' + fontFamily + '</option>';\r\n        }\r\n        var sizeOptions = \"\";\r\n        for(var i = 0, len = fontSizes.length; i < len; i++) {\r\n            var fontSize = fontSizes[i];\r\n            sizeOptions += '<option value=\"' + fontSize + '\"' + (fontSize === size ? ' selected=\"selected\"' : '') + '>' + fontSize + '</option>';\r\n        }\r\n        var htmlStr = '<div style=\"padding-left:10px;padding-top:10px;\">' +\r\n            '<div style=\"float:left;width:100%;\">文本内容: <input type=\"text\" id=\"text_content\" style=\"width:390px;height:18px;padding-left:2px;margin-bottom:10px;\" value=\"' + textContent + '\"/></div>' +\r\n            '<div style=\"float:left;width:100%;\">字体类型: <select id=\"text_family\" style=\"width:100px;border: 1px solid #3c99f7;margin-bottom:10px;\">' + familyOptions + '</select></div>' + \r\n            '<div style=\"float:left;width:100%;\">字体大小: <select id=\"text_size\" style=\"width:100px;border: 1px solid #3c99f7;\">' + sizeOptions + '</select></div>' + '</div>';\r\n        var closeFn = function() {\r\n        \tisShowWindow = false;\r\n            if(!this.getValue()) {\r\n               this.remove();\r\n               return;\r\n            }\r\n            var textContent = $.trim(document.getElementById(\"text_content\").value);\r\n            var family = document.getElementById(\"text_family\").value;\r\n            var size = document.getElementById(\"text_size\").value;\r\n            this.remove();\r\n            \r\n            if(textContent === \"\") {\r\n                alert(\"请填写文本内容\");\r\n                return;\r\n            }\r\n            //设置输入的文本内容\r\n            d3.select(node).text(textContent).attr(\"font-family\", family).attr(\"font-size\", size).attr(\"dy\", size-1);\r\n            var nodes = [node];\r\n            var d = node.__data__;\r\n            var box = node.getBBox();\r\n            d.x = box.x;\r\n            d.y = box.y;\r\n            d.width = box.width;\r\n            d.height = box.height;\r\n            SelectUtil.validateNodes(nodes);\r\n            removeControlPoints();\r\n            doSelect(nodes);\r\n        };\r\n        //显示弹出窗口\r\n        new $.msgbox({\r\n            width:480,\r\n            height:180,\r\n            title: '编辑文本',\r\n            type:\"custom\",\r\n            content: htmlStr,\r\n            bgOpacity: .8,\r\n            cache:true,\r\n            onClose:closeFn\r\n        }).show();\r\n        \r\n        //设置默认输入焦点和选中文本\r\n        var timer = setTimeout(function() {\r\n        \tclearTimeout(timer);\r\n        \tvar textContent = document.getElementById(\"text_content\");\r\n        \tif(textContent) {\r\n        \t\ttextContent.focus();\r\n        \t\ttextContent.select();\r\n        \t}\r\n        }, 100);\r\n    };\r\n    \r\n    var showImageEditWindow = function(node) {\r\n    \tvar imageUrl = node.getAttribute(\"xlink:href\");\r\n    \tif(!ObjectUtil.isString(imageUrl)) {\r\n    \t\timageUrl = \"\";\r\n    \t}\r\n        var htmlStr = '<div style=\"padding-left:10px;padding-top:10px;\">' +\r\n            '图片地址: <input type=\"text\" id=\"image_url\" style=\"width:390px;height:18px;padding-left:2px;\" value=\"' + imageUrl + '\"/></div>';\r\n        var closeFn = function() {\r\n        \tisShowWindow = false;\r\n            if(!this.getValue()) {\r\n               this.remove();\r\n               return;\r\n            }\r\n            var imageUrl = $.trim(document.getElementById(\"image_url\").value);\r\n            this.remove();\r\n            \r\n            if(imageUrl === \"\") {\r\n                alert(\"请填写图片地址\");\r\n                return;\r\n            }\r\n            \r\n            //设置输入的图片地址\r\n            d3.select(node).attr(\"xlink:href\", imageUrl);\r\n            var nodes = [node];\r\n            SelectUtil.validateNodes(nodes);\r\n            removeControlPoints();\r\n            doSelect(nodes);\r\n        };\r\n        //显示弹出窗口\r\n        new $.msgbox({\r\n            width:480,\r\n            height:120,\r\n            title: '编辑图片',\r\n            type:\"custom\",\r\n            content: htmlStr,\r\n            bgOpacity: .8,\r\n            cache:true,\r\n            onClose:closeFn\r\n        }).show();\r\n        \r\n        //设置默认输入焦点和选中文本\r\n        var timer = setTimeout(function() {\r\n            clearTimeout(timer);\r\n            var imageUrl = document.getElementById(\"image_url\");\r\n            if(imageUrl) {\r\n                imageUrl.focus();\r\n                imageUrl.select();\r\n            }\r\n        }, 100);\r\n    };\r\n    \r\n    //刷新所有阶段层级,update为true时更新所有节点z-index值\r\n    var refreshNodesLayer = function(update) {\r\n        var nodes = SelectUtil.getAllNodes();\r\n        SvgUtil.sortByZIndex(nodes, false);\r\n        if(update) {\r\n            for(var i = 0, len = nodes.length; i < len; i++) {\r\n                var node = nodes[i];\r\n                node.setAttribute(\"z-index\", i);\r\n            }\r\n        }\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // action Methods\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 创建框选矩形\r\n     */\r\n    var createSelectRect = function() {\r\n        if(self.selectCon) {\r\n            var con = self.selectCon;\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node() === null) {\r\n                con.append(\"rect\")\r\n                    .attr(\"class\", \"select\")\r\n                    .attr(\"x\", startX)\r\n                    .attr(\"y\", startY)\r\n                    .attr(\"stroke\", \"#0078d7\")\r\n                    .attr(\"stroke-width\", 1)\r\n                    .attr(\"fill\", \"#0078d7\")\r\n                    .attr(\"fill-opacity\", 0.1);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 绘制框选矩形\r\n     */\r\n    var drawSelectRect = function() {\r\n        if(self.selectCon) {\r\n            var con = self.selectCon;\r\n            var rect = con.select(\"rect.select\");\r\n            if(rect.node()) {\r\n                var sx, sy, mp = MouseUtil.mouse(con.node(), self.graph());\r\n                if(mp[0] < startX) {\r\n                    w = startX - mp[0];\r\n                    sx = mp[0];\r\n                } else {\r\n                    w = mp[0] - startX;\r\n                    sx = startX;\r\n                }\r\n                if(mp[1] < startY) {\r\n                    h = startY - mp[1];\r\n                    sy = mp[1];\r\n                } else {\r\n                    h = mp[1] - startY;\r\n                    sy = startY;\r\n                }\r\n                rect.attr(\"x\", sx).attr(\"y\", sy)\r\n                    .attr(\"width\", w).attr(\"height\", h);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 移除框选矩形\r\n     */\r\n    var removeSelectRect = function() {\r\n        if(self.selectCon) {\r\n            self.selectCon.select(\"rect.select\").remove();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 清除上一次的选中状态\r\n     */\r\n    var removeControlPoints = function() {\r\n        var nodes = SelectUtil.getAllNodes();\r\n        SelectUtil.removeControlPoints(self.selectCon.node());\r\n    }\r\n    \r\n    /**\r\n     * 移除所有元素\r\n     */\r\n    var removeAllNodes = function() {\r\n    \tselectAllNodes();\r\n    \tremoveSelectedNodes();\r\n    };\r\n    \r\n    /**\r\n     * 移除所有框选的元素\r\n     */\r\n    var removeSelectedNodes = function() {\r\n        SelectUtil.removeSelectedNodes();\r\n        SelectUtil.removeControlPoints(self.selectCon.node());\r\n        refreshNodesLayer(true);\r\n        if(SelectUtil.getAllNodes().length === 0) {\r\n            cloneTx = 0; \r\n            cloneTy = 0;\r\n            pasteNodes = null;\r\n            pasteNodesPos = null;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 选择所有元素\r\n     */\r\n    var selectAllNodes = function() {\r\n    \tremoveControlPoints();\r\n    \t\r\n    \tvar origNodes = SelectUtil.getAllNodes();\r\n    \tvar nodes = [];\r\n    \tfor(var i = 0, len = origNodes.length; i < len; i++) {\r\n    \t\tnodes.push(origNodes[i]);\r\n    \t}\r\n    \tdoSelect(nodes);\r\n    };\r\n    \r\n    /**\r\n     * 根据数据实例化元素\r\n     */\r\n    var addNodes = function(nodesData, isSelected) {\r\n    \tif(!nodesData) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar addedNodes = [], content = self.content.node();\r\n    \tfor(var i = 0, len = nodesData.length; i < len; i++) {\r\n            var cloneNode = nodesData[i];\r\n            var data = cloneNode.data;\r\n            var node = cloneNode.node ? cloneNode.node : cloneNode.html;\r\n            content.appendChild(node);\r\n            SelectUtil.addNode(node, data);\r\n            addedNodes.push(node);\r\n        }\r\n        SelectUtil.validateNodes(addedNodes);\r\n        refreshNodesLayer();\r\n        if(isSelected) {\r\n        \tremoveControlPoints();\r\n        \tdoSelect(addedNodes);\r\n        }\r\n        return addedNodes;\r\n    };\r\n    \r\n    /**\r\n     * 重新绘制所有元素\r\n     */\r\n    var updateNodes = function() {\r\n        removeAllNodes();\r\n        \r\n        if(!self.data()) {\r\n            return;\r\n        }\r\n        var nodesData = self.data().data;\r\n        if(!nodesData || nodesData.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        var addedNodes = [], content = self.content.node();\r\n        var nodesHTML = \"\";\r\n        for(var i = 0, len = nodesData.length; i < len; i++) {\r\n            nodesHTML += nodesData[i].html;\r\n        }\r\n        setInnerHTML(content, nodesHTML);\r\n        var children = content.childNodes;\r\n        for(var i = 0, len = nodesData.length; i < len; i++) {\r\n            var node = children[i];\r\n            var data = nodesData[i].data;\r\n            SelectUtil.addNode(node, data);\r\n            addedNodes.push(node);\r\n        }\r\n        SelectUtil.validateNodes(addedNodes);\r\n        refreshNodesLayer();\r\n    };\r\n    \r\n    /**\r\n     * 复制元素\r\n     */\r\n    var copy = function() {\r\n        var selectedNodes = SelectUtil.getSelectedNodes();\r\n        if(selectedNodes.length === 0) {\r\n        \treturn;\r\n        }\r\n        cloneTx = 0; \r\n        cloneTy = 0;\r\n        pasteNodes = null;\r\n        pasteNodesPos = null;\r\n        var nodes = cloneNodes(selectedNodes);\r\n        clipboard = nodes;\r\n    };\r\n    \r\n    /**\r\n     * 剪切元素\r\n     */\r\n    var cut = function() {\r\n        copy();\r\n        removeSelectedNodes();\r\n    };\r\n    \r\n    /**\r\n     * 粘贴元素\r\n     */\r\n    var paste = function() {\r\n    \tif(!clipboard || clipboard.length === 0) {\r\n    \t\treturn;\r\n    \t}\r\n    \tif(!isPasteNodesPosChanged()) {\r\n    \t\tcloneTx += 10; \r\n            cloneTy += 10;\r\n    \t}\r\n    \tvar nodesData = cloneNodes(clipboard, true, true);\r\n        pasteNodes = addNodes(nodesData, true);\r\n        pasteNodesPos = getPasteNodesPos();\r\n    };\r\n    \r\n    /**\r\n     * 向上移动选中的元素\r\n     */\r\n    var moveUp = function(moveStep) {\r\n    \tSelectUtil.moveNodes(0, moveStep);\r\n    };\r\n    \r\n    /**\r\n     * 向右移动选中的元素\r\n     */\r\n    var moveRight = function(moveStep) {\r\n        SelectUtil.moveNodes(1, moveStep);\r\n    };\r\n    \r\n    /**\r\n     * 向下移动选中的元素\r\n     */\r\n    var moveDown = function(moveStep) {\r\n        SelectUtil.moveNodes(2, moveStep);\r\n    };\r\n    \r\n    /**\r\n     * 向左移动选中的元素\r\n     */\r\n    var moveLeft = function(moveStep) {\r\n        SelectUtil.moveNodes(3, moveStep);\r\n    };\r\n    \r\n    /**\r\n     * 画区域选择操作\r\n     */\r\n    var drawSelect = function() {\r\n        //获取所有框选区域中的元素\r\n        var rectNode = self.selectCon.select(\"rect.select\").node();\r\n        var selectedNodes = SelectUtil.getSelectedNodesInBBox(rectNode.getBBox());\r\n        //执行选择操作\r\n        doSelect(selectedNodes);\r\n        //移除框选矩形\r\n        removeSelectRect();\r\n    };\r\n    \r\n    /**\r\n     * 执行选择操作\r\n     */\r\n    var doSelect = function(selectedNodes) {\r\n        if(d3.event && (d3.event.shiftKey || d3.event.ctrlKey)) {\r\n            var currentSelectedNodes = SelectUtil.getSelectedNodes();\r\n            for(var i = 0, len = currentSelectedNodes.length; i < len; i++) {\r\n                var node = currentSelectedNodes[i];\r\n                var index = selectedNodes.indexOf(node);\r\n                if(index === -1) {\r\n                    selectedNodes.push(node);\r\n                } else {\r\n                    selectedNodes.splice(index, 1);\r\n                }\r\n            }\r\n        }\r\n        //清除上一次的选中状态\r\n        SelectUtil.removeControlPoints(self.selectCon.node());\r\n        //显示当前选中元素的选中状态\r\n        SelectUtil.showControlPoints(self.selectCon.node(), selectedNodes, self.graph());\r\n        //屏蔽moveArea容器响应事件 \r\n        enableMoveAreaEvents(false)\r\n    };\r\n    \r\n    //在select状态，若按下shift或ctrl键，则屏蔽moveArea容器响应事件，这样才能选中被moveArea挡住的元素\r\n    var enableMoveAreaEvents = function(enabled) {\r\n        if(enabled) {\r\n            d3.select(\"rect.moveArea\").attr(\"pointer-events\", \"\");\r\n        } else if(state === \"select\" &&　d3.event && (d3.event.ctrlKey || d3.event.shiftKey)) {\r\n            d3.select(\"rect.moveArea\").attr(\"pointer-events\", \"none\");\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 把元素深度像下移动一个层级\r\n     */\r\n    var moveLayerDown = function(node) {\r\n        var zIndex = parseInt(node.getAttribute(\"z-index\"));\r\n        if(zIndex === 0) {\r\n            return;\r\n        }\r\n        zIndex--;\r\n        var nodes = SelectUtil.getAllNodes();\r\n        for(var i = 0, len = nodes.length; i < len; i++) {\r\n            var n = nodes[i];\r\n            var nodeZIndex = parseInt(n.getAttribute(\"z-index\"));\r\n            if(nodeZIndex === zIndex) {\r\n                n.setAttribute(\"z-index\", zIndex+1);\r\n                break;\r\n            }\r\n        }\r\n        node.setAttribute(\"z-index\", zIndex);\r\n        \r\n        refreshNodesLayer();\r\n    };\r\n    \r\n    /**\r\n     * 把元素深度像上移动一个层级\r\n     */\r\n    var moveLayerUp = function(node) {\r\n        var nodes = SelectUtil.getAllNodes();\r\n        var zIndex = parseInt(node.getAttribute(\"z-index\"));\r\n        if(zIndex === nodes.length - 1) {\r\n            return;\r\n        }\r\n        zIndex++;\r\n        for(var i = 0, len = nodes.length; i < len; i++) {\r\n            var n = nodes[i];\r\n            var nodeZIndex = parseInt(n.getAttribute(\"z-index\"));\r\n            if(nodeZIndex === zIndex) {\r\n                n.setAttribute(\"z-index\", zIndex-1);\r\n                break;\r\n            }\r\n        }\r\n        node.setAttribute(\"z-index\", zIndex);\r\n        \r\n        refreshNodesLayer();\r\n    };\r\n    \r\n    /**\r\n     * 把元素移动到最上面的层级\r\n     */\r\n    var moveLayerTop = function(node) {\r\n        var zIndex = parseInt(node.getAttribute(\"z-index\"));\r\n        var nodes = SelectUtil.getAllNodes();\r\n        var maxIndex = nodes.length - 1;\r\n        if(nodes.length === 0 || zIndex === maxIndex) {\r\n            return;\r\n        }\r\n        nodes[maxIndex].setAttribute(\"z-index\", zIndex);\r\n        node.setAttribute(\"z-index\", maxIndex);\r\n        \r\n        refreshNodesLayer();\r\n    };\r\n    \r\n    /**\r\n     * 把元素移动到最下面的层级\r\n     */\r\n    var moveLayerBottom = function(node) {\r\n        var zIndex = parseInt(node.getAttribute(\"z-index\"));\r\n        if(zIndex === 0) {\r\n            return;\r\n        }\r\n        var nodes = SelectUtil.getAllNodes();\r\n        nodes[0].setAttribute(\"z-index\", zIndex);\r\n        node.setAttribute(\"z-index\", 0);\r\n        \r\n        refreshNodesLayer();\r\n    };\r\n    \r\n    SvgCanvas.clazzName = \"SvgCanvas\";\r\n    self.init();\r\n};\r\n\r\nSvgCanvas.struct = function(ghca_charts) {\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tBaseComponent.struct(ghca_charts);\r\n    SvgCanvas.prototype = Object.create(BaseComponent.prototype);\r\n    SvgCanvas.prototype.constructor = SvgCanvas;\r\n};\r\n\r\nmodule.exports = SvgCanvas;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/svgCanvas.js\n// module id = 58\n// module chunks = 0","// table类\r\n    \r\n/**\r\n * 构造方法 \r\n * @param _ele 组件所在容器对象或者容器id，比如一个div\r\n * @param _data 配置数据\r\n */\r\nvar Table = function(_ele, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const FileUtil = ghca_charts.view.util.fileUtil;\r\n    const TableColFormatterUtil=ghca_charts.view.util.tableColFormatterUtil;\r\n\r\n    BaseComponent.apply(this, [_data]);\r\n    \r\n    var self = this, \r\n        superRenderSize = self.renderSize,\r\n        superRender = self.render,\r\n        superUpdate = self.update,\r\n        superRenderChildren = self.renderChildren;\r\n        \r\n    if (arguments.length < 1) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",至少传入前1个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (_ele) {\r\n        self.parent(_ele);\r\n    } else {\r\n        throw new Error('Table构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n    \r\n    self.isLibsLoaded = false;\r\n    self.className(\"table\");\r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes(\"files\");\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // files\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 第三方库文件列表\r\n     */\r\n    var files = [\r\n        \"../js/table/css/tabulator.min.css\", \r\n        \"../js/window/jquery-latest.min.js\",\r\n        \"../js/table/js/jquery-ui.min.js\",\r\n        \"../js/table/js/moment.min.js\",\r\n        \"../js/table/js/jquery.sparkline.min.js\",\r\n        \"../js/table/js/tabulator.min.js\"\r\n    ];\r\n    this.files = function(value) {\r\n        if (!arguments.length)\r\n            return files;\r\n        files = value;\r\n        return this;\r\n    };\r\n\r\n\r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为table的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n        return self.parent() ? self.parent().clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为table的父容器不是svg元素，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n        return self.parent() ? self.parent().clientHeight : 0;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n\r\n    this.render = function() {\r\n    \t//等待第三方库加载完毕后，再操作render\r\n    \tself.isLibsLoaded = false;\r\n    \tloadLibs(afterLoadLibs);\r\n    };\r\n    \r\n    /**\r\n     * 渲染放置所有内容的最外层容器\r\n     */\r\n    this.renderMainContainer = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n        //设置传入父容器样式\r\n        var style = self.parent().style;\r\n        style.overflow = \"hidden\";\r\n        \r\n        //创建table容器元素\r\n        var table = d3.select(self.parent()).append(\"div\")\r\n            .attr(\"class\", self.className())\r\n            .attr(\"width\", self.width())\r\n            .attr(\"height\", self.height());\r\n        self.mainContainer(table);\r\n        //先设置mainContainer，再检测组件是否可见\r\n        self.validateVisible();\r\n    };\r\n    \r\n    /**\r\n     * 渲染子容器\r\n     */\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        \r\n        renderTable();\r\n    };\r\n    \r\n    /**\r\n     * 渲染组件尺寸\r\n     */\r\n    this.renderSize = function() {\r\n        superRenderSize();\r\n        var table = self.mainContainer();\r\n        if(!table) {\r\n            return;\r\n        }\r\n        //设置图表容器大小\r\n        var w = self.width(), h = self.height();\r\n        table.attr(\"width\", w);\r\n        table.attr(\"height\", h);\r\n        //设置图表内容大小\r\n        var tableConfig = self.data() && self.data().tableConfig;\r\n        if(tableConfig) {\r\n        \ttableConfig.width = w;\r\n        \ttableConfig.height = h;\r\n        \ttry {\r\n        \t\t$(table.node()).tabulator(\"redraw\", true);\r\n        \t} catch(e) {\r\n        \t\tconsole.log(e);\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    this.update = function() {\r\n    \tif(!self.isLibsLoaded) {\r\n    \t\treturn;\r\n        }\r\n\r\n    \tsuperUpdate();\r\n    \t\r\n    \trenderTable();\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Table info: \" +\r\n                \"\\n   width:\"     + self.width()      + \r\n                \"\\n   height:\"    + self.height()     + \r\n                \"\\n   data:\"      + JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var afterLoadLibs = function() {\r\n        self.isLibsLoaded = true;\r\n        superRender();\r\n    };\r\n    \r\n    var renderTable = function() {\r\n    \tif(!self.isLibsLoaded) {\r\n            return;\r\n        }\r\n        //移除并重新创建表格顶层容器\r\n        self.renderMainContainer();\r\n        self.updateOthers();\r\n        //渲染表格内容\r\n    \tvar table = self.mainContainer().node();\r\n        var data = self.data();\r\n        TableColFormatterUtil.parseFormatter(data.tableConfig,data.colFormatter);\r\n\r\n        var themePath=data.themeroot+data.theme;\r\n        FileUtil.replaceFile(\"custom_tabulator_theme\",themePath,function(){\r\n            $(table).tabulator(data.tableConfig);\r\n            $(table).tabulator(\"setData\", data.tableData); \r\n            self.renderSize();\r\n        });\r\n        self.renderSize();\r\n    };\r\n    \r\n    var loadLibs = function(callback) {\r\n        var files = self.files();\r\n        FileUtil.loadFiles(files, callback);\r\n    };\r\n    \r\n    self.init();\r\n};\r\n\r\nTable.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    Table.prototype = Object.create(BaseComponent.prototype);\r\n    Table.prototype.constructor = Table;\r\n};\r\n\r\nmodule.exports = Table;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/table.js\n// module id = 59\n// module chunks = 0","var TagContainer = function(_data, _layout) {\r\n\r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const ImageTag = ghca_charts.view.elements.plugins.imageTag;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    \r\n    BaseComponent.apply(this, arguments);\r\n    \r\n    var imageTag;\r\n    var self = this,\r\n        superInit = self.init,\r\n        superRenderChildren = self.renderChildren;\r\n\r\n    self.className(\"tagComponent\");\r\n\r\n    this.renderChildren = function() {\r\n        superRenderChildren();\r\n        var config = _data.config;\r\n        var container = self.mainContainer().append(\"g\");\r\n        if(!imageTag){\r\n            imageTag = new ImageTag(container,null);\r\n        }\r\n        imageTag.config(config);\r\n        imageTag.render();\r\n        ElementUtil.setElementProperties(container,{transform:\"translate(\"+[self.width()/2,imageTag.actualHeight()/2]+\")\"});\r\n    };\r\n    /**\r\n     * 初始化方法\r\n     */\r\n    this.init = function() {\r\n        superInit();\r\n    };\r\n\r\n};\r\n\r\nTagContainer.struct = function(ghca_charts) {\r\n    var BaseComponent = ghca_charts.view.component.baseComponent;\r\n    BaseComponent.struct(ghca_charts);\r\n    TagContainer.prototype = Object.create(BaseComponent.prototype);\r\n    TagContainer.prototype.constructor = TagContainer;\r\n};\r\n\r\nmodule.exports = TagContainer;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/tagContainer.js\n// module id = 60\n// module chunks = 0","/* 可视化平台专用数据分发器类,通过平台请求数据,本组件只负责数据分发\r\n*/\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data 配置数据\r\n */\r\nvar EvDataDispatcher = function(_data) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    BaseComponent.apply(this, arguments);\r\n    \r\n    var self = this, \r\n    \tsuperSetDataAndUpdate = self.setDataAndUpdate,\r\n        superRender = self.render;\r\n        \r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes();\r\n    //非可视化组件都为轻型组件\r\n    self.isLight(true);\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    //------------------------------\r\n    //  className\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 类名称，默认作为该容器的css样式名称，比如<g class='mainContainer'>\r\n     */\r\n    this.className = function() {\r\n        return \"evDataSource\";\r\n    }\r\n    \r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为svg的父容器不是svg元素时，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n    \treturn ObjectUtil.isDomByTagName(self.parent(), \"g\") ? \r\n    \t   self.parent().getBBox().width : \r\n    \t   (self.parent() ? self.parent().clientWidth : 0);\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为svg的父容器不是svg元素时，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n    \treturn ObjectUtil.isDomByTagName(self.parent(), \"g\") ? \r\n           self.parent().getBBox().height : \r\n           (self.parent() ? self.parent().clientHeight : 0);\r\n    };\r\n    \r\n    //------------------------------\r\n    //  items\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 关联项数据对象列表\r\n     */\r\n    var items = [];\r\n    this.items = function() {\r\n        return items;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 获取关联项\r\n     * @param id 关联组件id\r\n     * @return 返回查找到的关联项数据对象，若没有则反回null。\r\n     */\r\n    this.getItem = function(id) {\r\n    \tif(id === undefined) {\r\n    \t\treturn null;\r\n    \t}\r\n    \tfor(var i = 0, len = items.length; i < len; i++) {\r\n    \t\tif(items[i].id === id) {\r\n    \t\t\treturn items[i];\r\n    \t\t}\r\n    \t}\r\n    \treturn null;\r\n    };\r\n    \r\n    /**\r\n     * 添加关联项\r\n     * @param item 关联项数据对象，格式为{id//关联组件id, name//关联组件名称, filter//数据过滤方法}\r\n     */\r\n    this.addItem = function(item) {\r\n    \tif(!item) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar existItem = self.getItem(item.id);\r\n    \tif(existItem) {\r\n    \t\t//更新\r\n    \t\tfor(var key in item) {\r\n    \t\t\texistItem[key] = item[key];\r\n    \t\t}\r\n    \t} else {\r\n    \t\t//添加\r\n    \t\titems.push(item);\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 删除关联项\r\n     * @param id 关联组件id\r\n     * @return 返回被删除的关联项数据对象，若没有则反回null。\r\n     */\r\n    this.removeItem = function(id) {\r\n    \tif(id === undefined) {\r\n    \t\treturn null;\r\n    \t}\r\n    \tfor(var i = 0, len = items.length; i < len; i++) {\r\n    \t\tif(items[i].id === id) {\r\n    \t\t\treturn items.splice(i, 1);\r\n    \t\t}\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 删除所有关联项\r\n     */\r\n    this.removeAllItems = function() {\r\n    \titems.length = 0;\r\n    };\r\n    \r\n    /**\r\n     * 检测关联项，若在当前舞台中不存在关联项对应的组件实例，则自动从关联项队列中删除该关联项\r\n     * @param existIds 当前舞台存在的组件实例，格式为[id,...,id//舞台中实际存在组件实例id]\r\n     */\r\n    this.checkItems = function(existIds) {\r\n    \tfor(var id, i = 0; i < items.length; i++) {\r\n    \t\tid = items[i].id;\r\n    \t\tif(existIds.indexOf(id) === -1) {\r\n    \t\t\titems.splice(i, 1);\r\n    \t\t\ti--;\r\n    \t\t}\r\n    \t}\r\n    };\r\n    \r\n    //override\r\n    this.render = function() {\r\n        superRender();\r\n        init();\r\n    };\r\n    \r\n    /**\r\n     * override 设置数据内容成功后更新组件内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}等\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setDataAndUpdate = function(value) {\r\n        var result;\r\n    \t//数据请求失败,此时value参数平台约定传入为undefined\r\n    \tif(value === undefined) {\r\n    \t\tresult = false;\r\n    \t} else {\r\n    \t\t//数据请求成功,更新数据\r\n        \tresult = superSetDataAndUpdate(value);\r\n        \t//分发数据到关联组件\r\n        \tdispatchData();\r\n    \t}\r\n    \t//抛出请求完毕事件\r\n    \tvar evt = EventUtil.createCustomEvent(BaseEvent.REQ_DATA_COMPLETE, true, true, getDispatchData());\r\n        self.node().dispatchEvent(evt);\r\n        \r\n    \treturn result;\r\n    };\r\n    \r\n    /**\r\n     * override 销毁本类实例的方法\r\n     */\r\n    this.destroy = function() {\r\n    \tself.removeAllItems();\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * override 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"EvDataDispatcher info: \"    \t\t+\r\n                \"\\n   data:\"      \t\t+ JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var init = function() {\r\n    \tGlobal.isDebug && console.log(\"evDataSource init\");\r\n    \tself.mainContainer().style(\"display\", \"none\");\r\n    };\r\n    \r\n    var dispatchData = function() {\r\n    \t\r\n    };\r\n    \r\n    var getDispatchData = function() {\r\n    \treturn {\r\n    \t\tdata:self.data() ? self.data().data : []\r\n    \t};\r\n    };\r\n    \r\n    self.init();\r\n};\r\n\r\nEvDataDispatcher.struct = function(ghca_charts) {\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tBaseComponent.struct(ghca_charts);\r\n\tEvDataDispatcher.prototype = Object.create(BaseComponent.prototype);\r\n\tEvDataDispatcher.prototype.constructor = EvDataDispatcher;\r\n};\r\n\r\n//--------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nmodule.exports = EvDataDispatcher;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/utilcomponents/evDataDispatcher.js\n// module id = 61\n// module chunks = 0","/* timer类\r\n 支持接收事件BaseEvent.TIMER_CONTROL，参数为:\r\n{\r\n\taction:Timer.START|Timer.STOP|Timer.RESET|Timer.DESTROY,\r\n\t//以下属性在action为reset时设置才会有效\r\n\tisAutoStart:true|false, \r\n\tdelay:0(ms), \r\n\tgap:1000(ms), \r\n\ttimes:-1, \r\n\thandle:function|string\r\n}\r\n*/\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _data 配置数据\r\n * @param _layout 布局对象，不传就为默认布局\r\n */\r\nvar Timer = function(_data, _layout) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const Global = ghca_charts.global;\r\n\r\n    BaseComponent.apply(this, arguments);\r\n    \r\n    const DEFAULT_GAP   \t\t= 1000;\t//ms\r\n    const DEFAULT_DELAY \t\t= 0;\t//ms\r\n    const DEFAULT_TIMES \t\t= -1;\t\r\n    const DEFAULT_IS_AUTO_START = true;\t\r\n    \r\n    const resetkeys = [\"isAutoStart\", \"delay\", \"gap\", \"times\", \"handle\"];\r\n    \r\n    var timer, delayTimer,\r\n    \tself = this, \r\n        superRender = self.render;\r\n        \r\n    //添加可从配置文件读取的属性名称\r\n    self.addAttributes.apply(self, resetkeys);\r\n    //非可视化组件都为轻型组件\r\n    self.isLight(true);\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n    //------------------------------\r\n    //  className\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 类名称，默认作为该容器的css样式名称，比如<g class='mainContainer'>\r\n     */\r\n    this.className = function() {\r\n        return \"timer\";\r\n    }\r\n    \r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度，重写该方法因为svg的父容器不是svg元素时，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentWidth = function() {\r\n    \treturn ObjectUtil.isDomByTagName(self.parent(), \"g\") ? \r\n    \t   self.parent().getBBox().width : \r\n    \t   (self.parent() ? self.parent().clientWidth : 0);\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度，重写该方法因为svg的父容器不是svg元素时，无法用node().getBBox()方法获取尺寸\r\n     */\r\n    this.parentHeight = function() {\r\n    \treturn ObjectUtil.isDomByTagName(self.parent(), \"g\") ? \r\n           self.parent().getBBox().height : \r\n           (self.parent() ? self.parent().clientHeight : 0);\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isRunning\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 获取计时器是否正在运行。\r\n     */\r\n    var isRunning = false;\r\n    this.isRunning = function() {\r\n        return isRunning;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  currentTimes\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 获取计时器当前运行次数。\r\n     */\r\n    var currentTimes = 0;\r\n    this.currentTimes = function() {\r\n    \treturn currentTimes;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  isAutoStart\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否在经过delay时间自动开启计时器，若为false，则在外界触发启动计时器后，同样经过delay时间后才开启计时器。(默认值true)\r\n     */\r\n    var isAutoStart = DEFAULT_IS_AUTO_START;\r\n    this.isAutoStart = function(value) {\r\n        if (!arguments.length) return isAutoStart;\r\n        isAutoStart = ObjectUtil.isBoolean(value) ? value : DEFAULT_IS_AUTO_START;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  delay\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 延时多少毫秒后开启计时器。(默认值0)\r\n     */\r\n    var delay = DEFAULT_DELAY;\r\n    this.delay = function(value) {\r\n        if (!arguments.length) return delay;\r\n        delay = ObjectUtil.isNumber(value) ? value : DEFAULT_DELAY;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  gap\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 计时器心跳间隔毫秒。(默认值1000)\r\n     */\r\n    var gap = DEFAULT_GAP;\r\n    this.gap = function(value) {\r\n        if (!arguments.length) return gap;\r\n        gap = ObjectUtil.isNumber(value) ? value : DEFAULT_GAP;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  times\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 计时器执行次数，-1代表无限次，0代表0次，正数代表计时器执行对应次数后自动停止。(默认值-1)\r\n     */\r\n    var times = DEFAULT_TIMES;\r\n    this.times = function(value) {\r\n        if (!arguments.length) return times;\r\n        times = ObjectUtil.isNumber(value) ? value : DEFAULT_TIMES;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  handle\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 计时器心跳执行方法，function|string(\"{##}\"格式)。(默认值null)\r\n     */\r\n    var handle = null;\r\n    this.handle = function(value) {\r\n        if (!arguments.length) return handle;\r\n        handle = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var controlHandler = function(e) {\r\n    \tself.action(e.detail.data);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.render = function() {\r\n        superRender();\r\n        init();\r\n    };\r\n    \r\n    /**\r\n     * 外部调用控制计时器方法\r\n     * @param d {\r\n\t\t\taction:Timer.START|Timer.STOP|Timer.RESET|Timer.DESTROY,\r\n\t\t\t//以下属性在action为reset时设置才会有效\r\n\t\t\tisAutoStart:true|false, \r\n\t\t\tdelay:0(ms), \r\n\t\t\tgap:1000(ms), \r\n\t\t\ttimes:-1, \r\n\t\t\thandle:function|string\r\n\t\t}\r\n     */\r\n    this.action = function(d) {\r\n    \tif(!d) return;\r\n    \tvar action = d.action;\r\n    \tswitch(action) {\r\n    \t\tcase Timer.START:\r\n    \t\t\tself.start();\r\n    \t\t\tbreak;\r\n    \t\tcase Timer.STOP:\r\n    \t\t\tself.stop();\r\n    \t\t\tbreak;\r\n    \t\tcase Timer.RESET:\r\n    \t\t\t//刷新传入配置\r\n    \t\t\tfor(var key in d) {\r\n    \t\t\t\tif(resetkeys.indexOf(key) !== -1) {\r\n    \t\t\t\t\tself[key](d[key]);\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t\tself.reset();\r\n    \t\t\tbreak;\r\n    \t\tcase Timer.DESTROY:\r\n    \t\t\tself.destroy();\r\n    \t\t\tbreak;\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 启动计时器\r\n     */\r\n    this.start = function() {\r\n    \t//判断是否是可视化编辑器中的编辑页面，若是则禁止启动计时器\r\n    \tif((Global.isUseByEVPlatform && Global.isEVPlatformEditPage) || isRunning) return;\r\n    \t\r\n    \tdelayTimer = setTimeout(function() {\r\n    \t\tclearTimeout(delayTimer);\r\n    \t\ttimer = setInterval(timerEventHandler, self.gap());\r\n    \t\t/*\t立即执行第一次，否正会再setInterval中过了gap时间才执行第一次,这里必须放到setInterval之后执行，\r\n    \t\t\t比如times为1时，setInterval还没有建立，就达到最大次数，无法用clearInterval停止计时器\r\n\t\t\t*/\r\n    \t\ttimerEventHandler();\r\n    \t}, self.delay());\r\n    \t\r\n    \tisRunning = true;\r\n    \t\r\n    \t//抛出注册的开始事件\r\n    \tvar evt = EventUtil.createCustomEvent(BaseEvent.TIMER_STRAT, true, true, getDispatchData());\r\n        self.node().dispatchEvent(evt);\r\n    };\r\n    \r\n    /**\r\n     * 停止计时器，所有状态重置\r\n     */\r\n    this.stop = function() {\r\n    \tif(delayTimer !== undefined) {\r\n    \t\tclearInterval(delayTimer);\r\n    \t}\r\n    \tif(timer !== undefined) {\r\n    \t\tclearInterval(timer);\r\n    \t}\r\n    \tcurrentTimes = 0;\r\n    \tisRunning = false;\r\n    \t\r\n    \t//抛出注册的停止事件\r\n    \tvar evt = EventUtil.createCustomEvent(BaseEvent.TIMER_STOP, true, true, getDispatchData());\r\n        self.node().dispatchEvent(evt);\r\n    };\r\n    \r\n    /**\r\n     * 停止后重新启动计时器，所有状态重置\r\n     */\r\n    this.reset = function() {\r\n    \tself.stop();\r\n    \tself.start();\r\n    };\r\n    \r\n    /**\r\n     * 销毁本类实例的方法\r\n     */\r\n    this.destroy = function() {\r\n    \tremoveListeners();\r\n        self.stop();\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 用于打印本对象的一些基本信息\r\n     */\r\n    this.toString = function() {\r\n        return (\"Timer info: \"    \t\t+\r\n        \t\t\"\\n   isRunning:\" \t\t+ self.isRunning() \t\t+ \r\n        \t\t\"\\n   currentTimes:\" \t+ self.currentTimes() \t+ \r\n                \"\\n   data:\"      \t\t+ JSON.stringify(this.data(), null, 4));\r\n    };\r\n\r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var init = function() {\r\n    \tGlobal.isDebug && console.log(\"timer init\");\r\n    \tself.mainContainer().style(\"display\", \"none\");\r\n    \tself.isAutoStart() && self.times() !== 0 && self.start();\r\n    };\r\n    \r\n    var addListeners = function() {\r\n    \tif(!self.node()) return;\r\n    \tself.node().addEventListener(BaseEvent.TIMER_CONTROL, controlHandler)\r\n    };\r\n    \r\n    var removeListeners = function() {\r\n    \tif(!self.node()) return;\r\n    \tself.node().removeEventListener(BaseEvent.TIMER_CONTROL, controlHandler);\r\n    };\r\n    \r\n    var timerEventHandler = function() {\r\n\t\tcurrentTimes++;\r\n\t\t\r\n\t\t//执行配置中注册的handle\r\n\t\tvar handle = self.handle();\r\n\t\tif(ObjectUtil.isFunction(handle)) {\r\n\t\t\thandle();\r\n\t\t} else if(ObjectUtil.isString(handle)) {\r\n\t\t\tformatStrFn(handle, self.data().data);\r\n\t\t}\r\n\t\t\r\n\t\t//抛出注册的心跳事件\r\n\t\tvar evt = EventUtil.createCustomEvent(BaseEvent.TIMER_EVENT, true, true, getDispatchData());\r\n        self.node().dispatchEvent(evt);\r\n        \r\n        //判断是否超过设定次数，若超过则停止计时器\r\n        if(self.times() > 0 && currentTimes >= self.times()) {\r\n        \tself.stop();\r\n        }\r\n\t};\r\n    \r\n    var getDispatchData = function() {\r\n    \treturn {\r\n    \t\tcurrentTimes:self.currentTimes(),\r\n    \t\tdelay:self.delay(),\r\n    \t\tgap:self.gap(),\r\n    \t\ttimes:self.times(),\r\n    \t\tdata:self.data() ? self.data().data : []\r\n    \t};\r\n    };\r\n    \r\n    var formatStrFn = function(str, d) {\r\n        return str.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n    \r\n    self.init();\r\n};\r\n\r\nTimer.struct = function(ghca_charts) {\r\n\tvar BaseComponent = ghca_charts.view.component.baseComponent;\r\n\tBaseComponent.struct(ghca_charts);\r\n\tTimer.prototype = Object.create(BaseComponent.prototype);\r\n\tTimer.prototype.constructor = Timer;\r\n};\r\n\r\n//--------------------------------------------------------------------------\r\n//\r\n// Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nTimer.START \t= \"start\";\r\nTimer.STOP \t\t= \"stop\";\r\nTimer.RESET \t= \"reset\";\r\nTimer.DESTROY \t= \"destroy\";\r\n\r\nmodule.exports = Timer;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/component/utilcomponents/timer.js\n// module id = 62\n// module chunks = 0","var BaseElement = function (_g,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n\r\n    this.dispatch = d3.dispatch(\"dataChanged\");\r\n    this.svgElement = null;\r\n    var self  = this;\r\n    /**\r\n     * element数据，变更会产生“dataChanged事件 baseEvent(taret,data)\r\n     */\r\n    var data = _data;\r\n    this.data = function(value){\r\n        if (!arguments.length)\r\n            return data;\r\n        var changeFunc = function(){\r\n            data = value;\r\n            self.dispatch.call(\"dataChanged\",this , new BaseEvent(self,{data:value}));\r\n        }\r\n        if(window._){\r\n            if(!_.isEqual(value,data)){//数据发生变更才发出变更事件\r\n                changeFunc();\r\n            }\r\n        }else{\r\n            changeFunc();\r\n        }\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * 缓存外接矩形\r\n     */\r\n    var bBox = {x:0, y:0, width:0, height:0};\r\n    this.getBBox = function(value) {\r\n        return bBox;\r\n    };\r\n    this.resetBBox = function(x, y, width, height) {\r\n    \tbBox.x =parseFloat(x);\r\n    \tbBox.y = parseFloat(y);\r\n    \tbBox.width = parseFloat(width);\r\n    \tbBox.height = parseFloat(height);\r\n    };\r\n\r\n    this.style = function(name,value){\r\n        if(self.svgElement)\r\n            self.svgElement.style(name,value);\r\n    }\r\n    this.attribute = function(name,value){\r\n        if(self.svgElement)\r\n            self.svgElement.attr(name,value);\r\n    }\r\n    /**\r\n     * 渲染调用\r\n     */\r\n    this.render = function(){\r\n        var data = self.data();\r\n        for(var key in data) {\r\n            if(self.hasOwnProperty(key)) {\r\n                self[key](data[key]);\r\n            }\r\n        }\r\n        self.addListener(\"dataChanged\",function(e){\r\n           self.dataChangeHandler(e); \r\n        });\r\n    }\r\n    /**\r\n     * 数据变更\r\n     * @param event\r\n     */\r\n    this.dataChangeHandler = function(event){\r\n        \r\n    }\r\n    /**\r\n     * 渲染后的高度\r\n     * @returns {number}\r\n     */\r\n    this.elementHeight = function() {\r\n        return self.getBBox().height;\r\n    };\r\n    /**\r\n     * 渲染后的高度\r\n     * @returns {number}\r\n     */\r\n    this.elementWidth = function() {\r\n        return self.getBBox().width;\r\n    };\r\n    /**\r\n     * 自定义事件监听\r\n     * @returns {exports}\r\n     */\r\n    this.addListener = function() {\r\n        var value = self.dispatch.on.apply(self.dispatch, arguments);\r\n        return value === self.dispatch ? self : value;\r\n    };\r\n    /**\r\n     * 监听\r\n     */\r\n    this.on = function() {\r\n        if(self.svgElement)\r\n            self.svgElement.on.apply(self.svgElement,arguments);\r\n    };\r\n};\r\n\r\nBaseElement.struct = function(ghca_charts) {\r\n    BaseElement.prototype.constructor = BaseElement;\r\n};\r\n\r\nmodule.exports = BaseElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/baseElement.js\n// module id = 63\n// module chunks = 0","var CircleElement = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseElement = ghca_charts.view.elements.baseElement;\r\n\r\n    BaseElement.apply(this,arguments);\r\n    var self  = this;\r\n    self.svgElement = _element.append(\"circle\");\r\n    var superRenderFunc = this.render;\r\n    /**\r\n     * border形状终结butt，round，square\r\n     */\r\n    var linecap=\"butt\";\r\n    this.linecap = function(value){\r\n        if (!arguments.length)\r\n            return linecap;\r\n        linecap = value;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 透明度\r\n     * @type {number}\r\n     */\r\n    var opacity=1;\r\n    this.opacity = function(value){\r\n        if (!arguments.length)\r\n            return opacity;\r\n        opacity = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * border透明度\r\n     * @type {number}\r\n     */\r\n    var borderOpacity=1;\r\n    this.borderOpacity = function(value){\r\n        if (!arguments.length)\r\n            return borderOpacity;\r\n        borderOpacity = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 圆点y default radius\r\n     * @type {number}\r\n     */\r\n    var cy;\r\n    this.cy = function(value){\r\n        if (!arguments.length)\r\n            return cy;\r\n        cy = value;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 圆点x default radius\r\n     * @type {number}\r\n     */\r\n    var cx;\r\n    this.cx = function(value){\r\n        if (!arguments.length)\r\n            return cx;\r\n        cx = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 半径\r\n     * @type {number}\r\n     */\r\n    var radius;\r\n    this.radius = function(value){\r\n        if (!arguments.length)\r\n            return radius;\r\n        radius = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线宽\r\n     * @type {number}\r\n     */\r\n    var border = 0;\r\n    this.border = function(value){\r\n        if (!arguments.length)\r\n            return border;\r\n        border = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线的间隔\r\n     * @type {number or %}\r\n     */\r\n    var dashoffset;\r\n    this.dashoffset = function(value){\r\n        if (!arguments.length)\r\n            return dashoffset;\r\n        dashoffset = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线的段长 ary\r\n     * @type {string}\r\n     */\r\n    var dasharray;\r\n    this.dasharray = function(value){\r\n        if (!arguments.length)\r\n            return dasharray;\r\n        dasharray = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 边框颜色\r\n     * @type {string}\r\n     */\r\n    var borderColor=\"none\";\r\n    this.borderColor = function(value){\r\n        if (!arguments.length)\r\n            return borderColor;\r\n        borderColor = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 背景颜色 默认无背景\r\n     * @type {string}\r\n     */\r\n    var color=\"none\";\r\n    this.color = function(value){\r\n        if (!arguments.length)\r\n            return color;\r\n        color = value;\r\n        return this;\r\n    }\r\n    //override\r\n    this.render = function(){\r\n        superRenderFunc();\r\n        self.svgElement\r\n            .style(\"fill\",self.color())\r\n            .style(\"fill-opacity\",self.opacity())\r\n            .attr(\"r\",self.radius());\r\n        if(self.border()!=0){\r\n            self.svgElement.style(\"stroke\",self.borderColor())\r\n                .style(\"stroke-linecap\",self.linecap())\r\n                .style(\"stroke-width\",self.border())\r\n                .style(\"stroke-opacity\",self.borderOpacity())\r\n            if(self.dasharray())\r\n                self.svgElement.style(\"stroke-dasharray\",self.dasharray());\r\n            if(self.dashoffset())\r\n                self.svgElement.style(\"stroke-dashoffset\",self.dashoffset());\r\n        }\r\n\r\n        self.cx()!=undefined?self.svgElement.style(\"cx\",self.cx()):self.svgElement.style(\"cx\",self.radius());\r\n        self.cy()!=undefined?self.svgElement.style(\"cy\",self.cy()):self.svgElement.style(\"cy\",self.radius());\r\n        \r\n        self.resetBBox(self.cx(), self.cy(), self.radius()*2, self.radius()*2);\r\n    }\r\n    //override\r\n    this.dataChangeHandler = function(event){\r\n         self.render();\r\n    }\r\n};\r\n\r\nCircleElement.struct = function(ghca_charts) {\r\n\tvar BaseElement = ghca_charts.view.elements.baseElement;\r\n\tBaseElement.struct(ghca_charts);\r\n    CircleElement.prototype = Object.create(BaseElement.prototype);\r\n    CircleElement.prototype.constructor = CircleElement;\r\n};\r\n\r\nmodule.exports = CircleElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/circleElement.js\n// module id = 64\n// module chunks = 0","var ImageElement = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseElement = ghca_charts.view.elements.baseElement;\r\n\r\n    BaseElement.apply(this,arguments);\r\n    var self  = this;\r\n    self.svgElement = _element.append(\"image\");\r\n    var superRenderFunc = this.render;\r\n\r\n    /**\r\n     * 图片宽度\r\n     * @type {number}\r\n     */\r\n    var imageWidth=32;\r\n    this.imageWidth = function(value){\r\n        if (!arguments.length)\r\n            return imageWidth;\r\n        imageWidth = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 图片高度\r\n     * @type {number}\r\n     */\r\n    var imageHeight=32;\r\n    this.imageHeight = function(value){\r\n        if (!arguments.length)\r\n            return imageHeight;\r\n        imageHeight = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 图片链接地址\r\n     * @type {string}\r\n     */\r\n    var url=null;\r\n    this.url = function(value){\r\n        if (!arguments.length)\r\n            return url;\r\n        url = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 透明度\r\n     * @type {number}\r\n     */\r\n    var opacity=1;\r\n    this.opacity = function(value){\r\n        if (!arguments.length)\r\n            return opacity;\r\n        opacity = value;\r\n        return this;\r\n    }\r\n    //override\r\n    this.render = function(){\r\n        superRenderFunc();\r\n        \r\n        self.svgElement\r\n            .attr(\"x\",-self.imageWidth()/2)\r\n            .attr(\"y\",-self.imageHeight()/2)\r\n            .attr(\"width\",self.imageWidth())\r\n            .attr(\"height\",self.imageHeight())\r\n            .attr(\"xlink:href\",self.url())\r\n            .style(\"opacity\",self.opacity());\r\n            \r\n        self.resetBBox(-self.imageWidth()/2, -self.imageHeight()/2, self.imageWidth(), self.imageHeight());\r\n    }\r\n    //override\r\n    this.dataChangeHandler = function(event){\r\n         self.render();\r\n    }\r\n};\r\n\r\nImageElement.struct = function(ghca_charts) {\r\n\tvar BaseElement = ghca_charts.view.elements.baseElement;\r\n\tBaseElement.struct(ghca_charts);\r\n    ImageElement.prototype = Object.create(BaseElement.prototype);\r\n    ImageElement.prototype.constructor = ImageElement;\r\n};\r\n\r\nmodule.exports = ImageElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/imageElement.js\n// module id = 65\n// module chunks = 0","var MuliTextElement = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseElement = ghca_charts.view.elements.baseElement;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n\r\n    BaseElement.apply(this,arguments);\r\n    var self = this;\r\n    self.svgElement = _element.append(\"text\");\r\n    var superRenderFunc = this.render;\r\n    /**\r\n     * 多行文本框文本\r\n     */\r\n    var text;\r\n    this.text = function(value){\r\n        if (!arguments.length)\r\n            return text;\r\n        text = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 显示最大行数，默认1行\r\n     */\r\n    var textLine = 1;\r\n    this.textLine = function(value){\r\n        if (!arguments.length)\r\n            return textLine;\r\n        textLine = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 字体大小\r\n     * @type {number}\r\n     */\r\n    var fontSize = 16;\r\n    this.fontSize = function(value){\r\n        if (!arguments.length)\r\n            return fontSize;\r\n        fontSize = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 字体样式\r\n     * @type {string}\r\n     */\r\n    var fontFamily = \"宋体\";\r\n    this.fontFamily = function(value){\r\n        if (!arguments.length)\r\n            return fontFamily;\r\n        fontFamily = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 字体颜色\r\n     * @type {string}\r\n     */\r\n    var color = \"#000000\";\r\n    this.color = function(value){\r\n        if (!arguments.length)\r\n            return color;\r\n        color = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * text-decoration\t是否带下划线。可选值有：none、underline、overline和line-through\r\n     * @type {string}\r\n     */\r\n    var textDecoration = \"none\";\r\n    this.textDecoration = function(value){\r\n        if (!arguments.length)\r\n            return textDecoration;\r\n        textDecoration = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * stroke\t文字的描边颜色。默认文字只有填充色，没有描边，添加描边将使文字变粗\r\n     */\r\n    var borderColor;\r\n    this.borderColor = function(value){\r\n        if (!arguments.length)\r\n            return borderColor;\r\n        borderColor = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * stroke-width\t文字描边的宽度\r\n     */\r\n    var border = 0;\r\n    this.border = function(value){\r\n        if (!arguments.length)\r\n            return border;\r\n        border = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 单行像素\r\n     * @type {string}\r\n     */\r\n    var width = 0;\r\n    this.width = function(value){\r\n        if (!arguments.length)\r\n            return width;\r\n        width = value;\r\n        return this;\r\n    }\r\n    \r\n    //override\r\n    this.render = function(){\r\n        superRenderFunc();\r\n        self.svgElement.style(\"font-size\",self.fontSize())\r\n            .style(\"font-family\",self.fontFamily())\r\n            .style(\"pointer-events\",\"all\")\r\n            .style(\"fill\",self.color())\r\n            .style(\"text-decoration\",self.textDecoration())\r\n            .style(\"stroke-width\",self.border());\r\n        if(self.borderColor())\r\n            self.svgElement.style(\"stroke\",self.borderColor());\r\n        self.svgElement.selectAll(\"*\").remove();\r\n        var texts = StringUtil.splitByLine(self.text(),self.width(),self.fontSize(),self.textLine());\r\n        self.svgElement.selectAll(\"tspan\")\r\n            .data(texts)\r\n            .enter()\r\n            .append(\"tspan\")\r\n            .attr(\"x\",0)\r\n            .attr(\"dy\",self.fontSize())\r\n            .text(function(d){\r\n                return d;\r\n            });\r\n        \r\n        var rect = StringUtil.measureText(texts, self.fontSize(), self.fontFamily());\r\n        self.resetBBox(0, 0, rect.width, rect.height);\r\n    }\r\n    //override\r\n    this.dataChangeHandler = function(event){\r\n        self.render();\r\n    }\r\n};\r\n\r\nMuliTextElement.struct = function(ghca_charts) {\r\n\tvar BaseElement = ghca_charts.view.elements.baseElement;\r\n\tBaseElement.struct(ghca_charts);\r\n    MuliTextElement.prototype = Object.create(BaseElement.prototype);\r\n    MuliTextElement.prototype.constructor = MuliTextElement;\r\n};\r\n\r\nmodule.exports = MuliTextElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/mulitextElement.js\n// module id = 66\n// module chunks = 0","var PathElement = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseElement = ghca_charts.view.elements.baseElement;\r\n\r\n    BaseElement.apply(this,arguments);\r\n    var self  = this;\r\n    self.svgElement = _element.append(\"path\");\r\n    var superRenderFunc = this.render;\r\n    /**\r\n     * border形状终结butt，round，square\r\n     */\r\n    var linecap=\"butt\";\r\n    this.linecap = function(value){\r\n        if (!arguments.length)\r\n            return linecap;\r\n        linecap = value;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 透明度\r\n     * @type {number}\r\n     */\r\n    var opacity=1;\r\n    this.opacity = function(value){\r\n        if (!arguments.length)\r\n            return opacity;\r\n        opacity = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * border透明度\r\n     * @type {number}\r\n     */\r\n    var borderOpacity=1;\r\n    this.borderOpacity = function(value){\r\n        if (!arguments.length)\r\n            return borderOpacity;\r\n        borderOpacity = value;\r\n        return this;\r\n    }\r\n\r\n    var path = \"\";\r\n    this.path = function(){\r\n        if (!arguments.length)\r\n            return path;\r\n        path = arguments[0];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 线宽\r\n     * @type {number}\r\n     */\r\n    var border = 0;\r\n    this.border = function(value){\r\n        if (!arguments.length)\r\n            return border;\r\n        border = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线的间隔\r\n     * @type {number or %}\r\n     */\r\n    var dashoffset;\r\n    this.dashoffset = function(value){\r\n        if (!arguments.length)\r\n            return dashoffset;\r\n        dashoffset = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线的段长 ary\r\n     * @type {string}\r\n     */\r\n    var dasharray;\r\n    this.dasharray = function(value){\r\n        if (!arguments.length)\r\n            return dasharray;\r\n        dasharray = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 边框颜色\r\n     * @type {string}\r\n     */\r\n    var borderColor=\"none\";\r\n    this.borderColor = function(value){\r\n        if (!arguments.length)\r\n            return borderColor;\r\n        borderColor = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 背景颜色 默认无背景\r\n     * @type {string}\r\n     */\r\n    var color=\"none\";\r\n    this.color = function(value){\r\n        if (!arguments.length)\r\n            return color;\r\n        color = value;\r\n        return this;\r\n    }\r\n    //override\r\n    this.render = function(){\r\n        superRenderFunc();\r\n\r\n        self.svgElement.style(\"stroke\",self.borderColor())\r\n            .style(\"stroke-linecap\",self.linecap())\r\n            .style(\"stroke-width\",self.border())\r\n            .style(\"stroke-opacity\",self.borderOpacity())\r\n            .style(\"fill\",self.color())\r\n            .style(\"fill-opacity\",self.opacity())\r\n            .attr(\"d\",self.path());\r\n        if(self.dasharray())\r\n            self.svgElement.style(\"stroke-dasharray\",self.dasharray());\r\n        if(self.dashoffset())\r\n            self.svgElement.style(\"stroke-dashoffset\",self.dashoffset());\r\n    }\r\n    //override\r\n    this.dataChangeHandler = function(event){\r\n        self.render();\r\n    }\r\n};\r\n\r\nPathElement.struct = function(ghca_charts) {\r\n\tvar BaseElement = ghca_charts.view.elements.baseElement;\r\n\tBaseElement.struct(ghca_charts);\r\n    PathElement.prototype = Object.create(BaseElement.prototype);\r\n    PathElement.prototype.constructor = PathElement;\r\n};\r\n\r\nmodule.exports = PathElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/pathElement.js\n// module id = 67\n// module chunks = 0","var ImageTag = function (_element,_data) {\r\n\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const ImageElement = ghca_charts.view.elements.imageElement;\r\n    const MulitextElement = ghca_charts.view.elements.mulitextElement;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this;\r\n    var textElements = [],imageElement;\r\n\r\n    self.config({\r\n        image:{},\r\n        text:{}\r\n    });\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"imageTag\";\r\n    }\r\n\r\n    //override\r\n    this.update = function(g){\r\n\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = self.config();\r\n        var textContainer = g.append(\"g\");\r\n        config.text.forEach(function(config){\r\n            var w = textContainer.node().getBBox().width;\r\n            var h = textContainer.node().getBBox().height;\r\n            var mulitextElement = new MulitextElement(textContainer,config);\r\n            mulitextElement.render();\r\n            mulitextElement.attribute(\"transform\",\"translate(\"+[w,-h/2]+\")\");\r\n            textElements.push(mulitextElement);\r\n        });\r\n        var icfg = config.image;\r\n        icfg = this.width\r\n        imageElement = new ImageElement(g,config.image);\r\n        imageElement.render();\r\n        textContainer.attr(\"transform\",\"translate(\"+[-textContainer.node().getBBox().width/2,imageElement.elementHeight()/2+10]+\")\");\r\n    }\r\n};\r\n\r\nImageTag.struct = function(ghca_charts) {\r\n    var Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    Plugin.struct(ghca_charts);\r\n    ImageTag.prototype = Object.create(Plugin.prototype);\r\n    ImageTag.prototype.constructor = ImageTag;\r\n};\r\n\r\nmodule.exports = ImageTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/imageTag.js\n// module id = 68\n// module chunks = 0","var BaseLabel = function (_element,_data,_parent) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,rect,text,\r\n        superNameSpaceFunction = this.nameSpace,\r\n        superDrawPluginFunction = this.drawPlugin,\r\n        superBindEventsFunction = this.bindEvents;\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"baseLabel\";\r\n    }\r\n    //override\r\n    this.actualWidth = function(){\r\n        return Number(rect.attr(\"width\"));\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        return Number(rect.attr(\"height\"));\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        superDrawPluginFunction(g);\r\n      /*  g.each(function (d) {\r\n            rect =  ElementUtil.createRect(g,d.backGroundProperties);\r\n            text   = ElementUtil.createText(g,d.labelProperties);\r\n            text.text(d.name);\r\n            var width = text.node().getBBox().width;\r\n            var height = text.node().getBBox().height;\r\n            ElementUtil.setElementProperties(rect,{x:-width/2,y:-height/2,width:width,height:height,rx:2,ry:2});\r\n            ElementUtil.setElementProperties(text,{\"text-anchor\":\"middle\",\"dy\":\"0.31em\"});\r\n        });*/\r\n        rect = ElementUtil.createRect(g,_data.backGroundProperties);\r\n        text = ElementUtil.createText(g,_data.labelProperties);\r\n        text.text(_data.name);\r\n        ElementUtil.setElementProperties(text,{\"text-anchor\":\"middle\",\"dy\":\"0.31em\"});\r\n        var box = text.node().getBBox();\r\n        var width = box.width;\r\n        var height = box.height;\r\n        ElementUtil.setElementProperties(rect,{x:-width/2,y:-height/2,width:width,height:height,rx:2,ry:2});\r\n        if(_data.labelProperties && _parent) {\r\n        \tfor(var key in _data.labelProperties) {\r\n            \tvar value = _data.labelProperties[key];\r\n            \ttext.attr(key, ObjectUtil.isString(value) ? formatStr(value, _parent.data()) : value);\r\n    \t\t}\r\n        }\r\n    }\r\n    \r\n    //override\r\n    this.update = function(d) {\r\n    \tif(d) {\r\n    \t\t_data = d;\r\n    \t}\r\n    \tif(!text) return;\r\n    \ttext.text(_data.name);\r\n    \tElementUtil.setElementProperties(text,_data.labelProperties);\r\n        ElementUtil.setElementProperties(text,{\"text-anchor\":\"middle\",\"dy\":\"0.31em\"});\r\n        ElementUtil.setElementProperties(rect,_data.backGroundProperties);\r\n        var box = text.node().getBBox();\r\n        var width = box.width;\r\n        var height = box.height;\r\n        ElementUtil.setElementProperties(rect,{x:-width/2,y:-height/2,width:width,height:height,rx:2,ry:2});\r\n        if(_data.labelProperties && _parent) {\r\n        \tfor(var key in _data.labelProperties) {\r\n            \tvar value = _data.labelProperties[key];\r\n            \ttext.attr(key, ObjectUtil.isString(value) ? formatStr(value, _parent.data()) : value);\r\n    \t\t}\r\n        }\r\n    }\r\n\r\n    //override\r\n    this.bindEvents = function(g){\r\n        superBindEventsFunction(g);\r\n    }\r\n    \r\n    var formatStr = function(str, d) {\r\n        return str.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n};\r\n\r\nBaseLabel.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    BaseLabel.prototype = Object.create(Plugin.prototype);\r\n    BaseLabel.prototype.constructor = BaseLabel;\r\n};\r\n\r\nmodule.exports = BaseLabel;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/label/baseLabel.js\n// module id = 69\n// module chunks = 0","var GroupLabel = function (_element,_data) {\r\n\t\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,rect,text,\r\n        superNameSpaceFunction = this.nameSpace,\r\n        superDrawPluginFunction = this.drawPlugin,\r\n        superBindEventsFunction = this.bindEvents;\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"grouplabel\";\r\n    }\r\n    //override\r\n    this.actualWidth = function(){\r\n        return Number(rect.attr(\"width\"));\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        return Number(rect.attr(\"height\"));\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        superDrawPluginFunction(g);\r\n      /*  g.each(function (d) {\r\n            rect =  ElementUtil.createRect(g,d.backGroundProperties);\r\n            text   = ElementUtil.createText(g,d.labelProperties);\r\n            text.text(d.name);\r\n            var width = text.node().getBBox().width;\r\n            var height = text.node().getBBox().height;\r\n            ElementUtil.setElementProperties(rect,{x:-width/2,y:-height/2,width:width,height:height,rx:2,ry:2});\r\n            ElementUtil.setElementProperties(text,{\"text-anchor\":\"middle\",\"dy\":\"0.31em\"});\r\n        });*/\r\n        rect = ElementUtil.createRect(g,_data.backGroundProperties);\r\n        text = ElementUtil.createText(g,_data.labelProperties);\r\n        text.text(_data.name);\r\n        ElementUtil.setElementProperties(text,{\"text-anchor\":\"middle\",\"dy\":\"0.31em\"});\r\n        var box = text.node().getBBox();\r\n        var width = box.width;\r\n        var height = box.height;\r\n        ElementUtil.setElementProperties(rect,{x:-width/2,y:-height/2,width:width,height:height,rx:2,ry:2});\r\n    }\r\n    \r\n    //override\r\n    this.update = function(d) {\r\n    \tif(d) {\r\n    \t\t_data = d;\r\n    \t}\r\n    \tif(!text) return;\r\n    \ttext.text(_data.name);\r\n        ElementUtil.setElementProperties(text,{\"text-anchor\":\"middle\",\"dy\":\"0.31em\"});\r\n        ElementUtil.setElementProperties(text,_data.labelProperties);\r\n        var box = text.node().getBBox();\r\n        var width = box.width;\r\n        var height = box.height;\r\n        ElementUtil.setElementProperties(rect,{x:-width/2,y:-height/2,width:width,height:height,rx:2,ry:2});\r\n    }\r\n\r\n    //override\r\n    this.bindEvents = function(g){\r\n        superBindEventsFunction(g);\r\n    }\r\n};\r\n\r\nGroupLabel.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    GroupLabel.prototype = Object.create(Plugin.prototype);\r\n    GroupLabel.prototype.constructor = GroupLabel;\r\n};\r\n\r\nmodule.exports = GroupLabel;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/label/groupLabel.js\n// module id = 70\n// module chunks = 0","var Label = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const RectElement = ghca_charts.view.elements.rectElement;\r\n    const MulitextElement = ghca_charts.view.elements.mulitextElement;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this;\r\n    var rectElement,mulitextElement,titleElement;\r\n\r\n    self.config({\r\n        text:\"{name}\",\r\n        maxWidth:60,\r\n        backGroundColor:\"green\",\r\n        backGroundOpacity:.3,\r\n        borderRadius:4,\r\n        padding:4,\r\n        fontColor:\"0x000000\",\r\n        fontFamily:\"宋体\",\r\n        fontSize:12,\r\n        textLine:3,\r\n        visible:true\r\n    });\r\n\r\n    var textFunc;\r\n    this.textFunc = function(value){\r\n        if(!arguments.length)return;\r\n        textFunc = value;\r\n    }\r\n   \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"label\";\r\n    }\r\n\r\n    //override\r\n    this.update = function(g){\r\n        var config = self.config();\r\n        var text = config.text;\r\n        if(text && text.indexOf(\"{#\") === 0) {\r\n            text = self.formatStr(text)(self.data().data);\r\n        } else {\r\n            text = this.textFunc()==undefined?RegexUtil.replace(RegexUtil.dataRegex,text,self.data()):this.textFunc()(self.data());\r\n        }\r\n        titleElement.text(text);\r\n        mulitextElement.data({text:text,fontSize:config.fontSize,color:config.fontColor,width:config.maxWidth,textLine:config.textLine?config.textLine:1,fontFamily:config.fontFamily});\r\n        mulitextElement.attribute(\"transform\",\"translate(\"+[config.padding,config.padding]+\")\");\r\n        rectElement.data({rx:config.borderRadius,ry:config.borderRadius,color:config.backGroundColor,opacity:config.backGroundOpacity});\r\n        var width = mulitextElement.elementWidth() + (2 * config.padding);\r\n        var height = mulitextElement.elementHeight() + (2 * config.padding);\r\n        rectElement.svgElement.attr(\"width\", width).attr(\"height\", height);\r\n        self.visible(config.visible == undefined ?true:config.visible==true);\r\n        self.resetBBox(0, 0, width, height);\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = self.config();\r\n        var text = config.text;\r\n        if(text && text.indexOf(\"{#\") === 0) {\r\n        \ttext = self.formatStr(text)(self.data().data);\r\n        } else {\r\n        \ttext = this.textFunc()==undefined?RegexUtil.replace(RegexUtil.dataRegex,text,self.data()):this.textFunc()(self.data());\r\n        }\r\n        titleElement = g.append(\"title\");\r\n        titleElement.text(text);\r\n        rectElement = new RectElement(g,{rx:config.borderRadius,ry:config.borderRadius,color:config.backGroundColor,opacity:config.backGroundOpacity});\r\n        rectElement.render();\r\n        mulitextElement = new MulitextElement(g,{text:text,fontSize:config.fontSize,color:config.fontColor,width:config.maxWidth,textLine:config.textLine?config.textLine:1,fontFamily:config.fontFamily});\r\n        mulitextElement.render();\r\n        mulitextElement.attribute(\"transform\",\"translate(\"+[config.padding,config.padding]+\")\");\r\n        // mulitextElement.attribute(\"pointer-events\", \"none\");\r\n        var width = mulitextElement.elementWidth() + (2 * config.padding);\r\n        var height = mulitextElement.elementHeight() + (2 * config.padding);\r\n        rectElement.svgElement.attr(\"width\", width).attr(\"height\", height);\r\n        // rectElement.svgElement.attr(\"pointer-events\", \"none\");\r\n        self.visible(config.visible == undefined ?true:config.visible==true);\r\n        self.resetBBox(0, 0, width, height);\r\n    }\r\n};\r\n\r\nLabel.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    Label.prototype = Object.create(Plugin.prototype);\r\n    Label.prototype.constructor = Label;\r\n};\r\n\r\nmodule.exports = Label;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/label/label.js\n// module id = 71\n// module chunks = 0","var PackLabel = function (_element,_data,_transition) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var text, self = this, labelShowRadius = 50;\r\n    \r\n    /**\r\n     * 当前缩放系数\r\n     */\r\n    var scaleK = 1;\r\n    this.scaleK = function(){\r\n    \tif(arguments.length === 0)\r\n    \t   return scaleK;\r\n        scaleK = arguments[0];\r\n        return this;\r\n    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"packLabel\";\r\n    }\r\n    \r\n    var labelPos = function() {\r\n        return _data.data && _data.data.clazzProperties && _data.data.clazzProperties.labelPos ? \r\n            _data.data.clazzProperties.labelPos : \"outer\";\r\n    };\r\n    \r\n    var labelFill = function() {\r\n    \treturn labelPos() === \"outer\" ? \r\n            _data.hasOwnProperty(\"legendColor\") ? _data.legendColor : \"#000\" : \"#000\";\r\n    };\r\n    \r\n    var midAngle = function (d){\r\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n    };\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tvar pos = labelPos();\r\n        text = g.append(\"text\").style(\"display\", pos === \"none\" ? \"none\" : \"block\");\r\n        if(pos === \"none\") {\r\n        \treturn;\r\n        }\r\n        var labelConfig = _data.data.labelProperties;  \r\n        var textStr = _data.data.labelProperties.text;\r\n        var textContent = textStr ? self.formatStr(textStr) : null;\r\n        if(pos === \"innerRing\") {\r\n        \ttext\r\n                .attr(\"fill\", function(d) {\r\n                    return labelFill();\r\n                })\r\n                .attr(\"pointer-events\", \"none\")\r\n                .attr(\"opacity\", 0)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .transition(_transition)\r\n                .on(\"end\", function(){\r\n                    d3.select(this).transition().attr(\"opacity\", 1);\r\n                });\r\n                \r\n            var textPath = text.append(\"textPath\");\r\n            var fontSize = (labelConfig[\"fontSize\"] || labelConfig[\"font-size\"]);\r\n            if(ObjectUtil.isString(fontSize)) {\r\n            \tfontSize = parseInt(fontSize.split(\"px\")[0]);\r\n            }\r\n            if(isNaN(fontSize)) {\r\n            \tfontSize = 12;\r\n            }\r\n            var radius = self.scaleK() * _data.outerRadius + fontSize/2 - 4;\r\n            var pathLen = (_data.endAngle - _data.startAngle) * radius - 1;\r\n            textPath.each(function(d) {\r\n            \tvar content = textContent ? textContent(d) : d.value;\r\n            \tvar texts = StringUtil.splitByLine(content, pathLen, fontSize, 1);\r\n                textPath.text(\"\");\r\n                textPath.selectAll(\"tspan\")\r\n                    .data(texts)\r\n                    .enter()\r\n                    .append(\"tspan\")\r\n                    .text(function(d) {\r\n                        return pathLen < 10 ? \"\" : d;\r\n                    });\r\n                textPath\r\n                    .attr(\"xlink:href\", self.graph().getCustomId(\"#pack-node-path-\", _data.id))\r\n                    .attr(\"startOffset\", \"50%\");\r\n                text.attr(\"title\", content).style(\"display\", radius > labelShowRadius ? \"block\" : \"none\");\r\n            });\r\n        } else {\r\n        \ttext\r\n                .text(textContent ? textContent : function (d) {\r\n                    return d.value;\r\n                })\r\n                .attr(\"fill\", function(d) {\r\n                    return labelFill();\r\n                })\r\n                .attr(\"pointer-events\", \"none\")\r\n                .attr(\"dy\", \".35em\");\r\n                if(pos === \"innerRing\") {\r\n                \ttext.attr(\"opacity\", 0)\r\n                        .transition(_transition)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformRenderTween)\r\n                        .on(\"end\", function(){\r\n                            d3.select(this).transition().attr(\"opacity\", 1);\r\n                        });\r\n                } else {\r\n                \ttext.transition(_transition)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformRenderTween);\r\n                }\r\n        }\r\n            \r\n        for(var key in labelConfig){\r\n        \tvar value = labelConfig[key];\r\n            text.attr(key, ObjectUtil.isString(value) ? self.formatStr(value) : value);\r\n        }\r\n    }\r\n    \r\n    //override\r\n    this.update = function(t) {\r\n    \tif(text) {\r\n    \t\t_data = self.data();\r\n    \t\ttext.datum(_data);\r\n    \t\tvar pos = labelPos();\r\n    \t\ttext.style(\"display\", pos === \"none\" ? \"none\" : \"block\");\r\n            if(labelPos() === \"none\") {\r\n                return;\r\n            }\r\n            var labelConfig = _data.data.labelProperties;\r\n    \t\tvar textStr = _data.data.labelProperties.text;\r\n            var textContent = textStr ? self.formatStr(textStr) : null;\r\n            if(pos === \"innerRing\") {\r\n            \ttext.text(\"\")\r\n            \t    .attr(\"fill\", function(d) {\r\n                        return labelFill();\r\n                    })\r\n                    .attr(\"pointer-events\", \"none\")\r\n                    .attr(\"opacity\", 0)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .transition(t)\r\n                    .on(\"end\", function(){\r\n                        d3.select(this).transition().attr(\"opacity\", 1);\r\n                    });\r\n                \r\n                var textPath = text.select(\"textPath\");\r\n                if(textPath.node() === null) {\r\n                \ttextPath = text.append(\"textPath\");\r\n                }\r\n                var fontSize = (labelConfig[\"fontSize\"] || labelConfig[\"font-size\"]);\r\n                if(ObjectUtil.isString(fontSize)) {\r\n                    fontSize = parseInt(fontSize.split(\"px\")[0]);\r\n                }\r\n                if(isNaN(fontSize)) {\r\n                    fontSize = 12;\r\n                }\r\n                var radius = self.scaleK() * _data.outerRadius + fontSize/2 - 4;\r\n                var pathLen = (_data.endAngle - _data.startAngle) * radius - 1;\r\n                textPath.each(function(d) {\r\n                    var content = textContent ? textContent(d) : d.value;\r\n                    var texts = StringUtil.splitByLine(content, pathLen, fontSize, 1);\r\n                    textPath.text(\"\");\r\n                    textPath.selectAll(\"tspan\")\r\n                        .data(texts)\r\n                        .enter()\r\n                        .append(\"tspan\")\r\n                        .text(function(d) {\r\n                            return pathLen < 10 ? \"\" : d;\r\n                        });\r\n                    textPath\r\n                        .attr(\"xlink:href\", self.graph().getCustomId(\"#pack-node-path-\", _data.id))\r\n                        .attr(\"startOffset\", \"50%\");\r\n                    text.attr(\"title\", content).style(\"display\", radius > labelShowRadius ? \"block\" : \"none\");\r\n                });\r\n            } else {\r\n            \ttext.selectAll(\"textPath\").remove();\r\n            \ttext\r\n                    .attr(\"fill\", function(d) {\r\n                        return labelFill();\r\n                    })\r\n                    .text(textContent ? textContent : function (d) {\r\n                        return d.value;\r\n                    })\r\n                if(pos === \"innerRing\") {\r\n                    text.attr(\"opacity\", 0)\r\n                        .transition(t)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformUpdateTween)\r\n                        .on(\"end\", function(){\r\n                            d3.select(this).transition().attr(\"opacity\", 1);\r\n                        });\r\n                } else {\r\n                    text.transition(t)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformUpdateTween);\r\n                }\r\n            }\r\n            for(var key in labelConfig){\r\n            \tvar value = labelConfig[key];\r\n                text.attr(key, ObjectUtil.isString(value) ? self.formatStr(value) : value);\r\n            }\r\n    \t}\r\n    }\r\n    \r\n    var transformRenderTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate, gapX;\r\n        if(labelPos() === \"outer\") {\r\n        \tinterpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            gapX = d.lineSize + 5;\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.outerArc2.centroid(d2);\r\n                pos[0] += (100 * (1 - t) + gapX) * (midAngle(d2) < Math.PI ? 1 : -1);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        } else {\r\n        \tif(d.startAngle === 0 && d.endAngle >= 6.283185307179586) {\r\n        \t\treturn function(t) {\r\n                    return \"translate(0)\";\r\n                };\r\n        \t}\r\n        \tinterpolate = d3.interpolate({startAngle:0, endAngle:0}, d);\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.arc.centroid(d2);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        }\r\n    };\r\n    \r\n    var transformUpdateTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate, gapX;\r\n        if(labelPos() === \"outer\") {\r\n            interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            gapX = d.lineSize + 5;\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.outerArc2.centroid(d2);\r\n                pos[0] += gapX * (midAngle(d2) < Math.PI ? 1 : -1);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        } else {\r\n        \tif(d.startAngle === 0 && d.endAngle >= 6.283185307179586) {\r\n                return function(t) {\r\n                    return \"translate(0)\";\r\n                };\r\n            }\r\n            interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.arc.centroid(d2);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        }\r\n    };\r\n    \r\n    var textAnchorTween = function(d) {\r\n        this._current = this._current || d;\r\n        if(labelPos() === \"outer\") {\r\n        \tvar interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                return midAngle(d2) < Math.PI ? \"start\" : \"end\";\r\n            };\r\n        } else {\r\n        \treturn function(t) {\r\n        \t\treturn \"middle\";\r\n        \t}\r\n        }\r\n    };\r\n};\r\n\r\nPackLabel.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    PackLabel.prototype = Object.create(Plugin.prototype);\r\n    PackLabel.prototype.constructor = PackLabel;\r\n};\r\n\r\nmodule.exports = PackLabel;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/label/packLabel.js\n// module id = 72\n// module chunks = 0","var PieLabel = function (_element,_data,_transition) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const StringUtil = ghca_charts.view.util.stringUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var text, self = this;\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"pieLabel\";\r\n    }\r\n    \r\n    var labelPos = function() {\r\n        return _data.data && _data.data.clazzProperties && _data.data.clazzProperties.labelPos ? \r\n            _data.data.clazzProperties.labelPos : \"outer\";\r\n    };\r\n    \r\n    var labelFill = function() {\r\n    \treturn labelPos() === \"outer\" ? \r\n            (_data.hasOwnProperty(\"legendColor\") ? _data.legendColor : \"#000\") : \"#000\";\r\n    };\r\n    \r\n    var midAngle = function (d){\r\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n    };\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tvar pos = labelPos();\r\n        text = g.append(\"text\").style(\"display\", pos === \"none\" ? \"none\" : \"block\");\r\n        if(pos === \"none\") {\r\n        \treturn;\r\n        }\r\n        var labelConfig = _data.data.labelProperties;  \r\n        var textStr = _data.data.labelProperties.text;\r\n        var textContent = textStr ? self.formatStr(textStr) : null;\r\n        if(pos === \"innerRing\" && !(_data.innerRadius === 0 && _data.startAngle === 0 && _data.endAngle >= 6.283185307179586)) {\r\n        \ttext\r\n                .attr(\"fill\", function(d) {\r\n                    return labelFill();\r\n                })\r\n                .attr(\"pointer-events\", \"none\")\r\n                .attr(\"opacity\", 0)\r\n                .transition(_transition)\r\n                .on(\"end\", function(){\r\n                    d3.select(this).transition().attr(\"opacity\", 1);\r\n                });\r\n                \r\n            var textPath = text.append(\"textPath\");\r\n            var fontSize = (labelConfig[\"fontSize\"] || labelConfig[\"font-size\"]);\r\n            if(ObjectUtil.isString(fontSize)) {\r\n            \tfontSize = parseInt(fontSize.split(\"px\")[0]);\r\n            }\r\n            if(isNaN(fontSize)) {\r\n            \tfontSize = 12;\r\n            }\r\n            var radius = (_data.innerRadius + _data.outerRadius - 12) / 2;\r\n            var pathLen = (_data.endAngle - _data.startAngle) * radius - 15;\r\n            textPath.each(function(d) {\r\n            \tvar content = textContent ? textContent(d) : d.value;\r\n            \tvar texts = StringUtil.splitByLine(content, pathLen, fontSize, 1);\r\n                textPath.text(\"\");\r\n                textPath.selectAll(\"tspan\")\r\n                    .data(texts)\r\n                    .enter()\r\n                    .append(\"tspan\")\r\n                    .text(function(d) {\r\n                        return pathLen < 10 ? \"\" : d;\r\n                    });\r\n                textPath.attr(\"xlink:href\", self.graph().getCustomId(\"#sunburst-node-path-\", _data.id));\r\n                text.attr(\"title\", content);\r\n            });\r\n        } else {\r\n        \ttext\r\n                .text(textContent ? textContent : function (d) {\r\n                    return d.value;\r\n                })\r\n                .attr(\"fill\", function(d) {\r\n                    return labelFill();\r\n                })\r\n                .attr(\"pointer-events\", \"none\")\r\n                .attr(\"dy\", \".35em\");\r\n                if(pos === \"innerRing\") {\r\n                \ttext.attr(\"opacity\", 0)\r\n                        .transition(_transition)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformRenderTween)\r\n                        .on(\"end\", function(){\r\n                            d3.select(this).transition().attr(\"opacity\", 1);\r\n                        });\r\n                } else {\r\n                \ttext.transition(_transition)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformRenderTween);\r\n                }\r\n        }\r\n            \r\n        for(var key in labelConfig){\r\n        \tvar value = labelConfig[key];\r\n            text.attr(key, ObjectUtil.isString(value) ? self.formatStr(value) : value);\r\n        }\r\n    }\r\n    \r\n    //override\r\n    this.update = function(t) {\r\n    \tif(text) {\r\n    \t\t_data = self.data();\r\n    \t\ttext.datum(_data);\r\n    \t\tvar pos = labelPos();\r\n    \t\ttext.style(\"display\", pos === \"none\" ? \"none\" : \"block\");\r\n            if(labelPos() === \"none\") {\r\n                return;\r\n            }\r\n            var labelConfig = _data.data.labelProperties;\r\n    \t\tvar textStr = _data.data.labelProperties.text;\r\n            var textContent = textStr ? self.formatStr(textStr) : null;\r\n            if(pos === \"innerRing\" && !(_data.innerRadius === 0 && _data.startAngle === 0 && _data.endAngle >= 6.283185307179586)) {\r\n            \ttext.text(\"\")\r\n            \t    .attr(\"fill\", function(d) {\r\n                        return labelFill();\r\n                    })\r\n                    .attr(\"pointer-events\", \"none\")\r\n                    .attr(\"opacity\", 0)\r\n                    .style(\"text-anchor\", \"\")\r\n                    .transition(t)\r\n                    .on(\"end\", function(){\r\n                        d3.select(this).transition().attr(\"opacity\", 1);\r\n                    });\r\n                \r\n                var textPath = text.select(\"textPath\");\r\n                if(textPath.node() === null) {\r\n                \ttextPath = text.append(\"textPath\");\r\n                }\r\n                var fontSize = (labelConfig[\"fontSize\"] || labelConfig[\"font-size\"]);\r\n                if(ObjectUtil.isString(fontSize)) {\r\n                    fontSize = parseInt(fontSize.split(\"px\")[0]);\r\n                }\r\n                if(isNaN(fontSize)) {\r\n                    fontSize = 12;\r\n                }\r\n                var radius = (_data.innerRadius + _data.outerRadius - 12) / 2;\r\n                var pathLen = (_data.endAngle - _data.startAngle) * radius - 15;\r\n                textPath.each(function(d) {\r\n                    var content = textContent ? textContent(d) : d.value;\r\n                    var texts = StringUtil.splitByLine(content, pathLen, fontSize, 1);\r\n                    textPath.text(\"\");\r\n                    textPath.selectAll(\"tspan\")\r\n                        .data(texts)\r\n                        .enter()\r\n                        .append(\"tspan\")\r\n                        .text(function(d) {\r\n                            return pathLen < 10 ? \"\" : d;\r\n                        });\r\n                    textPath.attr(\"xlink:href\", self.graph().getCustomId(\"#sunburst-node-path-\", _data.id));\r\n                    text.attr(\"title\", content);\r\n                });\r\n            } else {\r\n            \ttext.selectAll(\"textPath\").remove();\r\n            \ttext\r\n                    .attr(\"fill\", function(d) {\r\n                        return labelFill();\r\n                    })\r\n                    .text(textContent ? textContent : function (d) {\r\n                        return d.value;\r\n                    })\r\n                if(pos === \"innerRing\") {\r\n                    text.attr(\"opacity\", 0)\r\n                        .transition(t)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformUpdateTween)\r\n                        .on(\"end\", function(){\r\n                            d3.select(this).transition().attr(\"opacity\", 1);\r\n                        });\r\n                } else {\r\n                    text.transition(t)\r\n                        .styleTween(\"text-anchor\", textAnchorTween)\r\n                        .attrTween(\"transform\", transformUpdateTween);\r\n                }\r\n            }\r\n            for(var key in labelConfig){\r\n            \tvar value = labelConfig[key];\r\n                text.attr(key, ObjectUtil.isString(value) ? self.formatStr(value) : value);\r\n            }\r\n    \t}\r\n    }\r\n    \r\n    var transformRenderTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate, gapX;\r\n        if(labelPos() === \"outer\") {\r\n        \tinterpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            gapX = d.lineSize + 5;\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.outerArc2.centroid(d2);\r\n                pos[0] += (100 * (1 - t) + gapX) * (midAngle(d2) < Math.PI ? 1 : -1);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        } else {\r\n        \tif(d.startAngle === 0 && d.endAngle >= 6.283185307179586) {\r\n        \t\treturn function(t) {\r\n                    return \"translate(0)\";\r\n                };\r\n        \t}\r\n        \tinterpolate = d3.interpolate({startAngle:0, endAngle:0}, d);\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.arc.centroid(d2);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        }\r\n    };\r\n    \r\n    var transformUpdateTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate, gapX;\r\n        if(labelPos() === \"outer\") {\r\n            interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            gapX = d.lineSize + 5;\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.outerArc2.centroid(d2);\r\n                pos[0] += gapX * (midAngle(d2) < Math.PI ? 1 : -1);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        } else {\r\n        \tif(d.startAngle === 0 && d.endAngle >= 6.283185307179586) {\r\n                return function(t) {\r\n                    return \"translate(0)\";\r\n                };\r\n            }\r\n            interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                var pos = d.arc.centroid(d2);\r\n                return \"translate(\"+ pos +\")\";\r\n            };\r\n        }\r\n    };\r\n    \r\n    var textAnchorTween = function(d) {\r\n        this._current = this._current || d;\r\n        if(labelPos() === \"outer\") {\r\n        \tvar interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n            this._current = interpolate(0);\r\n            return function(t) {\r\n                var d2 = interpolate(t);\r\n                return midAngle(d2) < Math.PI ? \"start\" : \"end\";\r\n            };\r\n        } else {\r\n        \treturn function(t) {\r\n        \t\treturn \"middle\";\r\n        \t}\r\n        }\r\n    };\r\n};\r\n\r\nPieLabel.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    PieLabel.prototype = Object.create(Plugin.prototype);\r\n    PieLabel.prototype.constructor = PieLabel;\r\n};\r\n\r\nmodule.exports = PieLabel;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/label/pieLabel.js\n// module id = 73\n// module chunks = 0","var ToPoLabel = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const RectElement = ghca_charts.view.elements.rectElement;\r\n    const MulitextElement = ghca_charts.view.elements.mulitextElement;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const ObjectUtil =  ghca_charts.view.util.objectUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this;\r\n    var rectElement,mulitextElement;\r\n\r\n    self.config({\r\n        text:\"{name}\",\r\n        maxWidth:60,\r\n        backGroundColor:\"green\",\r\n        backGroundOpacity:.3,\r\n        borderRadius:4,\r\n        padding:4,\r\n        fontColor:\"0x000000\",\r\n        fontFamily:\"宋体\",\r\n        fontSize:12,\r\n        textLine:3,\r\n        visible:true\r\n    });\r\n\r\n    var textFunc;\r\n    this.textFunc = function(value){\r\n        if(!arguments.length)return;\r\n        textFunc = value;\r\n    }\r\n   \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"topolabel\";\r\n    }\r\n\r\n    //override\r\n    this.update = function(g){\r\n        var config = self.getRegConfig();\r\n\r\n        // titleElement.text(config.text);\r\n        mulitextElement.data({\r\n            text:config.text,\r\n            fontSize:config.fontSize,\r\n            color:config.fontColor,\r\n            width:config.maxWidth,\r\n            textLine:config.textLine?config.textLine:1,\r\n            fontFamily:config.fontFamily\r\n        });\r\n        mulitextElement.attribute(\"transform\",\"translate(\"+[config.padding,config.padding]+\")\");\r\n        rectElement.data({\r\n            rx:config.borderRadius,\r\n            ry:config.borderRadius,\r\n            color:config.backGroundColor,\r\n            opacity:config.backGroundOpacity\r\n        });\r\n        var width = mulitextElement.elementWidth() + (2 * config.padding);\r\n        var height = mulitextElement.elementHeight() + (2 * config.padding);\r\n        rectElement.svgElement.attr(\"width\", width).attr(\"height\", height);\r\n        var vis = config.visible;\r\n        if (vis) {\r\n            vis = config.text.length > 0;\r\n        }\r\n        self.visible(vis);\r\n        self.resetBBox(0, 0, width, height);\r\n    }\r\n\r\n    /**\r\n     * 获取规则匹配的配置\r\n     */\r\n    this.getRegConfig=function(){\r\n        var config = ObjectUtil.cloneObj(self.config());\r\n        if(config.text && config.text.indexOf(\"{#\") === 0) {\r\n            config.text = self.formatStr(config.text)(self.data().data);\r\n        } else {\r\n            config.text = this.textFunc()==undefined?RegexUtil.replace(RegexUtil.dataRegex,config.text,self.data()):this.textFunc()(self.data());\r\n        }\r\n        if(config.fontColor && config.fontColor.indexOf(\"{#\") === 0) {\r\n            config.fontColor = self.formatStr(config.fontColor)(self.data().data);\r\n        } else {\r\n            config.fontColor = RegexUtil.replace(RegexUtil.dataRegex,config.fontColor,self.data());\r\n        }\r\n        if(config.backGroundColor && config.backGroundColor.indexOf(\"{#\") === 0) {\r\n            config.backGroundColor = self.formatStr(config.backGroundColor)(self.data().data);\r\n        } else {\r\n            config.backGroundColor = RegexUtil.replace(RegexUtil.dataRegex,config.backGroundColor,self.data());\r\n        }\r\n        if(config.backGroundOpacity && config.backGroundOpacity.indexOf(\"{#\") === 0) {\r\n            config.backGroundOpacity = self.formatStr(config.backGroundOpacity)(self.data().data);\r\n        } else {\r\n            config.backGroundOpacity = RegexUtil.replace(RegexUtil.dataRegex,config.backGroundOpacity,self.data());\r\n        }\r\n        return config;\r\n    }\r\n\r\n\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = self.getRegConfig();\r\n        var text = config.text;\r\n        // titleElement = g.append(\"title\");\r\n        // titleElement.text(text);\r\n\r\n        rectElement = new RectElement(g,{rx:config.borderRadius,ry:config.borderRadius,color:config.backGroundColor,opacity:config.backGroundOpacity});\r\n        rectElement.render();\r\n\r\n        mulitextElement = new MulitextElement(g,{text:text,fontSize:config.fontSize,color:config.fontColor,width:config.maxWidth,textLine:config.textLine?config.textLine:1,fontFamily:config.fontFamily});\r\n        mulitextElement.render();\r\n        mulitextElement.attribute(\"transform\",\"translate(\"+[config.padding,config.padding]+\")\");\r\n        // mulitextElement.attribute(\"pointer-events\", \"none\");\r\n        var width = mulitextElement.elementWidth() + (2 * config.padding);\r\n        var height = mulitextElement.elementHeight() + (2 * config.padding);\r\n        rectElement.svgElement.attr(\"width\", width).attr(\"height\", height);\r\n        // rectElement.svgElement.attr(\"pointer-events\", \"none\");\r\n        var vis=config.visible;\r\n        if(vis){\r\n            vis=text.length>0;\r\n        }\r\n        self.visible(vis);\r\n        self.resetBBox(0, 0, width, height);\r\n    }\r\n\r\n    this.getRectElement=function(){\r\n        return rectElement;\r\n    }  \r\n\r\n    this.remove=function(){\r\n        rectElement.svgElement.remove();\r\n        mulitextElement.svgElement.remove();\r\n    }\r\n};\r\n\r\nToPoLabel.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    ToPoLabel.prototype = Object.create(Plugin.prototype);\r\n    ToPoLabel.prototype.constructor = ToPoLabel;\r\n};\r\n\r\nmodule.exports = ToPoLabel;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/label/topoLabel.js\n// module id = 74\n// module chunks = 0","var LinkMap = function() {\r\n    \r\n    this.getMap = function() {\r\n        var map = {};\r\n        //注册内部连线类\r\n        map.baselink = ghca_charts.view.elements.plugins.links.baseLink;\r\n        map.curvelink = ghca_charts.view.elements.plugins.links.curveLink;\r\n        map.parallellink = ghca_charts.view.elements.plugins.links.parallelLink;\r\n        map.sankeylink = ghca_charts.view.elements.plugins.links.sankeyLink;\r\n        map.link = ghca_charts.view.elements.plugins.links.link;\r\n        map.configlink = ghca_charts.view.elements.plugins.links.configLink;\r\n        \r\n        //注册外部连线类\r\n        var outerMap = ghca_charts.global.outerPlugins && ghca_charts.global.outerPlugins.linkMap;\r\n        if(outerMap) {\r\n            for(var name in outerMap) {\r\n                map[name] = outerMap[name];\r\n            }\r\n        }\r\n        \r\n        return map;\r\n    };\r\n};\r\n\r\nLinkMap.struct = function(ghca_charts) {\r\n    LinkMap.prototype.constructor = LinkMap;\r\n};\r\n\r\nmodule.exports = LinkMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/linkMap.js\n// module id = 75\n// module chunks = 0","var BaseNode = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const math = ghca_charts.view.util.math;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        superDrawPluginFunction = this.drawPlugin,\r\n        superBindEventsFunction = this.bindEvents;\r\n    self.dispatch = d3.dispatch(\"selectedChange\");\r\n    self.mainPathElement = _element;\r\n    self.checkPathElement = _element;\r\n    self.labelElement =  _element;\r\n    self.label;\r\n    var _selected = false;\r\n    //override\r\n    this.data = function(){\r\n        return _data.data;\r\n    };\r\n    //override\r\n//    this.visible = function(_visible){\r\n//        if(_visible)\r\n//            ElementUtil.setElementProperties(_element,{display:\"block\"});\r\n//        else\r\n//            ElementUtil.setElementProperties(_element,{display:\"none\"});\r\n//    }\r\n    /**\r\n     * 是否显示箭头\r\n     */\r\n    var isShowArrow = false;\r\n    this.isShowArrow = function(value) {\r\n        if (!arguments.length)\r\n            return isShowArrow;\r\n        isShowArrow = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * 节点选中\r\n     * @param _selected\r\n     * @returns {*}\r\n     */\r\n    this.selected = function(_p){\r\n        if(!arguments.length)return _selected;\r\n        _selected = _p;\r\n        self.dispatch.call(\"selectedChange\",this , new BaseEvent(self,{selected:_selected}));\r\n        return this;\r\n    }\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"baseLink\";\r\n    }\r\n\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        superDrawPluginFunction(g);\r\n        g.each(function (d) {\r\n        \tself.isShowArrow(self.data().showArrow ? true : false);\r\n            var group = d3.select(this);\r\n            self.checkPathElement = ElementUtil.createPath(group,self.data().linkCheckProperties);\r\n            self.mainPathElement  = ElementUtil.createPath(group,self.data().linkProperties);\r\n            self.createLabel(group,_data);\r\n            self.setPath(self.mainPathElement,_data);\r\n            self.setPath(self.checkPathElement,_data);\r\n        });\r\n    }\r\n    //override\r\n    this.update = function(){\r\n        self.setPath(self.mainPathElement,_data);\r\n        self.setPath(self.checkPathElement,_data);\r\n        if(self.label && self.labelElement)\r\n            self.labelLayout(self.labelElement,self.label,_data);\r\n    }\r\n\r\n\r\n    //override\r\n    this.bindEvents = function(g){\r\n        superBindEventsFunction(g);\r\n        g.on('mouseover', function(d) {\r\n            self.mouseOverHandler();\r\n        });\r\n        g.on('mouseout', function(d) {\r\n            self.mouseOutHandler();\r\n        });\r\n        g.on('click', function(d) {\r\n            self.selected(!_selected);\r\n        });\r\n        self.on(\"selectedChange.\"+self.nameSpace(),function(e){\r\n            self.selectedChange(e.data.selected);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 自定义事件监听\r\n     * @returns {exports}\r\n     */\r\n    this.on = function() {\r\n        var value = self.dispatch.on.apply(self.dispatch, arguments);\r\n        return value === self.dispatch ? self : value;\r\n    };\r\n\r\n\r\n    this.selectedChange = function(seleced){\r\n        if(seleced){\r\n            self.checkPathElement.attr(\"opacity\",0.5);\r\n        }else{\r\n            self.checkPathElement.attr(\"opacity\",0);\r\n        }\r\n    }\r\n    this.mouseOverHandler = function(){\r\n        if(!self.selected())\r\n            self.checkPathElement.attr(\"opacity\",0.5);\r\n    }\r\n    this.mouseOutHandler = function(){\r\n        if(!self.selected())\r\n            self.checkPathElement.attr(\"opacity\",0);\r\n    }\r\n\r\n    this.setPath = function(mainPathElement,d){\r\n        var path  = d3.path();\r\n        var target = self.isShowArrow() ? {x:d.target.cx, y:d.target.cy} : d.target;\r\n        path.moveTo(d.source.x,d.source.y);\r\n        path.lineTo(target.x,target.y);\r\n        ElementUtil.setElementProperties(mainPathElement,{\"d\": path.toString()});\r\n    }\r\n\r\n    this.createLabel = function(group, d) {\r\n\t\tif (!d.data.label) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tself.labelElement = group.append(\"g\");\r\n\t\tvar labelData = d.data.label;\r\n\t\tlabelData.name = d.name;\r\n\t\tself.label = new BaseLabel(self.labelElement, labelData, self);\r\n\t\tself.label.render();\r\n\t\tself.labelLayout(self.labelElement, self.label, d);\r\n\t}\r\n    /**\r\n\t * label布局\r\n\t * \r\n\t * @param element\r\n\t * @param plugin\r\n\t * @param position\r\n\t */\r\n    this.labelLayout = function(element,plugin,data){\r\n        var position = math.calculateCenter(data.source, data.target);\r\n        var angle = math.linkAngle(data.source,data.target)\r\n        ElementUtil.setElementProperties(element,{transform:\"translate(\" + [position.x,position.y] + \")\"+\" rotate(\" + angle + \")\"});\r\n    }\r\n    \r\n    this.addArrow = function(pathElement) {\r\n    \tvar svg = d3.select(pathElement.node().ownerSVGElement);\r\n        var defs = svg.select(\"svg defs\"); \r\n        if(defs.node() === null) {\r\n            defs = svg.append(\"defs\");\r\n        }\r\n        var arrowMarker = defs.select(\"marker#link-arrow\");\r\n        if(arrowMarker.node() === null) {\r\n            arrowMarker = defs.append(\"marker\")\r\n                .attr(\"id\",\"link-arrow\")  \r\n                .attr(\"markerUnits\",\"strokeWidth\")  \r\n                .attr(\"markerWidth\",\"6\")  \r\n                .attr(\"markerHeight\",\"4\")  \r\n                .attr(\"viewBox\",\"0 0 6 4\")   \r\n                .attr(\"refX\",6)  \r\n                .attr(\"refY\",2)  \r\n                .attr(\"orient\",\"auto\");  \r\n              \r\n            var arrow_path = \"M0,0 L6,2 L0,4\"; \r\n            var pathConfig = self.data().linkProperties;\r\n            arrowMarker.append(\"path\")  \r\n                        .attr(\"d\", arrow_path)  \r\n                        .attr(\"fill\", \"none\")\r\n                        .attr(\"stroke\", pathConfig[\"stroke\"])\r\n                        .attr(\"stroke-opacity\", pathConfig[\"stroke-opacity\"]);\r\n        }\r\n        pathElement.attr(\"marker-end\",\"url(#link-arrow)\");\r\n        var source = RegexUtil.replace(RegexUtil.dataRegex,_data.source,self.data()),\r\n            target = RegexUtil.replace(RegexUtil.dataRegex,_data.target,self.data());\r\n        //计算交点\r\n        if(self.isShowArrow()) {\r\n            var ins = target.ins;\r\n            var isComponent = ins instanceof BaseComponent;\r\n            var targetRect = ins ? \r\n//                (isComponent ? ins.node().getBBox() : ins.mainPlugin.el.node().getBBox()) : \r\n                (isComponent ? ins.node().getBBox() : ins.mainPlugin.getBBox()) : \r\n            \t{x:d3.event.x, y:d3.event.y, width:0, height:0};\r\n            var w = targetRect.width;\r\n            var h = targetRect.height;\r\n            var x = isComponent ? target.x + ins.x() : target.x + targetRect.x;\r\n            var y = isComponent ? target.y + ins.y() : target.y + targetRect.y;\r\n//            d3.select(document).selectAll(\"g.topo-nodesContainer\").append(\"rect\")\r\n//                .attr(\"x\", x)\r\n//                .attr(\"y\", y)\r\n//                .attr(\"width\", w)\r\n//                .attr(\"height\", h)\r\n//                .attr(\"stroke\", \"red\")\r\n//                .attr(\"fill\", \"none\");\r\n            var cp, nameSpace = self.nameSpace();\r\n            if(nameSpace === \"curveLink\" && _data.lineIndex > 0) {\r\n            \ttargetRect.x = x;    \r\n                targetRect.y = y;\r\n                //计算并记录控制点\r\n                var fontSize = self.label ? self.label.actualHeight() : 12;\r\n                var array = math.parallelDeviationPoint(source, target, fontSize*3, _data.lineIndex);\r\n                _data.controlX = array[1].x;\r\n                _data.controlY = array[1].y;\r\n                cp = math.calcQBezCurveAndRectIntersects(source, {x:array[1].x, y:array[1].y}, target, targetRect);\r\n                //取第一个点\r\n                if(cp.length > 0) {\r\n                \tcp = cp[0];\r\n                }\r\n            } else {\r\n            \tdelete _data.controlX;\r\n                delete _data.controlY;\r\n            \tcp = math.getCrossPointInRectAndSegment(x, y, w, h, source.x, source.y, target.x, target.y);\r\n            }\r\n            //记录交点坐标\r\n            if(cp && cp.length === 2) {\r\n                target.cx = cp[0];\r\n                target.cy = cp[1];\r\n                \r\n//                d3.select(document).selectAll(\"g.topo-nodesContainer\").append(\"circle\")\r\n//                    .attr(\"cx\", cp[0])\r\n//                    .attr(\"cy\", cp[1])\r\n//                    .attr(\"r\", 2)\r\n//                    .attr(\"fill\", \"black\");\r\n            } else {\r\n                target.cx = target.x;\r\n                target.cy = target.y;\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nBaseNode.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    BaseNode.prototype = Object.create(Plugin.prototype);\r\n    BaseNode.prototype.constructor = BaseNode;\r\n};\r\n\r\nmodule.exports = BaseNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/links/baseLink.js\n// module id = 76\n// module chunks = 0","var ConfigLink = function (_element, _data) {\r\n\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\r\n    const math = ghca_charts.view.util.math;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const CommonUtil = ghca_charts.view.util.commonUtil;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const PathElement = ghca_charts.view.elements.pathElement;\r\n    // const Label = ghca_charts.view.elements.plugins.label.label;\r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const UUID = ghca_charts.view.util.UUIDUtil;\r\n\r\n    Plugin.apply(this, arguments);\r\n\r\n    var self = this;\r\n    var pathElement, label, labelContainer, arrow;\r\n    var isShowArrow = false;\r\n    var fontSizeScale = 2;\r\n    var spCache = {},\r\n        tpCache = {};\r\n    var source, target; //连线起点终点数据对象\r\n    var sourceCx, sourceCy, targetCx, targetCy; //连线起点、终点交点坐标\r\n    self.dispatch = d3.dispatch(\"selectedChange\");\r\n    self.plugins = [];\r\n    //override\r\n    this.nameSpace = function () {\r\n        return \"link\";\r\n    }\r\n    self.config({\r\n        source: \"{source}\",\r\n        target: \"{target}\",\r\n        math: 2,\r\n        num: 6,\r\n        besselX: true,\r\n        path: {\r\n            dasharray: \"5,5\",\r\n            borderWidth: 2,\r\n            borderColor: \"{color}\",\r\n            borderOpacity: .6,\r\n            overDasharray: \"5,5\",\r\n            overBorderWidth: 10,\r\n            overBorderColor: \"red\",\r\n            overBorderOpacity: .8\r\n        },\r\n        label: {\r\n            clazz: \"label\",\r\n            config: {\r\n                text: \"{name}:{value}\",\r\n                maxWidth: 60,\r\n                backGroundColor: \"green\",\r\n                backGroundOpacity: .3,\r\n                borderRadius: 4,\r\n                padding: 4,\r\n                fontColor: \"0x000000\",\r\n                fontFamily: \"宋体\",\r\n                fontSize: 12\r\n            }\r\n        }\r\n    });\r\n\r\n    // ------------------------------\r\n    // id\r\n    // ------------------------------\r\n\r\n    var id = UUID.generateUUID();\r\n    this.id = function (value) {\r\n        return id;\r\n    };\r\n\r\n    var _selected = false;\r\n    this.selected = function (_p) {\r\n        if (!arguments.length) return _selected;\r\n        _selected = _p;\r\n        self.dispatch.call(\"selectedChange\", this, new BaseEvent(self, {\r\n            selected: _selected\r\n        }));\r\n        return this;\r\n    }\r\n    this.selectedChange = function (seleced) {\r\n        var config = self.config();\r\n        var pathConfig = config.path;\r\n        if (seleced) {\r\n            pathElement.data({\r\n                borderColor: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.overBorderColor, self.data()),\r\n                border: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.overBorderWidth, self.data()),\r\n                dasharray: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.dasharray, self.data()),\r\n                borderOpacity: pathConfig.overBorderOpacity\r\n            });\r\n        } else {\r\n            pathElement.data({\r\n                borderColor: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderColor, self.data()),\r\n                border: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderWidth, self.data()),\r\n                dasharray:RegexUtil.replace(RegexUtil.dataRegex, pathConfig.dasharray, self.data()),\r\n                borderOpacity: pathConfig.borderOpacity\r\n            });\r\n        }\r\n    }\r\n    var pathFunc;\r\n    this.pathFunc = function (func) {\r\n        if (!arguments.length) return pathFunc;\r\n        pathFunc = func;\r\n        return this;\r\n    }\r\n    //override\r\n    this.nameSpace = function () {\r\n        return \"configlink\";\r\n    }\r\n\r\n    //override\r\n    this.update = function (g) {\r\n        source = RegexUtil.replace(RegexUtil.dataRegex, self.config().source, self.data());\r\n        target = RegexUtil.replace(RegexUtil.dataRegex, self.config().target, self.data());\r\n        // if (!source.ins || !target.ins) {\r\n        //     return;\r\n        // }\r\n        //临时写法\r\n        if (g === \"topo\") {\r\n            isShowArrow = arrow ? arrow.visible === true : false;\r\n            if (label) {\r\n                label.transform(\"translate(\" + [-label.actualWidth() / 2, -label.actualHeight() / 2] + \")\");\r\n            }\r\n            if (labelContainer) {\r\n                labelContainer.attr(\"transform\", position());\r\n            }\r\n            startFlux(self.el);\r\n            setPath();\r\n        } else {\r\n            var config = self.config();\r\n            var pathConfig = config.path;\r\n            isShowArrow = arrow ? arrow.visible === true : false;\r\n            var labelConfig = config.label ? config.label.config : null;\r\n            if (labelConfig) {\r\n\r\n                if (labelContainer) {\r\n                    labelContainer.attr(\"transform\", position());\r\n                    if (label) {\r\n                        label.data(self.data());\r\n                        label.config(labelConfig);\r\n                        label.render();\r\n                        label.transform(\"translate(\" + [-label.actualWidth() / 2, -label.actualHeight() / 2] + \")\");\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            // pathElement.borderColor(RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,self.data()));\r\n            // pathElement.border(pathConfig.borderWidth);\r\n            // pathElement.dasharray(pathConfig.dasharray);\r\n            // pathElement.borderOpacity(pathConfig.borderOpacity);\r\n            // pathElement.data({borderColor:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,self.data()),\r\n            //     border:pathConfig.borderWidth,dasharray:pathConfig.dasharray\r\n            //     ,borderOpacity:pathConfig.borderOpacity});\r\n\r\n            startFlux(self.el);\r\n\r\n            // pathElement.render();\r\n\r\n            if (label) {\r\n                label.render()\r\n            }\r\n\r\n            setPath();\r\n\r\n        }\r\n        self.plugins.forEach(function (d, i) {\r\n            d.render();\r\n            pluginLayout(d, d);\r\n        });\r\n    }\r\n\r\n    //override\r\n    this.drawPlugin = function (g) {\r\n        g.attr(\"style\", \"cursor:pointer;\");\r\n        var config = self.config();\r\n        source = RegexUtil.replace(RegexUtil.dataRegex, self.config().source, self.data());\r\n        target = RegexUtil.replace(RegexUtil.dataRegex, self.config().target, self.data());\r\n        // if (!source.ins || !target.ins) {\r\n        //     return;\r\n        // }\r\n        var pathConfig = config.path;\r\n        arrow = pathConfig.arrow;\r\n        isShowArrow = arrow ? arrow.visible === true : false;\r\n        pathElement = new PathElement(g, {\r\n            borderColor: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderColor, self.data()),\r\n            border: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderWidth, self.data()),\r\n            dasharray: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.dasharray, self.data()),\r\n            borderOpacity: pathConfig.borderOpacity\r\n        });\r\n        var labelConfig = config.label ? config.label.config : null;\r\n        if (labelConfig) {\r\n            labelContainer = g.append(\"svg:g\");\r\n            label = ClassFactory.newPluginInstance(config.label.clazz, [labelContainer, self.data()]);\r\n            label.config(labelConfig);\r\n        }\r\n\r\n        startFlux(g);\r\n\r\n        // pathElement.render();\r\n\r\n        if (label) {\r\n            label.render();\r\n            label.transform(\"translate(\" + [-label.actualWidth() / 2, -label.actualHeight() / 2] + \")\");\r\n            labelContainer.attr(\"transform\", position());\r\n        }\r\n        var plugins = config.plugins;\r\n        if (plugins) {\r\n            plugins.forEach(function (d, i) {\r\n                if (d.render == undefined || RegexUtil.replace(RegexUtil.dataRegex, d.render, self.data()) == \"true\") {\r\n                    var plugin = ClassFactory.newPluginInstance(d.clazz, [g, self.data()]);\r\n                    plugin.config(d.config);\r\n                    plugin.render();\r\n                    self.plugins.push(plugin);\r\n                    pluginLayout(plugin, d);\r\n                }\r\n            });\r\n        }\r\n        setPath();\r\n    }\r\n\r\n    /**\r\n     * 开启流量监控\r\n     * @param g\r\n     */\r\n    function startFlux(g) {\r\n        var config = self.config();\r\n        var pathConfig = config.path;\r\n        var flux = RegexUtil.replace(RegexUtil.dataRegex, config.flux, self.data());\r\n\r\n        stopFlux(g);\r\n        if (!flux || flux === config.flux) {\r\n            pathElement.data({\r\n                borderColor: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderColor, self.data()),\r\n                border: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderWidth, self.data()),\r\n                dasharray: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.dasharray, self.data()),\r\n                borderOpacity: pathConfig.borderOpacity\r\n            });\r\n            setArrowProperty(\"link-arrow\" + self.id(), \"stroke\", RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderColor, self.data()));\r\n            return;\r\n        }\r\n        var labelConfig = config.label ? config.label.config : null;\r\n        if (labelConfig) {\r\n            var c = ObjectUtil.cloneObj(labelConfig);\r\n            c.text = flux.value;\r\n            label.config(c);\r\n        }\r\n        pathElement.data({\r\n            borderColor: flux.borderColor,\r\n            dasharray: \"10,10\",\r\n            border: flux.borderWidth,\r\n            borderOpacity: pathConfig.borderOpacity\r\n        });\r\n        if (arrow) {\r\n            setArrowProperty(\"link-arrow\" + self.id(), \"stroke\", flux.borderColor);\r\n        }\r\n        var path = g.select(\"path\");\r\n        if (path) {\r\n            ElementUtil.setElementStyles(path, {\r\n                \"stroke-dashoffset\": \"500\"\r\n            });\r\n            path.transition()\r\n                .duration(50000)\r\n                .ease(d3.easeLinear)\r\n                .style(\"stroke-dashoffset\", 0)\r\n                .on(\"end\", function () {\r\n                    startFlux(g);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 关闭流量监控\r\n     * @param g\r\n     */\r\n    function stopFlux(g) {\r\n        var path = g.select(\"path\");\r\n        if (path) {\r\n            path.interrupt();\r\n        }\r\n    }\r\n\r\n    function pluginLayout(plugin, d) {\r\n        var array = centerPointAndAngle();\r\n        // var config = self.config();\r\n        // var source = RegexUtil.replace(RegexUtil.dataRegex,config.source,self.data()),\r\n        //     target = RegexUtil.replace(RegexUtil.dataRegex,config.target,self.data());\r\n        // var angle = math.getPointAngle(source,target);\r\n        // console.log(\"==========angle\",angle)\r\n        var position = array[0];\r\n        var point = [position.x, position.y];\r\n        if (label) {\r\n            point = math.circumferencePoint(label.actualWidth(), 0, position);\r\n        }\r\n        plugin.transform(\"translate(\" + point + \")\");\r\n    }\r\n\r\n    //override\r\n    this.bindEvents = function (g) {\r\n        g.on('mouseover', function (d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.SHOW_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            mouseOverHandler();\r\n        });\r\n        g.on('mousemove', function (d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.UPDATE_TOOL_TIP, true, true, d);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n        });\r\n        g.on('mouseout', function (d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.HIDE_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            mouseOutHandler();\r\n        });\r\n        g.on('click', function (d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.LINK_CLICK, true, true, {\r\n                data: d\r\n            });\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            self.selected(!_selected);\r\n        });\r\n        self.dispatch.on(\"selectedChange.\" + self.nameSpace(), function (e) {\r\n            self.selectedChange(e.data.selected);\r\n        });\r\n    }\r\n\r\n    var pathFunction = null;\r\n    this.pathFunction = function (value) {\r\n        if (!arguments.length)\r\n            return pathFunction;\r\n        pathFunction = value;\r\n        return this;\r\n    };\r\n\r\n    function arrowForNoIE(pathElement, key, value) {\r\n        if (CommonUtil.isIE()) {\r\n            //            var pathNode = pathElement.svgElement.node();\r\n            //            var parentNode = pathNode.parentNode;\r\n            //            parentNode.removeChild(pathNode);\r\n            //            parentNode.appendChild(pathNode);\r\n        } else {\r\n            pathElement.svgElement.attr(key, value);\r\n        }\r\n    }\r\n\r\n    function setArrowProperty(id, key, value) {\r\n        var svg = d3.select(pathElement.svgElement.node().ownerSVGElement);\r\n        var defs = svg.select(\"svg defs\");\r\n        if (defs.node() === null) {\r\n            defs = svg.append(\"defs\");\r\n        }\r\n        var arrowMarkerPath = defs.select(\"marker#\" + id + \" path\");\r\n        if (arrowMarkerPath) {\r\n            arrowMarkerPath.attr(key, value);\r\n        }\r\n    }\r\n\r\n    function mouseOverHandler() {\r\n        var config = self.config();\r\n        var flux = RegexUtil.replace(RegexUtil.dataRegex, config.flux, self.data());\r\n        if (flux && flux !== config.flux)\r\n            return;\r\n        if (!self.selected()) {\r\n            var pathConfig = config.path;\r\n            var borderColor = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.overBorderColor, self.data());\r\n            var border = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.overBorderWidth, self.data());\r\n            pathElement.data({\r\n                borderColor: borderColor,\r\n                border: border,\r\n                dasharray: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.dasharray, self.data()),\r\n                borderOpacity: pathConfig.overBorderOpacity\r\n            });\r\n            if (arrow) {\r\n                setArrowProperty(\"link-arrow-over\", \"stroke\", borderColor);\r\n                setArrowProperty(\"link-arrow-over\", \"fill\", borderColor);\r\n                arrowForNoIE(pathElement, arrow.position === \"start\" ? \"marker-start\" : \"marker-end\", \"url(#link-arrow-over)\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function mouseOutHandler() {\r\n        var config = self.config();\r\n        var flux = RegexUtil.replace(RegexUtil.dataRegex, config.flux, self.data());\r\n        if (flux && flux !== config.flux)\r\n            return;\r\n        if (!self.selected()) {\r\n            var pathConfig = config.path;\r\n            var borderColor = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderColor, self.data());\r\n            var border = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderWidth, self.data());\r\n            pathElement.data({\r\n                borderColor: borderColor,\r\n                border: border,\r\n                dasharray: RegexUtil.replace(RegexUtil.dataRegex, pathConfig.dasharray, self.data()),\r\n                borderOpacity: pathConfig.borderOpacity\r\n            });\r\n            if (arrow) {\r\n                setArrowProperty(\"link-arrow-over\", \"stroke\", borderColor);\r\n                setArrowProperty(\"link-arrow-over\", \"fill\", borderColor);\r\n                arrowForNoIE(pathElement, arrow.position === \"start\" ? \"marker-start\" : \"marker-end\", \"url(#link-arrow\" + self.id() + \")\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPath() {\r\n        //是否启用箭头图标\r\n        if (isShowArrow) {\r\n            addArrow(arrow.position === \"start\");\r\n            //刷新连线与两端节点外交矩形交点\r\n            refreshIntersectPoints();\r\n        }\r\n        pathElement.path(path(true));\r\n        pathElement.render();\r\n    }\r\n\r\n    function addArrow(isStartArrow) {\r\n        if (isStartArrow) {\r\n            addStartArrow();\r\n        } else {\r\n            addEndArrow();\r\n        }\r\n    }\r\n\r\n    //refreshIntersectPoints\r\n    function refreshIntersectPoints() {\r\n        var linkPath = path();\r\n        calcLinkIntersectionWithBound(source, linkPath, true);\r\n        calcLinkIntersectionWithBound(target, linkPath, false);\r\n    }\r\n\r\n    var nodeBound, spNode, epNode;\r\n    var boundRect = {\r\n        x: 0,\r\n        y: 0,\r\n        width: 0,\r\n        height: 0\r\n    };\r\n\r\n    function calcLinkIntersectionWithBound(target, path2, isStart) {\r\n        var ins = target.ins;\r\n        var isComponent = ins instanceof BaseComponent;\r\n        if (ins) {\r\n            if (isComponent) {\r\n                boundRect.x = target.x + ins.x();\r\n                boundRect.y = target.y + ins.y();\r\n                boundRect.width = ins.width();\r\n                boundRect.height = ins.height();\r\n            } else {\r\n                var bBox = ins.mainPlugin.getBBox();\r\n                boundRect.x = target.x + bBox.x;\r\n                boundRect.y = target.y + bBox.y;\r\n                boundRect.width = bBox.width;\r\n                boundRect.height = bBox.height;\r\n            }\r\n        } else {\r\n            boundRect.x = d3.event.x;\r\n            boundRect.y = d3.event.y;\r\n            boundRect.width = 0;\r\n            boundRect.height = 0;\r\n        }\r\n        var w = Math.round(boundRect.width);\r\n        var h = Math.round(boundRect.height);\r\n        var x = Math.round(boundRect.x);\r\n        var y = Math.round(boundRect.y);\r\n        var d3Path = d3.path();\r\n        //根据配置数据选择不同的外接图形\r\n        if (ins && ins.boundType() === \"circle\") {\r\n            d3Path.arc(Math.round(x), Math.round(y), Math.round(Math.max(w / 2, h / 2)), 0, math.TWO_PI);\r\n        } else {\r\n            d3Path.rect(x, y, w, h);\r\n        }\r\n\r\n        //计算交点\r\n        var path1 = d3Path.toString();\r\n        //获取两条路径交点集合数组\r\n        var cps = Raphael.pathIntersection(path1, path2);\r\n        //取第一个点作为需要的交点\r\n        if (cps.length > 0) {\r\n            var cp = cps[0];\r\n            isStart ? (sourceCx = Math.round(cp.x)) : (targetCx = Math.round(cp.x));\r\n            isStart ? (sourceCy = Math.round(cp.y)) : (targetCy = Math.round(cp.y));\r\n        } else {\r\n            isStart ? (sourceCx = undefined) : (targetCx = undefined);\r\n            isStart ? (sourceCy = undefined) : (targetCy = undefined);\r\n        }\r\n\r\n        //        //画出外接矩形，测试时使用\r\n        //        if(!nodeBound) {\r\n        //        \tnodeBound = d3.select(document).select(\"g.topo-nodesContainer\").append(\"path\");\r\n        //        }\r\n        //        nodeBound.attr(\"d\", path1)\r\n        //            .attr(\"stroke\", \"red\").attr(\"stroke-opacity\", 0.75).attr(\"fill\", \"none\");\r\n        //            \r\n        //        //画出交点，测试时使用  \r\n        //        var pointNode;\r\n        //        if(isStart) {\r\n        //        \tif(!spNode) {\r\n        //        \t\tspNode = d3.select(document).select(\"g.topo-nodesContainer\").append(\"circle\");\r\n        //        \t}\r\n        //        \tpointNode = spNode;\r\n        //        } else {\r\n        //            if(!epNode) {\r\n        //                epNode = d3.select(document).select(\"g.topo-nodesContainer\").append(\"circle\");\r\n        //            }\r\n        //            pointNode = epNode;\r\n        //        }\r\n        //        if(cps.length > 0) {\r\n        //        \tpointNode.attr(\"cx\", cps[0].x).attr(\"cy\", cps[0].y)\r\n        //                .attr(\"r\", 2).attr(\"fill\", \"black\");\r\n        //        }\r\n    }\r\n\r\n    function addEndArrow() {\r\n        var config = self.config();\r\n        var svg = d3.select(pathElement.svgElement.node().ownerSVGElement);\r\n        var defs = svg.select(\"svg defs\");\r\n        if (defs.node() === null) {\r\n            defs = svg.append(\"defs\");\r\n        }\r\n        //arrow marker\r\n        var arrowMarker = defs.select(\"marker#link-arrow\" + self.id());\r\n        if (arrowMarker.node() === null) {\r\n            arrowMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow\" + self.id());\r\n            arrowMarker.append(\"path\");\r\n        }\r\n        arrowMarker\r\n            .attr(\"markerUnits\", \"strokeWidth\")\r\n            .attr(\"markerWidth\", \"4\")\r\n            .attr(\"markerHeight\", \"4\")\r\n            .attr(\"viewBox\", \"0 0 5 4\")\r\n            .attr(\"refX\", 4)\r\n            .attr(\"refY\", 2)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");\r\n\r\n        var pathConfig = config.path;\r\n        var stroke = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderColor, self.data());\r\n        arrowMarker.select(\"path\")\r\n            .attr(\"d\", \"M0,0 L4,2 L0,4 Z\")\r\n            .attr(\"fill\", stroke)\r\n            .attr(\"stroke\", stroke)\r\n            .attr(\"stroke-opacity\", pathConfig.borderOpacity);\r\n\r\n        arrowForNoIE(pathElement, \"marker-end\", \"url(#link-arrow\" + self.id() + \")\");\r\n\r\n        //over arrow marker\r\n        var arrowOverMarker = defs.select(\"marker#link-arrow-over\");\r\n        if (arrowOverMarker.node() === null) {\r\n            arrowOverMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow-over\");\r\n            arrowOverMarker.append(\"path\");\r\n        }\r\n        arrowOverMarker\r\n            .attr(\"markerUnits\", \"strokeWidth\")\r\n            .attr(\"markerWidth\", \"4\")\r\n            .attr(\"markerHeight\", \"4\")\r\n            .attr(\"viewBox\", \"0 0 5 4\")\r\n            .attr(\"refX\", 4)\r\n            .attr(\"refY\", 2)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");\r\n\r\n        var overStroke = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.overBorderColor, self.data());\r\n        arrowOverMarker.select(\"path\")\r\n            .attr(\"d\", \"M0,0 L4,2 L0,4 Z\")\r\n            .attr(\"fill\", overStroke)\r\n            .attr(\"stroke\", overStroke)\r\n            .attr(\"stroke-opacity\", pathConfig.overBorderOpacity);\r\n\r\n        //      cp = math.getCrossPointInRectAndSegment(x, y, w, h, source.x, source.y, target.x, target.y);\r\n    };\r\n\r\n    function addStartArrow() {\r\n        var config = self.config();\r\n        var svg = d3.select(_element.node().ownerSVGElement);\r\n        var defs = svg.select(\"svg defs\");\r\n        if (defs.node() === null) {\r\n            defs = svg.append(\"defs\");\r\n        }\r\n        var arrowMarker = defs.select(\"marker#link-arrow\" + self.id());\r\n        if (arrowMarker.node() === null) {\r\n            arrowMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow\" + self.id());\r\n            arrowMarker.append(\"path\");\r\n        }\r\n        arrowMarker\r\n            .attr(\"markerUnits\", \"strokeWidth\")\r\n            .attr(\"markerWidth\", \"4\")\r\n            .attr(\"markerHeight\", \"4\")\r\n            .attr(\"viewBox\", \"0 0 5 4\")\r\n            .attr(\"refX\", 0)\r\n            .attr(\"refY\", 2)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");\r\n\r\n        var pathConfig = self.config().path;\r\n        var stroke = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.borderColor, self.data());\r\n        arrowMarker.select(\"path\")\r\n            .attr(\"d\", \"M4,0 L0,2 L4,4 Z\")\r\n            .attr(\"fill\", stroke)\r\n            .attr(\"stroke\", stroke)\r\n            .attr(\"stroke-opacity\", pathConfig.borderOpacity);\r\n\r\n        arrowForNoIE(pathElement, \"marker-start\", \"url(#link-arrow\" + self.id() + \")\");\r\n\r\n        //over arrow marker\r\n        var arrowOverMarker = defs.select(\"marker#link-arrow-over\");\r\n        if (arrowOverMarker.node() === null) {\r\n            arrowOverMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow-over\");\r\n            arrowOverMarker.append(\"path\");\r\n        }\r\n        arrowOverMarker\r\n            .attr(\"markerUnits\", \"strokeWidth\")\r\n            .attr(\"markerWidth\", \"4\")\r\n            .attr(\"markerHeight\", \"4\")\r\n            .attr(\"viewBox\", \"0 0 5 4\")\r\n            .attr(\"refX\", 0)\r\n            .attr(\"refY\", 2)\r\n            .attr(\"orient\", \"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");\r\n\r\n        var overStroke = RegexUtil.replace(RegexUtil.dataRegex, pathConfig.overBorderColor, self.data());\r\n        arrowOverMarker.select(\"path\")\r\n            .attr(\"d\", \"M4,0 L0,2 L4,4 Z\")\r\n            .attr(\"fill\", overStroke)\r\n            .attr(\"stroke\", overStroke)\r\n            .attr(\"stroke-opacity\", pathConfig.overBorderOpacity);\r\n    }\r\n\r\n    function position() {\r\n        if (!label) {\r\n            return;\r\n        }\r\n        var array = centerPointAndAngle();\r\n        var position = array[0];\r\n        return \"translate(\" + [position.x, position.y] + \")\" + \" rotate(\" + array[1] + \")\";\r\n    }\r\n\r\n    var labelP;\r\n\r\n    function centerPointAndAngle() {\r\n        var config = self.config();\r\n        var angle, position;\r\n        //若显示箭头，则有交点时使用交点数据cx,cy，没有则使用中心点数据x,y\r\n        var sp = source;\r\n        var tp = target;\r\n        if (isShowArrow) {\r\n            !isNaN(sourceCx) && (spCache.x = sourceCx, spCache.y = sourceCy, sp = spCache);\r\n            !isNaN(targetCx) && (tpCache.x = targetCx, tpCache.y = targetCy, tp = tpCache);\r\n        }\r\n        if (config.math) {\r\n            switch (config.math) {\r\n                case 1:\r\n                    position = math.calculateCenter(sp, tp);\r\n                    break;\r\n                case 2:\r\n                    var num = parseInt(RegexUtil.replace(RegexUtil.dataRegex, config.num, self.data()));\r\n                    var array = math.parallelDeviationPoint(sp, tp, label.actualHeight() * fontSizeScale, num);\r\n                    position = math.calcBezCurvePointWithTime(array[1], source, target, 0.5);\r\n                    break;\r\n                case 3:\r\n                    position = math.calculateCenter(sp, tp);\r\n                    break;\r\n                case 4:\r\n                    position = math.radialCenterPoint(RegexUtil.replace(RegexUtil.dataRegex, config.source, self.data()), RegexUtil.replace(RegexUtil.dataRegex, config.target, self.data()));\r\n                    angle = math.radialLinkAngle(RegexUtil.replace(RegexUtil.dataRegex, config.source, self.data()), RegexUtil.replace(RegexUtil.dataRegex, config.target, self.data()));\r\n                    break;\r\n                case 5:\r\n                    var isVer = config.path ? config.path.isVer : false;\r\n                    position = math.calculateCenter(sp, tp);\r\n                    angle = isVer ? 0 : (sp.y < tp.y ? 90 : -90);\r\n                    break;\r\n            }\r\n        }\r\n        if (!position)\r\n            position = math.calculateCenter(sp, tp);\r\n        if (!angle)\r\n            angle = math.linkAngle(sp, tp);\r\n\r\n        //        //画出结果点，测试时使用  \r\n        //        if(!labelP) {\r\n        //            labelP = d3.select(document).select(\"g.topo-nodesContainer\").append(\"circle\");\r\n        //        }\r\n        //        labelP.attr(\"cx\", position.x).attr(\"cy\", position.y)\r\n        //            .attr(\"r\", 2).attr(\"fill\", \"#000\");\r\n\r\n        return [position, angle];\r\n    }\r\n\r\n    function path(isUseCp) {\r\n        var config = self.config();\r\n        //若设置使用交点，则有交点时使用交点数据cx,cy，没有则使用中心点数据x,y\r\n        var sp = source;\r\n        var tp = target;\r\n        if (isUseCp) {\r\n            !isNaN(sourceCx) && (spCache.x = sourceCx, spCache.y = sourceCy, sp = spCache);\r\n            !isNaN(targetCx) && (tpCache.x = targetCx, tpCache.y = targetCy, tp = tpCache);\r\n        }\r\n        if (config.math) {\r\n            switch (config.math) {\r\n                case 2:\r\n                    var num = RegexUtil.replace(RegexUtil.dataRegex, config.num, self.data());\r\n                    var offset = label ? (label.actualHeight() == 0 ? 12 : label.actualHeight()) : 12; //IE获取为0？；\r\n                    return math.quadraticCurveLinkPath(sp, tp, offset * 2, num);\r\n                case 3:\r\n                    return math.besselLinkPath(sp, tp, config.besselX);\r\n                case 4:\r\n                    return math.radialLinkPath(sp, tp, RegexUtil.replace(RegexUtil.dataRegex, config.target, self.data()));\r\n                case 5:\r\n                    var addSize = config.path ? config.path.addSize : undefined;\r\n                    var isVer = config.path ? config.path.isVer : false;\r\n                    return math.polylinePath(sp, tp, isVer, addSize);\r\n                case 1:\r\n                default:\r\n                    return math.baseLinkPath(sp, tp);\r\n            }\r\n        } else {\r\n            return pathFunction();\r\n        }\r\n    }\r\n};\r\n\r\nConfigLink.struct = function (ghca_charts) {\r\n    var Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    Plugin.struct(ghca_charts);\r\n    ConfigLink.prototype = Object.create(Plugin.prototype);\r\n    ConfigLink.prototype.constructor = ConfigLink;\r\n};\r\n\r\nmodule.exports = ConfigLink;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/links/configLink.js\n// module id = 77\n// module chunks = 0","var CurveLink = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLink = ghca_charts.view.elements.plugins.links.baseLink;\r\n    const Math = ghca_charts.view.util.math;\r\n\r\n    BaseLink.apply(this,arguments);\r\n    var self = this;\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"curveLink\";\r\n    }\r\n    //override\r\n    this.setPath = function(pathElement,d){\r\n    \tvar isShowArrow = self.isShowArrow();\r\n    \tif(isShowArrow) {\r\n            self.addArrow(pathElement);\r\n        }\r\n        var target = isShowArrow ? {x:d.target.cx, y:d.target.cy} : d.target;\r\n        // var ele = self.label.select(\"text\"),fontSize=16;\r\n        // console.info(ele);\r\n        // if(ele)fontSize = ele.node().getBBox().height;\r\n        fontSize = self.label ? self.label.actualHeight() : 12;\r\n        var array = Math.parallelDeviationPoint(d.source,target,fontSize*3,d.lineIndex);\r\n        var controlX = isShowArrow && d.hasOwnProperty(\"controlX\") ? d.controlX : array[1].x;\r\n        var controlY = isShowArrow && d.hasOwnProperty(\"controlY\") ? d.controlY : array[1].y;\r\n        var path  = d3.path();\r\n        path.moveTo(d.source.x,d.source.y);\r\n        path.quadraticCurveTo(controlX,controlY,target.x,target.y);\r\n        ElementUtil.setElementProperties(pathElement,{d:path.toString()});\r\n    }\r\n    //override\r\n    this.labelLayout = function(element,plugin,d){\r\n        var array = Math.parallelDeviationPoint(d.source,d.target,plugin.actualHeight()*1.5,d.lineIndex);\r\n        ElementUtil.setElementProperties(element,{transform:\"translate(\" + [array[1].x,array[1].y] + \")\"+\r\n        \" rotate(\" + Math.linkAngle(d.source,d.target) + \")\"});\r\n    }\r\n};\r\n\r\nCurveLink.struct = function(ghca_charts) {\r\n\tvar BaseLink = ghca_charts.view.elements.plugins.links.baseLink;\r\n\tBaseLink.struct(ghca_charts);\r\n    CurveLink.prototype = Object.create(BaseLink.prototype);\r\n    CurveLink.prototype.constructor = CurveLink;\r\n};\r\n\r\nmodule.exports = CurveLink;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/links/curveLink.js\n// module id = 78\n// module chunks = 0","var Link = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const math = ghca_charts.view.util.math;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const CommonUtil = ghca_charts.view.util.commonUtil;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const PathElement = ghca_charts.view.elements.pathElement;\r\n    const Label = ghca_charts.view.elements.plugins.label.label;\r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const ObjectUtil =  ghca_charts.view.util.objectUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const UUID = ghca_charts.view.util.UUIDUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    \r\n    var self = this;\r\n    var pathElement, label,labelContainer, arrow;\r\n    var isShowArrow = false;\r\n    var fontSizeScale=2;\r\n    var spCache = {}, tpCache = {};\r\n    var source, target;//连线起点终点数据对象\r\n    var sourceCx, sourceCy, targetCx, targetCy;//连线起点、终点交点坐标\r\n    self.dispatch = d3.dispatch(\"selectedChange\");\r\n    self.plugins = [];\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"link\";\r\n    }\r\n    self.config({\r\n        source:\"{source}\",\r\n        target:\"{target}\",\r\n        math:2,\r\n        num:6,\r\n        besselX:true,\r\n        path:{\r\n            dasharray:\"5,5\",\r\n            borderWidth:2,\r\n            borderColor:\"{color}\",\r\n            borderOpacity:.6,\r\n            overDasharray:\"5,5\",\r\n            overBorderWidth:10,\r\n            overBorderColor:\"red\",\r\n            overBorderOpacity:.8\r\n        },\r\n        label:{\r\n            clazz:\"label\",\r\n            config:{\r\n                text:\"{name}:{value}\",\r\n                maxWidth:60,\r\n                backGroundColor:\"green\",\r\n                backGroundOpacity:.3,\r\n                borderRadius:4,\r\n                padding:4,\r\n                fontColor:\"0x000000\",\r\n                fontFamily:\"宋体\",\r\n                fontSize:12  \r\n            }\r\n        }\r\n    });\r\n    \r\n    // ------------------------------\r\n    // id\r\n    // ------------------------------\r\n\r\n    var id = UUID.generateUUID();\r\n    this.id = function(value) {\r\n        return id;\r\n    };\r\n    \r\n    var _selected = false;\r\n    this.selected = function(_p){\r\n        if(!arguments.length)return _selected;\r\n        _selected = _p;\r\n        self.dispatch.call(\"selectedChange\",this , new BaseEvent(self,{selected:_selected}));\r\n        return this;\r\n    }\r\n    this.selectedChange = function(seleced){\r\n        var config = self.config();\r\n        var pathConfig = config.path;\r\n        if(seleced){\r\n            pathElement.data({\r\n                borderColor:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.overBorderColor,self.data()),\r\n                border:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.overBorderWidth,self.data()),\r\n                dasharray:pathConfig.overDasharray,\r\n                borderOpacity:pathConfig.overBorderOpacity\r\n            });\r\n        }else{\r\n            pathElement.data({\r\n                borderColor:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,self.data()),\r\n                border:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderWidth,self.data()),\r\n                dasharray:pathConfig.dasharray,\r\n                borderOpacity:pathConfig.borderOpacity\r\n            });\r\n        }\r\n    }\r\n    var pathFunc;\r\n    this.pathFunc = function(func){\r\n        if(!arguments.length)return pathFunc;\r\n        pathFunc = func;\r\n        return this;\r\n    }\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"link\";\r\n    }\r\n\r\n    //override\r\n    this.update = function(g) {\r\n    \tvar config = self.config();\r\n    \tvar pathConfig = config.path;\r\n        arrow = pathConfig.arrow;\r\n    \tvar data = self.data();\r\n    \tsource = RegexUtil.replace(RegexUtil.dataRegex,config.source,data);\r\n        target = RegexUtil.replace(RegexUtil.dataRegex,config.target,data);\r\n        pathElement.borderColor(RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,data));\r\n        pathElement.border(pathConfig.borderWidth);\r\n        pathElement.dasharray(pathConfig.dasharray);\r\n        pathElement.borderOpacity(pathConfig.borderOpacity);\r\n        pathElement.data({borderColor:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,data),\r\n            border:pathConfig.borderWidth,dasharray:pathConfig.dasharray\r\n            ,borderOpacity:pathConfig.borderOpacity});\r\n        isShowArrow = arrow ? arrow.visible === true : false;\r\n        var labelConfig = config.label ? config.label.config : null;\r\n        if(labelConfig) {\r\n            if(labelContainer) {\r\n                labelContainer.attr(\"transform\",position());\r\n                if(label) {\r\n                    label.config(labelConfig);\r\n                    label.render();\r\n                    label.transform(\"translate(\" + [Math.round(-label.actualWidth()/2),Math.round(-label.actualHeight()/2)] + \")\");\r\n                }\r\n            }\r\n        }\r\n        setPath();\r\n        self.plugins.forEach(function(d,i){\r\n            d.render();\r\n            pluginLayout(d,d);\r\n        });\r\n    }\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tg.attr(\"style\",\"cursor:pointer;\");\r\n        var config = self.config();\r\n        source = RegexUtil.replace(RegexUtil.dataRegex,config.source,self.data());\r\n        target = RegexUtil.replace(RegexUtil.dataRegex,config.target,self.data());\r\n        var pathConfig = config.path;\r\n        arrow = pathConfig.arrow;\r\n        isShowArrow = arrow ? arrow.visible === true : false;\r\n        pathElement = new PathElement(g,{\r\n            borderColor:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,self.data()),\r\n            border:RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderWidth,self.data()),\r\n            dasharray:pathConfig.dasharray,\r\n            borderOpacity:pathConfig.borderOpacity\r\n        });\r\n        var labelConfig = config.label ? config.label.config : null;\r\n        if(labelConfig) {\r\n\t        labelContainer = g.append(\"svg:g\");\r\n            label = new Label(labelContainer,self.data());\r\n            label.config(labelConfig);\r\n        }\r\n\r\n        if(label){\r\n            label.render();\r\n            label.transform(\"translate(\" + [Math.round(-label.actualWidth()/2),Math.round(-label.actualHeight()/2)] + \")\");\r\n            labelContainer.attr(\"transform\",position());\r\n        }\r\n        var plugins = config.plugins;\r\n        if(plugins){\r\n            plugins.forEach(function(d,i){\r\n                if(d.render==undefined || RegexUtil.replace(RegexUtil.dataRegex,d.render,self.data())==\"true\"){\r\n                    var plugin = ClassFactory.newPluginInstance(d.clazz,[g,self.data()]);\r\n                    plugin.config(d.config);\r\n                    plugin.render();\r\n                    self.plugins.push(plugin);\r\n                    pluginLayout(plugin,d);\r\n                }\r\n            });\r\n        }\r\n        setPath();\r\n    }\r\n\r\n    function pluginLayout(plugin,d){\r\n        var array = centerPointAndAngle();\r\n        // var config = self.config();\r\n        // var source = RegexUtil.replace(RegexUtil.dataRegex,config.source,self.data()),\r\n        //     target = RegexUtil.replace(RegexUtil.dataRegex,config.target,self.data());\r\n        // var angle = math.getPointAngle(source,target);\r\n        // console.log(\"==========angle\",angle)\r\n        var position = array[0];\r\n        var point = [position.x,position.y];\r\n        if(label){\r\n            point = math.circumferencePoint(label.actualWidth(),0,position);\r\n        }\r\n        plugin.transform(\"translate(\" + point + \")\");\r\n    }\r\n\r\n    //override\r\n    this.bindEvents = function(g){\r\n        g.on('mouseover', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.SHOW_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            mouseOverHandler();\r\n        });\r\n        g.on('mousemove', function(d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.UPDATE_TOOL_TIP, true, true, d);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n        });\r\n        g.on('mouseout', function(d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.HIDE_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            mouseOutHandler();\r\n        });\r\n        g.on('click', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.LINK_CLICK, true, true, {data:d});\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            self.selected(!_selected);\r\n        });\r\n        self.dispatch.on(\"selectedChange.\"+self.nameSpace(),function(e){\r\n            self.selectedChange(e.data.selected);\r\n        });\r\n    }\r\n    \r\n    var pathFunction = null;\r\n    this.pathFunction = function(value) {\r\n        if (!arguments.length)\r\n            return pathFunction;\r\n        pathFunction = value;\r\n        return this;\r\n    };\r\n    \r\n    function arrowForNoIE(pathElement, key, value) {\r\n        if(CommonUtil.isIE()) {\r\n//            var pathNode = pathElement.svgElement.node();\r\n//            var parentNode = pathNode.parentNode;\r\n//            parentNode.removeChild(pathNode);\r\n//            parentNode.appendChild(pathNode);\r\n        } else {\r\n        \tpathElement.svgElement.attr(key, value);\r\n        }\r\n    }\r\n    \r\n    function setArrowProperty(id, key, value) {\r\n    \tvar svg = d3.select(pathElement.svgElement.node().ownerSVGElement);\r\n        var defs = svg.select(\"svg defs\"); \r\n        if(defs.node() === null) {\r\n            defs = svg.append(\"defs\");\r\n        }\r\n        var arrowMarkerPath = defs.select(\"marker#\" + id + \" path\");\r\n        if(arrowMarkerPath) {\r\n            arrowMarkerPath.attr(key, value);\r\n        }\r\n    }\r\n\r\n    function mouseOverHandler(){\r\n        var config = self.config();\r\n        var flux = RegexUtil.replace(RegexUtil.dataRegex,config.flux,self.data());\r\n        if(flux && flux !== config.flux)\r\n            return;\r\n        if(!self.selected()) {\r\n            var pathConfig = config.path;\r\n            var borderColor = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.overBorderColor,self.data());\r\n            var border = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.overBorderWidth,self.data());\r\n        \tpathElement.data({\r\n        \t   borderColor:borderColor,\r\n        \t   border:border,\r\n        \t   dasharray:pathConfig.overDasharray,\r\n        \t   borderOpacity:pathConfig.overBorderOpacity\r\n    \t    });\r\n            if(arrow) {\r\n            \tsetArrowProperty(\"link-arrow-over\", \"stroke\", borderColor);\r\n            \tsetArrowProperty(\"link-arrow-over\", \"fill\", borderColor);\r\n                arrowForNoIE(pathElement, arrow.position === \"start\" ? \"marker-start\" : \"marker-end\", isShowArrow ? \"url(#link-arrow-over)\" : null);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function mouseOutHandler(){\r\n        var config = self.config();\r\n        var flux = RegexUtil.replace(RegexUtil.dataRegex,config.flux,self.data());\r\n        if(flux && flux !== config.flux)\r\n            return;\r\n        if(!self.selected()) {\r\n            var pathConfig = config.path;\r\n        \tvar borderColor = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,self.data());\r\n        \tvar border = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderWidth,self.data());\r\n            pathElement.data({\r\n                borderColor:borderColor,\r\n                border:border,\r\n                dasharray:pathConfig.dasharray,\r\n                borderOpacity:pathConfig.borderOpacity\r\n            });\r\n            if(arrow) {\r\n            \tsetArrowProperty(\"link-arrow-over\", \"stroke\", borderColor);\r\n            \tsetArrowProperty(\"link-arrow-over\", \"fill\", borderColor);\r\n                arrowForNoIE(pathElement, arrow.position === \"start\" ? \"marker-start\" : \"marker-end\", isShowArrow ? \"url(#link-arrow\" + self.id() + \")\" : null);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPath() {\r\n    \t//当有箭头配置时，检测是否启用箭头\r\n    \tif(arrow) {\r\n    \t\t//是否启用箭头图标\r\n        \tif(isShowArrow) {\r\n        \t\taddArrow(arrow.position === \"start\");\r\n        \t} else {\r\n        \t\tarrowForNoIE(pathElement, arrow.position === \"start\" ? \"marker-start\" : \"marker-end\", null);\r\n        \t}\r\n        \t//刷新连线与两端节点外交矩形交点\r\n            refreshIntersectPoints();\r\n    \t}\r\n        \r\n        pathElement.path(path(true));\r\n        pathElement.render();\r\n    }\r\n    \r\n    function addArrow(isStartArrow) {\r\n    \tif(isStartArrow) {\r\n    \t\taddStartArrow();\r\n    \t} else {\r\n    \t\taddEndArrow();\r\n    \t}\r\n    }\r\n    \r\n    //refreshIntersectPoints\r\n    function refreshIntersectPoints() {\r\n        var linkPath = path();\r\n        calcLinkIntersectionWithBound(source, linkPath, true);\r\n        calcLinkIntersectionWithBound(target, linkPath, false);\r\n    }\r\n    \r\n    var nodeBound, spNode, epNode;\r\n    var boundRect = {x:0, y:0, width:0, height:0};\r\n    var is2DLib;\r\n    try {\r\n    \tis2DLib = Intersection ? true : false;\r\n    } catch(e) {\r\n    \tis2DLib = false;\r\n    }\r\n    if(is2DLib) {\r\n    \tvar pathNode1 = document.createElement(\"path\");\r\n        pathNode1.setAttribute(\"d\", \"\");\r\n        var pathNode2 = document.createElement(\"path\");\r\n        pathNode2.setAttribute(\"d\", \"\");\r\n        var pathShape1 = new Path(pathNode1);\r\n        var pathShape2 = new Path(pathNode2);\r\n    }\r\n    function calcLinkIntersectionWithBound(target, path2, isStart) {\r\n    \tvar ins = target.ins;\r\n        var isComponent = ins instanceof BaseComponent;\r\n        if(ins) {\r\n        \tif(isComponent) {\r\n        \t\tboundRect.x        = target.x + ins.x();\r\n                boundRect.y        = target.y + ins.y();\r\n                boundRect.width    = ins.width();\r\n                boundRect.height   = ins.height();\r\n        \t} else {\r\n        \t\tvar bBox = ins.mainPlugin.getBBox();\r\n        \t\tboundRect.x        = target.x + bBox.x;\r\n                boundRect.y        = target.y + bBox.y;\r\n                boundRect.width    = bBox.width;\r\n                boundRect.height   = bBox.height;\r\n        \t}\r\n        } else {\r\n        \tboundRect.x        = d3.event.x;\r\n        \tboundRect.y        = d3.event.y;\r\n        \tboundRect.width    = 0;\r\n        \tboundRect.height   = 0;\r\n        }\r\n        var w = Math.round(boundRect.width);\r\n        var h = Math.round(boundRect.height);\r\n        var x = Math.round(boundRect.x);\r\n        var y = Math.round(boundRect.y);\r\n        var d3Path = d3.path();\r\n        //根据配置数据选择不同的外接图形\r\n        if(ins.boundType() === \"circle\") {\r\n    \t\td3Path.arc(Math.round(x+w/2), Math.round(y+h/2), Math.round(Math.max(w/2, h/2)), 0, math.TWO_PI); \r\n        } else {\r\n        \tif(is2DLib) {\r\n        \t\td3Path.moveTo(x, y);\r\n                d3Path.lineTo(x+w, y);\r\n                d3Path.lineTo(x+w, y+h);\r\n                d3Path.lineTo(x, y+h);\r\n                d3Path.lineTo(x, y);\r\n        \t} else {\r\n        \t\td3Path.rect(x, y, w, h);\r\n        \t}\r\n        }\r\n        \r\n        //计算交点\r\n        var path1 = d3Path.toString();\r\n        //获取两条路径首个交点\r\n        var cps;\r\n        if(is2DLib) {\r\n        \tpathShape1.parseData(path1);\r\n            pathShape2.parseData(path2);\r\n            cps = Intersection.intersectPathShape(pathShape1, pathShape2, true).points;//效率较高\r\n        } else {\r\n        \tcps = Raphael.getPathFirstIntersection(path1, path2);//效率较低\r\n        }\r\n        \r\n        //取第一个点作为需要的交点\r\n        if(ObjectUtil.isArray(cps) && cps.length > 0) {\r\n        \tvar cp = cps[0];\r\n        \tisStart ? (sourceCx = Math.round(cp.x)) : (targetCx = Math.round(cp.x)); \r\n        \tisStart ? (sourceCy = Math.round(cp.y)) : (targetCy = Math.round(cp.y)); \r\n        } else {\r\n            isStart ? (sourceCx = undefined) : (targetCx = undefined); \r\n            isStart ? (sourceCy = undefined) : (targetCy = undefined);\r\n        }\r\n        \r\n//        //画出外接矩形，测试时使用\r\n//        if(!nodeBound) {\r\n//        \tnodeBound = d3.select(document).select(\"g.topo-nodesContainer\").append(\"path\");\r\n//        }\r\n//        nodeBound.attr(\"d\", path1)\r\n//            .attr(\"stroke\", \"red\").attr(\"stroke-opacity\", 0.75).attr(\"fill\", \"none\");\r\n//            \r\n//        //画出交点，测试时使用  \r\n//        var pointNode;\r\n//        if(isStart) {\r\n//        \tif(!spNode) {\r\n//        \t\tspNode = d3.select(document).select(\"g.topo-nodesContainer\").append(\"circle\");\r\n//        \t}\r\n//        \tpointNode = spNode;\r\n//        } else {\r\n//            if(!epNode) {\r\n//                epNode = d3.select(document).select(\"g.topo-nodesContainer\").append(\"circle\");\r\n//            }\r\n//            pointNode = epNode;\r\n//        }\r\n//        if(cps.length > 0) {\r\n//        \tpointNode.attr(\"cx\", cps[0].x).attr(\"cy\", cps[0].y)\r\n//                .attr(\"r\", 2).attr(\"fill\", \"black\");\r\n//        }\r\n    }\r\n    \r\n    function addEndArrow() {\r\n    \tvar config = self.config();\r\n        var svg = d3.select(pathElement.svgElement.node().ownerSVGElement);\r\n        var defs = svg.select(\"svg defs\"); \r\n        if(defs.node() === null) {\r\n            defs = svg.append(\"defs\");\r\n        }\r\n        //arrow marker\r\n        var arrowMarker = defs.select(\"marker#link-arrow\" + self.id());\r\n        if(arrowMarker.node() === null) {\r\n            arrowMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow\" + self.id());  \r\n            arrowMarker.append(\"path\");\r\n        }\r\n        arrowMarker\r\n            .attr(\"markerUnits\",\"strokeWidth\")  \r\n            .attr(\"markerWidth\",\"4\")  \r\n            .attr(\"markerHeight\",\"4\")  \r\n            .attr(\"viewBox\",\"0 0 5 4\")   \r\n            .attr(\"refX\",4)  \r\n            .attr(\"refY\",2)  \r\n            .attr(\"orient\",\"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");  \r\n              \r\n        var pathConfig = config.path;\r\n        var stroke = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,self.data());\r\n        arrowMarker.select(\"path\") \r\n            .attr(\"d\", \"M0,0 L4,2 L0,4 Z\")  \r\n            .attr(\"fill\", stroke)\r\n            .attr(\"stroke\", stroke)\r\n            .attr(\"stroke-opacity\", pathConfig.borderOpacity);\r\n            \r\n        arrowForNoIE(pathElement, \"marker-end\", \"url(#link-arrow\"+self.id()+\")\");\r\n        \r\n        //over arrow marker\r\n        var arrowOverMarker = defs.select(\"marker#link-arrow-over\");\r\n        if(arrowOverMarker.node() === null) {\r\n            arrowOverMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow-over\");  \r\n            arrowOverMarker.append(\"path\");\r\n        }\r\n        arrowOverMarker\r\n            .attr(\"markerUnits\",\"strokeWidth\")  \r\n            .attr(\"markerWidth\",\"4\")  \r\n            .attr(\"markerHeight\",\"4\")  \r\n            .attr(\"viewBox\",\"0 0 5 4\")   \r\n            .attr(\"refX\",4)  \r\n            .attr(\"refY\",2)  \r\n            .attr(\"orient\",\"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");  \r\n         \r\n        var overStroke = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.overBorderColor,self.data());\r\n        arrowOverMarker.select(\"path\") \r\n            .attr(\"d\", \"M0,0 L4,2 L0,4 Z\")  \r\n            .attr(\"fill\", overStroke)\r\n            .attr(\"stroke\", overStroke)\r\n            .attr(\"stroke-opacity\", pathConfig.overBorderOpacity);\r\n    };\r\n    \r\n    function addStartArrow() {\r\n    \tvar config = self.config();\r\n    \tvar svg = d3.select(_element.node().ownerSVGElement);\r\n        var defs = svg.select(\"svg defs\");\r\n        if(defs.node() === null) {\r\n            defs = svg.append(\"defs\");\r\n        }\r\n        var arrowMarker = defs.select(\"marker#link-arrow\" + self.id());\r\n        if(arrowMarker.node() === null) {\r\n        \tarrowMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow\" + self.id());  \r\n            arrowMarker.append(\"path\");\r\n        }\r\n        arrowMarker\r\n            .attr(\"markerUnits\",\"strokeWidth\")  \r\n            .attr(\"markerWidth\",\"4\")  \r\n            .attr(\"markerHeight\",\"4\")  \r\n            .attr(\"viewBox\",\"0 0 5 4\")   \r\n            .attr(\"refX\",0)  \r\n            .attr(\"refY\",2)  \r\n            .attr(\"orient\",\"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");  \r\n              \r\n        var pathConfig = self.config().path;\r\n        var stroke = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.borderColor,self.data());\r\n        arrowMarker.select(\"path\")  \r\n            .attr(\"d\", \"M4,0 L0,2 L4,4 Z\")  \r\n            .attr(\"fill\", stroke)\r\n            .attr(\"stroke\", stroke)\r\n            .attr(\"stroke-opacity\", pathConfig.borderOpacity);\r\n                \r\n        arrowForNoIE(pathElement, \"marker-start\", \"url(#link-arrow\" + self.id() + \")\");\r\n        \r\n        //over arrow marker\r\n        var arrowOverMarker = defs.select(\"marker#link-arrow-over\");\r\n        if(arrowOverMarker.node() === null) {\r\n            arrowOverMarker = defs.append(\"marker\").attr(\"id\", \"link-arrow-over\");  \r\n            arrowOverMarker.append(\"path\");\r\n        }\r\n        arrowOverMarker\r\n            .attr(\"markerUnits\",\"strokeWidth\")  \r\n            .attr(\"markerWidth\",\"4\")  \r\n            .attr(\"markerHeight\",\"4\")  \r\n            .attr(\"viewBox\",\"0 0 5 4\")   \r\n            .attr(\"refX\",0)  \r\n            .attr(\"refY\",2)  \r\n            .attr(\"orient\",\"auto\")\r\n            .style(\"display\", isShowArrow ? \"block\" : \"none\");  \r\n        \r\n        var overStroke = RegexUtil.replace(RegexUtil.dataRegex,pathConfig.overBorderColor,self.data());\r\n        arrowOverMarker.select(\"path\") \r\n            .attr(\"d\", \"M4,0 L0,2 L4,4 Z\") \r\n            .attr(\"fill\", overStroke)\r\n            .attr(\"stroke\", overStroke)\r\n            .attr(\"stroke-opacity\", pathConfig.overBorderOpacity);\r\n    }\r\n\r\n    function position() {\r\n    \tif(!label) {\r\n    \t\treturn;\r\n    \t}\r\n        var array = centerPointAndAngle();\r\n    \tvar position = array[0];\r\n        return \"translate(\" + [Math.round(position.x),Math.round(position.y)] + \")\"+\" rotate(\" + array[1] + \")\";\r\n    }\r\n\r\n    var labelP;\r\n    function centerPointAndAngle() {\r\n        var config = self.config();\r\n        var angle, position;\r\n        //若显示箭头，则有交点时使用交点数据cx,cy，没有则使用中心点数据x,y\r\n        var sp = source;\r\n        var tp = target;\r\n        if(isShowArrow) {\r\n            !isNaN(sourceCx) && (spCache.x = sourceCx, spCache.y = sourceCy, sp = spCache);\r\n            !isNaN(targetCx) && (tpCache.x = targetCx, tpCache.y = targetCy, tp = tpCache);\r\n        }\r\n        if(config.math){\r\n            switch(config.math){\r\n                case 1:\r\n                    position = math.calculateCenter(sp,tp);\r\n                    break;\r\n                case 2:\r\n                    var num = parseInt(RegexUtil.replace(RegexUtil.dataRegex,config.num,self.data()));\r\n                    var array = math.parallelDeviationPoint(sp,tp,label.actualHeight()*fontSizeScale,num);    \r\n                    position =  math.calcBezCurvePointWithTime(array[1],source,target,0.5);\r\n                    break;\r\n                case 3:\r\n                    position = math.calculateCenter(sp,tp);\r\n                    break;\r\n                case 4:\r\n                    position = math.radialCenterPoint(RegexUtil.replace(RegexUtil.dataRegex,config.source,self.data()),RegexUtil.replace(RegexUtil.dataRegex,config.target,self.data()));\r\n                    angle = math.radialLinkAngle(RegexUtil.replace(RegexUtil.dataRegex,config.source,self.data()),RegexUtil.replace(RegexUtil.dataRegex,config.target,self.data()));\r\n                    break;\r\n                case 5:\r\n                    var isVer = config.path ? config.path.isVer : false;\r\n                    position = math.calculateCenter(sp,tp);\r\n                    angle = isVer ? 0 : (sp.y < tp.y ? 90 : -90);\r\n                    break;\r\n            }\r\n        }\r\n        if(!position)\r\n           position = math.calculateCenter(sp,tp);\r\n        if(!angle)\r\n           angle = math.linkAngle(sp,tp);\r\n           \r\n//        //画出结果点，测试时使用  \r\n//        if(!labelP) {\r\n//            labelP = d3.select(document).select(\"g.topo-nodesContainer\").append(\"circle\");\r\n//        }\r\n//        labelP.attr(\"cx\", position.x).attr(\"cy\", position.y)\r\n//            .attr(\"r\", 2).attr(\"fill\", \"#000\");\r\n            \r\n        return [position,angle];\r\n    }\r\n\r\n    function path(isUseCp) {\r\n        var config = self.config();\r\n        //若设置使用交点，则有交点时使用交点数据cx,cy，没有则使用中心点数据x,y\r\n        var sp = source;\r\n        var tp = target;\r\n        if(isUseCp) {\r\n        \t!isNaN(sourceCx) && (spCache.x = sourceCx, spCache.y = sourceCy, sp = spCache);\r\n            !isNaN(targetCx) && (tpCache.x = targetCx, tpCache.y = targetCy, tp = tpCache);\r\n        }\r\n        if(config.math) {\r\n            switch(config.math) {\r\n                case 2:\r\n                    var num = RegexUtil.replace(RegexUtil.dataRegex,config.num,self.data());\r\n                    var offset = label ? (label.actualHeight()==0?12:label.actualHeight()) : 12;//IE获取为0？；\r\n                    return math.quadraticCurveLinkPath(sp,tp,offset*2,num);\r\n                case 3:\r\n                    return math.besselLinkPath(sp,tp,config.besselX);\r\n                case 4:\r\n                    return math.radialLinkPath(sp,tp,RegexUtil.replace(RegexUtil.dataRegex,config.target,self.data()));\r\n                case 5:\r\n                    var addSize = config.path ? config.path.addSize : undefined;\r\n                    var isVer = config.path ? config.path.isVer : false;\r\n                    return math.polylinePath(sp,tp,isVer,addSize);\r\n                case 1:\r\n                default:\r\n                    return math.baseLinkPath(sp,tp);\r\n            }\r\n        } else {\r\n        \treturn pathFunction();\r\n        }\r\n    }\r\n};\r\n\r\nLink.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    Link.prototype = Object.create(Plugin.prototype);\r\n    Link.prototype.constructor = Link;\r\n};\r\n\r\nmodule.exports = Link;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/links/link.js\n// module id = 79\n// module chunks = 0","var CurveLink = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLink = ghca_charts.view.elements.plugins.links.baseLink;\r\n    const Math = ghca_charts.view.util.math;\r\n\r\n    BaseLink.apply(this,arguments);\r\n    var self = this;\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"parallelLink\";\r\n    }\r\n    //override\r\n    this.setPath = function(pathElement,d){\r\n    \tif(self.isShowArrow()) {\r\n            self.addArrow(pathElement);\r\n        }\r\n        var target = self.isShowArrow() ? {x:d.target.cx, y:d.target.cy} : d.target;\r\n//        var ele = _element.select(\"text\"),fontSize=16;\r\n//        if(ele)fontSize = ele.node().getBBox().height;\r\n        fontSize = self.label ? self.label.actualHeight() : 12;\r\n        var array = Math.parallelDeviationPoint(d.source,target,fontSize*1.5,d.lineIndex);\r\n        var path  = d3.path();\r\n        var sx = d.source.x, sy = d.source.y, ex = target.x, ey = target.y, x = array[0].x, y = array[0].y;\r\n        path.moveTo(sx,sy);\r\n        //这里这样比较是因为若xy都相同，则这条线是从自身画到自身，若显示箭头，则箭头方向错误，所以当自身画到自身时，则省略掉这段线段\r\n        if(sx !== x || sy !== y) {\r\n        \tpath.lineTo(x,y);\r\n        }\r\n        x = array[2].x, y = array[2].y;\r\n        if(ex !== x || ey !== y) {\r\n            path.lineTo(x,y);\r\n        }\r\n        path.lineTo(ex,ey);\r\n        ElementUtil.setElementProperties(pathElement,{d:path.toString()});\r\n    }\r\n    //override\r\n    this.labelLayout = function(element,plugin,d){\r\n        var array = Math.parallelDeviationPoint(d.source,d.target,plugin.actualHeight()*1.5,d.lineIndex);\r\n        ElementUtil.setElementProperties(element,{transform:\"translate(\" + [array[1].x,array[1].y] + \")\"+\r\n        \" rotate(\" + Math.linkAngle(d.source,d.target) + \")\"});\r\n    }\r\n};\r\n\r\nCurveLink.struct = function(ghca_charts) {\r\n\tvar BaseLink = ghca_charts.view.elements.plugins.links.baseLink;\r\n\tBaseLink.struct(ghca_charts);\r\n    CurveLink.prototype = Object.create(BaseLink.prototype);\r\n    CurveLink.prototype.constructor = CurveLink;\r\n};\r\n\r\nmodule.exports = CurveLink;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/links/parallelLink.js\n// module id = 80\n// module chunks = 0","var SankeyLink = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLink = ghca_charts.view.elements.plugins.links.baseLink;\r\n    const MathUtil = ghca_charts.view.util.math;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    BaseLink.apply(this,arguments);\r\n    var self = this;\r\n    var superDrawPluginFunction = this.drawPlugin;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // path\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 连线路径描述字符串，比如\"M0,0 L1,1\"\r\n     */\r\n    var path = null;\r\n    this.path = function(value) {\r\n        if (!arguments.length)\r\n            return path;\r\n        path = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // pathFunction\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 连线路径生成方法，若注册该方法，则按该方法返回的内容渲染path，忽略path属性\r\n     */\r\n    var pathFunction = null;\r\n    this.pathFunction = function(value) {\r\n        if (!arguments.length)\r\n            return pathFunction;\r\n        pathFunction = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // sort\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 连线排序规则方法，若注册该方法，则按该方法对连线进行排序\r\n     */\r\n    var sortFunction = null;\r\n    this.sortFunction = function(value) {\r\n        if (!arguments.length)\r\n            return sortFunction;\r\n        sortFunction = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // title\r\n    // ------------------------------\r\n\r\n    /**\r\n     * path元素的title内容字符串\r\n     */\r\n    var title = null;\r\n    this.title = function(value) {\r\n        if (!arguments.length)\r\n            return title;\r\n        title = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // titleFunction\r\n    // ------------------------------\r\n\r\n    /**\r\n     * title生成规则方法，若注册该方法，则按该方法返回的内容显示title，忽略title属性\r\n     */\r\n    var titleFunction = null;\r\n    this.titleFunction = function(value) {\r\n        if (!arguments.length)\r\n            return titleFunction;\r\n        titleFunction = value;\r\n        return this;\r\n    };\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"sankeyLink\";\r\n    }\r\n     //override\r\n    this.selectedChange = function(seleced){\r\n\r\n    }\r\n    //override\r\n    this.mouseOverHandler = function(){\r\n        self.mainPathElement.attr('stroke-opacity', 0.6);\r\n    };\r\n    //override\r\n    this.mouseOutHandler = function(){\r\n        self.mainPathElement.attr('stroke-opacity', 0.3);\r\n    };\r\n\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        superDrawPluginFunction(g);\r\n    }\r\n    //override\r\n    this.setPath = function(pathElement,data){\r\n        self.refreshData(_data.data.clazzProperties);\r\n        var path = self.pathFunction() ? self.pathFunction()() : self.path();\r\n    \tvar duration = self.animation() ? 300 : 0;\r\n    \tpathElement.attr(\"visibility\", \"hidden\");\r\n    \tpathElement.transition().duration(duration).ease(d3.easeLinear)\r\n    \t    .on(\"start\", function(d){\r\n                pathElement.attr(\"visibility\", \"visible\");\r\n            })\r\n            .delay(function(d){\r\n                return d.source.level * (duration - 10);\r\n            })\r\n            .attrTween(\"d\", function (d) {\r\n                var interpolate = d3.interpolate({target:{x:d.source.x + 10}}, d);\r\n                return function (t) {\r\n                    return path(interpolate(t));\r\n                };\r\n            })\r\n            .attrTween(\"stroke-width\", function (d) {\r\n                var interpolate = d3.interpolate({dy:Math.max(1, d.dy)}, d);\r\n                return function (t) {\r\n                    return interpolate(t).dy;\r\n                };\r\n            });\r\n        if(self.sortFunction()) {\r\n            pathElement.sort(self.sortFunction());\r\n        }\r\n        pathElement.selectAll(\"path-title\").remove();\r\n        if(self.titleFunction()) {\r\n            pathElement.append(\"title\").attr(\"class\", \"path-title\").text(self.titleFunction());\r\n        } else if(self.title()) {\r\n            pathElement.append(\"title\").attr(\"class\", \"path-title\").text(formatTitleFn);\r\n        }\r\n        ElementUtil.setElementProperties(pathElement, _data.data.useProperties);\r\n    }\r\n    //override\r\n    this.labelLayout = function(element,plugin,data){\r\n        var position = MathUtil.calculateCenter(data.source, data.target);\r\n        ElementUtil.setElementProperties(element,{transform:\"translate(\" + [position.x,position.y] + \")\"});\r\n    }\r\n    \r\n    /**\r\n     * 刷新传入配置数据到相应参数的方法\r\n     * @param data 配置数据\r\n     */\r\n    this.refreshData = function(data) {\r\n        if(data) {\r\n           for(var key in data) {\r\n                if(this.hasOwnProperty(key)) {\r\n                    this[key](data[key]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 替换title中的特殊字符串内容，比如{#d.name#}替换为渲染数据中的name属性的值,{##}中的内容是可执行的js\r\n     */\r\n     var formatTitleFn = function(d) {\r\n        var titleStr = self.title();\r\n        return titleStr.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        });\r\n    };\r\n};\r\n\r\nSankeyLink.struct = function(ghca_charts) {\r\n\tvar BaseLink = ghca_charts.view.elements.plugins.links.baseLink;\r\n\tBaseLink.struct(ghca_charts);\r\n    SankeyLink.prototype = Object.create(BaseLink.prototype);\r\n    SankeyLink.prototype.constructor = SankeyLink;\r\n};\r\n\r\nmodule.exports = SankeyLink;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/links/sankeyLink.js\n// module id = 81\n// module chunks = 0","var NodeMap = function() {\r\n    \r\n    this.getMap = function() {\r\n        var map = {};\r\n        //注册内部节点类\r\n        map.basenode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n        map.arcclass = ghca_charts.view.elements.plugins.nodes.arcClass;\r\n        map.sankeynode = ghca_charts.view.elements.plugins.nodes.sankeyNode;\r\n        map.baselabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n        map.node = ghca_charts.view.elements.plugins.nodes.node;\r\n        map.hbarnode = ghca_charts.view.elements.plugins.nodes.hBarNode;\r\n        map.vbarnode = ghca_charts.view.elements.plugins.nodes.vBarNode;\r\n        map.linenode = ghca_charts.view.elements.plugins.nodes.lineNode;\r\n        map.imagenode = ghca_charts.view.elements.plugins.nodes.imageNode;\r\n        map.circleshape = ghca_charts.view.elements.shape.circleShape;\r\n        map.rectshape = ghca_charts.view.elements.shape.rectShape;\r\n        map.groupnode = ghca_charts.view.elements.plugins.nodes.groupNode;\r\n        map.configgroupnode = ghca_charts.view.elements.plugins.nodes.configGroupNode;\r\n        map.treemapnode = ghca_charts.view.elements.plugins.nodes.treemapNode;\r\n        map.sunburstnode = ghca_charts.view.elements.plugins.nodes.sunburstNode;\r\n        map.packnode = ghca_charts.view.elements.plugins.nodes.packNode;\r\n        map.iconNode = ghca_charts.view.elements.plugins.nodes.iconNode;\r\n        map.hprogressbarnode = ghca_charts.view.elements.plugins.nodes.hProgressBarNode;\r\n        \r\n        //注册外部节点类\r\n        var outerMap = ghca_charts.global.outerPlugins && ghca_charts.global.outerPlugins.nodeMap;\r\n        if(outerMap) {\r\n            for(var name in outerMap) {\r\n                map[name] = outerMap[name];\r\n            }\r\n        }\r\n        \r\n        return map;\r\n    };\r\n};\r\n\r\nNodeMap.struct = function(ghca_charts) {\r\n    NodeMap.prototype.constructor = NodeMap;\r\n};\r\n\r\nmodule.exports = NodeMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodeMap.js\n// module id = 82\n// module chunks = 0","var ArcClass = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const PieLabel = ghca_charts.view.elements.plugins.label.pieLabel;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    var self = this;\r\n    var arc, isPlayAnimation = false;\r\n    var defaulfConfig = {\r\n        clazz:'arcClass',\r\n        //默认连线的颜色、类型属性等配置项\r\n        clazzProperties:{outerRadius:100, innerRadius:0, cornerRadius:0, padAngle:0, animation:true},\r\n        labelProperties:{'font-size':'0.8em',\"pointer-events\":\"none\", text:\"{#Math.round(d.percent*1000)/10+'%'#}\"},\r\n        //用户更改颜色连线的类型属性配置项\r\n        useProperties:{}\r\n    };\r\n    \r\n\t//--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // outerRadius\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 渲染呈现的弧外半径\r\n     */\r\n    var outerRadius = 20;\r\n    this.outerRadius = function(value) {\r\n        if (!arguments.length)\r\n            return innerRadius + (outerRadius - innerRadius) * \r\n                (self.data().hasOwnProperty(\"radiusPercent\") ? self.data().radiusPercent　: 1);\r\n        outerRadius = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // origOuterRadius\r\n    // ------------------------------\r\n    \r\n     /**\r\n     * 原始弧外半径，不乘以玫瑰图的半径百分比\r\n     */\r\n    this.origOuterRadius = function() {\r\n        return outerRadius;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // innerRadius\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧内半径\r\n     */\r\n    var innerRadius = 0;\r\n    this.innerRadius = function(value) {\r\n        if (!arguments.length)\r\n            return innerRadius;\r\n        innerRadius = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // startAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 开始弧度\r\n     */\r\n    var startAngle = 0;\r\n    this.startAngle = function(value) {\r\n        if (!arguments.length)\r\n            return startAngle;\r\n        startAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // endAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 结束弧度\r\n     */\r\n    var endAngle = Math.PI / 2;\r\n    this.endAngle = function(value) {\r\n        if (!arguments.length)\r\n            return endAngle;\r\n        endAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // cornerRadius\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧圆角\r\n     */\r\n    var cornerRadius = 0;\r\n    this.cornerRadius = function(value) {\r\n        if (!arguments.length)\r\n            return cornerRadius;\r\n        cornerRadius = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // padAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧间隔\r\n     */\r\n    var padAngle = 0;\r\n    this.padAngle = function(value) {\r\n        if (!arguments.length)\r\n            return padAngle;\r\n        padAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // title\r\n    // ------------------------------\r\n\r\n    /**\r\n     * path元素的title内容字符串\r\n     */\r\n    var title = null;\r\n    this.title = function(value) {\r\n        if (!arguments.length)\r\n            return title;\r\n        title = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // titleFunction\r\n    // ------------------------------\r\n\r\n    /**\r\n     * title生成规则方法，若注册该方法，则按该方法返回的内容显示title，忽略title属性\r\n     */\r\n    var titleFunction = null;\r\n    this.titleFunction = function(value) {\r\n        if (!arguments.length)\r\n            return titleFunction;\r\n        titleFunction = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // labelPos\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 标签类型，outer|inner(默认outer)\r\n     */\r\n    var labelPos = \"outer\";\r\n    this.labelPos = function(value) {\r\n        if (!arguments.length)\r\n            return labelPos;\r\n        labelPos = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data;\r\n//    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"arcClass\";\r\n    }\r\n\r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tif(!self.mainElemet) {\r\n    \t\tif(!self.data().data) {\r\n    \t\t\tself.data().data = ObjectUtil.cloneObj(defaulfConfig);\r\n    \t\t}\r\n    \t\tvar nodeData = self.data().data.clazzProperties;\r\n    \t\tself.refreshData(nodeData);\r\n    \t\t\r\n    \t\tself.mainElement = g.append(\"path\");\r\n    \t\t\r\n    \t\tarc = d3.arc()\r\n                .outerRadius(self.outerRadius())\r\n                .innerRadius(self.innerRadius())\r\n                .cornerRadius(self.cornerRadius())\r\n                .padAngle(self.padAngle());\r\n\r\n            ElementUtil.setElementProperties(self.mainElement, nodeData);\r\n            self.setLegendColor();\r\n            \r\n            //title\r\n            if(self.titleFunction()) {\r\n                self.mainElement.append(\"title\").attr(\"class\", \"path-title\").text(self.titleFunction());\r\n            } else if(self.title()) {\r\n                self.mainElement.append(\"title\").attr(\"class\", \"path-title\").text(self.formatStr(self.title()));\r\n            }\r\n            \r\n            //arc\r\n            var transition;\r\n            if(self.isChartFirstInit()) {\r\n            \ttransition = d3.transition().duration(self.animation() ? 2000 : 0).ease(d3.easeExpOut);\r\n                self.mainElement\r\n                    .attr(\"transform\", \"rotate(-179)scale(0.1)\")\r\n                    .transition(transition)\r\n                    .attr(\"transform\", \"rotate(0)scale(1)\")\r\n                    .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                    .on(\"end\", function() {\r\n                        isPlayAnimation = false;\r\n                    })\r\n                    .attrTween(\"d\", function (d) {\r\n                        var interpolate = d3.interpolate({startAngle:0, endAngle:d.endAngle - 0.5}, d);\r\n                        return function (t) {\r\n                            return arc(interpolate(t));\r\n                        };\r\n                    });\r\n                    \r\n            } else {\r\n            \ttransition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n                self.mainElement\r\n                    .transition(transition)\r\n                    .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                    .on(\"end\", function() {\r\n                        isPlayAnimation = false;\r\n                    })\r\n                    .attrTween(\"d\", function (d) {\r\n                        var interpolate = d3.interpolate({startAngle:d.endAngle, endAngle:d.endAngle}, d);\r\n                        return function (t) {\r\n                            return arc(interpolate(t));\r\n                        };\r\n                    });\r\n            }\r\n            \r\n            //label\r\n            if(self.data().data.labelProperties) {\r\n            \trefreshArc();\r\n            \tself.label = new PieLabel(g.append(\"g\"), self.data(), transition);\r\n                self.label.isChartFirstInit(self.isChartFirstInit());\r\n                self.label.render();\r\n                \r\n                //outer\r\n                if(self.labelPos() === \"outer\" && !self.polyline) {\r\n                    self.polyline = g.append(\"polyline\").datum(self.data())\r\n                        .attr(\"opacity\", 0.5)\r\n                        .attr(\"stroke\", function(d) {\r\n                            return d.hasOwnProperty(\"legendColor\") ? d.legendColor : \"#000\";\r\n                        })\r\n                        .attr(\"stroke-width\", \"1.5px\")\r\n                        .attr(\"fill\", \"none\");\r\n                \r\n                    self.polyline\r\n                        .transition(transition)\r\n                        .attrTween(\"points\", polylineRenderTween);\r\n                }\r\n            }\r\n    \t}\r\n    }\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tvar transition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n        if(self.mainElement) {\r\n        \tself.mainElement.datum(self.data());\r\n        \tvar nodeData = self.data().data.clazzProperties;\r\n            self.refreshData(nodeData);\r\n            \r\n        \tarc = d3.arc()\r\n                .outerRadius(self.outerRadius())\r\n                .innerRadius(self.innerRadius())\r\n                .cornerRadius(self.cornerRadius())\r\n                .padAngle(self.padAngle());\r\n\r\n            ElementUtil.setElementProperties(self.mainElement, nodeData);\r\n            self.setLegendColor();\r\n            //title\r\n            if(self.titleFunction()) {\r\n                self.mainElement.select(\"title.path-title\").text(self.titleFunction());\r\n            } else if(self.title()) {\r\n                self.mainElement.select(\"title.path-title\").text(self.formatStr(self.title()));\r\n            }\r\n            \r\n            self.selectedChange(false);\r\n            \r\n            self.mainElement\r\n                .transition(transition)\r\n                .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                .on(\"end\", function() {\r\n                    isPlayAnimation = false;\r\n                })\r\n                .attrTween(\"d\", function (d) {\r\n                \tthis._current = this._current || d;\r\n                    var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n                    this._current = interpolate(0);\r\n                    return function (t) {\r\n                        return arc(interpolate(t));\r\n                    };\r\n                });\r\n        }\r\n        //label\r\n        if(self.label) {\r\n            refreshArc();\r\n            self.label.data(self.data());\r\n            self.label.update(transition);\r\n            //outer\r\n            if(self.labelPos() === \"outer\") {\r\n            \tif(!self.polyline) {\r\n            \t\tself.polyline = self.mainContainer().append(\"polyline\")\r\n            \t}\r\n                self.polyline\r\n                    .datum(self.data())\r\n                    .attr(\"opacity\", 0.5)\r\n                    .attr(\"stroke\", function(d) {\r\n                        return d.hasOwnProperty(\"legendColor\") ? d.legendColor : \"#000\";\r\n                    })\r\n                    .attr(\"stroke-width\", \"1.5px\")\r\n                    .attr(\"fill\", \"none\")\r\n                    .transition(transition)\r\n                    .attrTween(\"points\", polylineUpdateTween);\r\n            } else {\r\n            \tif(self.polyline) {\r\n            \t\tself.polyline.remove();\r\n            \t\tself.polyline = null;\r\n            \t}\r\n            }\r\n        }\r\n    };\r\n\r\n    //override\r\n    this.mouseOverHandler = function(){\r\n    \tif(isPlayAnimation) return;\r\n        var r = self.outerRadius();\r\n        var k = (r + 10) / r;\r\n        if(k > 1.05) {\r\n            k = 1.05;\r\n        }\r\n        ElementUtil.setElementProperties(self.animation() ? self.mainElement.transition() : self.mainElement,{transform:\"scale(\" + k + \")\"});\r\n    }\r\n    //override\r\n    this.mouseOutHandler = function(){\r\n    \tif(isPlayAnimation) return;\r\n        ElementUtil.setElementProperties(self.animation() ? self.mainElement.transition() : self.mainElement,{transform:\"scale(1)\"});\r\n    }\r\n\r\n    //override\r\n    this.selectedChange = function(seleced){\r\n    \tif(isPlayAnimation) return;\r\n        ElementUtil.setElementProperties(this.animation() ? _element.transition() : _element,{transform:seleced==true?arcMoveOut:arcMoveIn});\r\n    }\r\n\r\n    /**\r\n     * 刷新传入配置数据到相应参数的方法\r\n     * @param data 配置数据\r\n     */\r\n    this.refreshData = function(data) {\r\n        if(data) {\r\n            for(var key in data) {\r\n                if(this.hasOwnProperty(key)) {\r\n                    this[key](data[key]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // priavte Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var refreshArc = function() {\r\n    \tif(self.labelPos() === \"outer\") {\r\n    \t\tvar r = self.outerRadius();\r\n            var origR = self.origOuterRadius();\r\n            var distance = origR * 0.2;\r\n            distance = distance < 10 ? 10 : (distance > 20 ? 20 : distance);\r\n            var outerArc1 = d3.arc().innerRadius(r).outerRadius(r);\r\n            var outerArcRadius = origR + distance;\r\n            var outerArc2 = d3.arc().innerRadius(outerArcRadius).outerRadius(outerArcRadius);\r\n            self.data().outerArc1 = outerArc1;\r\n            self.data().outerArc2 = outerArc2;\r\n            self.data().lineSize = 15;\r\n    \t} else {\r\n    \t\tself.data().arc = arc;\r\n    \t}\r\n    }\r\n\r\n    /**\r\n     * 弧形向外移动方法\r\n     */\r\n    var arcMoveOut = function (d) {\r\n        var p = arc.centroid(d);\r\n        var angle = Math.atan(p[1]/p[0]);\r\n        var moveLen = self.outerRadius() * 0.1;\r\n        if(moveLen > 10) {\r\n            moveLen = 10;\r\n        }\r\n        var absCos = Math.abs(moveLen * Math.cos(angle));\r\n        var absSin = Math.abs(moveLen * Math.sin(angle));\r\n        p[0] = p[0] > 0 ? absCos : -absCos;\r\n        p[1] = p[1] > 0 ? absSin : -absSin;\r\n        return \"translate(\" + p + \")\";\r\n    };\r\n\r\n    /**\r\n     * 弧形向内移动到初始位置方法\r\n     */\r\n    var arcMoveIn = function (d) {\r\n        return \"translate(0, 0)\";\r\n    };\r\n    \r\n    var midAngle = function (d){\r\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n    };\r\n    \r\n    var polylineRenderTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n        this._current = interpolate(0);\r\n        var outerArc1 = d.outerArc1;\r\n        var outerArc2 = d.outerArc2;\r\n        return function(t) {\r\n            var d2 = interpolate(t);\r\n            var startP = outerArc1.centroid(d2);\r\n            var centerP = outerArc2.centroid(d2);\r\n            var endP = outerArc2.centroid(d2);\r\n            centerP[1] = (centerP[1] - startP[1]) * t + startP[1];\r\n            endP[1] = (endP[1] - startP[1]) * t + startP[1];\r\n            endP[0] += d.lineSize * (midAngle(d2) < Math.PI ? 1 : -1);\r\n            return [startP, centerP, endP];\r\n        };          \r\n    };\r\n    \r\n    var polylineUpdateTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n        this._current = interpolate(0);\r\n        var outerArc1 = d.outerArc1;\r\n        var outerArc2 = d.outerArc2;\r\n        return function(t) {\r\n            var d2 = interpolate(t);\r\n            var pos = outerArc2.centroid(d2);\r\n            pos[0] += d.lineSize * (midAngle(d2) < Math.PI ? 1 : -1);\r\n            return [outerArc1.centroid(d2), outerArc2.centroid(d2), pos];\r\n        };        \r\n    };\r\n};\r\n\r\nArcClass.struct = function(ghca_charts) {\r\n\tvar BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\tBaseNode.struct(ghca_charts);\r\n    ArcClass.prototype = Object.create(BaseNode.prototype);\r\n    ArcClass.prototype.constructor = BaseNode;\r\n};\r\n\r\nmodule.exports = ArcClass;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/arcClass.js\n// module id = 83\n// module chunks = 0","\r\nvar BaseNode = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        superDrawPluginFunction = this.drawPlugin,\r\n        superBindEventsFunction = this.bindEvents;\r\n    self.dispatch = d3.dispatch(\"selectedChange\");\r\n    self.mainElement = _element;\r\n    self.backGroundElement = _element;\r\n    var _selected = false;\r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data;\r\n//    }\r\n    /**\r\n     * 节点选中\r\n     * @param _selected\r\n     * @returns {*}\r\n     */\r\n    this.selected = function(_p){\r\n         if(!arguments.length)return _selected;\r\n        _selected = _p;\r\n        self.dispatch.call(\"selectedChange\",this , new BaseEvent(self,{selected:_selected}));\r\n        return this;\r\n    }\r\n    this.selectedChange = function(seleced){\r\n        if(self.backGroundElement)\r\n            if(seleced){\r\n                self.backGroundElement.attr(\"opacity\",0.5);\r\n            }else{\r\n                self.backGroundElement.attr(\"opacity\",0);\r\n            }\r\n    }\r\n    this.mouseOverHandler = function(){\r\n        if(!self.selected()&&self.backGroundElement)\r\n            self.backGroundElement.attr(\"opacity\",0.5);\r\n    }\r\n    this.mouseOutHandler = function(){\r\n        if(!self.selected()&&self.backGroundElement)\r\n            self.backGroundElement.attr(\"opacity\",0);\r\n    }\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"baseNode\";\r\n    }\r\n    \r\n    //override\r\n    this.actualWidth = function(){\r\n        if(self.backGroundElement)\r\n            return self.backGroundElement.node().getBBox().width;\r\n        return 0;\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        if(self.backGroundElement)\r\n            return self.backGroundElement.node().getBBox().height;\r\n        return 0;\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        superDrawPluginFunction(g);\r\n        self.mainElement = ElementUtil.createCircle(g,self.data().data.circleProperties);\r\n        self.backGroundElement =  ElementUtil.createCircle(g,self.data().data.circleCheckProperties);\r\n        self.createLabel(g,self.data());\r\n        self.setLegendColor();\r\n    }\r\n    \r\n    //override\r\n    this.bindEvents = function(g){\r\n        superBindEventsFunction(g);\r\n        g.on('mouseover', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.SHOW_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            self.mouseOverHandler();\r\n        });\r\n        g.on('mousemove', function(d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.UPDATE_TOOL_TIP, true, true, d);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n        });\r\n        g.on('mouseout', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.HIDE_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            self.mouseOutHandler();\r\n        });\r\n        g.on('click', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.NODE_CLICK, true, true, d);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            self.selected(!_selected);\r\n        });\r\n        self.on(\"selectedChange.\"+self.nameSpace(),function(e){\r\n            self.selectedChange(e.data.selected);\r\n        });\r\n    }\r\n    /**\r\n     * 自定义事件监听\r\n     * @returns {exports}\r\n     */\r\n    this.on = function() {\r\n        var value = self.dispatch.on.apply(self.dispatch, arguments);\r\n        return value === self.dispatch ? self : value;\r\n    };\r\n\r\n    this.createLabel = function(group,d){\r\n    \tif(!d.data.label) {\r\n    \t\treturn;\r\n    \t}\r\n        var labelG = group.append(\"g\");\r\n        var labelData = d.data.label;\r\n        labelData.name = d.name==\"\"?\"\":d.name;\r\n        var label =  new BaseLabel(labelG,labelData,self);\r\n        label.render();\r\n        self.labelLayout(labelG,label,d);\r\n    }\r\n    /**\r\n     * 替换图例\r\n     */\r\n    this.setLegendColor = function(){\r\n        if(self.data().legendColor){\r\n            ElementUtil.setElementProperties(self.mainElement,{\"fill\":self.data().legendColor});\r\n        }\r\n    }\r\n    /**\r\n     * label布局\r\n     * @param element\r\n     * @param plugin\r\n     * @param position\r\n     */\r\n    this.labelLayout = function(element,plugin,d){\r\n        var position = d.data.labelPosition;\r\n        if(!position)position = 'bottom';\r\n        var w = self.actualWidth(),\r\n            h  = self.actualHeight(),\r\n            rh = plugin.actualHeight(),\r\n            rw = plugin.actualWidth();\r\n        \r\n        var labelPosition = position.toLowerCase(),translate;\r\n\r\n        if(labelPosition === 'top')\r\n            translate = \"translate(\" + [0,-h/2-rh/2] + \")\";\r\n        else if(labelPosition === 'bottom')\r\n            translate = \"translate(\" + [0,h/2+Number(rh/2)] + \")\";\r\n        else if(labelPosition === 'left')\r\n            translate = \"translate(\" + [-w/2-rw/2,0] + \")\";\r\n        else if(labelPosition === 'right')\r\n            translate = \"translate(\" + [w/2+rw/2,0] + \")\";\r\n        else if(labelPosition === 'center')\r\n            translate = \"translate(\" + [0,0] + \")\";\r\n        ElementUtil.setElementProperties(element,{transform:translate});\r\n    }\r\n};\r\n\r\nBaseNode.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    BaseNode.prototype = Object.create(Plugin.prototype);\r\n    BaseNode.prototype.constructor = BaseNode;\r\n};\r\n\r\nmodule.exports = BaseNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/baseNode.js\n// module id = 84\n// module chunks = 0","var Circle = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const CircleElement = ghca_charts.view.elements.circleElement;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        circleElement = _element;\r\n\r\n    self.config({\r\n        cx:0,\r\n        cy:0,\r\n        radius:10,\r\n        border:2,\r\n        borderColor:\"green\",\r\n        linecap:\"butt\",\r\n        color:\"red\"\r\n        // dasharray:circumference,\r\n        // dashoffset:stroke_percentage\r\n    });\r\n\r\n\r\n//    //override\r\n//    this.actualWidth = function(){\r\n//       return self.config().radius*2;\r\n//    }\r\n//    //override\r\n//    this.actualHeight = function(){\r\n//        return self.config().radius*2;\r\n//    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"circle\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n    \tvar config = ObjectUtil.cloneObj(self.config());\r\n    \tconfig.color = RegexUtil.replace(RegexUtil.dataRegex,config.color,self.data());\r\n        config.borderColor = RegexUtil.replace(RegexUtil.dataRegex,config.borderColor,self.data());\r\n        config.radius = RegexUtil.replace(RegexUtil.dataRegex,config.radius,self.data());\r\n        circleElement.data(config);\r\n        self.resetBBox(-config.radius, -config.radius, config.radius*2, config.radius*2);\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = ObjectUtil.cloneObj(self.config());\r\n        config.color = RegexUtil.replace(RegexUtil.dataRegex,config.color,self.data());\r\n        config.borderColor = RegexUtil.replace(RegexUtil.dataRegex,config.borderColor,self.data());\r\n        config.radius = RegexUtil.replace(RegexUtil.dataRegex,config.radius,self.data());\r\n        circleElement = new CircleElement(g,config);\r\n        circleElement.render();\r\n        self.resetBBox(-config.radius, -config.radius, config.radius*2, config.radius*2);\r\n    }\r\n};\r\n\r\nCircle.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    Circle.prototype = Object.create(Plugin.prototype);\r\n    Circle.prototype.constructor = Circle;\r\n};\r\n\r\nmodule.exports = Circle;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/circle.js\n// module id = 85\n// module chunks = 0","var ConfigGroupNode = function (_element,_data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const GroupLabel = ghca_charts.view.elements.plugins.label.groupLabel;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    const ObjectUtil =  ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"configgroupnode\";\r\n    }\r\n    \r\n    // //override\r\n    // this.data = function(){\r\n    //     return _data;\r\n    // }\r\n    \r\n    //override\r\n    this.bindEvents = function(g){\r\n    \t\r\n    }\r\n\r\n    //override\r\n    this.setLegendColor = function(configData) {\r\n    \tvar fill = \"#d7fea2\", stroke = \"gray\",dasharray=\"0,0\";//默认配置\r\n    \tif(_data.legendColor) {//图例颜色\r\n    \t\tfill = _data.legendColor;\r\n    \t\tstroke = _data.legendColor;\r\n        } else if(configData && configData.nodeProperties) {//用户设置颜色\r\n            var p = configData.nodeProperties;\r\n            if(p.fill) {\r\n                fill = p.fill;\r\n            }\r\n            if(p.stroke) {\r\n                stroke = p.stroke;\r\n            }\r\n            if(p.dasharray){\r\n                dasharray=p.dasharray;\r\n            }\r\n        }\r\n        self.mainElement.attr(\"fill\", fill).attr(\"stroke\", stroke);\r\n        self.mainElement.attr(\"stroke-dasharray\",dasharray);\r\n    }\r\n\r\n    //override\r\n    this.drawPlugin = function(g) {\r\n    \tif(_data.path === \"\") {\r\n    \t\treturn;\r\n        }\r\n        \r\n        var configData=setRegData();\r\n\r\n\r\n        g.attr(\"pointer-events\", \"visiblefill \");//可视化区域响应鼠标事件\r\n        self.mainElement = ElementUtil.createPath(g, configData.nodeProperties);\r\n        self.mainElement.attr(\"class\", \"group-area\").attr(\"d\", _data.path)\r\n        self.setLegendColor(configData);\r\n        self.createLabel(g,configData);\r\n    }\r\n\r\n    function setRegData(){\r\n        var data=ObjectUtil.cloneObj(_data.data);\r\n        data.nodeProperties.fill=RegexUtil.replace(RegexUtil.dataRegex,data.nodeProperties.fill,self.data());\r\n        data.nodeProperties[\"fill-opacity\"]=RegexUtil.replace(RegexUtil.dataRegex,data.nodeProperties[\"fill-opacity\"],self.data());\r\n        data.label.backGroundProperties[\"fill\"]=RegexUtil.replace(RegexUtil.dataRegex, data.label.backGroundProperties[\"fill\"],self.data());\r\n        data.label.backGroundProperties[\"opacity\"]=RegexUtil.replace(RegexUtil.dataRegex,data.label.backGroundProperties[\"opacity\"],self.data());\r\n        data.label.labelProperties[\"fill\"]=RegexUtil.replace(RegexUtil.dataRegex,data.label.labelProperties[\"fill\"],self.data());\r\n        return data;\r\n    }\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(self.mainElement) {\r\n            var configData=setRegData();\r\n            self.mainElement.attr(\"d\", self.data().path);\r\n    \t\tself.setLegendColor(configData);\r\n            if(self.label) {\r\n            \tif(_data.path === \"\") {\r\n            \t\tself.label.el.attr(\"display\", \"none\");\r\n            \t} else {\r\n            \t\tself.label.el.attr(\"display\", \"block\");\r\n            \t\tvar labelData = configData.label;\r\n                    labelData.name = labelData.name ?　labelData.name　: _data.name;\r\n                    self.label.update(labelData);\r\n            \t\tself.labelLayout(self.labelG, self.label, configData, true);\r\n            \t}\r\n            }\r\n    \t}\r\n    };\r\n    \r\n     //override\r\n    this.createLabel = function(group, d) {\r\n        if(!d || !d.label) {\r\n            return;\r\n        }\r\n        self.labelG = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        var labelData = d.label;\r\n        labelData.name = labelData.name ?　labelData.name　: d.name;\r\n        self.label =  new GroupLabel(self.labelG, labelData, self);\r\n        self.label.render();\r\n        self.labelLayout(self.labelG, self.label, d, false);\r\n    }\r\n    \r\n    //override\r\n    this.labelLayout = function(element, plugin, d) {\r\n        var position = d.labelPosition;\r\n        if(position === 'none') {\r\n            element.style(\"display\", \"none\");\r\n            return;\r\n        } else {\r\n            element.style(\"display\", \"block\");\r\n        }\r\n        if(!position)\r\n            position = 'top';\r\n        \r\n        var labelPosition = position.toLowerCase(), translate, tx = 0, ty = 0;\r\n        var labelBox = element.node().getBBox();\r\n        var point;\r\n        if(labelPosition === 'bottom') {\r\n        \tpoint = getBottomPoint(_data.pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] + labelBox.height / 2;\r\n        } else if(labelPosition === 'left') {\r\n        \tpoint = getLeftPoint(_data.pathPoints);\r\n            tx = point[0] - labelBox.width / 2;\r\n            ty = point[1];\r\n        } else if(labelPosition === 'right') {\r\n        \tpoint = getRightPoint(_data.pathPoints);\r\n            tx = point[0] + labelBox.width / 2;\r\n            ty = point[1];\r\n        } else if(labelPosition === 'center') {\r\n        \tvar pathBox = self.mainElement.node().getBBox();\r\n            tx = pathBox.x + pathBox.width / 2;\r\n            ty = pathBox.y + pathBox.height / 2;\r\n        } else if(labelPosition === 'insidetop') {\r\n        \tpoint = getTopPoint(_data.pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] + labelBox.height / 2;\r\n        } else if(labelPosition === 'insidebottom') {\r\n        \tpoint = getBottomPoint(_data.pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] - labelBox.height / 2;\r\n        } else if(labelPosition === 'insideleft') {\r\n        \tpoint = getLeftPoint(_data.pathPoints);\r\n            tx = point[0] + labelBox.width / 2;\r\n            ty = point[1];\r\n        } else if(labelPosition === 'insideright') {\r\n        \tpoint = getRightPoint(_data.pathPoints);\r\n            tx = point[0] - labelBox.width / 2;\r\n            ty = point[1];\r\n        } else {\r\n            //default top\r\n        \tpoint = getTopPoint(_data.pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] - labelBox.height / 2;\r\n        }\r\n        element.attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n    };\r\n    \r\n    var getTopPoint = function(points) {\r\n    \tvar result = null, xArray = [];\r\n    \tfor(var p, i = 0, len = points.length; i < len; i++) {\r\n    \t\tp = points[i];\r\n    \t\tif(result === null || p[1] < result[1]) {\r\n    \t\t\tresult = p;\r\n    \t\t\txArray.length = 0;\r\n    \t\t\txArray.push(p[0]);\r\n    \t\t} else if(p[1] === result[1]) {\r\n    \t\t\txArray.push(p[0]);\r\n    \t\t}\r\n    \t}\r\n    \tif(xArray.length > 1) {\r\n    \t\tvar totalX = 0;\r\n            for(var i = 0, len = xArray.length; i < len; i++) {\r\n                totalX += xArray[i]\r\n            }\r\n            var avgX = totalX / xArray.length;\r\n    \t}\r\n    \treturn result ? [avgX ? avgX : result[0], result[1]] : null;\r\n    };\r\n    \r\n    var getBottomPoint = function(points) {\r\n        var result = null, xArray = [];\r\n        for(var p, i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if(result === null || p[1] > result[1]) {\r\n                result = p;\r\n                xArray.length = 0;\r\n                xArray.push(p[0]);\r\n            } else if(p[1] === result[1]) {\r\n                xArray.push(p[0]);\r\n            }\r\n        }\r\n        if(xArray.length > 1) {\r\n            var totalX = 0;\r\n            for(var i = 0, len = xArray.length; i < len; i++) {\r\n                totalX += xArray[i]\r\n            }\r\n            var avgX = totalX / xArray.length;\r\n        }\r\n        return result ? [avgX ? avgX : result[0], result[1]] : null;\r\n    };\r\n    \r\n    var getLeftPoint = function(points) {\r\n        var result = null, yArray = [];\r\n        for(var p, i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if(result === null || p[0] < result[0]) {\r\n                result = p;\r\n                yArray.length = 0;\r\n                yArray.push(p[1]);\r\n            } else if(p[0] === result[0]) {\r\n                yArray.push(p[1]);\r\n            }\r\n        }\r\n        if(yArray.length > 1) {\r\n            var totalY = 0;\r\n            for(var i = 0, len = yArray.length; i < len; i++) {\r\n                totalY += yArray[i]\r\n            }\r\n            var avgY = totalY / yArray.length;\r\n        }\r\n        return result ? [result[0], avgY ? avgY : result[1]] : null;\r\n    };\r\n    \r\n    var getRightPoint = function(points) {\r\n        var result = null, yArray = [];\r\n        for(var p, i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if(result === null || p[0] > result[0]) {\r\n                result = p;\r\n                yArray.length = 0;\r\n                yArray.push(p[1]);\r\n            } else if(p[0] === result[0]) {\r\n                yArray.push(p[1]);\r\n            }\r\n        }\r\n        if(yArray.length > 1) {\r\n            var totalY = 0;\r\n            for(var i = 0, len = yArray.length; i < len; i++) {\r\n                totalY += yArray[i]\r\n            }\r\n            var avgY = totalY / yArray.length;\r\n        }\r\n        return result ? [result[0], avgY ? avgY : result[1]] : null;\r\n    };\r\n};\r\n\r\nConfigGroupNode.struct = function(ghca_charts) {\r\n    var BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    BaseNode.struct(ghca_charts);\r\n    ConfigGroupNode.prototype = Object.create(BaseNode.prototype);\r\n    ConfigGroupNode.prototype.constructor = ConfigGroupNode;\r\n};\r\n\r\nmodule.exports = ConfigGroupNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/configGroupNode.js\n// module id = 86\n// module chunks = 0","var DemoImageNode = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const Label = ghca_charts.view.elements.plugins.label.label;\r\n    const ImageElement = ghca_charts.view.elements.imageElement;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        imageElement = null,\r\n        icon1 = null,\r\n        icon2 = null,\r\n        icon3 = null,\r\n        label1 = null,\r\n        label2 = null,\r\n        label3 = null;\r\n        \r\n    self.config({\r\n    \timageWidth:32,\r\n        imageHeight:32,\r\n        opacity:1\r\n    });\r\n\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"demoImageNode\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n    \tif(imageElement) {\r\n    \t\timageElement.data(self.config());\r\n    \t}\r\n    \tif(icon1) {\r\n            icon1.data(self.config().icon1);\r\n        }\r\n        if(icon2) {\r\n            icon2.data(self.config().icon2);\r\n        }\r\n        if(icon3) {\r\n            icon3.data(self.config().icon3);\r\n        }\r\n        if(label1) {\r\n            label1.data(self.config().label1);\r\n        }\r\n        if(label2) {\r\n            label2.data(self.config().label2);\r\n        }\r\n        if(label3) {\r\n            label3.data(self.config().label3);\r\n        }\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = ObjectUtil.cloneObj(self.config());\r\n        imageElement = new ImageElement(g,config);\r\n        imageElement.render();\r\n        \r\n        var box, iconTop = 10, iconGap = 2, \r\n            tx = -config.imageWidth / 2 + config.icon1.imageWidth / 2;\r\n            ty = config.imageHeight / 2 + iconTop,\r\n            labelY = 0;\r\n        icon1 = new ImageElement(g,config.icon1);\r\n        icon1.render();\r\n        icon1.svgElement.attr(\"transform\", \"translate(\" + tx +\",\" + ty + \")\");\r\n        \r\n        var label1Con = g.append(\"svg:g\").attr(\"pointer-events\", \"none\");\r\n        label1 = new Label(label1Con,self.data());\r\n        label1.config(config.label1);\r\n        label1.render();\r\n        box = label1Con.node().getBBox();\r\n        labelY = ty + config.icon1.imageHeight/2 - box.height;\r\n        label1Con.attr(\"transform\", \"translate(\" + -4 +\",\" + labelY + \")\");\r\n        \r\n        icon2 = new ImageElement(g,config.icon2);\r\n        icon2.render();\r\n        ty += config.icon1.imageHeight + iconGap;\r\n        icon2.svgElement.attr(\"transform\", \"translate(\" + tx +\",\" + ty + \")\");\r\n        \r\n        var label2Con = g.append(\"svg:g\").attr(\"pointer-events\", \"none\");\r\n        label2 = new Label(label2Con,self.data());\r\n        label2.config(config.label2);\r\n        label2.render();\r\n        box = label2Con.node().getBBox();\r\n        labelY = ty + config.icon2.imageHeight/2 - box.height;\r\n        label2Con.attr(\"transform\", \"translate(\" + -4 +\",\" + labelY + \")\");\r\n        \r\n        icon3 = new ImageElement(g,config.icon3);\r\n        icon3.render();\r\n        ty += config.icon2.imageHeight + iconGap;\r\n        icon3.svgElement.attr(\"transform\", \"translate(\" + tx +\",\" + ty + \")\");\r\n        \r\n        var label3Con = g.append(\"svg:g\").attr(\"pointer-events\", \"none\");\r\n        label3 = new Label(label3Con,self.data());\r\n        label3.config(config.label3);\r\n        label3.render();\r\n        box = label3Con.node().getBBox();\r\n        labelY = ty + config.icon3.imageHeight/2 - box.height;\r\n        label3Con.attr(\"transform\", \"translate(\" + -4 +\",\" + labelY + \")\");\r\n        \r\n        var bg = g.select(\"rect.bgRect\");\r\n        if(bg.node() === null) {\r\n        \tbox = g.node().getBBox(); \r\n        \tconsole.log(box);\r\n        \tg.insert(\"rect\", \"image\")\r\n            \t.attr(\"class\", \"bgRect\")\r\n            \t.attr(\"x\", box.x)\r\n            \t.attr(\"y\", box.y)\r\n            \t.attr(\"width\", box.width)\r\n            \t.attr(\"height\", box.height)\r\n            \t.attr(\"fill\", \"white\")\r\n        }\r\n    }\r\n};\r\n\r\nDemoImageNode.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    DemoImageNode.prototype = Object.create(Plugin.prototype);\r\n    DemoImageNode.prototype.constructor = DemoImageNode;\r\n};\r\n\r\nmodule.exports = DemoImageNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/demoImageNode.js\n// module id = 87\n// module chunks = 0","var ExpandTool = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const Plugin      = ghca_charts.view.elements.plugins.plugin;\r\n    const RegexUtil   = ghca_charts.view.util.regexUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        superDrawPluginFunction = this.drawPlugin,\r\n        superBindEventsFunction = this.bindEvents;\r\n    self.dispatch = d3.dispatch(\"collapsed\");\r\n    \r\n    self.config({\r\n        collapsed:\"{data.collapsed}\"\r\n    });\r\n    \r\n    var collapsed = true,\r\n        backGroundCircle,\r\n        pathElement,\r\n        collapsedPath = \"M-4 0 L4 0 M0 -4 L0 4 Z\",\r\n        expandedPath  = \"M-4 0 L4 0 Z\";\r\n\r\n    this.collapsed = function(p){\r\n        if(!arguments.length)return collapsed;\r\n        collapsed = p;\r\n        self.data().collapsed = p;\r\n        ElementUtil.setElementProperties(pathElement,{d:(p==true?collapsedPath:expandedPath)});\r\n        if(self.isRender()){\r\n            self.el.node().dispatchEvent(EventUtil.createCustomEvent(self.config().events,true,true,self.data()));\r\n        }\r\n        return this;\r\n    }\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"expandTool\";\r\n    }\r\n\r\n    //override\r\n    this.actualWidth = function(){\r\n        return 5;\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        return 5;\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        superDrawPluginFunction(g);\r\n        // g.each(function (d) {\r\n        //     var group = d3.select(this);\r\n            backGroundCircle = ElementUtil.createCircle(g,{r:5,\"stroke-width\":1,stroke:\"#2585c0\",\"stroke-opacity\":1,fill:\"white\",opacity:0.6});\r\n            pathElement = ElementUtil.createPath(g,{\"stroke-width\":2,\"stroke\":\"#2585c0\",\"fill\":\"none\"});\r\n            self.collapsed(RegexUtil.replace(RegexUtil.dataRegex,self.config().collapsed,self.data())==\"true\");\r\n        var param = RegexUtil.replace(RegexUtil.dataRegex,self.config().visible,self.data());\r\n        if(param == false|| param==self.config().visible)\r\n            self.visible(false);\r\n        // });\r\n    }\r\n\r\n    //override\r\n    this.bindEvents = function(g){\r\n        superBindEventsFunction(g);\r\n        g.on(\"click\",function(){\r\n            d3.event.stopPropagation();\r\n            self.collapsed(!self.collapsed());\r\n        }).on(\"dblclick.extool\",this.stopEvent)\r\n            .on(\"mouseover\",this.stopEvent)\r\n            .on(\"mousedown\",this.stopEvent)\r\n            .on(\"mouseover\",this.stopEvent)\r\n            .on(\"mousemove\",this.stopEvent);\r\n    }\r\n    this.stopEvent = function(){\r\n        d3.event.stopPropagation();\r\n    }\r\n};\r\n\r\nExpandTool.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    ExpandTool.prototype = Object.create(Plugin.prototype);\r\n    ExpandTool.prototype.constructor = ExpandTool;\r\n};\r\n\r\n\r\nmodule.exports = ExpandTool;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/expandTool.js\n// module id = 88\n// module chunks = 0","var GroupNode = function (_element,_data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"groupNode\";\r\n    }\r\n    \r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data;\r\n//    }\r\n    \r\n    //override\r\n    this.bindEvents = function(g){\r\n    \t\r\n    }\r\n\r\n    //override\r\n    this.setLegendColor = function() {\r\n    \tvar fill = \"#d7fea2\", stroke = \"gray\";//默认配置\r\n    \tif(_data.legendColor) {//图例颜色\r\n    \t\tfill = _data.legendColor;\r\n    \t\tstroke = _data.legendColor;\r\n        } else if(_data.data && _data.data.nodeProperties) {//用户设置颜色\r\n            var p = _data.data.nodeProperties;\r\n            if(p.fill) {\r\n                fill = p.fill;\r\n            }\r\n            if(p.stroke) {\r\n                stroke = p.stroke;\r\n            }\r\n        }\r\n        self.mainElement.attr(\"fill\", fill).attr(\"stroke\", stroke);\r\n    }\r\n\r\n    //override\r\n    this.drawPlugin = function(g) {\r\n    \tif(self.data().path === \"\") {\r\n    \t\treturn;\r\n    \t}\r\n        g.attr(\"pointer-events\", \"visiblefill \");//可视化区域响应鼠标事件\r\n        self.mainElement = ElementUtil.createPath(g, self.data().data.nodeProperties);\r\n        self.mainElement.attr(\"class\", \"group-area\").attr(\"d\", self.data().path)\r\n        self.setLegendColor();\r\n        self.createLabel(g,self.data());\r\n    }\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(self.mainElement) {\r\n    \t\tself.mainElement.attr(\"d\", self.data().path);\r\n    \t\tElementUtil.setElementProperties(self.mainElement, self.data().data.nodeProperties);  \t\t\r\n    \t\tself.setLegendColor();\r\n            if(self.label) {\r\n            \tif(self.data().path === \"\") {\r\n            \t\tself.label.el.attr(\"display\", \"none\");\r\n            \t} else {\r\n            \t\tself.label.el.attr(\"display\", \"block\");\r\n            \t\tvar labelData = self.data().data.label;\r\n                    labelData.name = labelData.name ?　labelData.name　: self.data().name;\r\n                    self.label.update(labelData);\r\n            \t\tself.labelLayout(self.labelG, self.label, self.data(), true);\r\n            \t}\r\n            }\r\n    \t}\r\n    };\r\n    \r\n     //override\r\n    this.createLabel = function(group, d) {\r\n        if(!d.data || !d.data.label) {\r\n            return;\r\n        }\r\n        self.labelG = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        var labelData = d.data.label;\r\n        labelData.name = labelData.name ?　labelData.name　: d.name;\r\n        self.label =  new BaseLabel(self.labelG, labelData, self);\r\n        self.label.render();\r\n        self.labelLayout(self.labelG, self.label, d, false);\r\n    }\r\n    \r\n    //override\r\n    this.labelLayout = function(element, plugin, d) {\r\n        var position = d.data.labelPosition;\r\n        if(position === 'none') {\r\n            element.style(\"display\", \"none\");\r\n            return;\r\n        } else {\r\n            element.style(\"display\", \"block\");\r\n        }\r\n        if(!position)\r\n            position = 'top';\r\n        \r\n        var labelPosition = position.toLowerCase(), translate, tx = 0, ty = 0;\r\n        var labelBox = element.node().getBBox();\r\n        var point;\r\n        if(labelPosition === 'bottom') {\r\n        \tpoint = getBottomPoint(self.data().pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] + labelBox.height / 2;\r\n        } else if(labelPosition === 'left') {\r\n        \tpoint = getLeftPoint(self.data().pathPoints);\r\n            tx = point[0] - labelBox.width / 2;\r\n            ty = point[1];\r\n        } else if(labelPosition === 'right') {\r\n        \tpoint = getRightPoint(self.data().pathPoints);\r\n            tx = point[0] + labelBox.width / 2;\r\n            ty = point[1];\r\n        } else if(labelPosition === 'center') {\r\n        \tvar pathBox = self.mainElement.node().getBBox();\r\n            tx = pathBox.x + pathBox.width / 2;\r\n            ty = pathBox.y + pathBox.height / 2;\r\n        } else if(labelPosition === 'insidetop') {\r\n        \tpoint = getTopPoint(self.data().pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] + labelBox.height / 2;\r\n        } else if(labelPosition === 'insidebottom') {\r\n        \tpoint = getBottomPoint(self.data().pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] - labelBox.height / 2;\r\n        } else if(labelPosition === 'insideleft') {\r\n        \tpoint = getLeftPoint(self.data().pathPoints);\r\n            tx = point[0] + labelBox.width / 2;\r\n            ty = point[1];\r\n        } else if(labelPosition === 'insideright') {\r\n        \tpoint = getRightPoint(self.data().pathPoints);\r\n            tx = point[0] - labelBox.width / 2;\r\n            ty = point[1];\r\n        } else {\r\n            //default top\r\n        \tpoint = getTopPoint(self.data().pathPoints);\r\n            tx = point[0];\r\n            ty = point[1] - labelBox.height / 2;\r\n        }\r\n        element.attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n    };\r\n    \r\n    var getTopPoint = function(points) {\r\n    \tvar result = null, xArray = [];\r\n    \tfor(var p, i = 0, len = points.length; i < len; i++) {\r\n    \t\tp = points[i];\r\n    \t\tif(result === null || p[1] < result[1]) {\r\n    \t\t\tresult = p;\r\n    \t\t\txArray.length = 0;\r\n    \t\t\txArray.push(p[0]);\r\n    \t\t} else if(p[1] === result[1]) {\r\n    \t\t\txArray.push(p[0]);\r\n    \t\t}\r\n    \t}\r\n    \tif(xArray.length > 1) {\r\n    \t\tvar totalX = 0;\r\n            for(var i = 0, len = xArray.length; i < len; i++) {\r\n                totalX += xArray[i]\r\n            }\r\n            var avgX = totalX / xArray.length;\r\n    \t}\r\n    \treturn result ? [avgX ? avgX : result[0], result[1]] : null;\r\n    };\r\n    \r\n    var getBottomPoint = function(points) {\r\n        var result = null, xArray = [];\r\n        for(var p, i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if(result === null || p[1] > result[1]) {\r\n                result = p;\r\n                xArray.length = 0;\r\n                xArray.push(p[0]);\r\n            } else if(p[1] === result[1]) {\r\n                xArray.push(p[0]);\r\n            }\r\n        }\r\n        if(xArray.length > 1) {\r\n            var totalX = 0;\r\n            for(var i = 0, len = xArray.length; i < len; i++) {\r\n                totalX += xArray[i]\r\n            }\r\n            var avgX = totalX / xArray.length;\r\n        }\r\n        return result ? [avgX ? avgX : result[0], result[1]] : null;\r\n    };\r\n    \r\n    var getLeftPoint = function(points) {\r\n        var result = null, yArray = [];\r\n        for(var p, i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if(result === null || p[0] < result[0]) {\r\n                result = p;\r\n                yArray.length = 0;\r\n                yArray.push(p[1]);\r\n            } else if(p[0] === result[0]) {\r\n                yArray.push(p[1]);\r\n            }\r\n        }\r\n        if(yArray.length > 1) {\r\n            var totalY = 0;\r\n            for(var i = 0, len = yArray.length; i < len; i++) {\r\n                totalY += yArray[i]\r\n            }\r\n            var avgY = totalY / yArray.length;\r\n        }\r\n        return result ? [result[0], avgY ? avgY : result[1]] : null;\r\n    };\r\n    \r\n    var getRightPoint = function(points) {\r\n        var result = null, yArray = [];\r\n        for(var p, i = 0, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n            if(result === null || p[0] > result[0]) {\r\n                result = p;\r\n                yArray.length = 0;\r\n                yArray.push(p[1]);\r\n            } else if(p[0] === result[0]) {\r\n                yArray.push(p[1]);\r\n            }\r\n        }\r\n        if(yArray.length > 1) {\r\n            var totalY = 0;\r\n            for(var i = 0, len = yArray.length; i < len; i++) {\r\n                totalY += yArray[i]\r\n            }\r\n            var avgY = totalY / yArray.length;\r\n        }\r\n        return result ? [result[0], avgY ? avgY : result[1]] : null;\r\n    };\r\n};\r\n\r\nGroupNode.struct = function(ghca_charts) {\r\n    var BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    BaseNode.struct(ghca_charts);\r\n    GroupNode.prototype = Object.create(BaseNode.prototype);\r\n    GroupNode.prototype.constructor = GroupNode;\r\n};\r\n\r\nmodule.exports = GroupNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/groupNode.js\n// module id = 89\n// module chunks = 0","var HBarNode = function (_element,_data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"hBarNode\";\r\n    }\r\n    \r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data;\r\n//    }\r\n\r\n    //override\r\n    this.mouseOverHandler = function() {\r\n        self.mainElement\r\n            .attr(\"fill-opacity\", 0.5);\r\n    }\r\n    \r\n    //override\r\n    this.mouseOutHandler = function() {\r\n        self.mainElement\r\n            .attr(\"fill-opacity\", 1);\r\n    }\r\n\r\n    //override\r\n    this.selectedChange = function(seleced) {\r\n    }\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tvar data = self.data().data;\r\n    \tvar p = data && data.hasOwnProperty(\"clazzProperties\") ? data.clazzProperties : null;\r\n        var eleConfig = {rx:4};\r\n        if(p) {\r\n            for(var k in p) {\r\n                eleConfig[k] = p[k];\r\n            }\r\n        }\r\n    \tself.mainElement = g.append(\"rect\");\r\n        self.mainElement\r\n            .attr(\"class\", \"bar-rect\")\r\n            .attr(\"fill\", function(d){\r\n                return d.legendColor;\r\n            })\r\n            .attr(\"y\", function(d) {\r\n                return d.y;\r\n            })\r\n            .attr(\"height\", function(d) {\r\n                return d.dy;\r\n            })\r\n            .attr(\"x\", 1)\r\n            .attr(\"width\", 0);\r\n        ElementUtil.setElementProperties(self.mainElement, eleConfig);\r\n            \r\n        self.mainElement\r\n            .transition().duration(self.animation() ? 1000 : 0)\r\n            .attr(\"x\", function(d) {\r\n                return d.x;\r\n            })\r\n            .attr(\"width\", function(d) {\r\n                return d.dx;\r\n            });\r\n        self.createLabel(g,self.data());\r\n    }\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(self.mainElement) {\r\n    \t\tvar data = self.data().data;\r\n            var p = data && data.hasOwnProperty(\"clazzProperties\") ? data.clazzProperties : null;\r\n            var eleConfig = {rx:4};\r\n            if(p) {\r\n                for(var k in p) {\r\n                    eleConfig[k] = p[k];\r\n                }\r\n            }\r\n    \t\tself.mainElement.datum(self.data())\r\n    \t\t    .transition().duration(self.animation() ? 500 : 0)\r\n    \t\t    .attr(\"fill\", function(d){\r\n                    return d.legendColor;\r\n                })\r\n                .attr(\"y\", function(d) {\r\n                    return d.y;\r\n                })\r\n                .attr(\"height\", function(d) {\r\n                    return d.dy;\r\n                })\r\n                .attr(\"x\", function(d) {\r\n                    return d.x;\r\n                })\r\n                .attr(\"width\", function(d) {\r\n                    return d.dx;\r\n                });\r\n            ElementUtil.setElementProperties(self.mainElement, eleConfig);\r\n            if(self.label) {\r\n                var labelData = self.data().data.label;\r\n                labelData.name = labelData.format ?　self.formatStr(labelData.format)(self.data())　: self.data().value;\r\n                self.label.update(labelData);\r\n                self.labelLayout(self.labelG, self.label, self.data(), true);\r\n            }\r\n    \t}\r\n    };\r\n    \r\n     //override\r\n    this.createLabel = function(group, d) {\r\n        if(!d.data || !d.data.label || d.value === null || d.value === undefined) {\r\n            return;\r\n        }\r\n        self.labelG = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        var labelData = d.data.label;\r\n        labelData.name = labelData.format ?　self.formatStr(labelData.format)(d)　: d.value;\r\n        self.label = new BaseLabel(self.labelG, labelData, self);\r\n        self.label.render();\r\n        self.labelLayout(self.labelG, self.label, d, false);\r\n    }\r\n    \r\n    //override\r\n    this.labelLayout = function(element, plugin, d, isUpdate){\r\n        var position = d.data.labelPosition;\r\n        if(position === 'none') {\r\n            element.style(\"display\", \"none\");\r\n            return;\r\n        } else {\r\n            element.style(\"display\", \"block\");\r\n        }\r\n        if(!position)\r\n            position = 'right';\r\n        \r\n        var translate, labelPosition = position.toLowerCase(), tx = 0, ty = 0;\r\n        var labelBox = element.node().getBBox();\r\n        if(labelPosition == 'bottom') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + d.dy + labelBox.height / 2;\r\n        } else if(labelPosition == 'left') {\r\n            tx = 1 + labelBox.width / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else if(labelPosition == 'top') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y - labelBox.height / 2;\r\n        } else if(labelPosition == 'center') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else if(labelPosition == 'insidetop') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + labelBox.height / 2;\r\n        } else if(labelPosition == 'insidebottom') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + d.dy - labelBox.height / 2;\r\n        } else if(labelPosition == 'insideleft') {\r\n            tx = d.x + labelBox.width / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else if(labelPosition == 'insideright') {\r\n            tx = d.x + d.dx - labelBox.width / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else {\r\n            //default right\r\n            tx = d.x + d.dx + labelBox.width / 2 + 3;\r\n            ty = d.y + d.dy / 2;\r\n        }\r\n        if(isUpdate) {\r\n             element\r\n                .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        } else {\r\n             element\r\n                .attr(\"transform\", \"translate(\"+1+\",\"+ty+\")\")\r\n                .transition().duration(self.animation() ? 1000 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        }\r\n    }\r\n};\r\n\r\nHBarNode.struct = function(ghca_charts) {\r\n    var BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    BaseNode.struct(ghca_charts);\r\n    HBarNode.prototype = Object.create(BaseNode.prototype);\r\n    HBarNode.prototype.constructor = HBarNode;\r\n};\r\n\r\nmodule.exports = HBarNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/hBarNode.js\n// module id = 90\n// module chunks = 0","var HProgressBarNode = function (_element,_data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"hProgressBarNode\";\r\n    }\r\n    \r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data;\r\n//    }\r\n\r\n    //override\r\n    this.mouseOverHandler = function() {\r\n        self.mainElement\r\n            .attr(\"fill-opacity\", 0.5);\r\n    }\r\n    \r\n    //override\r\n    this.mouseOutHandler = function() {\r\n        self.mainElement\r\n            .attr(\"fill-opacity\", 1);\r\n    }\r\n\r\n    //override\r\n    this.selectedChange = function(seleced) {\r\n    }\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tvar data = self.data().data;\r\n    \tvar p = data && data.hasOwnProperty(\"clazzProperties\") ? data.clazzProperties : null;\r\n    \t\r\n        //background rect\r\n    \tvar bgRect = p.bgRect;\r\n    \tvar defaultBgRect = {rx:4};\r\n        if(bgRect) {\r\n            for(var k in bgRect) {\r\n                defaultBgRect[k] = bgRect[k];\r\n            }\r\n        }\r\n        self.bgRect = g.append(\"rect\")\r\n            .attr(\"class\", \"bg-rect\")\r\n            .attr(\"x\", function(d) {\r\n                return d.x;\r\n            })\r\n            .attr(\"y\", function(d) {\r\n                return d.y;\r\n            })\r\n            .attr(\"width\", function(d) {\r\n                return d.bgWidth;\r\n            })\r\n            .attr(\"height\", function(d) {\r\n                return d.bgHeight;\r\n            });\r\n        ElementUtil.setElementProperties(self.bgRect, defaultBgRect);\r\n            \r\n        //progress bar rect \r\n        var eleConfig = {rx:4};\r\n        if(p) {\r\n            for(var k in p) {\r\n                eleConfig[k] = p[k];\r\n            }\r\n        }\r\n        self.mainElement = g.append(\"rect\")\r\n            .attr(\"class\", \"bar-rect\")\r\n            .attr(\"x\", function(d) {\r\n                return d.x;\r\n            })\r\n            .attr(\"y\", function(d) {\r\n                return d.y;\r\n            })\r\n            .attr(\"height\", function(d) {\r\n                return d.height;\r\n            })\r\n            .attr(\"width\", 0);\r\n        ElementUtil.setElementProperties(self.mainElement, eleConfig);\r\n        self.setLegendColor();\r\n            \r\n        self.mainElement\r\n            .transition().duration(self.animation() ? 1000 : 0)\r\n            .attr(\"width\", function(d) {\r\n                return d.width;\r\n            });\r\n        self.createLabel(g, self.data());\r\n    };\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(self.mainElement) {\r\n    \t\t//更新渲染器绑定数据\r\n    \t\tself.el && self.el.datum(self.data());\r\n    \t\t\r\n    \t\tvar data = self.data().data;\r\n            var p = data && data.hasOwnProperty(\"clazzProperties\") ? data.clazzProperties : null;\r\n            \r\n            //background rect\r\n            var bgRect = p.bgRect;\r\n            var defaultBgRect = {rx:4};\r\n            if(bgRect) {\r\n                for(var k in bgRect) {\r\n                    defaultBgRect[k] = bgRect[k];\r\n                }\r\n            }\r\n            self.bgRect\r\n                .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"x\", function(d) {\r\n                    return d.x;\r\n                })\r\n                .attr(\"y\", function(d) {\r\n                    return d.y;\r\n                })\r\n                .attr(\"width\", function(d) {\r\n                    return d.bgWidth;\r\n                })\r\n                .attr(\"height\", function(d) {\r\n                    return d.bgHeight;\r\n                });\r\n            ElementUtil.setElementProperties(self.bgRect, defaultBgRect);\r\n            \r\n            //progress bar rect \r\n            var eleConfig = {rx:4};\r\n            if(p) {\r\n                for(var k in p) {\r\n                    eleConfig[k] = p[k];\r\n                }\r\n            }\r\n    \t\tself.mainElement.datum(self.data())\r\n    \t\t    .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"y\", function(d) {\r\n                    return d.y;\r\n                })\r\n                .attr(\"height\", function(d) {\r\n                    return d.height;\r\n                })\r\n                .attr(\"x\", function(d) {\r\n                    return d.x;\r\n                })\r\n                .attr(\"width\", function(d) {\r\n                    return d.width;\r\n                });\r\n            ElementUtil.setElementProperties(self.mainElement, eleConfig);\r\n            self.setLegendColor();\r\n            \r\n            if(self.label1) {\r\n                var labelData1 = data.label1;\r\n                labelData1.name = labelData1.format ?　self.formatStr(labelData1.format)(self.data())　: self.data().value;\r\n                self.label1.update(labelData1);\r\n                self.labelLayout(self.label1G, self.label1, self.data(), true, data.label1Position);\r\n            }\r\n            if(self.label2) {\r\n                var labelData2 = data.label2;\r\n                labelData2.name = labelData2.format ?　self.formatStr(labelData2.format)(self.data())　: self.data().value;\r\n                self.label2.update(labelData2);\r\n                self.labelLayout(self.label2G, self.label2, self.data(), true, data.label2Position);\r\n            }\r\n    \t}\r\n    };\r\n    \r\n     //override\r\n    this.createLabel = function(group, d) {\r\n        if(!d.data || d.value === null || d.value === undefined) {\r\n            return;\r\n        }\r\n        \r\n        var labelData1 = d.data.label1;\r\n        if(labelData1) {\r\n        \tself.label1G = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        \tlabelData1.name = labelData1.format ?　self.formatStr(labelData1.format)(d)　: d.value;\r\n            self.label1 = new BaseLabel(self.label1G, labelData1, self);\r\n            self.label1.render();\r\n            self.labelLayout(self.label1G, self.label1, d, false, d.data.label1Position);\r\n        }\r\n        \r\n        var labelData2 = d.data.label2;\r\n        if(labelData2) {\r\n        \tself.label2G = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n            labelData2.name = labelData2.format ?　self.formatStr(labelData2.format)(d)　: d.value;\r\n            self.label2 = new BaseLabel(self.label2G, labelData2, self);\r\n            self.label2.render();\r\n            self.labelLayout(self.label2G, self.label2, d, false, d.data.label2Position);\r\n        }\r\n    }\r\n    \r\n    //override\r\n    this.labelLayout = function(element, plugin, d, isUpdate, position){\r\n        if(position === 'none') {\r\n            element.style(\"display\", \"none\");\r\n            return;\r\n        } else {\r\n            element.style(\"display\", \"block\");\r\n        }\r\n        if(!position)\r\n            position = 'center';\r\n        \r\n        var translate, labelPosition = position.toLowerCase(), tx = 0, ty = 0;\r\n        var labelBox = element.node().getBBox();\r\n        if(labelPosition == 'left') {\r\n            tx = 1 + labelBox.width / 2;\r\n            ty = d.y + d.bgHeight / 2;\r\n        } else if(labelPosition == 'right') {\r\n            tx = d.x + d.bgWidth + labelBox.width / 2 + 3;\r\n            ty = d.y + d.bgHeight / 2;\r\n        } else if(labelPosition == 'top') {\r\n            tx = d.x + d.bgWidth / 2;\r\n            ty = d.y - labelBox.height / 2;\r\n        } else if(labelPosition == 'bottom') {\r\n            tx = d.x + d.bgWidth / 2;\r\n            ty = d.y + d.bgHeight + labelBox.height / 2;\r\n        } else if(labelPosition == 'center') {\r\n            tx = d.x + d.bgWidth / 2;\r\n            ty = d.y + d.bgHeight / 2;\r\n        } else if(labelPosition == 'topleft') {\r\n            tx = d.x + labelBox.width / 2;\r\n            ty = d.y - labelBox.height / 2;\r\n        } else if(labelPosition == 'topright') {\r\n            tx = d.x + d.bgWidth - labelBox.width / 2;\r\n            ty = d.y - labelBox.height / 2;\r\n        } else if(labelPosition == 'bottomleft') {\r\n            tx = d.x + labelBox.width / 2;\r\n            ty = d.y + d.bgHeight + labelBox.height / 2;\r\n        } else if(labelPosition == 'bottomright') {\r\n            tx = d.x + d.bgWidth - labelBox.width / 2;\r\n            ty = d.y + d.bgHeight + labelBox.height / 2;\r\n        } else if(labelPosition == 'insideleft') {\r\n            tx = d.x + labelBox.width / 2;\r\n            ty = d.y + d.bgHeight / 2;\r\n        } else if(labelPosition == 'insideright') {\r\n            tx = d.x + d.bgWidth - labelBox.width / 2;\r\n            ty = d.y + d.bgHeight / 2;\r\n        } else {\r\n            //default center\r\n            tx = d.x + d.bgWidth / 2;\r\n            ty = d.y + d.bgHeight / 2;\r\n        }\r\n        if(isUpdate) {\r\n             element\r\n                .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        } else {\r\n             element\r\n                .attr(\"transform\", \"translate(\"+1+\",\"+ty+\")\")\r\n                .transition().duration(self.animation() ? 0 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        }\r\n    }\r\n};\r\n\r\nHProgressBarNode.struct = function(ghca_charts) {\r\n    var BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    BaseNode.struct(ghca_charts);\r\n    HProgressBarNode.prototype = Object.create(BaseNode.prototype);\r\n    HProgressBarNode.prototype.constructor = HProgressBarNode;\r\n};\r\n\r\nmodule.exports = HProgressBarNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/hProgressBarNode.js\n// module id = 91\n// module chunks = 0","var IconNode = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const ImageElement = ghca_charts.view.elements.imageElement;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const RectElement = ghca_charts.view.elements.rectElement;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        imageElement = _element,\r\n        backgroundEle;\r\n\r\n    self.config({\r\n    \timageWidth:32,\r\n        imageHeight:32,\r\n        opacity:1\r\n    });\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"iconNode\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n    \tif(imageElement) {\r\n            var config = ObjectUtil.cloneObj(self.config());\r\n            config.url = RegexUtil.replace(RegexUtil.dataRegex,config.url,self.data());\r\n            config.imageWidth = RegexUtil.replace(RegexUtil.dataRegex,config.imageWidth,self.data());\r\n            config.imageHeight = RegexUtil.replace(RegexUtil.dataRegex,config.imageHeight,self.data());\r\n            config.opacity = RegexUtil.replace(RegexUtil.dataRegex,config.opacity,self.data());\r\n                    \r\n    \t\timageElement.data(config);\r\n    \t}\r\n    \tif(backgroundEle && self.config().background) {\r\n            backgroundEle.data(self.config().background);\r\n        }\r\n        self.resetBBox(parseFloat(imageElement.svgElement.attr(\"x\")),parseFloat(imageElement.svgElement.attr(\"y\")), config.imageWidth, config.imageHeight);\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = ObjectUtil.cloneObj(self.config());\r\n        config.url = RegexUtil.replace(RegexUtil.dataRegex,config.url,self.data());\r\n        config.imageWidth = RegexUtil.replace(RegexUtil.dataRegex,config.imageWidth,self.data());\r\n        config.imageHeight = RegexUtil.replace(RegexUtil.dataRegex,config.imageHeight,self.data());\r\n        config.opacity = RegexUtil.replace(RegexUtil.dataRegex,config.opacity,self.data());\r\n        if(config.background) {\r\n        \tbackgroundEle = new RectElement(g, config.background);\r\n            backgroundEle.render();\r\n        }\r\n        imageElement = new ImageElement(g,config);\r\n        imageElement.render();\r\n        imageElement.svgElement.attr(\"class\",\"icon_image\");\r\n        self.resetBBox(parseFloat(imageElement.svgElement.attr(\"x\")),parseFloat(imageElement.svgElement.attr(\"y\")), config.imageWidth, config.imageHeight);\r\n    }\r\n};\r\n\r\nIconNode.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    IconNode.prototype = Object.create(Plugin.prototype);\r\n    IconNode.prototype.constructor = IconNode;\r\n};\r\n\r\nmodule.exports = IconNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/IconNode.js\n// module id = 92\n// module chunks = 0","var ImageNode = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const ImageElement = ghca_charts.view.elements.imageElement;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const CircleElement = ghca_charts.view.elements.circleElement;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        imageElement = _element,\r\n        backgroundEle;\r\n\r\n    self.config({\r\n    \timageWidth:32,\r\n        imageHeight:32,\r\n        opacity:1\r\n    });\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"imageNode\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n    \tif(imageElement) {\r\n            var config = ObjectUtil.cloneObj(self.config());\r\n            config.color = RegexUtil.replace(RegexUtil.dataRegex,config.color,self.data());\r\n            config.url = RegexUtil.replace(RegexUtil.dataRegex,config.url,self.data());\r\n            config.imageWidth = RegexUtil.replace(RegexUtil.dataRegex,config.imageWidth,self.data());\r\n            config.imageHeight = RegexUtil.replace(RegexUtil.dataRegex,config.imageHeight,self.data());\r\n    \t\timageElement.data(config);\r\n    \t}\r\n    \tif(backgroundEle && self.config().background) {\r\n            backgroundEle.data(self.config().background);\r\n        }\r\n        self.resetBBox(-config.imageWidth/2, -config.imageHeight/2, config.imageWidth, config.imageHeight);\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = ObjectUtil.cloneObj(self.config());\r\n        config.color = RegexUtil.replace(RegexUtil.dataRegex,config.color,self.data());\r\n        config.url = RegexUtil.replace(RegexUtil.dataRegex,config.url,self.data());\r\n        config.imageWidth = RegexUtil.replace(RegexUtil.dataRegex,config.imageWidth,self.data());\r\n        config.imageHeight = RegexUtil.replace(RegexUtil.dataRegex,config.imageHeight,self.data());\r\n        if(config.background) {\r\n        \tbackgroundEle = new CircleElement(g, config.background);\r\n            backgroundEle.render();\r\n        }\r\n        imageElement = new ImageElement(g,config);\r\n        imageElement.render();\r\n        self.resetBBox(-config.imageWidth/2, -config.imageHeight/2, config.imageWidth, config.imageHeight);\r\n    }\r\n};\r\n\r\nImageNode.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    ImageNode.prototype = Object.create(Plugin.prototype);\r\n    ImageNode.prototype.constructor = ImageNode;\r\n};\r\n\r\nmodule.exports = ImageNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/imageNode.js\n// module id = 93\n// module chunks = 0","var LineNode = function (_element,_data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this,\r\n        eleConfig = {r:3, \"stroke-width\":1.5};\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n//    // ------------------------------\r\n//    // radius\r\n//    // ------------------------------\r\n//    \r\n//    /**\r\n//     * 半径\r\n//     */\r\n//    var radius = 3;\r\n//    this.radius = function(value){\r\n//        if (!arguments.length) return radius;\r\n//        radius = value;\r\n//        return this;\r\n//    };\r\n//    \r\n//    // ------------------------------\r\n//    // strokeWidth\r\n//    // ------------------------------\r\n//    \r\n//    /**\r\n//     * 边线宽度\r\n//     */\r\n//    var strokeWidth = 1.5;\r\n//    this.strokeWidth = function(value){\r\n//        if (!arguments.length) return strokeWidth;\r\n//        strokeWidth = value;\r\n//        return this;\r\n//    };\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"lineNode\";\r\n    };\r\n    \r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data;\r\n//    };\r\n\r\n    //override\r\n    this.mouseOverHandler = function() {\r\n        self.mainElement\r\n            .attr(\"r\", eleConfig.r + 1)\r\n            .attr(\"stroke-width\", eleConfig[\"stroke-width\"] + 1);\r\n    };\r\n    \r\n    //override\r\n    this.mouseOutHandler = function() {\r\n    \tself.mainElement\r\n            .attr(\"r\", eleConfig.r)\r\n            .attr(\"stroke-width\", eleConfig[\"stroke-width\"]);\r\n    };\r\n\r\n    //override\r\n    this.selectedChange = function(seleced) {\r\n    };\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tparseEleConfig();\r\n        self.mainElement = g.append(\"circle\");\r\n        var t = self.mainElement\r\n            .attr(\"class\", \"point-circle\")\r\n            .attr(\"cx\", function(d) {\r\n                return d.x;\r\n            })\r\n            .attr(\"cy\", function(d) {\r\n                return d.y;\r\n            })\r\n            .attr(\"r\", 0)\r\n            .attr(\"fill\",  function(d) {\r\n                return d.hasOwnProperty(\"legendColor\") ? d.legendColor :　\"white\";\r\n            })\r\n            .attr(\"stroke\", function(d) {\r\n                return d.hasOwnProperty(\"legendColor\") ? d.legendColor :　\"blue\";\r\n            })\r\n            .transition().duration(self.animation() ? 1000 : 0)\r\n        ElementUtil.setElementProperties(t, eleConfig);\r\n        self.createLabel(g,self.data());\r\n    };\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(self.mainElement) {\r\n            parseEleConfig();\r\n    \t\tvar t = self.mainElement.datum(self.data())\r\n    \t\t    .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"cx\", function(d) {\r\n                    return d.x;\r\n                })\r\n                .attr(\"cy\", function(d) {\r\n                    return d.y;\r\n                })\r\n                .attr(\"fill\",  function(d) {\r\n                    return d.hasOwnProperty(\"legendColor\") ? d.legendColor :　\"white\";\r\n                })\r\n                .attr(\"stroke\", function(d) {\r\n                    return d.hasOwnProperty(\"legendColor\") ? d.legendColor :　\"blue\";\r\n                });\r\n            ElementUtil.setElementProperties(t, eleConfig);\r\n    \t}\r\n    \tif(self.label) {\r\n    \t\tvar labelData = self.data().data.label;\r\n            labelData.name = labelData.name ?　labelData.name　: self.data().value;\r\n    \t\tself.label.update(labelData);\r\n    \t\tself.labelLayout(self.labelG, self.label, self.data(), true);\r\n    \t}\r\n    };\r\n    \r\n    //override\r\n    this.createLabel = function(group, d) {\r\n        if(!d.data || !d.data.label || d.value === null || d.value === undefined) {\r\n            return;\r\n        }\r\n        self.labelG = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        var labelData = d.data.label;\r\n        labelData.name = labelData.name ?　labelData.name　: d.value;\r\n        self.label =  new BaseLabel(self.labelG, labelData, self);\r\n        self.label.render();\r\n        self.labelLayout(self.labelG, self.label, d, false);\r\n    };\r\n    \r\n    //override\r\n    this.labelLayout = function(element, plugin, d, isUpdate){\r\n        var position = d.data.labelPosition;\r\n        if(position === 'none') {\r\n            element.style(\"display\", \"none\");\r\n            return;\r\n        } else {\r\n            element.style(\"display\", \"block\");\r\n        }\r\n        if(!position)\r\n            position = 'top';\r\n        \r\n        var labelPosition = position.toLowerCase(),translate, tx = 0, ty = 0;\r\n        var labelBox = element.node().getBBox();\r\n        var r = eleConfig.r + eleConfig[\"stroke-width\"] + 2;\r\n        if(labelPosition == 'bottom') {\r\n            tx = d.x;\r\n            ty = d.y + r + labelBox.height / 2;\r\n        } else if(labelPosition == 'left') {\r\n            tx = d.x - r - labelBox.width / 2;\r\n            ty = d.y;\r\n        } else if(labelPosition == 'right') {\r\n            tx = d.x + r + labelBox.width / 2;\r\n            ty = d.y;\r\n        } else if(labelPosition == 'center') {\r\n            tx = d.x;\r\n            ty = d.y;\r\n        } else {\r\n        \t//default top\r\n        \ttx = d.x;\r\n            ty = d.y - r - labelBox.height / 2;\r\n        }\r\n        if(isUpdate) {\r\n        \t element\r\n                .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        } else {\r\n        \t element\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\")\r\n                .transition().duration(self.animation() ? 1000 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        }\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  private Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    var parseEleConfig = function() {\r\n        var data = self.data().data;\r\n        var p = data && data.hasOwnProperty(\"clazzProperties\") ? data.clazzProperties : null;\r\n        eleConfig = {r:3, \"stroke-width\":1.5};\r\n        if(p) {\r\n            for(var k in p) {\r\n                eleConfig[k] = p[k];\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nLineNode.struct = function(ghca_charts) {\r\n    var BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    BaseNode.struct(ghca_charts);\r\n    LineNode.prototype = Object.create(BaseNode.prototype);\r\n    LineNode.prototype.constructor = LineNode;\r\n};\r\n\r\nmodule.exports = LineNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/lineNode.js\n// module id = 94\n// module chunks = 0","var MoreTool = function (_element,_data) {\r\n\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this;\r\n\r\n    self.config({\r\n        \"text\":\"更多...\",\r\n        \"fontColor\":\"#2585c0\",\r\n        \"fontFamily\":\"微软雅黑\",\r\n        \"fontSize\":14,\r\n    });\r\n    //override\r\n    this.actualWidth = function(){\r\n        return 0;\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        return 0;\r\n    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"moreTool\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = self.config();\r\n        self.textElement =\r\n            g.append(\"text\").style(\"font-size\",config.fontSize)\r\n                .style(\"font-family\",config.fontFamily)\r\n                .style(\"fill\",config.fontColor)\r\n                .style(\"pointer-events\",\"all\")\r\n                .attr(\"dx\",config.fontSize*2)\r\n                .attr(\"dy\",config.fontSize/2)\r\n                .text(config.text);\r\n    }\r\n    //override\r\n    this.bindEvents = function(g){\r\n        g.on('mouseover', function(d) {\r\n            d3.event.stopPropagation();\r\n            self.textElement.style(\"fill\",\"#FF6633\")\r\n        });\r\n\r\n        g.on('mouseout', function(d) {\r\n            d3.event.stopPropagation();\r\n            self.textElement.style(\"fill\",self.config().fontColor)\r\n        });\r\n        g.on('click', function(d) {\r\n            d3.event.stopPropagation();\r\n            self.el.node().dispatchEvent(EventUtil.createCustomEvent(self.config().events,true,true,self.data()));\r\n            self.el.remove();\r\n        });\r\n\r\n    }\r\n};\r\n\r\nMoreTool.struct = function(ghca_charts) {\r\n    var Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    Plugin.struct(ghca_charts);\r\n    MoreTool.prototype = Object.create(Plugin.prototype);\r\n    MoreTool.prototype.constructor = MoreTool;\r\n};\r\n\r\nmodule.exports = MoreTool;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/moreTool.js\n// module id = 95\n// module chunks = 0","var Node = function (_element,_data) {\r\n    // if(!window.node){\r\n    //     window.node=1;\r\n    // }\r\n    // window.node=window.node+1;\r\n    // console.log(window.node);\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const BaseEvent   = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        superDrawPluginFunction = this.drawPlugin,\r\n        superBindEventsFunction = this.bindEvents;\r\n    self.dispatch = d3.dispatch(\"selectedChange\",\"collapsed\");\r\n    self.mainPlugin = null;\r\n    self.backGroundPlugin = null;\r\n    self.labelContainer = null;\r\n    self.labelPlugin = null;\r\n    self.plugins = [];\r\n\r\n    self.config({\r\n    \tboundType:\"circle\",\r\n        main:{\r\n            clazz:\"circle\",\r\n            config:{\r\n                cx:0,\r\n                cy:0,\r\n                radius:10,\r\n                border:2,\r\n                borderColor:\"green\",\r\n                linecap:\"butt\",\r\n                color:\"red\"\r\n            }\r\n        },\r\n        backGround:{\r\n            clazz:\"circle\",\r\n            config:{\r\n                cx:0,\r\n                cy:0,\r\n                radius:15,\r\n                border:2,\r\n                borderColor:\"green\",\r\n                linecap:\"butt\",\r\n                color:\"none\"\r\n            }\r\n        },\r\n        label:{\r\n            clazz:\"label\",\r\n            position:\"{labelPosition}\",\r\n            rotate:\"{labelRotateAngle}\",\r\n            config:{\r\n                text:\"{name}\",\r\n                maxWidth:60,\r\n                backGroundColor:\"green\",\r\n                backGroundOpacity:.3,\r\n                borderRadius:4,\r\n                padding:4,\r\n                fontColor:\"0x000000\",\r\n                fontFamily:\"宋体\",\r\n                fontSize:12,\r\n                textLine:3,\r\n                visible:true\r\n            }\r\n        },\r\n        plugins:[\r\n            {\r\n                clazz:\"expandTool\",\r\n                config:{\r\n\r\n                }\r\n            }\r\n        ]\r\n    });\r\n\r\n    /**\r\n     * 节点选中\r\n     * @param _selected\r\n     * @returns {*}\r\n     */\r\n    var _selected = false;\r\n    this.selected = function(_p){\r\n        if(!arguments.length)return _selected;\r\n        _selected = _p;\r\n        self.dispatch.call(\"selectedChange\",this , new BaseEvent(self,{selected:_selected}));\r\n        return this;\r\n    }\r\n    this.selectedChange = function(seleced){\r\n        if(self.backGroundPlugin)\r\n            if(seleced){\r\n                self.backGroundPlugin.visible(true);\r\n            }else{\r\n                self.backGroundPlugin.visible(false);\r\n            }\r\n    }\r\n    this.mouseOverHandler = function(){\r\n        if(!self.selected()&&self.backGroundPlugin)\r\n            self.backGroundPlugin.visible(true);\r\n    }\r\n    this.mouseOutHandler = function(){\r\n        if(!self.selected()&&self.backGroundPlugin)\r\n            self.backGroundPlugin.visible(false);\r\n    }\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"node\";\r\n    }\r\n\r\n//    //override\r\n//    this.actualWidth = function(){\r\n//        var bw = self.backGroundPlugin?self.backGroundPlugin.actualWidth():0;\r\n//        var mw = self.mainPlugin ? self.mainPlugin.actualWidth() : 0;\r\n//        return bw>mw?bw:mw;\r\n//    }\r\n//    //override\r\n//    this.actualHeight = function(){\r\n//        var bh = self.backGroundPlugin?self.backGroundPlugin.actualHeight():0;\r\n//        var mh = self.mainPlugin ? self.mainPlugin.actualHeight() : 0;\r\n//        return bh>mh?bh:mh;\r\n//    }\r\n    //override\r\n    this.update = function(g){\r\n    \tvar config = self.config();\r\n    \tself.boundType(config.boundType);\r\n    \tif(config.backGround && self.backGroundPlugin) {\r\n            self.backGroundPlugin.config(config.backGround.config);\r\n            self.backGroundPlugin.visible(false);\r\n            self.backGroundPlugin.update();\r\n        }\r\n        if(config.main && self.mainPlugin) {\r\n            self.mainPlugin.ownerData(self.ownerData());\r\n            self.mainPlugin.config(config.main.config);\r\n            self.mainPlugin.update();\r\n        }\r\n        \r\n        var x = self.mainPlugin?self.mainPlugin.getBBox().x:0;\r\n        var y = self.mainPlugin?self.mainPlugin.getBBox().y:0;\r\n        var bw = self.backGroundPlugin?self.backGroundPlugin.actualWidth():0;\r\n        var mw = self.mainPlugin ? self.mainPlugin.actualWidth() : 0;\r\n        var width = bw>mw?bw:mw;\r\n        var bh = self.backGroundPlugin?self.backGroundPlugin.actualHeight():0;\r\n        var mh = self.mainPlugin ? self.mainPlugin.actualHeight() : 0;\r\n        var height = bh>mh?bh:mh;\r\n        self.resetBBox(x, y, width, height);\r\n        \r\n    \tif(config.label && self.labelContainer) {\r\n    \t\tself.labelPlugin.config(config.label.config);\r\n    \t\tself.labelPlugin.update();\r\n    \t\tlabelLayout();\r\n    \t}\r\n\r\n        self.plugins.forEach(function(d,i){\r\n            d.render();\r\n        });\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        // if(!window.drawPluginnode){\r\n        //     window.drawPluginnode=1;\r\n        // }\r\n        // window.drawPluginnode=window.drawPluginnode+1;\r\n        // console.log(\"drawPluginnode:\"+window.drawPluginnode);\r\n        superDrawPluginFunction(g);\r\n        g.attr(\"style\",\"cursor:pointer;\")\r\n        if(self.data().data && self.data().data.config)\r\n            self.config(self.data().data.config);\r\n        var config = self.config();\r\n\r\n        self.boundType(config.boundType);\r\n        if(config.backGround) {\r\n        \tself.backGroundPlugin = ClassFactory.newPluginInstance(config.backGround.clazz,[g,self.data()]);\r\n            self.backGroundPlugin.config(config.backGround.config);\r\n            self.backGroundPlugin.visible(false);\r\n            self.backGroundPlugin.render();\r\n        }\r\n        if(config.main) {\r\n            \r\n        \tself.mainPlugin = ClassFactory.newPluginInstance(config.main.clazz,[g,self.data()]);\r\n        \tself.mainPlugin.ownerData(self.ownerData());\r\n            self.mainPlugin.config(config.main.config);\r\n            self.mainPlugin.render();\r\n        }\r\n        \r\n        var x = self.mainPlugin?self.mainPlugin.getBBox().x:0;\r\n        var y = self.mainPlugin?self.mainPlugin.getBBox().y:0;\r\n        var bw = self.backGroundPlugin?self.backGroundPlugin.actualWidth():0;\r\n        var mw = self.mainPlugin ? self.mainPlugin.actualWidth() : 0;\r\n        var width = bw>mw?bw:mw;\r\n        var bh = self.backGroundPlugin?self.backGroundPlugin.actualHeight():0;\r\n        var mh = self.mainPlugin ? self.mainPlugin.actualHeight() : 0;\r\n        var height = bh>mh?bh:mh;\r\n        self.resetBBox(x, y, width, height);\r\n\r\n        if(config.label) {\r\n\t        self.labelContainer = g.append(\"svg:g\");\r\n            self.labelPlugin = ClassFactory.newPluginInstance(config.label.clazz,[self.labelContainer,self.data()]);\r\n            self.labelPlugin.config(config.label.config);\r\n            self.labelPlugin.render();\r\n    \r\n            labelLayout();\r\n        }\r\n\r\n        var plugins = config.plugins;\r\n        if(plugins && plugins.length>0){\r\n            plugins.forEach(function(d,i){\r\n                //!d.render ||\r\n                if(d.render==undefined || RegexUtil.replace(RegexUtil.dataRegex,d.render,self.data())==\"true\"){\r\n\r\n                    var plugin = ClassFactory.newPluginInstance(d.clazz,[g,self.data()]);\r\n                    plugin.config(d.config);\r\n                    plugin.render();\r\n                    // if(d.events){\r\n                    //     d.events.forEach(function(e){\r\n                    //         plugin.addEventListener(e,function(event){\r\n                    //             self.dispatch.call(e,this,new BaseEvent(self,{collapsed:event.data.collapsed,node:self.data()}));\r\n                    //         });\r\n                    //     });\r\n                    // }\r\n                    self.plugins.push(plugin);\r\n                    pluginLayout(plugin,d);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    //override\r\n    this.bindEvents = function(g){\r\n        superBindEventsFunction(g);\r\n        g.on('mouseover', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.SHOW_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            self.mouseOverHandler();\r\n        });\r\n        g.on('mousemove', function(d) {\r\n            var evt = EventUtil.createCustomEvent(BaseEvent.UPDATE_TOOL_TIP, true, true, d);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n        });\r\n        g.on('mouseout', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.HIDE_TOOL_TIP, true, true);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            self.mouseOutHandler();\r\n        });\r\n        g.on('click', function(d) {\r\n        \tvar evt = EventUtil.createCustomEvent(BaseEvent.NODE_CLICK, true, true, d);\r\n            d3.select(this).node().dispatchEvent(evt);\r\n            // self.selected(!_selected);\r\n           });\r\n        g.on(\"dblclick.node\",function(d){\r\n            if(self.config().events)\r\n                self.el.node().dispatchEvent(EventUtil.createCustomEvent(self.config().events,true,true,d));\r\n        });\r\n        self.dispatch.on(\"selectedChange.\"+self.nameSpace(),function(e){\r\n            self.selectedChange(e.data.selected);\r\n        });\r\n    }\r\n    \r\n    function pluginLayout(plugin,d){\r\n        var xPos = d.xPos,yPos = d.yPos,x=0,y=0;\r\n        var w = self.actualWidth(),\r\n            h  = self.actualHeight(),\r\n            rh = plugin.actualHeight(),\r\n            rw = plugin.actualWidth();\r\n        if(xPos==\"left\")x=-w/2-rw;\r\n        else if(xPos==\"right\")x=w/2;\r\n        else if(yPos==\"top\")y=-h/2-rh;\r\n        else if(yPos==\"middle\")y=0;\r\n        else if(yPos==\"bottom\")y=h/2;\r\n        plugin.transform(\"translate(\" + [x,y] + \")\");\r\n    }\r\n    \r\n    function labelLayout(){\r\n        var config = self.config();\r\n        var position = RegexUtil.replace(RegexUtil.dataRegex,config.label.position,self.data());\r\n        var rotate = RegexUtil.replace(RegexUtil.dataRegex,config.label.rotate,self.data());\r\n        var gap = RegexUtil.replace(RegexUtil.dataRegex,config.label.gap,self.data());\r\n        if(!position)position = 'bottom';\r\n        if(isNaN(gap))gap = 10;\r\n        var w = self.actualWidth(),\r\n            h  = self.actualHeight(),\r\n            rh = self.labelPlugin.actualHeight(),\r\n            rw = self.labelPlugin.actualWidth(),\r\n            point = [0,0];\r\n        if(position == 'top')\r\n            point = [-rw/2,(-h/2-rh-gap)];\r\n        else if(position == 'bottom')\r\n            point = [-rw/2,(h/2+gap)];\r\n        else if(position == 'left')\r\n            point = [(-rw-w/2),-rh/2];\r\n        else if(position == 'right')\r\n            point = [w/2,-rh/2];\r\n        else if(position == 'center')\r\n            point = [-rw/2,-rh/2];\r\n        else if(position == 'start')\r\n            point = [(-rw-w/2),-rh/2]\r\n        else if(position == 'end')\r\n            point = [w/2,-rh/2]\r\n        self.labelPlugin.transform(\"translate(\" + point + \")\");\r\n        self.labelContainer.attr(\"transform\",\"rotate(\" + rotate + \")\");\r\n    }\r\n};\r\n\r\nNode.struct = function(ghca_charts) {\r\n    var Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    Plugin.struct(ghca_charts);\r\n    Node.prototype = Object.create(Plugin.prototype);\r\n    Node.prototype.constructor = Node;\r\n};\r\nmodule.exports = Node;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/node.js\n// module id = 96\n// module chunks = 0","var PackNode = function (_element,_data,_parent) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const PackLabel = ghca_charts.view.elements.plugins.label.packLabel;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n    var arc, isPlayAnimation = false;\r\n    var defaulfConfig = {\r\n        clazz:'packNode',\r\n        //默认连线的颜色、类型属性等配置项\r\n        clazzProperties:{cornerRadius:0, padAngle:0, animation:true, labelPos:\"inner\"},\r\n        labelProperties:{'font-size':'0.8em',\"pointer-events\":\"none\", text:\"{#d.name#}\"},\r\n        //用户更改颜色连线的类型属性配置项\r\n        useProperties:{}\r\n    };\r\n    \r\n\t//--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // parent\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 父组件,baseChart实例\r\n     */\r\n    this.parent = function(value) {\r\n        return _parent;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // startAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 开始弧度\r\n     */\r\n    var startAngle = 0;\r\n    this.startAngle = function(value) {\r\n        if (!arguments.length)\r\n            return startAngle;\r\n        startAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // endAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 结束弧度\r\n     */\r\n    var endAngle = Math.PI * 2;\r\n    this.endAngle = function(value) {\r\n        if (!arguments.length)\r\n            return endAngle;\r\n        endAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // cornerRadius\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧圆角\r\n     */\r\n    var cornerRadius = 0;\r\n    this.cornerRadius = function(value) {\r\n        if (!arguments.length)\r\n            return cornerRadius;\r\n        cornerRadius = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // padAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧间隔\r\n     */\r\n    var padAngle = 0;\r\n    this.padAngle = function(value) {\r\n        if (!arguments.length)\r\n            return padAngle;\r\n        padAngle = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // arcRadius\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧半径百分比(0-1)\r\n     */\r\n    var arcRadiusPercent = 0;\r\n    this.arcRadiusPercent = function(value) {\r\n        if (!arguments.length)\r\n            return arcRadiusPercent;\r\n        arcRadiusPercent = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // title\r\n    // ------------------------------\r\n\r\n    /**\r\n     * path元素的title内容字符串\r\n     */\r\n    var title = null;\r\n    this.title = function(value) {\r\n        if (!arguments.length)\r\n            return title;\r\n        title = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // titleFunction\r\n    // ------------------------------\r\n\r\n    /**\r\n     * title生成规则方法，若注册该方法，则按该方法返回的内容显示title，忽略title属性\r\n     */\r\n    var titleFunction = null;\r\n    this.titleFunction = function(value) {\r\n        if (!arguments.length)\r\n            return titleFunction;\r\n        titleFunction = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // labelPos\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 标签类型，outer|inner|innerRing(默认innerRing)\r\n     */\r\n    var labelPos = \"innerRing\";\r\n    this.labelPos = function(value) {\r\n        if (!arguments.length)\r\n            return labelPos;\r\n        labelPos = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data.data;\r\n//    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"packNode\";\r\n    }\r\n    \r\n    //override\r\n    this.setLegendColor = function(d) {\r\n    \tvar data = d ? d : self.data();\r\n        if(data.data && data.data.legendColor){\r\n            ElementUtil.setElementProperties(self.mainElement,{\"fill\":data.data.legendColor});\r\n        }\r\n    }\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tif(!self.mainElemet) {\r\n    \t\tif(!self.data().data.data) {\r\n    \t\t\tself.data().data.data = ObjectUtil.cloneObj(defaulfConfig);\r\n    \t\t}\r\n    \t\t\r\n    \t\tvar nodeData = self.data().data.data.clazzProperties;\r\n    \t\tself.refreshData(nodeData);\r\n    \t\t\r\n    \t\tself.mainElement = g.append(\"path\")\r\n        \t\t.attr(\"id\", function(d) {\r\n                    return self.graph().getCustomId(\"pack-node-\", d.data.id);\r\n                })\r\n            self.transform(\"translate(\" + self.parent().xScale()(self.data().data.x) + \",\" + self.parent().yScale()(self.data().data.y) + \")\");\r\n    \t\tself.data().innerRadius = self.data().outerRadius * (1 - getArcRadiusPercent(self.data().data));\r\n    \t\tvar scaleK = self.parent().scaleK();\r\n    \t\tarc = d3.arc()\r\n                .innerRadius(scaleK * self.data().innerRadius)\r\n                .outerRadius(scaleK * self.data().outerRadius)\r\n                .cornerRadius(self.cornerRadius())\r\n                .padAngle(self.padAngle());\r\n\r\n            ElementUtil.setElementProperties(self.mainElement, nodeData);\r\n            self.setLegendColor();\r\n            \r\n            //title\r\n            if(self.titleFunction()) {\r\n                self.mainElement.append(\"title\").attr(\"class\", \"path-title\").text(self.titleFunction());\r\n            } else if(self.title()) {\r\n                self.mainElement.append(\"title\").attr(\"class\", \"path-title\").text(self.formatStr(self.title()));\r\n            }\r\n            \r\n            //arc\r\n            var transition;\r\n            if(self.isChartFirstInit()) {\r\n            \ttransition = d3.transition().duration(self.animation() ? 1000 : 0).ease(d3.easeExpOut);\r\n                self.mainElement\r\n                    .attr(\"transform\", \"rotate(-179)scale(0.5)\")\r\n                    .transition(transition)\r\n                    .attr(\"transform\", \"rotate(0)scale(1)\")\r\n                    .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                    .on(\"end\", function() {\r\n                        isPlayAnimation = false;\r\n                    })\r\n                    .attr(\"d\", function(d){return arc(d);});\r\n                    \r\n            } else {\r\n            \ttransition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n                self.mainElement\r\n                    .transition(transition)\r\n                    .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                    .on(\"end\", function() {\r\n                        isPlayAnimation = false;\r\n                    })\r\n                    .attr(\"d\", function(d){return arc(d);});\r\n            }\r\n            \r\n            //clip\r\n            var labelPos = self.labelPos();\r\n            if(labelPos === \"outer\") {\r\n                \r\n            } else if(labelPos === \"innerRing\") {\r\n            \tself.defsCon = d3.select(self.mainElement.node().parentNode.parentNode.parentNode);\r\n            \tvar fontSize = getFontSize(self.data().data);\r\n            \tvar radius =  scaleK * self.data().outerRadius + fontSize/2 - 4;\r\n            \tvar pathArc = d3.arc()\r\n                    .startAngle(-Math.PI)\r\n                    .endAngle(Math.PI)\r\n//                    .innerRadius(radius)\r\n                    .outerRadius(radius)\r\n                    .padAngle(self.padAngle() + 0.02);\r\n                var defs = self.defsCon.select(\"defs\").node() === null ? self.defsCon.append(\"defs\") : self.defsCon.select(\"defs\");\r\n            \tvar id = self.graph().getCustomId(\"#pack-node-path-\", self.data().data.id);\r\n                var path = defs.select(id);\r\n                if(path.node() === null) {\r\n                    path = defs.append(\"path\").attr(\"id\", self.graph().getCustomId(\"pack-node-path-\", self.data().data.id));\r\n                }\r\n                path.attr(\"d\", pathArc(self.data().data));\r\n            } else {//inner\r\n            \tg.append(\"clipPath\")\r\n                    .attr(\"id\", function(d) {\r\n                        return self.graph().getCustomId(\"pack-node-clip-\", d.data.id);\r\n                    })\r\n                    .append(\"use\").attr(\"xlink:href\", function(d) {\r\n                        return self.graph().getCustomId(\"#pack-node-\", d.data.id);\r\n                    });\r\n                g.attr(\"clip-path\", function(d) {\r\n                    return \"url(#\" + self.graph().getCustomId(\"pack-node-clip\", d.data.id) + \")\";\r\n                });\r\n            }\r\n            \r\n            //label\r\n            if(self.data().data.data.labelProperties) {\r\n            \trefreshArc();\r\n            \tvar labelCon = labelPos === \"outer\" ? d3.select(g.node().parentNode.parentNode) : g;\r\n            \tself.label = new PackLabel(labelCon.append(\"g\").attr(\"id\", self.graph().getCustomId(\"labelCon_\", self.data().data.id)), self.data().data, transition);\r\n                self.label.isChartFirstInit(self.isChartFirstInit());\r\n                self.label.graph(self.graph());\r\n                self.label.scaleK(scaleK);\r\n                self.label.render();\r\n                \r\n                //outer\r\n                if(labelPos === \"outer\" && !self.polyline) {\r\n                    self.polyline = labelCon.append(\"polyline\").datum(self.data().data)\r\n                        .attr(\"id\", self.graph().getCustomId(\"polyline_\", self.data().data.id))\r\n                        .attr(\"opacity\", 0.5)\r\n                        .attr(\"stroke\", function(d) {\r\n                            return d.hasOwnProperty(\"legendColor\") ? d.legendColor : \"#000\";\r\n                        })\r\n                        .attr(\"stroke-width\", \"1.5px\")\r\n                        .attr(\"fill\", \"none\");\r\n                \r\n                    self.polyline\r\n                        .transition(transition)\r\n                        .attrTween(\"points\", polylineRenderTween);\r\n                }\r\n            }\r\n    \t}\r\n    };\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(!self.data().data.data) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar ud = arguments[0] ? arguments[0] : self.data();\r\n    \tvar transition = self.el.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n    \tvar scaleK = self.parent().scaleK();\r\n        if(self.mainElement) {\r\n        \tself.mainElement.datum(self.data());\r\n        \tvar nodeData = self.data().data.data.clazzProperties;\r\n            self.refreshData(nodeData);\r\n            \r\n            transition.attr(\"transform\", function(){\r\n                return \"translate(\" + self.parent().xScale()(ud.data.x) + \",\" + self.parent().yScale()(ud.data.y) + \")\";\r\n            });\r\n            ud.innerRadius = ud.outerRadius * (1 - getArcRadiusPercent(ud.data));\r\n        \tarc = d3.arc()\r\n                .innerRadius(scaleK * ud.innerRadius)\r\n                .outerRadius(scaleK * ud.outerRadius)\r\n                .cornerRadius(self.cornerRadius())\r\n                .padAngle(self.padAngle());\r\n\r\n            ElementUtil.setElementProperties(self.mainElement, nodeData);\r\n            self.setLegendColor(ud);\r\n            //title\r\n            if(self.titleFunction()) {\r\n                self.mainElement.select(\"title.path-title\").text(self.titleFunction());\r\n            } else if(self.title()) {\r\n                self.mainElement.select(\"title.path-title\").text(self.formatStr(self.title()));\r\n            }\r\n            \r\n            self.selectedChange(false);\r\n            \r\n            self.mainElement\r\n                .transition(transition)\r\n                .on(\"start\", function() {\r\n                    isPlayAnimation = true;\r\n                })\r\n                .on(\"end\", function() {\r\n                    isPlayAnimation = false;\r\n                })\r\n                .attr(\"d\", function(d){return arc(d);});\r\n        }\r\n        //label\r\n        if(self.label) {\r\n            refreshArc(ud);\r\n            self.label.data(ud.data);\r\n            self.label.scaleK(scaleK);\r\n            self.label.update(transition);\r\n            //outer\r\n            if(self.labelPos() === \"outer\") {\r\n            \tif(!self.polyline) {\r\n            \t\tself.polyline = self.mainContainer().append(\"polyline\").attr(\"id\", self.graph().getCustomId(\"polyline_\", ud.data.id));\r\n            \t}\r\n                self.polyline.datum(ud.data)\r\n                    .attr(\"opacity\", 0.5)\r\n                    .attr(\"stroke\", function(d) {\r\n                        return d.hasOwnProperty(\"legendColor\") ? d.legendColor : \"#000\";\r\n                    })\r\n                    .attr(\"stroke-width\", \"1.5px\")\r\n                    .attr(\"fill\", \"none\")\r\n                    .transition(transition)\r\n                    .attrTween(\"points\", polylineUpdateTween);\r\n                    \r\n                self.defsCon = d3.select(self.mainElement.node().parentNode.parentNode.parentNode);\r\n                self.defsCon.select(\"defs\").remove();\r\n            } else if(self.labelPos() === \"innerRing\") {\r\n                self.defsCon = d3.select(self.mainElement.node().parentNode.parentNode.parentNode);\r\n                var fontSize = getFontSize(ud.data);\r\n                var radius =  scaleK * ud.outerRadius + fontSize/2 - 4;\r\n                var pathArc = d3.arc()\r\n                    .startAngle(-Math.PI)\r\n                    .endAngle(Math.PI)\r\n//                    .innerRadius(radius)\r\n                    .outerRadius(radius)\r\n                    .padAngle(self.padAngle()+0.02);\r\n                var defs = self.defsCon.select(\"defs\").node() === null ? self.defsCon.append(\"defs\") : self.defsCon.select(\"defs\");\r\n                var id = self.graph().getCustomId(\"#pack-node-path-\", ud.data.id);\r\n                var path = defs.select(id);\r\n                if(path.node() === null) {\r\n                \tpath = defs.append(\"path\").attr(\"id\", self.graph().getCustomId(\"pack-node-path-\", ud.data.id));\r\n                }\r\n                path.attr(\"d\", pathArc(ud.data));\r\n                    \r\n                if(self.polyline) {\r\n                    self.polyline.remove();\r\n                    self.polyline = null;\r\n                }\r\n            } else {\r\n            \tif(self.polyline) {\r\n            \t\tself.polyline.remove();\r\n            \t\tself.polyline = null;\r\n            \t}\r\n            }\r\n        }\r\n    };\r\n\r\n    //override\r\n    this.mouseOverHandler = function() {\r\n    \tvar nodeData = self.data().data.data.clazzProperties;\r\n        ElementUtil.setElementProperties(self.mainElement, {stroke:nodeData.overStroke});\r\n    }\r\n    //override\r\n    this.mouseOutHandler = function() {\r\n    \tvar nodeData = self.data().data.data.clazzProperties;\r\n    \tElementUtil.setElementProperties(self.mainElement, {stroke:nodeData.stroke});\r\n    }\r\n\r\n    //override\r\n    this.selectedChange = function(seleced) {\r\n    }\r\n\r\n    /**\r\n     * 刷新传入配置数据到相应参数的方法\r\n     * @param data 配置数据\r\n     */\r\n    this.refreshData = function(data) {\r\n        if(data) {\r\n            for(var key in data) {\r\n                if(this.hasOwnProperty(key)) {\r\n                    this[key](data[key]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // priavte Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var refreshArc = function(ud) {\r\n    \tvar ud = arguments[0] ? arguments[0] : self.data();\r\n    \tif(self.labelPos() === \"outer\") {\r\n    \t\tvar ir = ud.innerRadius;\r\n    \t\tvar or = ud.outerRadius;\r\n            var distance = or * 0.2;\r\n            distance = distance < 10 ? 10 : (distance > 20 ? 20 : distance);\r\n            var outerArc1 = d3.arc().innerRadius(ir).outerRadius(or);\r\n            var outerArcRadius = or + distance;\r\n            var outerArc2 = d3.arc().innerRadius(outerArcRadius).outerRadius(outerArcRadius);\r\n            ud.data.outerArc1 = outerArc1;\r\n            ud.data.outerArc2 = outerArc2;\r\n            ud.data.lineSize = self.parent().layout().radius();\r\n    \t} else {\r\n    \t\tud.data.arc = arc;\r\n    \t}\r\n    }\r\n\r\n    var midAngle = function (d){\r\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n    };\r\n    \r\n    var polylineRenderTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n        this._current = interpolate(0);\r\n        var outerArc1 = d.outerArc1;\r\n        var outerArc2 = d.outerArc2;\r\n        return function(t) {\r\n            var d2 = interpolate(t);\r\n            var startP = outerArc1.centroid(d2);\r\n            var centerP = outerArc2.centroid(d2);\r\n            var endP = outerArc2.centroid(d2);\r\n            centerP[1] = (centerP[1] - startP[1]) * t + startP[1];\r\n            endP[1] = (endP[1] - startP[1]) * t + startP[1];\r\n            endP[0] += d.lineSize * (midAngle(d2) < Math.PI ? 1 : -1);\r\n            return [startP, centerP, endP];\r\n        };          \r\n    };\r\n    \r\n    var polylineUpdateTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n        this._current = interpolate(0);\r\n        var outerArc1 = d.outerArc1;\r\n        var outerArc2 = d.outerArc2;\r\n        return function(t) {\r\n            var d2 = interpolate(t);\r\n            var pos = outerArc2.centroid(d2);\r\n            pos[0] += d.lineSize * (midAngle(d2) < Math.PI ? 1 : -1);\r\n            return [outerArc1.centroid(d2), outerArc2.centroid(d2), pos];\r\n        };        \r\n    };\r\n    \r\n    var getFontSize = function(d) {\r\n    \tvar fontSize = (d[\"fontSize\"] || d[\"font-size\"]);\r\n        if(ObjectUtil.isString(fontSize)) {\r\n            fontSize = parseInt(fontSize.split(\"px\")[0]);\r\n        }\r\n        if(isNaN(fontSize)) {\r\n            fontSize = 12;\r\n        }\r\n        return fontSize;\r\n    };\r\n    \r\n    var getArcRadiusPercent = function(data) {\r\n         var percent = ObjectUtil.isString(self.arcRadiusPercent()) ? \r\n           self.formatStr(self.arcRadiusPercent())(data) : self.arcRadiusPercent();\r\n         percent = parseFloat(percent);\r\n         if(isNaN(percent)) {\r\n         \tpercent = 0;\r\n         } else if(percent > 1) {\r\n         \tpercent = 1;\r\n         } else if(percent < 0) {\r\n            percent = 0;\r\n         }\r\n         return percent;\r\n    };\r\n};\r\n\r\nPackNode.struct = function(ghca_charts) {\r\n\tvar BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\tBaseNode.struct(ghca_charts);\r\n    PackNode.prototype = Object.create(BaseNode.prototype);\r\n    PackNode.prototype.constructor = BaseNode;\r\n};\r\n\r\nmodule.exports = PackNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/packNode.js\n// module id = 97\n// module chunks = 0","var PathNode = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const PathElement = ghca_charts.view.elements.pathElement;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const ClassFactory = ghca_charts.view.util.classFactory;\r\n    const Label = ghca_charts.view.elements.plugins.label.label;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        pathElement = _element,\r\n        groupElement = null,\r\n        label1 = null,\r\n        label2 = null,\r\n        nodesIns = [];\r\n\r\n    self.config({\r\n        lineLength:100,\r\n        nodePadding:10,\r\n        border:2,\r\n        borderColor:\"black\",\r\n        linecap:\"butt\"\r\n    });\r\n\r\n    //override\r\n    this.actualWidth = function(){\r\n       return pathElement ? pathElement.svgElement.node().getBBox().width : 0;\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        return pathElement ? pathElement.svgElement.node().getBBox().height : 0;\r\n    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"pathNode\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n    \tvar startX = 0, config = self.config();\r\n    \tif(pathElement) {\r\n    \t\tstartX = refreshPath(config);\r\n    \t\tpathElement.data(config);\r\n    \t\tif(groupElement) {\r\n    \t\t\tgroupElement.attr(\"transform\", \"translate(\" + [startX+config.nodePadding, -48/2-2] + \")\");\r\n    \t\t}\r\n    \t}\r\n    \tif(label1) {\r\n            label1.data(config.label1);\r\n            label1.el.attr(\"transform\", \"translate(\" + [startX + 10,6] + \")\");\r\n        }\r\n        if(label2) {\r\n            label2.data(config.label2);\r\n            var box = label2.el.node().getBBox();\r\n            label2.el.attr(\"transform\", \"translate(\" + [startX + (self.actualWidth()-box.width)/2,6] + \")\");\r\n        }\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = ObjectUtil.cloneObj(self.config());\r\n        config.color = RegexUtil.replace(RegexUtil.dataRegex,config.color,self.data());\r\n        config.borderColor = RegexUtil.replace(RegexUtil.dataRegex,config.borderColor,self.data());\r\n        var startX = refreshPath(config);\r\n        pathElement = new PathElement(g,config);\r\n        pathElement.render();\r\n        \r\n        groupElement = g.append(\"g\");\r\n        groupElement.attr(\"transform\", \"translate(\" + [startX+config.nodePadding, -48/2-2] + \")\");\r\n        \r\n        label1 = new Label(g,self.data());\r\n        label1.config(config.label1);\r\n        label1.render();\r\n        label1.el.attr(\"transform\", \"translate(\" + [startX + 10,6] + \")\");\r\n        \r\n        label2 = new Label(g,self.data());\r\n        label2.config(config.label2);\r\n        label2.render();\r\n        var box = label2.el.node().getBBox();\r\n        label2.el.attr(\"transform\", \"translate(\" + [startX + (self.actualWidth()-box.width)/2,6] + \")\");\r\n        \r\n        var nodes = _data.data && _data.data.hasOwnProperty(\"nodes\") ? _data.data.nodes : null;\r\n        if(nodes && nodes.length > 0) {\r\n        \tfor(var nodeData, i = 0, len = nodes.length; i < len; i++) {\r\n        \t\tnodeData = nodes[i];\r\n        \t\tvar rendererConfig;\r\n                //获取节点渲染器配置\r\n                if(nodeData.nodeRenderer && self.ownerData()) {\r\n                    rendererConfig = self.ownerData().renderers[nodeData.nodeRenderer];\r\n                }\r\n\r\n                var nodeIns = ClassFactory.newNodeInstance(rendererConfig.clazz, [groupElement, nodeData]);\r\n                nodeIns.config(rendererConfig.config);\r\n                nodeIns.render();\r\n                nodeIns.el.attr(\"transform\", \"translate(\" + [i*(48+30), 0] + \")\");\r\n                nodeData.ins = nodeIns;\r\n                nodesIns.push(nodeIns);\r\n        \t}\r\n        }\r\n    }\r\n    \r\n    var refreshPath = function(config) {\r\n    \tvar lineLength = RegexUtil.replace(RegexUtil.dataRegex,config.lineLength,self.data());\r\n        if(isNaN(lineLength)) {\r\n            lineLength = 100;\r\n        }\r\n        var targetX = self.data().x;\r\n        var sourceX = self.data().parent.x;\r\n        var startX = (sourceX - targetX) / 2;\r\n        var endX = startX + lineLength;\r\n        config.path = \"M\" + startX + \" 0L \" + endX + \" 0\";\r\n        return startX;\r\n    }\r\n};\r\n\r\nPathNode.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    PathNode.prototype = Object.create(Plugin.prototype);\r\n    PathNode.prototype.constructor = PathNode;\r\n};\r\n\r\nmodule.exports = PathNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/pathNode.js\n// module id = 98\n// module chunks = 0","var Rect = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const RectElement = ghca_charts.view.elements.rectElement;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    \r\n    var self = this,\r\n        rectElement = _element;\r\n\r\n    self.config({\r\n        x:0,\r\n        y:0,\r\n        width:100,\r\n        height:10,\r\n        border:1,\r\n        borderColor:\"green\",\r\n        linecap:\"butt\",\r\n        color:\"red\"\r\n    });\r\n\r\n\r\n//    //override\r\n//    this.actualWidth = function(){\r\n//       return parseFloat(RegexUtil.replace(RegexUtil.dataRegex,self.config().width,self.data()));\r\n//    }\r\n//    //override\r\n//    this.actualHeight = function(){\r\n//        return parseFloat(RegexUtil.replace(RegexUtil.dataRegex,self.config().height,self.data()));\r\n//    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"rect\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n    \tvar config = ObjectUtil.cloneObj(self.config());\r\n    \tvar data = self.data();\r\n    \tconfig.color = RegexUtil.replace(RegexUtil.dataRegex,config.color,data);\r\n        config.borderColor = RegexUtil.replace(RegexUtil.dataRegex,config.borderColor,data);\r\n        config.x = 0;\r\n        config.y = 0;\r\n        config.width = RegexUtil.replace(RegexUtil.dataRegex,config.width,data);\r\n        config.height = RegexUtil.replace(RegexUtil.dataRegex,config.height,data);\r\n        rectElement.data(self.config());\r\n        self.resetBBox(config.x, config.y, config.width, config.height);\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = ObjectUtil.cloneObj(self.config());\r\n        var data = self.data();\r\n        config.color = RegexUtil.replace(RegexUtil.dataRegex,config.color,data);\r\n        config.borderColor = RegexUtil.replace(RegexUtil.dataRegex,config.borderColor,data);\r\n        config.x = 0;\r\n        config.y = 0;\r\n        config.width = RegexUtil.replace(RegexUtil.dataRegex,config.width,data);\r\n        config.height = RegexUtil.replace(RegexUtil.dataRegex,config.height,data);\r\n        rectElement = new RectElement(g,config);\r\n        rectElement.render();\r\n        self.resetBBox(config.x, config.y, config.width, config.height);\r\n    }\r\n};\r\n\r\nRect.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    Rect.prototype = Object.create(Plugin.prototype);\r\n    Rect.prototype.constructor = Rect;\r\n};\r\n\r\nmodule.exports = Rect;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/rect.js\n// module id = 99\n// module chunks = 0","var SankeyNode = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // isDragable\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 节点是否可拖动\r\n     */\r\n    var isDragable = false;\r\n    this.isDragable = function(value) {\r\n        if (!arguments.length)\r\n            return isDragable;\r\n        isDragable = value;\r\n        return this;\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"sankeyNode\";\r\n    }\r\n    //override\r\n    this.data = function(){\r\n        return _data.data;\r\n    }\r\n\r\n    //override\r\n    this.setLegendColor = function(){\r\n        if(_data && _data.legendColor){\r\n            ElementUtil.setElementProperties(self.mainElement,{\"fill\":_data.legendColor});\r\n        }\r\n    }\r\n    //override\r\n    this.mouseOverHandler = function() {\r\n    \tvar color = _data.legendColor ? _data.legendColor : ColorUtil.getColor(0);\r\n    \tself.mainElement\r\n        \t.attr(\"stroke-width\", 1)\r\n        \t.attr(\"stroke\", function(d) { return d3.rgb(color).darker(3); });\r\n    }\r\n    //override\r\n    this.mouseOutHandler = function() {\r\n    \tvar color = _data.legendColor ? _data.legendColor : ColorUtil.getColor(0);\r\n    \tself.mainElement\r\n        \t.attr(\"stroke-width\", 1)\r\n        \t.attr(\"stroke\", function(d) { return d3.rgb(color).darker(1); });\r\n    }\r\n\r\n    //override\r\n    this.selectedChange = function(seleced) {\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tself.mainElement = ElementUtil.createRect(g, self.data().rectProperties);\r\n        var color = _data.legendColor ? _data.legendColor : ColorUtil.getColor(0);\r\n        var cursorStyle = self.isDragable() ? \"move\" : \"default\";\r\n        var duration = self.animation() ? 300 : 0;\r\n        self.mainElement\r\n            .style(\"cursor\", cursorStyle)\r\n            .style(\"fill-opacity\", 1)\r\n            .style(\"fill\", function(d) { return color; })\r\n            .attr(\"height\", function(d) { return d.dy; })\r\n            .attr(\"stroke\", function(d) { return d3.rgb(color).darker(1); })\r\n            .style(\"transform\", \"scale(0,1)\")\r\n            .transition().duration(duration).ease(d3.easeLinear)\r\n                .delay(function(d){\r\n                    return d.level * (duration - 10);\r\n                })\r\n                .style(\"transform\", \"scale(1,1)\");\r\n            \r\n        self.setLegendColor();\r\n    }\r\n};\r\n\r\nSankeyNode.struct = function(ghca_charts) {\r\n\tvar BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\tBaseNode.struct(ghca_charts);\r\n    SankeyNode.prototype = Object.create(BaseNode.prototype);\r\n    SankeyNode.prototype.constructor = SankeyNode;\r\n};\r\n\r\nmodule.exports = SankeyNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/sankeyNode.js\n// module id = 100\n// module chunks = 0","var SunburstNode = function (_element,_data,_parent) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const PieLabel = ghca_charts.view.elements.plugins.label.pieLabel;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n    var arc, isPlayAnimation = false;\r\n    var defaulfConfig = {\r\n        clazz:'sunburstNode',\r\n        //默认连线的颜色、类型属性等配置项\r\n        clazzProperties:{cornerRadius:0, padAngle:0, animation:true, labelPos:\"inner\"},\r\n        labelProperties:{'font-size':'0.8em',\"pointer-events\":\"none\", text:\"{#d.name#}\"},\r\n        //用户更改颜色连线的类型属性配置项\r\n        useProperties:{}\r\n    };\r\n    \r\n\t//--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // parent\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 父组件,baseChart实例\r\n     */\r\n    this.parent = function(value) {\r\n        return _parent;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // startAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 开始弧度\r\n     */\r\n    var startAngle = 0;\r\n    this.startAngle = function(value) {\r\n        if (!arguments.length)\r\n            return startAngle;\r\n        startAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // endAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 结束弧度\r\n     */\r\n    var endAngle = Math.PI / 2;\r\n    this.endAngle = function(value) {\r\n        if (!arguments.length)\r\n            return endAngle;\r\n        endAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // cornerRadius\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧圆角\r\n     */\r\n    var cornerRadius = 0;\r\n    this.cornerRadius = function(value) {\r\n        if (!arguments.length)\r\n            return cornerRadius;\r\n        cornerRadius = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // padAngle\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 弧间隔\r\n     */\r\n    var padAngle = 0;\r\n    this.padAngle = function(value) {\r\n        if (!arguments.length)\r\n            return padAngle;\r\n        padAngle = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // title\r\n    // ------------------------------\r\n\r\n    /**\r\n     * path元素的title内容字符串\r\n     */\r\n    var title = null;\r\n    this.title = function(value) {\r\n        if (!arguments.length)\r\n            return title;\r\n        title = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // titleFunction\r\n    // ------------------------------\r\n\r\n    /**\r\n     * title生成规则方法，若注册该方法，则按该方法返回的内容显示title，忽略title属性\r\n     */\r\n    var titleFunction = null;\r\n    this.titleFunction = function(value) {\r\n        if (!arguments.length)\r\n            return titleFunction;\r\n        titleFunction = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // labelPos\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 标签类型，outer|inner(默认outer)\r\n     */\r\n    var labelPos = \"outer\";\r\n    this.labelPos = function(value) {\r\n        if (!arguments.length)\r\n            return labelPos;\r\n        labelPos = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n\r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data.data;\r\n//    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"sunburstNode\";\r\n    }\r\n    \r\n    //override\r\n    this.setLegendColor = function(d) {\r\n    \tvar data = d ? d : self.data();\r\n        if(data.data && data.data.legendColor){\r\n            ElementUtil.setElementProperties(self.mainElement,{\"fill\":data.data.legendColor});\r\n        }\r\n    }\r\n\r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tif(!self.mainElemet) {\r\n    \t\tif(!self.data().data.data) {\r\n    \t\t\tself.data().data.data = ObjectUtil.cloneObj(defaulfConfig);\r\n    \t\t}\r\n    \t\t\r\n    \t\tvar nodeData = self.data().data.data.clazzProperties;\r\n    \t\tself.refreshData(nodeData);\r\n    \t\t\r\n    \t\tself.mainElement = g.append(\"path\")\r\n        \t\t.attr(\"id\", function(d) {\r\n                    return self.graph().getCustomId(\"sunburst-node-\", d.data.id);\r\n                });\r\n    \t\t\r\n    \t\tarc = d3.arc()\r\n                .innerRadius(self.data().innerRadius)\r\n                .outerRadius(self.data().outerRadius)\r\n                .cornerRadius(self.cornerRadius())\r\n                .padAngle(self.padAngle());\r\n\r\n            ElementUtil.setElementProperties(self.mainElement, nodeData);\r\n            self.setLegendColor();\r\n            \r\n            //title\r\n            if(self.titleFunction()) {\r\n                self.mainElement.append(\"title\").attr(\"class\", \"path-title\").text(self.titleFunction());\r\n            } else if(self.title()) {\r\n                self.mainElement.append(\"title\").attr(\"class\", \"path-title\").text(self.formatStr(self.title()));\r\n            }\r\n            \r\n            //arc\r\n            var transition;\r\n            if(self.isChartFirstInit()) {\r\n            \ttransition = d3.transition().duration(self.animation() ? 1500 : 0).ease(d3.easeExpOut);\r\n                self.mainElement\r\n                    .attr(\"transform\", \"rotate(-179)scale(0.1)\")\r\n                    .transition(transition)\r\n                    .attr(\"transform\", \"rotate(0)scale(1)\")\r\n                    .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                    .on(\"end\", function() {\r\n                        isPlayAnimation = false;\r\n                    })\r\n                    .attrTween(\"d\", function (d) {\r\n                        var interpolate = d3.interpolate({startAngle:0, endAngle:d.endAngle - 0.5}, d);\r\n                        return function (t) {\r\n                            return arc(interpolate(t));\r\n                        };\r\n                    });\r\n                    \r\n            } else {\r\n            \ttransition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n                self.mainElement\r\n                    .transition(transition)\r\n                    .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                    .on(\"end\", function() {\r\n                        isPlayAnimation = false;\r\n                    })\r\n                    .attrTween(\"d\", function (d) {\r\n                        var interpolate = d3.interpolate({startAngle:d.endAngle, endAngle:d.endAngle}, d);\r\n                        return function (t) {\r\n                            return arc(interpolate(t));\r\n                        };\r\n                    });\r\n            }\r\n            \r\n            //clip\r\n            var labelPos = self.labelPos();\r\n            if(labelPos === \"outer\") {\r\n                \r\n            } else if(labelPos === \"innerRing\" && !(self.data().innerRadius === 0 && self.data().startAngle === 0 && self.data().endAngle >= 6.283185307179586)) {\r\n            \tself.defsCon = d3.select(self.mainElement.node().parentNode.parentNode.parentNode);\r\n            \tvar radius = (self.data().innerRadius + self.data().outerRadius - 12)/2;\r\n            \tvar pathArc = d3.arc()\r\n                    .innerRadius(radius)\r\n                    .outerRadius(radius)\r\n                    .padAngle(self.padAngle() + 0.02);\r\n                var defs = self.defsCon.select(\"defs\").node() === null ? self.defsCon.append(\"defs\") : self.defsCon.select(\"defs\");\r\n            \tvar id = self.graph().getCustomId(\"#sunburst-node-path-\", self.data().data.id);\r\n                var path = defs.select(id);\r\n                if(path.node() === null) {\r\n                    path = defs.append(\"path\").attr(\"id\", self.graph().getCustomId(\"sunburst-node-path-\", self.data().data.id));\r\n                }\r\n                path.attr(\"d\", pathArc(self.data().data));\r\n            } else {//inner\r\n            \tg.append(\"clipPath\")\r\n                    .attr(\"id\", function(d) {\r\n                        return self.graph().getCustomId(\"sunburst-node-clip-\", d.data.id);\r\n                    })\r\n                    .append(\"use\").attr(\"xlink:href\", function(d) {\r\n                        return self.graph().getCustomId(\"#sunburst-node-\", d.data.id);\r\n                    });\r\n                g.attr(\"clip-path\", function(d) {\r\n                    return \"url(#\" + self.graph().getCustomId(\"sunburst-node-clip\", d.data.id) + \")\";\r\n                });\r\n            }\r\n            \r\n            //label\r\n            if(self.data().data.data.labelProperties) {\r\n            \trefreshArc();\r\n            \tvar labelCon = labelPos === \"outer\" ? d3.select(g.node().parentNode.parentNode) : g;\r\n            \tself.label = new PieLabel(labelCon.append(\"g\").attr(\"id\", self.graph().getCustomId(\"labelCon_\", self.data().data.id)), self.data().data, transition);\r\n                self.label.isChartFirstInit(self.isChartFirstInit());\r\n                self.label.graph(self.graph());\r\n                self.label.render();\r\n                \r\n                //outer\r\n                if(labelPos === \"outer\" && !self.polyline) {\r\n                    self.polyline = labelCon.append(\"polyline\").datum(self.data().data)\r\n                        .attr(\"id\", self.graph().getCustomId(\"polyline_\", self.data().data.id))\r\n                        .attr(\"opacity\", 0.5)\r\n                        .attr(\"stroke\", function(d) {\r\n                            return d.hasOwnProperty(\"legendColor\") ? d.legendColor : \"#000\";\r\n                        })\r\n                        .attr(\"stroke-width\", \"1.5px\")\r\n                        .attr(\"fill\", \"none\");\r\n                \r\n                    self.polyline\r\n                        .transition(transition)\r\n                        .attrTween(\"points\", polylineRenderTween);\r\n                }\r\n            }\r\n    \t}\r\n    };\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(!self.data().data.data) {\r\n    \t\treturn;\r\n    \t}\r\n    \tvar ud = arguments[0] ? arguments[0] : self.data();\r\n    \tvar transition = d3.transition().duration(self.animation() ? 500 : 0).ease(d3.easeExpOut);\r\n        if(self.mainElement) {\r\n        \tself.mainElement.datum(self.data());\r\n        \tvar nodeData = self.data().data.data.clazzProperties;\r\n            self.refreshData(nodeData);\r\n            \r\n        \tarc = d3.arc()\r\n                .innerRadius(ud.innerRadius)\r\n                .outerRadius(ud.outerRadius)\r\n                .cornerRadius(self.cornerRadius())\r\n                .padAngle(self.padAngle());\r\n\r\n            ElementUtil.setElementProperties(self.mainElement, nodeData);\r\n            self.setLegendColor(ud);\r\n            //title\r\n            if(self.titleFunction()) {\r\n                self.mainElement.select(\"title.path-title\").text(self.titleFunction());\r\n            } else if(self.title()) {\r\n                self.mainElement.select(\"title.path-title\").text(self.formatStr(self.title()));\r\n            }\r\n            \r\n            self.selectedChange(false);\r\n            \r\n            self.mainElement\r\n                .transition(transition)\r\n                .on(\"start\", function() {\r\n                        isPlayAnimation = true;\r\n                    })\r\n                .on(\"end\", function() {\r\n                    isPlayAnimation = false;\r\n                })\r\n                .attrTween(\"d\", function(d) {\r\n                \tthis._current = this._current || ud;\r\n                    var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, ud);\r\n                    this._current = interpolate(0);\r\n                    return function (t) {\r\n                        return arc(interpolate(t));\r\n                    };\r\n                });\r\n        }\r\n        //label\r\n        if(self.label) {\r\n            refreshArc(ud);\r\n            self.label.data(ud.data);\r\n            self.label.update(transition);\r\n            //outer\r\n            if(self.labelPos() === \"outer\") {\r\n            \tif(!self.polyline) {\r\n            \t\tself.polyline = self.mainContainer().append(\"polyline\").attr(\"id\", self.graph().getCustomId(\"polyline_\", ud.data.id));\r\n            \t}\r\n                self.polyline.datum(ud.data)\r\n                    .attr(\"opacity\", 0.5)\r\n                    .attr(\"stroke\", function(d) {\r\n                        return d.hasOwnProperty(\"legendColor\") ? d.legendColor : \"#000\";\r\n                    })\r\n                    .attr(\"stroke-width\", \"1.5px\")\r\n                    .attr(\"fill\", \"none\")\r\n                    .transition(transition)\r\n                    .attrTween(\"points\", polylineUpdateTween);\r\n                    \r\n                self.defsCon = d3.select(self.mainElement.node().parentNode.parentNode.parentNode);\r\n                self.defsCon.select(\"defs\").remove();\r\n            } else if(self.labelPos() === \"innerRing\" && !(ud.innerRadius === 0 && ud.startAngle === 0 && ud.endAngle >= 6.283185307179586)) {\r\n                self.defsCon = d3.select(self.mainElement.node().parentNode.parentNode.parentNode);\r\n                var radius = (ud.innerRadius + ud.outerRadius- 12)/2;\r\n                var pathArc = d3.arc()\r\n                    .innerRadius(radius)\r\n                    .outerRadius(radius)\r\n                    .padAngle(self.padAngle()+0.02);\r\n                var defs = self.defsCon.select(\"defs\").node() === null ? self.defsCon.append(\"defs\") : self.defsCon.select(\"defs\");\r\n                var id = self.graph().getCustomId(\"#sunburst-node-path-\", ud.data.id);\r\n                var path = defs.select(id);\r\n                if(path.node() === null) {\r\n                \tpath = defs.append(\"path\").attr(\"id\", self.graph().getCustomId(\"sunburst-node-path-\", ud.data.id));\r\n                }\r\n                path.attr(\"d\", pathArc(ud.data));\r\n                    \r\n                if(self.polyline) {\r\n                    self.polyline.remove();\r\n                    self.polyline = null;\r\n                }\r\n            } else {\r\n            \tif(self.polyline) {\r\n            \t\tself.polyline.remove();\r\n            \t\tself.polyline = null;\r\n            \t}\r\n            }\r\n        }\r\n    };\r\n\r\n    //override\r\n    this.mouseOverHandler = function(){\r\n    }\r\n    //override\r\n    this.mouseOutHandler = function(){\r\n    }\r\n\r\n    //override\r\n    this.selectedChange = function(seleced){\r\n    }\r\n\r\n    /**\r\n     * 刷新传入配置数据到相应参数的方法\r\n     * @param data 配置数据\r\n     */\r\n    this.refreshData = function(data) {\r\n        if(data) {\r\n            for(var key in data) {\r\n                if(this.hasOwnProperty(key)) {\r\n                    this[key](data[key]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // priavte Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    var refreshArc = function(ud) {\r\n    \tvar ud = arguments[0] ? arguments[0] : self.data();\r\n    \tif(self.labelPos() === \"outer\") {\r\n    \t\tvar ir = ud.innerRadius;\r\n    \t\tvar or = ud.outerRadius;\r\n            var distance = or * 0.2;\r\n            distance = distance < 10 ? 10 : (distance > 20 ? 20 : distance);\r\n            var outerArc1 = d3.arc().innerRadius(ir).outerRadius(or);\r\n            var outerArcRadius = or + distance;\r\n            var outerArc2 = d3.arc().innerRadius(outerArcRadius).outerRadius(outerArcRadius);\r\n            ud.data.outerArc1 = outerArc1;\r\n            ud.data.outerArc2 = outerArc2;\r\n            ud.data.lineSize = self.parent().layout().radius();\r\n    \t} else {\r\n    \t\tud.data.arc = arc;\r\n    \t}\r\n    }\r\n\r\n    var midAngle = function (d){\r\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n    };\r\n    \r\n    var polylineRenderTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n        this._current = interpolate(0);\r\n        var outerArc1 = d.outerArc1;\r\n        var outerArc2 = d.outerArc2;\r\n        return function(t) {\r\n            var d2 = interpolate(t);\r\n            var startP = outerArc1.centroid(d2);\r\n            var centerP = outerArc2.centroid(d2);\r\n            var endP = outerArc2.centroid(d2);\r\n            centerP[1] = (centerP[1] - startP[1]) * t + startP[1];\r\n            endP[1] = (endP[1] - startP[1]) * t + startP[1];\r\n            endP[0] += d.lineSize * (midAngle(d2) < Math.PI ? 1 : -1);\r\n            return [startP, centerP, endP];\r\n        };          \r\n    };\r\n    \r\n    var polylineUpdateTween = function(d) {\r\n        this._current = this._current || d;\r\n        var interpolate = d3.interpolate({startAngle:this._current.startAngle, endAngle:this._current.endAngle}, d);\r\n        this._current = interpolate(0);\r\n        var outerArc1 = d.outerArc1;\r\n        var outerArc2 = d.outerArc2;\r\n        return function(t) {\r\n            var d2 = interpolate(t);\r\n            var pos = outerArc2.centroid(d2);\r\n            pos[0] += d.lineSize * (midAngle(d2) < Math.PI ? 1 : -1);\r\n            return [outerArc1.centroid(d2), outerArc2.centroid(d2), pos];\r\n        };        \r\n    };\r\n};\r\n\r\nSunburstNode.struct = function(ghca_charts) {\r\n\tvar BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\tBaseNode.struct(ghca_charts);\r\n    SunburstNode.prototype = Object.create(BaseNode.prototype);\r\n    SunburstNode.prototype.constructor = BaseNode;\r\n};\r\n\r\nmodule.exports = SunburstNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/sunburstNode.js\n// module id = 101\n// module chunks = 0","var TreemapNode = function (_element,_data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // title\r\n    // ------------------------------\r\n\r\n    /**\r\n     * path元素的title内容字符串\r\n     */\r\n    var title = null;\r\n    this.title = function(value) {\r\n        if (!arguments.length)\r\n            return title;\r\n        title = value;\r\n        return this;\r\n    };\r\n\r\n    // ------------------------------\r\n    // titleFunction\r\n    // ------------------------------\r\n\r\n    /**\r\n     * title生成规则方法，若注册该方法，则按该方法返回的内容显示title，忽略title属性\r\n     */\r\n    var titleFunction = null;\r\n    this.titleFunction = function(value) {\r\n        if (!arguments.length)\r\n            return titleFunction;\r\n        titleFunction = value;\r\n        return this;\r\n    };\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"treemapNode\";\r\n    };\r\n    \r\n    //override\r\n    this.data = function(){\r\n        return _data.data;\r\n    };\r\n\r\n    //override\r\n    this.mouseOverHandler = function() {\r\n    \tif(self.mainElement) {\r\n    \t\tself.mainElement.attr(\"fill-opacity\", 0.75);\r\n    \t}\r\n    };\r\n    \r\n    //override\r\n    this.mouseOutHandler = function() {\r\n    \tif(self.mainElement) {\r\n            self.mainElement.attr(\"fill-opacity\", 1);\r\n        }\r\n    };\r\n\r\n    //override\r\n    this.selectedChange = function(seleced) {\r\n    };\r\n    \r\n    //override\r\n    this.drawPlugin = function(g) {\r\n        self.mainElement = g.append(\"rect\");\r\n        self.mainElement\r\n            .attr(\"id\", function(d) {\r\n                return d.data.id;\r\n            })\r\n            .attr(\"fill\", function(d) {\r\n                return d.data &&　d.data.hasOwnProperty(\"legendColor\") ? \r\n                    d.data.legendColor : \r\n                    ColorUtil.getColor(d.parent ? d.parent.data.id : \"\");\r\n            });\r\n        \r\n        //title\r\n        if(self.titleFunction()) {\r\n            self.mainElement.append(\"title\").attr(\"class\", \"rect-title\").text(self.titleFunction());\r\n        } else if(self.title()) {\r\n            self.mainElement.append(\"title\").attr(\"class\", \"rect-title\").text(self.formatStr(self.title()));\r\n        }\r\n        \r\n        //clip\r\n        g.append(\"clipPath\")\r\n            .attr(\"id\", function(d) {\r\n                return \"treemap-node-clip-\" + d.data.id;\r\n            })\r\n            .append(\"use\").attr(\"xlink:href\", function(d) {\r\n                return \"#\" + d.data.id;\r\n            });\r\n        g.attr(\"clip-path\", function(d) {\r\n            return \"url(#treemap-node-clip-\" + d.data.id + \")\";\r\n        });\r\n\r\n        self.mainElement\r\n            .attr(\"width\", 0)\r\n            .attr(\"height\", 0)\r\n            .transition().duration(self.animation() ? (self.isChartFirstInit() ? 1000 : 500) : 0)\r\n            .attr(\"width\", function(d) {\r\n                return d.x1 - d.x0;\r\n            })\r\n            .attr(\"height\", function(d) {\r\n                return d.y1 - d.y0;\r\n            });\r\n            \r\n        self.createLabel(g,_data);\r\n    };\r\n    \r\n    //override\r\n    this.update = function(ud) {\r\n    \tif(self.mainElement) {\r\n    \t\tself.mainElement\r\n        \t\t.attr(\"fill\", function(d) {\r\n                    return d.data &&　d.data.hasOwnProperty(\"legendColor\") ? \r\n                        d.data.legendColor : \r\n                        ColorUtil.getColor(ud.parent ? ud.parent.data.id : \"\");\r\n                })\r\n    \t\t    .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"width\", function(d) {\r\n                    return ud.x1 - ud.x0;\r\n                })\r\n                .attr(\"height\", function(d) {\r\n                    return ud.y1 - ud.y0;\r\n                });\r\n            //title\r\n            if(self.titleFunction()) {\r\n                self.mainElement.select(\"title.rect-title\").text(self.titleFunction());\r\n            } else if(self.title()) {\r\n                self.mainElement.select(\"title.rect-title\").text(self.formatStr(self.title()));\r\n            }\r\n            if(self.label) {\r\n                var labelData = _data.data.data.label;\r\n                labelData.name = labelData.format ?　self.formatStr(labelData.format)(_data.data)　: _data.data.name;\r\n                self.label.update(labelData);\r\n                self.labelLayout(self.labelG, self.label, _data.data, true);\r\n            }\r\n    \t}\r\n    };\r\n    \r\n     //override\r\n    this.createLabel = function(group, d) {\r\n        if(!d.data || !d.data.data || !d.data.data.label || d.data.name === null || d.data.name === undefined) {\r\n            return;\r\n        }\r\n        self.labelG = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        var labelData = d.data.data.label;\r\n        labelData.name = labelData.format ?　self.formatStr(labelData.format)(d.data)　: d.data.name;\r\n        self.label =  new BaseLabel(self.labelG, labelData, self);\r\n        self.label.render();\r\n        self.labelLayout(self.labelG, self.label, d.data, false);\r\n    };\r\n    \r\n    //override\r\n    this.labelLayout = function(element, plugin, d, isUpdate) {\r\n    \tif(!self.mainElement || !self.mainElement.node()) {\r\n    \t\treturn;\r\n    \t}\r\n        var position = d.data.labelPosition;\r\n        if(!position) {\r\n        \tposition = 'center';\r\n        }\r\n        \r\n        var labelPosition = position.toLowerCase(),translate, tx = 0, ty = 0;\r\n        var labelBox = element.node().getBBox();\r\n        var md;\r\n        //这里只能从_element获取data数据，从element获取的数据是错误的\r\n        _element.each(function(ed) {\r\n            md = ed;\r\n        });\r\n        var nodeW = md.x1 - md.x0;\r\n        var nodeH = md.y1 - md.y0;\r\n        if(labelPosition == 'bottom') {\r\n            tx = labelBox.width / 2;\r\n            ty = nodeH - labelBox.height / 2;\r\n        } else if(labelPosition == 'left') {\r\n            tx = labelBox.width / 2;\r\n            ty = nodeH / 2;\r\n        } else if(labelPosition == 'right') {\r\n            tx = nodeW - labelBox.width / 2;\r\n            ty = nodeH / 2;\r\n        } else if(labelPosition == 'top') {\r\n            tx = labelBox.width / 2;\r\n            ty = labelBox.height / 2;\r\n        } else {\r\n            //default center\r\n            tx = nodeW / 2;\r\n            ty = nodeH / 2;\r\n        }\r\n        //水平边界判断\r\n        if(labelBox.width > nodeW) {\r\n        \ttx = labelBox.width / 2;\r\n        }\r\n        if(isUpdate) {\r\n             element\r\n                .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        } else {\r\n             element\r\n                .transition().duration(self.animation() ? (self.isChartFirstInit() ? 1000 : 500) : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        }\r\n    };\r\n};\r\n\r\nTreemapNode.struct = function(ghca_charts) {\r\n    var BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    BaseNode.struct(ghca_charts);\r\n    TreemapNode.prototype = Object.create(BaseNode.prototype);\r\n    TreemapNode.prototype.constructor = TreemapNode;\r\n};\r\n\r\nmodule.exports = TreemapNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/treemapNode.js\n// module id = 102\n// module chunks = 0","var UsePlugin = function (_element,_data) {\r\n\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    Plugin.apply(this,arguments);\r\n    var self = this,\r\n        useElement = _element;\r\n\r\n    self.config({\r\n        \"xlink\":\"#{data.image}\",\r\n        \"width\":\"{data.imageWidth}\",\r\n        \"height\":\"{data.imageHeight}\"\r\n    });\r\n\r\n\r\n    //override\r\n    this.actualWidth = function(){\r\n        return RegexUtil.replace(RegexUtil.dataRegex,self.config().width,self.data());;\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        return RegexUtil.replace(RegexUtil.dataRegex,self.config().height,self.data());\r\n    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"usePlugin\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n        useElement.attr(\"xlink:href\",RegexUtil.replace(RegexUtil.dataRegex,self.config().xlink,self.data()));\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        useElement = g.append(\"use\").attr(\"xlink:href\", RegexUtil.replace(RegexUtil.dataRegex,self.config().xlink,self.data()));\r\n    }\r\n};\r\n\r\nUsePlugin.struct = function(ghca_charts) {\r\n    var Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    Plugin.struct(ghca_charts);\r\n    UsePlugin.prototype = Object.create(Plugin.prototype);\r\n    UsePlugin.prototype.constructor = UsePlugin;\r\n};\r\n\r\nmodule.exports = UsePlugin;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/usePlugin.js\n// module id = 103\n// module chunks = 0","var VBarNode = function (_element,_data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseLabel = ghca_charts.view.elements.plugins.label.baseLabel;\r\n    const BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const ColorUtil = ghca_charts.view.util.colorUtil;\r\n    const Constant = ghca_charts.view.util.constant;\r\n\r\n    BaseNode.apply(this,arguments);\r\n    \r\n    var self = this;\r\n        \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n\r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"vBarNode\";\r\n    }\r\n    \r\n//    //override\r\n//    this.data = function(){\r\n//        return _data.data;\r\n//    }\r\n\r\n    //override\r\n    this.mouseOverHandler = function() {\r\n        self.mainElement\r\n            .attr(\"fill-opacity\", 0.5);\r\n    }\r\n    \r\n    //override\r\n    this.mouseOutHandler = function() {\r\n    \tself.mainElement\r\n            .attr(\"fill-opacity\", 1);\r\n    }\r\n\r\n    //override\r\n    this.selectedChange = function(seleced) {\r\n    }\r\n    \r\n    //override\r\n    this.drawPlugin = function(g){\r\n    \tvar data = self.data().data;\r\n    \tvar p = data && data.hasOwnProperty(\"clazzProperties\") ? data.clazzProperties : null;\r\n    \tvar eleConfig = {rx:4};\r\n    \tif(p) {\r\n    \t\tfor(var k in p) {\r\n    \t\t\teleConfig[k] = p[k];\r\n    \t\t}\r\n    \t}\r\n        self.mainElement = g.append(\"rect\");\r\n        self.mainElement\r\n            .attr(\"class\", \"bar-rect\")\r\n            .attr(\"fill\", function(d){\r\n                return d.legendColor;\r\n            })\r\n            .attr(\"x\", function(d) {\r\n                return d.x;\r\n            })\r\n            .attr(\"width\", function(d) {\r\n                return d.dx;\r\n            })\r\n            .attr(\"y\", function(d) {\r\n                return d.startY;\r\n            })\r\n            .attr(\"height\", 0);\r\n        ElementUtil.setElementProperties(self.mainElement, eleConfig);\r\n        //多个颜色设置线性渐变\r\n        var colors = eleConfig.fill;\r\n        if(colors instanceof Array)\r\n            ElementUtil.setElementProperties(self.mainElement,\r\n                {fill:\"url(#\"+ColorUtil.getLinearGradientDef(self.mainElement.node(),colors,null,Constant.HOR_DRAG_TYPE)+\")\"});\r\n\r\n        self.mainElement\r\n            .transition().duration(self.animation() ? 1000 : 0)\r\n            .attr(\"y\", function(d) {\r\n                return d.y;\r\n            })\r\n            .attr(\"height\", function(d) {\r\n                return d.dy;\r\n            });\r\n        self.createLabel(g,self.data());\r\n    }\r\n    \r\n    //override\r\n    this.update = function() {\r\n    \tif(self.mainElement) {\r\n    \t\tvar data = self.data().data;\r\n    \t\tvar p = data && data.hasOwnProperty(\"clazzProperties\") ? data.clazzProperties : null;\r\n            var eleConfig = {rx:4};\r\n            if(p) {\r\n                for(var k in p) {\r\n                    eleConfig[k] = p[k];\r\n                }\r\n            }\r\n    \t\tself.mainElement.datum(self.data())\r\n    \t\t    .transition().duration(self.animation() ? 500 : 0)\r\n    \t\t    .attr(\"fill\", function(d){\r\n                    return d.legendColor;\r\n                })\r\n                .attr(\"x\", function(d) {\r\n                    return d.x;\r\n                })\r\n                .attr(\"width\", function(d) {\r\n                    return d.dx;\r\n                })\r\n                .attr(\"y\", function(d) {\r\n                    return d.y;\r\n                })\r\n                .attr(\"height\", function(d) {\r\n                    return d.dy;\r\n                });\r\n            ElementUtil.setElementProperties(self.mainElement, eleConfig);\r\n    \t}\r\n    \tif(self.label) {\r\n    \t\tvar labelData = self.data().data.label;\r\n            labelData.name = labelData.format ?　self.formatStr(labelData.format)(self.data())　: self.data().value;\r\n            self.label.update(labelData);\r\n    \t\tself.labelLayout(self.labelG, self.label, self.data(), true);\r\n    \t}\r\n    };\r\n    \r\n    //override\r\n    this.createLabel = function(group, d) {\r\n        if(!d.data || !d.data.label || d.value === null || d.value === undefined) {\r\n            return;\r\n        }\r\n        self.labelG = group.append(\"g\").attr(\"pointer-events\", \"none\");\r\n        var labelData = d.data.label;\r\n        labelData.name = labelData.format ?　self.formatStr(labelData.format)(d)　: d.value;\r\n        self.label = new BaseLabel(self.labelG, labelData, self);\r\n        self.label.render();\r\n        self.labelLayout(self.labelG, self.label, d, false);\r\n    }\r\n    \r\n    //override\r\n    this.labelLayout = function(element, plugin, d, isUpdate){\r\n        var position = d.data.labelPosition;\r\n        if(position === 'none') {\r\n        \telement.style(\"display\", \"none\");\r\n        \treturn;\r\n        } else {\r\n        \telement.style(\"display\", \"block\");\r\n        }\r\n        if(!position)\r\n            position = 'top';\r\n        \r\n        var translate, labelPosition = position.toLowerCase(), tx = 0, ty = 0;\r\n        var labelBox = element.node().getBBox();\r\n        if(labelPosition == 'bottom') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + d.dy + labelBox.height / 2;\r\n        } else if(labelPosition == 'left') {\r\n            tx = d.x - d.dx / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else if(labelPosition == 'right') {\r\n            tx = d.x + d.dx + d.dx / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else if(labelPosition == 'center') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else if(labelPosition == 'insidetop') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + labelBox.height / 2;\r\n        } else if(labelPosition == 'insidebottom') {\r\n            tx = d.x + d.dx / 2;\r\n            ty = d.y + d.dy - labelBox.height / 2;\r\n        } else if(labelPosition == 'insideleft') {\r\n            tx = d.x + labelBox.width / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else if(labelPosition == 'insideright') {\r\n            tx = d.x + d.dx - labelBox.width / 2;\r\n            ty = d.y + d.dy / 2;\r\n        } else {\r\n        \t//default top\r\n        \ttx = d.x + d.dx / 2;\r\n            ty = d.y - labelBox.height / 2 - 1;\r\n        }\r\n        if(isUpdate) {\r\n        \t element\r\n                .transition().duration(self.animation() ? 500 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        } else {\r\n        \t element\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+d.startY+\")\")\r\n                .transition().duration(self.animation() ? 1000 : 0)\r\n                .attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")\");\r\n        }\r\n    }\r\n};\r\n\r\nVBarNode.struct = function(ghca_charts) {\r\n    var BaseNode = ghca_charts.view.elements.plugins.nodes.baseNode;\r\n    BaseNode.struct(ghca_charts);\r\n    VBarNode.prototype = Object.create(BaseNode.prototype);\r\n    VBarNode.prototype.constructor = VBarNode;\r\n};\r\n\r\nmodule.exports = VBarNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/vBarNode.js\n// module id = 104\n// module chunks = 0","var VerTool = function (_element,_data) {\r\n\r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this;\r\n\r\n    self.config({\r\n        \"xlink\":\"{xlink}\",\r\n        \"width\":\"{width}\",\r\n        \"height\":\"{height}\",\r\n        \"data\":\"{value}\"\r\n    });\r\n    //override\r\n    this.actualWidth = function(){\r\n        return 0;\r\n    }\r\n    //override\r\n    this.actualHeight = function(){\r\n        return 0;\r\n    }\r\n\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"VerTool\";\r\n    }\r\n    //override\r\n    this.update = function(g){\r\n        this.drawPlugin(g);\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n\r\n        var data = RegexUtil.replace(RegexUtil.dataRegex,self.config().data,self.data());\r\n        if(data === self.config().data)data = [];\r\n\r\n        if(data instanceof Array){\r\n            var uses = g.selectAll(\"use\")\r\n                .data(data,function(d){return d[\"xlink\"];});\r\n            uses.exit().remove();\r\n            uses.enter().append(\"use\")\r\n                .attr(\"xlink:href\", function(d,i){\r\n                    return RegexUtil.replace(RegexUtil.dataRegex,self.config().xlink,d);\r\n                })\r\n                .attr(\"y\", function(d,i){\r\n                    return RegexUtil.replace(RegexUtil.dataRegex,self.config().height,d)*i;\r\n                }).on(\"dblclick.verTool\",function(d){\r\n                d3.event.stopPropagation();\r\n                self.el.node().dispatchEvent(EventUtil.createCustomEvent(self.config().events,true,true,d));\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nVerTool.struct = function(ghca_charts) {\r\n    var Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    Plugin.struct(ghca_charts);\r\n    VerTool.prototype = Object.create(Plugin.prototype);\r\n    VerTool.prototype.constructor = VerTool;\r\n};\r\n\r\nmodule.exports = VerTool;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/nodes/verTool.js\n// module id = 105\n// module chunks = 0","var Plugin = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const ElementUtil = ghca_charts.view.util.elementUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n\r\n    var self = this;\r\n    self.el = undefined;\r\n    \r\n    var isRender = false;\r\n    this.isRender = function(){\r\n        return isRender;\r\n    }\r\n    /**\r\n     * 配置\r\n     * @returns {string}\r\n     */\r\n    var config = {};\r\n    this.config = function(value){\r\n        if(!arguments.length)return config;\r\n        config = value;\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * 唯一\r\n     * @returns {string}\r\n     */\r\n    this.nameSpace = function(){\r\n        return \"plugin\";\r\n    }\r\n    /**\r\n     * 设置是否可见\r\n     */\r\n    var visible = true;   var i = 1;\r\n    this.visible = function(_visible){\r\n        if(!arguments.length)return visible;\r\n        visible = _visible;\r\n        if(self.el){\r\n            if(_visible==true)\r\n                ElementUtil.setElementProperties(self.el,{display:\"block\"});\r\n            else\r\n                ElementUtil.setElementProperties(self.el,{display:\"none\"});\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 获取渲染数据\r\n     */\r\n    var data = _data;\r\n    this.data = function(){\r\n        if(!arguments.length)return data;\r\n        data = arguments[0];\r\n        return this;\r\n    }\r\n    /**\r\n     * 获取渲染数据,因为data()在子类中被重写，返回的是_data.data,故用此方法获取原始渲染数据\r\n     */\r\n    this.itemData = function(){\r\n        return _data;\r\n    }\r\n    /**\r\n     * 是否开启动画效果\r\n     */\r\n    var animation = true;\r\n    this.animation = function(value) {\r\n        if (!arguments.length)\r\n            return animation;\r\n        animation = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取实际渲染宽度\r\n     */\r\n    this.actualWidth = function() {\r\n        return self.getBBox().width;\r\n    }\r\n    /**\r\n     * 获取实际渲染高度\r\n     */\r\n    this.actualHeight = function() {\r\n        return self.getBBox().height;\r\n    }\r\n    /**\r\n     * 所在图表组件是否是初次渲染\r\n     */\r\n    var isChartFirstInit = false;\r\n    this.isChartFirstInit = function(value){\r\n        if(!arguments.length)return isChartFirstInit;\r\n        isChartFirstInit = value;\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * 所在图表组件数据\r\n     */\r\n    var ownerData = null;\r\n    this.ownerData = function(value){\r\n        if(!arguments.length)return ownerData;\r\n        ownerData = value;\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * 所在graph实例\r\n     */\r\n    var graph = null;\r\n    this.graph = function(value){\r\n        if(!arguments.length)return graph;\r\n        graph = value;\r\n        return this;\r\n    }\r\n    \r\n    this.mainContainer = function() {\r\n        return self.el;\r\n    };\r\n    \r\n    /**\r\n     * 容器外接图形类别，用来判断和连线的交点。\"rect\"|\"circle\"(默认为矩形:\"rect\")\r\n     */\r\n    var boundType = \"rect\";\r\n    this.boundType = function(value){\r\n        if(!arguments.length) return boundType;\r\n        boundType = value ? value : \"rect\";\r\n        return this;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * 缓存外接矩形\r\n     */\r\n    var bBox = {x:0, y:0, width:0, height:0};\r\n    this.getBBox = function() {\r\n        return bBox;\r\n    };\r\n    this.resetBBox = function(x, y, width, height) {\r\n        bBox.x =parseFloat(x);\r\n    \tbBox.y = parseFloat(y);\r\n    \tbBox.width = parseFloat(width);\r\n    \tbBox.height = parseFloat(height);\r\n    };\r\n    \r\n    /**\r\n     * 替换字符串中的特殊字符串内容，比如{#d.name#}替换为渲染数据中的name属性的值,{##}中的内容是可执行的js\r\n     */\r\n     this.formatStr = function(str) {\r\n     \treturn function(d) {\r\n            return str.replace(RegexUtil.jsRegex, function() {\r\n                return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n            });\r\n        };\r\n     };\r\n\r\n    /**\r\n     * 渲染方法 ，变更时调用,供外部统一调用\r\n     * @param element 目标元素\r\n     */\r\n    this.render = function(){\r\n        if(isRender==true){\r\n            self.el.datum(_data);\r\n            self.update(self.el);\r\n//            self.resetBBox(self.el);\r\n            return;\r\n        }\r\n        self.el = _element.append(\"g\").datum(_data);\r\n        self.el.classed(self.nameSpace(), true);\r\n        self.visible(self.visible());\r\n        self.drawPlugin(self.el);\r\n        self.bindEvents(self.el);\r\n//        self.resetBBox(self.el);\r\n        isRender = true;\r\n    }\r\n    /**\r\n     * 变更\r\n     * @param g\r\n     */\r\n    this.update = function(g){\r\n\r\n    }\r\n    /**\r\n     * 实际绘画方法\r\n     * @param g\r\n     */\r\n    this.drawPlugin = function(g){\r\n\r\n    }\r\n    /**\r\n     * 绑定事件方法\r\n     * @param g\r\n     */\r\n    this.bindEvents = function(g){\r\n\r\n    }\r\n\r\n    /**\r\n     * 设置位置\r\n     * @param g\r\n     */\r\n    this.transform = function(value){\r\n        if(!arguments.length){\r\n            if(self.el)\r\n                return  self.el.attr(\"transform\");\r\n        }\r\n         if(self.el)\r\n             self.el.attr(\"transform\",value);\r\n    }\r\n\r\n\r\n    this.addEventListener = function() {\r\n        var value = self.dispatch.on.apply(self.dispatch, arguments);\r\n        return value === self.dispatch ? self : value;\r\n    };\r\n\r\n};\r\n\r\n\r\nPlugin.struct = function(ghca_charts) {\r\n    Plugin.prototype.constructor = Plugin;\r\n};\r\n\r\nmodule.exports = Plugin;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/plugin.js\n// module id = 106\n// module chunks = 0","var PluginMap = function() {\r\n    \r\n    this.getMap = function() {\r\n        var map = {};\r\n        //注册内部插件类\r\n        map.percentageinfo = ghca_charts.view.elements.plugins.tool.percentageInfo;\r\n        map.tooltip = ghca_charts.view.elements.plugins.tool.toolTip;\r\n        map.label = ghca_charts.view.elements.plugins.label.label;\r\n        map.expandtool = ghca_charts.view.elements.plugins.nodes.expandTool;\r\n        map.circle = ghca_charts.view.elements.plugins.nodes.circle;\r\n        map.rect = ghca_charts.view.elements.plugins.nodes.rect;\r\n        map.imagenode = ghca_charts.view.elements.plugins.nodes.imageNode;\r\n        map.iconnode = ghca_charts.view.elements.plugins.nodes.IconNode;\r\n        map.topolabel = ghca_charts.view.elements.plugins.label.topoLabel;\r\n        map.demoimagenode = ghca_charts.view.elements.plugins.nodes.demoImageNode;\r\n        map.pathnode = ghca_charts.view.elements.plugins.nodes.pathNode;\r\n        map.vertool = ghca_charts.view.elements.plugins.nodes.verTool;\r\n        map.useplugin = ghca_charts.view.elements.plugins.nodes.usePlugin;\r\n        map.moretool = ghca_charts.view.elements.plugins.nodes.moreTool;\r\n        \r\n        //注册外部插件类\r\n        var outerMap = ghca_charts.global.outerPlugins && ghca_charts.global.outerPlugins.pluginMap;\r\n        if(outerMap) {\r\n            for(var name in outerMap) {\r\n                map[name] = outerMap[name];\r\n            }\r\n        }\r\n        \r\n        return map;\r\n    };\r\n};\r\n\r\nPluginMap.struct = function(ghca_charts) {\r\n    PluginMap.prototype.constructor = PluginMap;\r\n};\r\n\r\nmodule.exports = PluginMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/pluginMap.js\n// module id = 107\n// module chunks = 0","var PercentageInfo = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Label = ghca_charts.view.elements.plugins.label.label;\r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this;\r\n    var label;\r\n    self.config({\r\n        label:{\r\n            clazz:\"label\",\r\n            config:{\r\n                text:\"{value}\",\r\n                maxWidth:100,\r\n                backGroundColor:\"none\",\r\n                backGroundOpacity:0.0,\r\n                borderRadius:4,\r\n                padding:4,\r\n                fontColor:\"0x000000\",\r\n                fontFamily:\"宋体\",\r\n                fontSize:12\r\n            }\r\n        }\r\n    });\r\n    //override\r\n    this.nameSpace = function(){\r\n        return \"percentageInfo\";\r\n    }\r\n\r\n    //override\r\n    this.update = function(g){\r\n        if(label){\r\n            var config = self.config();\r\n            label.config(config.label.config);\r\n            label.data(self.data());\r\n            label.render();\r\n            centerLabel();\r\n        }\r\n    }\r\n    //override\r\n    this.drawPlugin = function(g){\r\n        var config = self.config();\r\n        label = new Label(g,self.data());\r\n        label.config(config.label.config);\r\n        label.render();\r\n        centerLabel();\r\n    }\r\n\r\n    function  centerLabel(){\r\n        var w = label.actualWidth(),\r\n            h = label.actualHeight();\r\n        label.transform(\"translate(\"+ (-w/2)+\",\"+ (-h/2)+\")\");\r\n    }\r\n};\r\n\r\nPercentageInfo.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    PercentageInfo.prototype = Object.create(Plugin.prototype);\r\n    PercentageInfo.prototype.constructor = PercentageInfo;\r\n};\r\n\r\nmodule.exports = PercentageInfo;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/tool/percentageInfo.js\n// module id = 108\n// module chunks = 0","var ToolTip = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const Plugin = ghca_charts.view.elements.plugins.plugin;\r\n    const Label = ghca_charts.view.elements.plugins.label.label;\r\n\r\n    Plugin.apply(this,arguments);\r\n    var self = this;\r\n    var label;\r\n    self.config({\r\n        visible:false,\r\n        fadeInSpeed:1000,\r\n        label:{\r\n            text:\"{name}:{value}\",\r\n            maxWidth:60,\r\n            backGroundColor:\"green\",\r\n            backGroundOpacity:.3,\r\n            borderRadius:4,\r\n            padding:4,\r\n            fontColor:\"0x000000\",\r\n            fontFamily:\"宋体\",\r\n            fontSize:12\r\n        }\r\n    });\r\n\r\n    var toolTipFunc;\r\n    this.toolTipFunc = function(value){\r\n        if(!arguments.length)return;\r\n        toolTipFunc = value;\r\n    }\r\n    /**\r\n     * 唯一\r\n     * @returns {string}\r\n     */\r\n    this.nameSpace = function(){\r\n        return \"toolTip\";\r\n    }\r\n\r\n    /**\r\n     * 变更\r\n     * @param g\r\n     */\r\n    this.update = function(g){\r\n        g.style(\"opacity\", 0);\r\n        label.data(self.data());\r\n        label.render();\r\n    }\r\n    /**\r\n     * 实际绘画方法\r\n     * @param g\r\n     */\r\n    this.drawPlugin = function(g){\r\n        self.visible(self.config().visible);\r\n        label = new Label(g,self.data());\r\n        label.config(self.config().label);\r\n        if(toolTipFunc)\r\n            label.textFunc(toolTipFunc);\r\n        label.render();\r\n    }\r\n\r\n    this.showTooltip = function(g) {\r\n        var fadeInSpeed = self.config().fadeInSpeed;\r\n        self.el.transition()\r\n            .duration(fadeInSpeed)\r\n            .style(\"opacity\", function() { return 1; });\r\n        self.moveTooltip(g);\r\n    };\r\n\r\n    this.moveTooltip = function(g) {\r\n        self.el.attr(\"transform\", function(d) {\r\n            var mouseCoords = d3.mouse(this.parentNode);\r\n             var x = Number(mouseCoords[0])+5,\r\n                 y  = Number(mouseCoords[1] - label.actualHeight() - 2);\r\n            return \"translate(\" + x +\",\"+ y + \")\";\r\n        });\r\n    };\r\n\r\n    this.hideTooltip = function(g) {\r\n        var fadeOutSpeed = self.config().fadeInSpeed;\r\n        self.el.transition()\r\n            .duration(fadeOutSpeed)\r\n            .style(\"opacity\", function() { return 0; });\r\n        // self.el.style(\"opacity\", function() { return 0; });\r\n    }\r\n};\r\n\r\nToolTip.struct = function(ghca_charts) {\r\n\tvar Plugin = ghca_charts.view.elements.plugins.plugin;\r\n\tPlugin.struct(ghca_charts);\r\n    ToolTip.prototype = Object.create(Plugin.prototype);\r\n    ToolTip.prototype.constructor = ToolTip;\r\n};\r\n\r\nmodule.exports = ToolTip;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/plugins/tool/toolTip.js\n// module id = 109\n// module chunks = 0","var RectElement = function (_element,_data) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseElement = ghca_charts.view.elements.baseElement;\r\n\r\n    BaseElement.apply(this,arguments);\r\n    var self  = this;\r\n    self.svgElement = _element.append(\"rect\");\r\n    var superRenderFunc = this.render;\r\n    /**\r\n     * border形状终结butt，round，square\r\n     */\r\n    var linecap=\"butt\";\r\n    this.linecap = function(value){\r\n        if (!arguments.length)\r\n            return linecap;\r\n        linecap = value;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 透明度\r\n     * @type {number}\r\n     */\r\n    var opacity=1;\r\n    this.opacity = function(value){\r\n        if (!arguments.length)\r\n            return opacity;\r\n        opacity = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * border透明度\r\n     * @type {number}\r\n     */\r\n    var borderOpacity=1;\r\n    this.borderOpacity = function(value){\r\n        if (!arguments.length)\r\n            return borderOpacity;\r\n        borderOpacity = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * @type {number}\r\n     */\r\n    var x = 0;\r\n    this.x = function(value){\r\n        if (!arguments.length)\r\n            return x;\r\n        x = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * @type {number}\r\n     */\r\n    var y = 0;\r\n    this.y = function(value){\r\n        if (!arguments.length)\r\n            return y;\r\n        y = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 圆角\r\n     * @type {number}\r\n     */\r\n    var ry;\r\n    this.ry = function(value){\r\n        if (!arguments.length)\r\n            return ry;\r\n        ry = value;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 圆角\r\n     * @type {number}\r\n     */\r\n    var rx;\r\n    this.rx = function(value){\r\n        if (!arguments.length)\r\n            return rx;\r\n        rx = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 高度\r\n     * @type {number}\r\n     */\r\n    var height = 0;\r\n    this.height = function(value){\r\n        if (!arguments.length)\r\n            return height;\r\n        height = value;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 宽度\r\n     * @type {number}\r\n     */\r\n    var width = 0;\r\n    this.width = function(value){\r\n        if (!arguments.length)\r\n            return width;\r\n        width = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线宽\r\n     * @type {number}\r\n     */\r\n    var border = 0;\r\n    this.border = function(value){\r\n        if (!arguments.length)\r\n            return border;\r\n        border = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线的间隔\r\n     * @type {number or %}\r\n     */\r\n    var dashoffset;\r\n    this.dashoffset = function(value){\r\n        if (!arguments.length)\r\n            return dashoffset;\r\n        dashoffset = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 线的段长 ary\r\n     * @type {string}\r\n     */\r\n    var dasharray;\r\n    this.dasharray = function(value){\r\n        if (!arguments.length)\r\n            return dasharray;\r\n        dasharray = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 边框颜色\r\n     * @type {string}\r\n     */\r\n    var borderColor=\"none\";\r\n    this.borderColor = function(value){\r\n        if (!arguments.length)\r\n            return borderColor;\r\n        borderColor = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * 背景颜色 默认无背景\r\n     * @type {string}\r\n     */\r\n    var color=\"none\";\r\n    this.color = function(value){\r\n        if (!arguments.length)\r\n            return color;\r\n        color = value;\r\n        return this;\r\n    }\r\n    //override\r\n    this.render = function(){\r\n        superRenderFunc();\r\n\r\n        self.svgElement.style(\"stroke\",self.borderColor())\r\n            .style(\"stroke-linecap\",self.linecap())\r\n            .style(\"stroke-width\",self.border())\r\n            .style(\"stroke-opacity\",self.borderOpacity())\r\n            .style(\"fill\",self.color())\r\n            .style(\"fill-opacity\",self.opacity());\r\n            if(self.dasharray())\r\n                self.svgElement.style(\"stroke-dasharray\",self.dasharray());\r\n            if(self.dashoffset())\r\n                self.svgElement.style(\"stroke-dashoffset\",self.dashoffset());\r\n        \r\n        self.svgElement.attr(\"ry\",self.ry())\r\n            .attr(\"rx\",self.rx())\r\n            .attr(\"height\",self.height())\r\n            .attr(\"x\",self.x())\r\n            .attr(\"y\",self.y())\r\n            .attr(\"width\",self.width());\r\n        \r\n        self.resetBBox(self.x(), self.y(), self.width(), self.height());\r\n    }\r\n    //override\r\n    this.dataChangeHandler = function(event){\r\n        self.render();\r\n    }\r\n};\r\n\r\nRectElement.struct = function(ghca_charts) {\r\n\tvar BaseElement = ghca_charts.view.elements.baseElement;\r\n\tBaseElement.struct(ghca_charts);\r\n    RectElement.prototype = Object.create(BaseElement.prototype);\r\n    RectElement.prototype.constructor = RectElement;\r\n};\r\n\r\nmodule.exports = RectElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/rectElement.js\n// module id = 110\n// module chunks = 0","var BaseShape = function (_element, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\t\r\n\tconst ObjectUtil = ghca_charts.view.util.objectUtil;\r\n\tconst BaseEvent = ghca_charts.events.BaseEvent;\r\n    const EventUtil = ghca_charts.view.util.eventUtil;\r\n    const RegexUtil = ghca_charts.view.util.regexUtil;\r\n    \r\n    var self  = this;\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    // ------------------------------\r\n    // mainContainer\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 放置所有内容的最外层容器\r\n     */\r\n    var mainContainer = null;\r\n    this.mainContainer = function(value) {\r\n        if (!arguments.length) {\r\n            return mainContainer;\r\n        }\r\n        mainContainer = value;\r\n        return this;\r\n    };\r\n        \r\n     //------------------------------\r\n    //  className\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 类名称，默认作为该容器的css样式名称，比如<g class='mainContainer'>\r\n     */\r\n    var className = \"mainContainer\";\r\n    this.className = function(value){\r\n       if (!arguments.length) {\r\n            return className;                \r\n        }\r\n        className = value;\r\n        return this;\r\n    }\r\n    \r\n    // ------------------------------\r\n    // data\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 配置数据\r\n     */\r\n    var data = _data;\r\n    this.data = function(value) {\r\n        if (!arguments.length) {\r\n            return data;                \r\n        }\r\n        data = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  defaultConfig\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 默认配置\r\n     */\r\n    var defaultConfig = null;\r\n    this.defaultConfig = function(value) {\r\n        if (!arguments.length)\r\n            return defaultConfig;\r\n        defaultConfig = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  animation\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 是否开启动画效果\r\n     */\r\n    var animation = true;\r\n    this.animation = function(value) {\r\n        if (!arguments.length)\r\n            return animation;\r\n        animation = value;\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  boundType\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 容器外接图形类别，用来判断和连线的交点。\"rect\"|\"circle\"(默认为矩形:\"rect\")\r\n     */\r\n    var boundType = \"rect\";\r\n    this.boundType = function(value){\r\n        if(!arguments.length)\r\n            return boundType;\r\n        boundType = value ? value : \"rect\";\r\n        return this;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  getMainCon\r\n    //------------------------------\r\n    \r\n    this.getMainCon = function() {\r\n        return self.mainContainer();\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.render = function() {\r\n        if(!_element || !_data) {\r\n        \treturn;\r\n        }\r\n        self.renderChildren();\r\n        self.parseConfig(_data);\r\n        self.update();\r\n        self.addListeners();\r\n    };\r\n    \r\n    this.addListeners = function() {\r\n        var shape = self.mainContainer();\r\n    \tif(shape) {\r\n    \t   shape.on('mouseover', function(d) {\r\n               var evt = EventUtil.createCustomEvent(BaseEvent.SHOW_TOOL_TIP, true, true);\r\n               d3.select(this).node().dispatchEvent(evt);\r\n               self.mouseOverHandler();\r\n           });\r\n           shape.on('mousemove', function(d) {\r\n               var evt = EventUtil.createCustomEvent(BaseEvent.UPDATE_TOOL_TIP, true, true, _data);\r\n               d3.select(this).node().dispatchEvent(evt);\r\n           });\r\n           shape.on('mouseout', function(d) {\r\n               var evt = EventUtil.createCustomEvent(BaseEvent.HIDE_TOOL_TIP, true, true);\r\n               d3.select(this).node().dispatchEvent(evt);\r\n               self.mouseOutHandler();\r\n           });\r\n           shape.on('click', function(d) {\r\n                var evt = EventUtil.createCustomEvent(BaseEvent.NODE_CLICK, true, true, d);\r\n                d3.select(this).node().dispatchEvent(evt);\r\n           });\r\n    \t}\r\n    };\r\n    \r\n    this.mouseOverHandler = function() {\r\n    \tvar shape = self.mainContainer();\r\n    \tif(shape) {\r\n            shape.attr(\"opacity\", 0.5);\r\n    \t}\r\n    };\r\n    \r\n    this.mouseOutHandler = function() {\r\n        var shape = self.mainContainer();\r\n        if(shape) {\r\n            shape.attr(\"opacity\", 1);\r\n        }\r\n    };\r\n    \r\n    this.renderChildren = function() {\r\n    };\r\n    \r\n    this.update = function(){\r\n    };\r\n    \r\n    /**\r\n     * 根据读取的配置信息和默认配置信息创建新的配置信息\r\n     */\r\n    this.parseConfig = function(d) {\r\n        if(!d || !d.data || !d.data.config) {\r\n            return;\r\n        }\r\n        var config = d.data.config;\r\n        for(var k in config) {\r\n            if(k === \"style\") {\r\n                for(var m in config.style) {\r\n                    if(!defaultConfig.style) {\r\n                        defaultConfig.style = {};\r\n                    }\r\n                    defaultConfig.style[m] = self.scriptRun(d, config.style[m]);\r\n                }\r\n            } else {\r\n                defaultConfig[k] = self.scriptRun(d, config[k]);\r\n            }\r\n        }\r\n        if(d.hasOwnProperty(\"legendColor\")) {\r\n        \tdefaultConfig.style.fill = d.legendColor;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 运行配置中的js代码\r\n     */\r\n    this.scriptRun = function(d, str) {\r\n        return (ObjectUtil.isString(str) && str) ? str.replace(RegexUtil.jsRegex, function() {\r\n            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n        }) : str;\r\n    };\r\n    \r\n    /**\r\n     * 设置d3对象集合对应标签样式\r\n     */\r\n    this.setGroupStyle = function(group, styleConfig) {\r\n        if(!group.node() || !styleConfig) {\r\n            return;\r\n        }\r\n        var obj;\r\n        group.each(function() {\r\n            obj = this;\r\n            //这样写兼容\"stroke-Width\"和\"strokeWidth\"写法\r\n            for(var k in styleConfig) {\r\n                obj.style[k] = styleConfig[k];\r\n            }\r\n        });\r\n    };\r\n    \r\n    /**\r\n     * 销毁本类实例的方法\r\n     */\r\n    this.destroy = function() {\r\n        if(self.mainContainer()) {\r\n            self.mainContainer().remove();\r\n        }\r\n    };\r\n};\r\n\r\nBaseShape.struct = function(ghca_charts) {\r\n    BaseShape.prototype.constructor = BaseShape;\r\n};\r\n\r\nmodule.exports = BaseShape;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/shape/baseShape.js\n// module id = 111\n// module chunks = 0","var CircleShape = function (_element, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\t\r\n\tconst BaseShape = ghca_charts.view.elements.shape.baseShape;\r\n\t\r\n\tBaseShape.apply(this, arguments);\r\n    \r\n    var self  = this;\r\n    \r\n    self.defaultConfig({\r\n    \tcx:0,\r\n    \tcy:0,\r\n    \tr:3,\r\n    \tstyle:{\r\n    \t\t\"fill\":\"steelblue\",\r\n    \t\t\"stroke\":\"#aaa\",\r\n    \t\t\"stroke-opacity\":1,\r\n    \t\t\"stroke-width\":1,\r\n    \t\t\"fill-opacity\":1\r\n    \t}\r\n    });\r\n    \r\n    self.boundType(\"circle\");\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.renderChildren = function() {\r\n        if(!self.mainContainer()) {\r\n            var shape = _element.append(\"circle\").attr(\"class\", self.className());\r\n            self.mainContainer(shape);\r\n        }\r\n    };\r\n    \r\n    this.update = function(isUpdate) {\r\n    \tvar shape = self.mainContainer();\r\n    \tif(!shape) {\r\n    \t\treturn;\r\n    \t}\r\n    \tself.parseConfig(self.data());\r\n    \tvar defaultConfig = self.defaultConfig();\r\n    \t\r\n    \tif(!isUpdate) {\r\n    \t\tshape.attr(\"r\", 0);\r\n    \t}\r\n    \tshape\r\n            .attr(\"cx\", defaultConfig.x)\r\n            .attr(\"cy\", defaultConfig.y)\r\n            .transition().duration(self.animation() ? (isUpdate ? 500 : 1000) : 0)\r\n            .attr(\"r\", defaultConfig.r);\r\n            \r\n        self.setGroupStyle(shape, defaultConfig.style);\r\n    }\r\n};\r\n\r\nCircleShape.struct = function(ghca_charts) {\r\n\tvar BaseShape = ghca_charts.view.elements.shape.baseShape;\r\n    BaseShape.struct(ghca_charts);\r\n    CircleShape.prototype = Object.create(BaseShape.prototype);\r\n    CircleShape.prototype.constructor = CircleShape;\r\n};\r\n\r\nmodule.exports = CircleShape;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/shape/circleShape.js\n// module id = 112\n// module chunks = 0","var RectShape = function (_element, _data) {\r\n    \r\n    // --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n\t\r\n\tconst BaseShape = ghca_charts.view.elements.shape.baseShape;\r\n    \r\n\tBaseShape.apply(this, arguments);\r\n\t\r\n    var self  = this;\r\n    \r\n    self.defaultConfig({\r\n    \tx:0,\r\n    \ty:0,\r\n    \twidth:5,\r\n    \theight:5,\r\n        style:{\r\n            \"fill\":\"steelblue\",\r\n            \"stroke\":\"#aaa\",\r\n            \"stroke-opacity\":1,\r\n            \"stroke-width\":1,\r\n            \"fill-opacity\":1\r\n        }\r\n    });\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // Attributes\r\n    //\r\n    // --------------------------------------------------------------------------\r\n        \r\n    // ------------------------------\r\n    // attribute\r\n    // ------------------------------\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // public Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    this.renderChildren = function() {\r\n    \tif(!self.mainContainer()) {\r\n            var shape = _element.append(\"rect\").attr(\"class\", self.className())\r\n            self.mainContainer(shape)\r\n        }\r\n    };\r\n    \r\n    this.update = function(isUpdate){\r\n    \tvar shape = self.mainContainer();\r\n    \tif(!shape) {\r\n    \t\treturn;\r\n    \t}\r\n    \t\r\n    \tself.parseConfig(self.data());\r\n        var defaultConfig = self.defaultConfig();\r\n        \r\n    \tif(!isUpdate) {\r\n    \t\tshape.attr(\"width\", 0).attr(\"height\", 0);\r\n    \t}\r\n    \tshape\r\n            .attr(\"x\", defaultConfig.x)\r\n            .attr(\"y\", defaultConfig.y)\r\n            .transition().duration(self.animation() ? (isUpdate ? 500 : 1000) : 0)\r\n            .attr(\"width\", defaultConfig.width)\r\n            .attr(\"height\", defaultConfig.height);\r\n            \r\n        self.setGroupStyle(shape, defaultConfig.style);\r\n    }\r\n};\r\n\r\nRectShape.struct = function(ghca_charts) {\r\n\tvar BaseShape = ghca_charts.view.elements.shape.baseShape;\r\n    BaseShape.struct(ghca_charts);\r\n    RectShape.prototype = Object.create(BaseShape.prototype);\r\n    RectShape.prototype.constructor = RectShape;\r\n};\r\n\r\nmodule.exports = RectShape;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/elements/shape/rectShape.js\n// module id = 113\n// module chunks = 0","//绘制类\r\n\t\r\n/**\r\n * 构造方法 \r\n * @param _ele 绘制容器对象或者容器id，比如一个div \r\n * @param _config 渲染配置数据\r\n */\r\nvar Graph = function (_ele, _config) {\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n    // import\r\n    // --------------------------------------------------------------------------\r\n    \r\n    const BaseComponent = ghca_charts.view.component.baseComponent;\r\n    const Chart = ghca_charts.view.component.charts.chart;\r\n    const SVG = ghca_charts.view.component.svg;\r\n    const UUID = ghca_charts.view.util.UUIDUtil;\r\n    const ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    const DataParser = ghca_charts.view.util.dataParser;\r\n    const Global = ghca_charts.global;\r\n    \r\n    if (arguments.length != 2) {\r\n        throw new Error('传入参数个数错误,当前个数' + arguments.length + \",应传入两个参数。\");\r\n    }\r\n    \r\n    if (typeof(_ele) == 'string') {\r\n        _ele = document.getElementById(_ele);\r\n    }\r\n    if (!_ele) {\r\n        throw new Error('Graph构造方法中传入的容器_ele:' + _ele + \"无法找到。\");\r\n    }\r\n    \r\n    var self = this;\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  Attributes\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // ------------------------------\r\n    // id\r\n    // ------------------------------\r\n\r\n    /**\r\n     * graph id\r\n     */\r\n    var id = UUID.generateUUID();\r\n    this.id = function(value) {\r\n    \tif (!arguments.length)\r\n            return id;\r\n    \tid = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // config\r\n    // ------------------------------\r\n\r\n    /**\r\n     * 渲染配置数据\r\n     */\r\n    var config = _config;\r\n    this.config = function(value) {\r\n        if (!arguments.length)\r\n            return config;\r\n        config = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentWidth\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器宽度\r\n     */\r\n    this.parentWidth = function() {\r\n        return _ele ? _ele.clientWidth : 0;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // parentHeight\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 父容器高度\r\n     */\r\n    this.parentHeight = function() {\r\n        return _ele ? _ele.clientHeight : 0;\r\n    };\r\n    \r\n    //------------------------------\r\n    //  children\r\n    //------------------------------\r\n    \r\n    /**\r\n     * 该类实例的子类实例引用数组，只有非svg组件才有值\r\n     */\r\n    var children = [];\r\n    this.children = function(value) {\r\n        if (!arguments.length) {\r\n            return self.topComponent instanceof BaseComponent ? \r\n                self.topComponent.children() : children;\r\n        }\r\n        children = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // width\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前graph创建的顶层svg或者g元素的宽度，默认为父容器宽度\r\n     */\r\n    var width = NaN;\r\n    this.width = function(value) {\r\n         if (!arguments.length)\r\n            return isNaN(width) ? self.parentWidth() : width;\r\n        width = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // height\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前graph创建的顶层svg或者g元素的高度，默认为父容器高度\r\n     */\r\n    var height = NaN;\r\n    this.height = function(value) {\r\n        if (!arguments.length)\r\n            return isNaN(height) ? self.parentHeight() : height;\r\n        height = value;\r\n        return this;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleX\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前graph外层容器的scaleX\r\n     */\r\n    var scaleX = 1;\r\n    this.scaleX = function() {\r\n        return scaleX;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleY\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前graph外层容器的scaleY\r\n     */\r\n    var scaleY = 1;\r\n    this.scaleY = function() {\r\n        return scaleY;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // scaleZ\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 当前graph外层容器的scaleZ\r\n     */\r\n    var scaleZ = 1;\r\n    this.scaleZ = function() {\r\n        return scaleZ;\r\n    };\r\n    \r\n    // ------------------------------\r\n    // autoResize\r\n    // ------------------------------\r\n    \r\n    /**\r\n     * 是否自适应容器改变(默认为true)\r\n     */\r\n    var autoResize = true;\r\n    this.autoResize = function(value) {\r\n        if (!arguments.length)\r\n            return autoResize;\r\n        autoResize = value;\r\n        return this;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // listeners\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 父容器尺寸改变监听处理\r\n     */\r\n    this.resizeHandler = function() {\r\n        self.resize.call(self);\r\n    };\r\n    \r\n    // --------------------------------------------------------------------------\r\n    //\r\n    // private Methods\r\n    //\r\n    // --------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 初始化方法\r\n     */\r\n    var init = function() {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.init()\");\r\n        }\r\n    \t\r\n        self.parent = _ele;\r\n        \r\n        //解析渲染配置数据\r\n        parseConfig();\r\n        \r\n        //初始化传入的配置属性\r\n        self.refreshAttributes(self.config());\r\n        \r\n        //添加监听\r\n        addListeners();\r\n    };\r\n    \r\n    /**\r\n     * 解析渲染配置数据\r\n     */\r\n    var parseConfig = function() {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.parseConfig()\");\r\n        }\r\n    \tvar config = self.config();\r\n    \t//若传入配置为json字符串，则解析为js对象\r\n    \tif(ObjectUtil.isString(config)) {\r\n    \t\tconfig = JSON.parse(config);\r\n    \t\tself.config(config);\r\n    \t}\r\n    \t//使用相关解析器解析config数据内容\r\n    \tDataParser.parse(config);\r\n    };\r\n    \r\n    /**\r\n     * 添加监听\r\n     */\r\n    var addListeners = function() {\r\n    \tif(self.autoResize()) {\r\n    \t\twindow.addEventListener('resize', self.resizeHandler, false);\r\n    \t}\r\n    };\r\n    \r\n    /**\r\n     * 渲染顶层组件，若父容器为baseComponent元素，或者要渲染的容器为非svg容器，则直接使用该父容器；\r\n     * 若父容器为其他元素，则在该容器中创建一个svg元素以显示图表内容；\r\n     */\r\n    var renderTopComponent = function(parent, config) {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderTopComponent()\");\r\n        }\r\n        if(parent instanceof BaseComponent || \r\n        config.type === \"table\" || \r\n        config.type === \"linkButton\" || \r\n        config.type === \"comboBox\" || \r\n        config.type === \"textLabel\"||\r\n        config.type === \"multiTextLabel\"||\r\n        config.type === \"gisMap\"||\r\n        config.type === \"iFrame\"||\r\n        config.type === \"dateTimeBox\") {\r\n            self.topComponent = parent;\r\n        } else {\r\n            var svg = new SVG(parent);\r\n            svg.graph(self);\r\n            svg.render();\r\n            self.topComponent = svg;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据配置渲染多个组件\r\n     */\r\n    var renderComponents = function(parent, config) {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderComponents()\");\r\n        }\r\n        var instance;\r\n        if(config.hasOwnProperty(\"type\")) {\r\n            if(config.type === \"chart\") {\r\n                //作为图表组件渲染\r\n                instance = renderChart(parent, config);\r\n            } else {\r\n                //作为普通组件渲染\r\n                instance = renderComponent(parent, config);\r\n            }\r\n        }\r\n        //渲染子级内容\r\n        if(config.hasOwnProperty(\"children\") \r\n        && ObjectUtil.isArray(config.children)\r\n        && config.children.length > 0) {\r\n            var children = config.children;\r\n            for(var i = 0, len = children.length; i < len; i++) {\r\n                renderComponents(instance, children[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 根据配置渲染单个组件\r\n     */\r\n    var renderComponent = function(parent, config) {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderComponent()\");\r\n        }\r\n        var ComponentClass, isImportCom = false;\r\n        var outerPlugins = ghca_charts.global.outerPlugins;\r\n        //检查外部注册的组件类\r\n        ComponentClass = outerPlugins && outerPlugins.componentMap && outerPlugins.componentMap[config.type];\r\n        //若没有查到则检查内部组件类\r\n        if(!ComponentClass) {\r\n        \tswitch(config.type) {\r\n        \t\t/*custom svg components*/\r\n                case \"component\":\r\n                    ComponentClass = BaseComponent;\r\n                    break;\r\n                case \"eagleEyeContainer\":\r\n                    ComponentClass = ghca_charts.view.component.eagleEyeContainer;\r\n                    break;\r\n                case \"tagContainer\":\r\n                    ComponentClass = ghca_charts.view.component.tagContainer;\r\n                    break;\r\n                case \"svgCanvas\":\r\n                    ComponentClass = ghca_charts.view.component.svgCanvas;\r\n                    break;\r\n                /*import div components*/\r\n                case \"table\":\r\n                    isImportCom = true;\r\n                    ComponentClass = ghca_charts.view.component.table;\r\n                    break;\r\n                case \"linkButton\":\r\n                    isImportCom = true;\r\n                    ComponentClass = ghca_charts.view.component.importcomponents.linkButton;\r\n                    break;\r\n                case \"comboBox\":\r\n                    isImportCom = true;\r\n                    ComponentClass = ghca_charts.view.component.importcomponents.comboBox;\r\n                    break;\r\n                case \"dateTimeBox\":\r\n                    isImportCom = true;\r\n                    ComponentClass = ghca_charts.view.component.importcomponents.dateTimeBox;\r\n                    break;\r\n                case \"textLabel\":\r\n                    isImportCom = true;\r\n                    ComponentClass=ghca_charts.view.component.importcomponents.textLabel;\r\n                    break;\r\n                case \"multiTextLabel\":\r\n                    isImportCom = true;\r\n                    ComponentClass=ghca_charts.view.component.importcomponents.multiTextLabel;\r\n                    break;\r\n                case \"gisMap\":\r\n                    isImportCom = true;\r\n                    ComponentClass=ghca_charts.view.component.gis.gisMap;\r\n                    break;\r\n                case \"iFrame\":\r\n                    isImportCom = true;\r\n                    ComponentClass = ghca_charts.view.component.importcomponents.iFrame;\r\n                    break;\r\n                /*custom util components*/\r\n                case \"timer\":\r\n                    ComponentClass = ghca_charts.view.component.utilcomponents.timer;\r\n                    break;\r\n                case \"evDataDispatcher\":\r\n                    ComponentClass = ghca_charts.view.component.utilcomponents.evDataDispatcher;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        if(!ComponentClass) {\r\n            throw new Error('当前传入的组件类型' + config.type + \"尚未支持。\");\r\n        }\r\n        var component;\r\n        if(isImportCom) {\r\n        \tcomponent = new ComponentClass(parent, config);\r\n        \tcomponent.render();\r\n        \tself.children().push(component);\r\n        } else {\r\n        \tcomponent = new ComponentClass(config);\r\n            parent.addChild(component);\r\n        }\r\n        component.graph(self);\r\n        return component;\r\n    };\r\n    \r\n    /**\r\n     * 根据配置渲染单个图表组件\r\n     */\r\n    var renderChart = function(parent, config) {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.renderChart()\");\r\n        }\r\n        var chart = new Chart(config);\r\n        chart.graph(self);\r\n        parent.addChild(chart);\r\n        return chart;\r\n    };\r\n    \r\n    /**\r\n     * 重新计算布局\r\n     */\r\n    var relayout = function(parent) {\r\n        if(!(parent instanceof BaseComponent)) {\r\n            return;\r\n        }\r\n        //计算除图表布局以外的所有布局\r\n        var layout = parent.layout();\r\n        if(layout && !layout.isChartLayout()) {\r\n            layout.measure();\r\n        }\r\n        //计算子容器布局\r\n        var children = parent.children();\r\n        if(children !== null && children.length > 0) {\r\n            for(var i = 0, len = children.length; i < len; i++) {\r\n                relayout(children[i]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    //--------------------------------------------------------------------------\r\n    //\r\n    //  public Methods\r\n    //\r\n    //--------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * 根据传入的前缀和后缀，生成graph全局唯一的自定义id\r\n     */\r\n    this.getCustomId = function(prefix, suff) {\r\n        return (ObjectUtil.isString(prefix) || ObjectUtil.isNumber(prefix) ? prefix : \"\") + \r\n                self.id() + \"_\" + \r\n               (ObjectUtil.isString(suff) || ObjectUtil.isNumber(suff) ? suff : \"\");\r\n    };\r\n    \r\n    /**\r\n     * 渲染内容\r\n     */\r\n    this.render = function() {\r\n        if(Global.isDebug) {\r\n            console.log(\"Graph.render()\");\r\n            var ot = new Date().getTime();\r\n        }\r\n        \r\n        //渲染顶层元素\r\n        renderTopComponent(self.parent, self.config());\r\n        //根据配置渲染所有元素\r\n        renderComponents(self.topComponent, self.config());\r\n        //计算所有容器布局\r\n        relayout(self.topComponent);\r\n        if(Global.isDebug) {\r\n            var nt = new Date().getTime();\r\n            console.log(\"Graph.render() is cost time : \" + (nt-ot) + \" ms.\");\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 更新内容\r\n     */\r\n    this.update = function() {\r\n        var topCom = self.topComponent;\r\n        if(topCom instanceof BaseComponent) {\r\n            topCom.update();\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 容器尺寸变化后自适应内容\r\n     */\r\n    this.resize = function() {\r\n        var topCom = self.topComponent;\r\n        if(topCom instanceof BaseComponent) {\r\n            topCom.width(self.width());\r\n            topCom.height(self.height());\r\n            topCom.resize();\r\n        } else if(children) {\r\n        \tfor(var child, i = 0, len = children.length ; i < len; i++) {\r\n        \t\tchild = children[i];\r\n        \t\tif(child.resize) {\r\n        \t\t\tchild.resize();\r\n        \t\t}\r\n        \t}\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 刷新传入配置数据到本类相应属性的方法\r\n     * @param data 布局配置数据\r\n     */\r\n    this.refreshAttributes = function(data) {\r\n        if(!data) {\r\n           return;\r\n        }\r\n        for(var key in data) {\r\n            if(self.hasOwnProperty(key)) {\r\n                this[key](data[key]);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * 设置该graph下的所有组件主题\r\n     * @param value 主题名称，或者主题json字符串内容；若不传则使用默认主题\r\n     */\r\n    this.setTheme = function(value) {\r\n    \t\r\n    };\r\n    \r\n    /**\r\n     * 设置配置属性值\r\n     * @param key 属性键值(包括从该组件到属性的路径，比如legend.xPos或者legend.domain[0])\r\n     * @param value 属性值\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setConfigProperty = function(key, value) {\r\n    \tvar chart = self.getChildChart();\r\n    \treturn chart ? chart.setConfigProperty(key, value) : false;\r\n    };\r\n    \r\n    /**\r\n     * 设置数据内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}(支持字符串或者object格式),\r\n     *              或者'[[],...,[]]'(line,area,bar支持，配合seriesConfig设置使用，只支持字符串格式)等\r\n     * @param seriesIndex 更新数据所在图表的series索引值，默认为0\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setData = function(value, seriesIndex) {\r\n    \tvar chart = self.getChildChart();\r\n    \tif(!chart) {\r\n    \t\treturn false;\r\n    \t}\r\n        \r\n    \t//若传入数据为字符串内容，则根据内容判断是否需要解析；若为非字符串内容则直接使用\r\n    \tvar config = chart.data();\r\n    \tvar isChart = config.type === \"chart\";\r\n        if(ObjectUtil.isString(value)) {\r\n        \tvar isShareSeries = false;\r\n            try {\r\n                //是否为数组json字符串或者对象格式\r\n                if(value.indexOf(\"[\") === 0 || value.indexOf(\"{\") === 0) {\r\n                    value = JSON.parse(value);\r\n                }\r\n                if(chart.data().hasOwnProperty(\"seriesConfig\") || (ObjectUtil.isArray(value) && isChart)) {\r\n                \tisShareSeries = true;\r\n                }\r\n            } catch(e) {\r\n                isShareSeries = false;\r\n            }\r\n            //解析共享series模式数据，格式为数组\r\n            if(isShareSeries) {\r\n            \tvar parent = chart.parent();\r\n            \tparent.removeChild(chart);\r\n            \tvar data = chart.data();\r\n            \tvar series = [];\r\n            \tdata.series = series;\r\n            \t//传入的是数组数据\r\n            \tif(ObjectUtil.isArray(value)) {\r\n            \t\t//若传入的是一维数组，则包装成二维数组\r\n            \t\tif(value.length > 0 && !ObjectUtil.isArray(value[0])) {\r\n                        value = [value];\r\n                    }\r\n            \t} else if(ObjectUtil.isObject(value) && value.hasOwnProperty(\"data\")) {//传入的是对象数据\r\n            \t\tvalue = [value.data];\r\n            \t}\r\n            \tfor(var i = 0, len = value.length; i < len; i++) {\r\n            \t\tseries.push({data:[]});\r\n            \t}\r\n            \tDataParser.parse(data);\r\n            \trenderChart(parent, data);\r\n            \tfor(var i = 0, len = value.length; i < len; i++) {\r\n                    var result = self.setData({data:value[i]}, i);\r\n                    if(!result) {\r\n                    \treturn false;\r\n                    }\r\n                }\r\n                DataParser.parse(chart.data());\r\n            \treturn true;\r\n            }\r\n        }\r\n        //普通series模式\r\n        var childrenCharts = isChart ? chart.children() : [chart];\r\n        if(childrenCharts.length === 0) {\r\n            return false;\r\n        }\r\n    \tif(isNaN(seriesIndex) || seriesIndex < 0) {\r\n    \t\tseriesIndex = 0;\r\n    \t}\r\n    \tif(seriesIndex > childrenCharts.length - 1) {\r\n    \t\tseriesIndex = childrenCharts.length - 1;\r\n    \t}\r\n    \tvar baseChart = childrenCharts[seriesIndex];\r\n        return baseChart.setData(value);\r\n    };\r\n    \r\n    /**\r\n     * 设置配置属性值成功后更新组件内容\r\n     * @param key 属性键值(包括从该组件到属性的路径，比如legend.xPos或者legend.domain[0])\r\n     * @param value 属性值\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setConfigPropertyAndUpdate = function(key, value) {\r\n        if(self.setConfigProperty(key, value)) {\r\n        \tvar chart = self.getChildChart();\r\n        \tDataParser.parse(chart.data());\r\n            chart.update();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    \r\n    /**\r\n     * 设置数据内容成功后更新组件内容\r\n     * @param value 数据内容，格式为：{data:[]}或者{nodes:[],links:[]}(支持字符串或者object格式),\r\n     *              或者'[[],...,[]]'(仅line,area,bar支持，配合seriesConfig设置使用，只支持字符串格式)等\r\n     * @param seriesIndex 更新数据所在图表的series索引值，默认为0\r\n     * @return 返回是否设置成功\r\n     */\r\n    this.setDataAndUpdate = function(value, seriesIndex) {\r\n        if(self.setData(value, seriesIndex)) {\r\n        \tvar chart = self.getChildChart();\r\n            chart.update();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    \r\n    /**\r\n     * 获取唯一的子图表实例，若存在多个子图表实例，则返回第0个；若没有则返回null。\r\n     */\r\n    this.getChildChart = function() {\r\n        if(self.topComponent instanceof BaseComponent && self.topComponent.children().length > 0) {\r\n            return self.topComponent.children()[0];\r\n        } else if (self.topComponent && self.children().length > 0) {\r\n        \treturn self.children()[0];\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * 获取所有子图表实例列表；若没有则返回空数组。\r\n     */\r\n    this.getChildCharts = function() {\r\n    \tvar charts = [];\r\n        if(self.topComponent instanceof BaseComponent) {\r\n            var children = self.topComponent.children();\r\n            for(var child, i = 0, len = children.length; i < len; i++) {\r\n            \tchild = children[i];\r\n            \tif(child instanceof Chart) {\r\n            \t\tcharts.push(child);\r\n            \t}\r\n            }\r\n        }\r\n        return charts;\r\n    };\r\n    \r\n    /**\r\n     * 若外层容器有scale，则必须调用该方法设置scale值，否则渲染位置和交互操作可能会出错\r\n     * @sX 不传默认为1\r\n     * @sY 不传默认为1\r\n     * @sZ 不传默认为1\r\n     */\r\n    this.setScale = function(sX, sY, sZ) {\r\n    \tscaleX = isNaN(sX) ? 1 : sX;\r\n    \tscaleY = isNaN(sY) ? 1 : sY;\r\n    \tscaleZ = isNaN(sZ) ? 1 : sZ;\r\n    }\r\n    \r\n    /**\r\n     * 销毁基于该graph渲染的所有容器\r\n     */\r\n    this.destroy = function() {\r\n        var topCom = self.topComponent;\r\n        if(topCom instanceof BaseComponent) {\r\n            topCom.destroy();\r\n        }\r\n    };\r\n    \r\n    // 初始化\r\n    init();\r\n};\r\n\r\nGraph.struct = function(ghca_charts) {\r\n    Graph.prototype.constructor = Graph;\r\n};\r\n\r\nmodule.exports = Graph;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/graph.js\n// module id = 114\n// module chunks = 0","// 类工厂类\r\n\t\r\n// --------------------------------------------------------------------------\r\n// import\r\n// --------------------------------------------------------------------------\r\n\r\nvar nodeMap = null;\r\nvar linkMap = null;\r\nvar pluginMap = null;\r\nvar chartMap = null;\r\n\r\nvar ClassFactory = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nClassFactory.newPluginInstance = function(clazzName, args) {\r\n    if(!clazzName) {\r\n        return null;\r\n    }\r\n    if(pluginMap === null) {\r\n        pluginMap = new ghca_charts.view.elements.plugins.pluginMap().getMap();\r\n    }\r\n    var generator = pluginMap[clazzName.toLowerCase()];\r\n    var instance = generator ? new generator(args[0], args[1]) : null;\r\n    return instance;\r\n};\r\n\r\nClassFactory.newChartInstance = function(clazzName, args) {\r\n\tif(!clazzName) {\r\n\t\treturn null;\r\n\t}\r\n\tif(chartMap === null) {\r\n        chartMap = new ghca_charts.view.component.chartMap().getMap();\r\n    }\r\n    var generator = chartMap[clazzName.toLowerCase()];\r\n    var instance = generator ? new generator(args[0], args[1]) : null;\r\n    return instance;\r\n};\r\n\r\nClassFactory.instanceofChart = function(ins) {\r\n\tif(!ins) {\r\n\t\treturn false;\r\n\t}\r\n\tif(chartMap === null) {\r\n        chartMap = new ghca_charts.view.component.chartMap().getMap();\r\n    }\r\n    var c = ins.constructor;\r\n    return c.hasOwnProperty(\"clazzName\") && chartMap.hasOwnProperty(c.clazzName.toLowerCase());\r\n};\r\n\r\nClassFactory.newLinkInstance = function(clazzName, args) {\r\n\tif(!clazzName) {\r\n        return null;\r\n    }\r\n\tif(linkMap === null) {\r\n        linkMap = new ghca_charts.view.elements.plugins.linkMap().getMap();\r\n    }\r\n\tvar generator = linkMap[clazzName.toLowerCase()];\r\n    var instance = generator ? new generator(args[0], args[1]) : null;   \r\n    return instance;\r\n};\r\n\r\nClassFactory.newNodeInstance = function(clazzName, args) {\r\n\tif(!clazzName) {\r\n        return null;\r\n    }\r\n\tif(nodeMap === null) {\r\n        nodeMap = new ghca_charts.view.elements.plugins.nodeMap().getMap();\r\n    }\r\n    var generator = nodeMap[clazzName.toLowerCase()];\r\n    var instance = generator ? new generator(args[0], args[1], args[2]) : null;\r\n    return instance;\r\n};\r\n\r\nClassFactory.newRenderersInstanceByData = function(parent, chart, className, itemsData, isNode, colorPropertyName, plugInCallBack) {\r\n\tif(!className || !itemsData || !parent || !chart) {\r\n\t\treturn null;\r\n\t}\r\n\tif(isNode === undefined || isNode === null) {\r\n        isNode = true;\r\n    }\r\n\tif(!colorPropertyName) {\r\n\t\tcolorPropertyName = \"fill\";\r\n    }\r\n    \r\n\t//只用当前可见的项作为渲染数据源\r\n    var d, itemData, itemIns, rendererConfig,\r\n        itemsIns = [], \r\n        BaseComponent = ghca_charts.view.component.baseComponent;\r\n    for(var i = 0, len = itemsData.length; i < len; i++) {\r\n    \titemData = itemsData[i];\r\n    \trendererConfig = chart.getRendererConfig(itemData, colorPropertyName);\r\n    \t\r\n    \t//shape作为渲染器\r\n    \tif(rendererConfig.type && rendererConfig.type.toLowerCase() === \"shape\") {\r\n    \t\t//若节点渲染器是一个shape容器\r\n            var itemContent = ClassFactory.newNodeInstance(rendererConfig.clazz, [parent.mainContainer(), itemData]);\r\n            itemContent.className(className);\r\n            if(plugInCallBack) {\r\n                plugInCallBack.call(null, itemContent);\r\n            }\r\n            itemContent.render();\r\n            parent.normalChild(itemContent);\r\n            itemData.ins = itemContent;\r\n            itemData.legendIns = itemContent;\r\n            itemData.dragIns = itemContent;\r\n            continue;\r\n    \t}\r\n    \t\r\n    \t//非shape作为渲染器\r\n        //创建节点容器\r\n        itemIns = new BaseComponent();\r\n        itemIns.className(className);\r\n        itemIns.isLight(true);\r\n        itemIns.title(itemData.title ? itemData.title : null);\r\n    \tparent.addChild(itemIns);\r\n        //若节点渲染器是一个组件，则渲染该组件\r\n        if(rendererConfig.type && rendererConfig.type.toLowerCase() === \"chart\") {\r\n        \t//绑定数据\r\n            itemIns.mainContainer().data([itemData]);\r\n            //实例化图表渲染器\r\n            var itemChart = new ClassFactory.newChartInstance(rendererConfig.type, [rendererConfig, null]);\r\n            itemChart.isRenderer(true);\r\n            itemIns.addChild(itemChart);\r\n            itemsIns.push(itemIns);\r\n            itemData.ins = itemChart;\r\n            itemData.legendIns = itemChart;\r\n            itemData.dragIns = itemIns;\r\n        } else {\r\n        \t//若节点渲染器是一个plugin容器，则绑定数据，并刷新节点容器\r\n        \tvar itemUpdate = itemIns.mainContainer().data([itemData]);\r\n            itemUpdate.each(function (d, i) {\r\n            \tvar fn = isNode ? ClassFactory.newNodeInstance : ClassFactory.newLinkInstance;\r\n                var itemContent = fn(rendererConfig.clazz, [d3.select(this), d]);\r\n                if(plugInCallBack) {\r\n                \tplugInCallBack.call(null, itemContent);\r\n                }\r\n                if(itemContent.config) {\r\n                \titemContent.config(rendererConfig.config);\r\n                }\r\n                // var ot=new Date().getTime();\r\n                itemContent.render();\r\n                // console.log(\"isNode:\"+isNode+\" \"+(new Date().getTime()-ot));\r\n                itemIns.normalChild(itemContent);\r\n                itemsIns.push(itemIns);\r\n                d.ins = itemContent;\r\n                d.legendIns = itemContent;\r\n                d.dragIns = itemIns;\r\n            });\r\n        }\r\n    }\r\n    \r\n    return itemsIns;\r\n};\r\n\r\nmodule.exports = ClassFactory;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/classFactory.js\n// module id = 115\n// module chunks = 0","//颜色工具类\r\n\r\nvar ColorUtil = {};\r\n\r\nColorUtil.d3Scheme20Colors = d3.schemeCategory20;\r\nColorUtil.d3Scheme10Colors = d3.schemeCategory10;\r\nColorUtil.echartColors = [\r\n    '#ff7f50','#87cefa','#da70d6','#32cd32','#6495ed',\r\n    '#ff69b4','#ba55d3','#cd5c5c','#ffa500','#40e0d0',\r\n    '#1e90ff','#ff6347','#7b68ee','#00fa9a','#ffd700',\r\n    '#6699FF','#ff6666','#3cb371','#b8860b','#30e0e0'\r\n];\r\nColorUtil.defaultColors = ColorUtil.d3Scheme20Colors;\r\nvar colorsFn = d3.scaleOrdinal(ColorUtil.defaultColors);\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 获取颜色\r\n * @param index 该颜色在range中的索引值\r\n * @param range 自定义颜色range数组，若不传则使用当前的colorsFn获取\r\n * @return 返回颜色值\r\n */\r\nColorUtil.getColor = function(index, range) {\r\n    return (Object.prototype.toString.call(range) === \"[object Array]\" && range.length > 0) ? \r\n        range[index % range.length] : \r\n        colorsFn(index);\r\n};\r\n\r\n/**\r\n * 设置颜色透明度\r\n * @param color 颜色对象，如\"#fff\",\"white\",\"rgb(255,255,255)\"等格式\r\n * @param alpha 透明度[0-1]\r\n * @return 返回颜色值,rgba格式\r\n */\r\nColorUtil.setAlpha = function(color, alpha) {\r\n\tvar d3Color = d3.color(color);\r\n\tif(!d3Color) {\r\n\t\treturn color;\r\n\t}\r\n    var rgbaColor = d3.color(color).rgb();\r\n    rgbaColor.opacity = alpha;\r\n    return rgbaColor;\r\n};\r\n\r\n/**\r\n * 设置颜色枚举序列数组，用法如下:\r\n * <pre>\r\n * const ColorUtil = ghca_charts.view.util.colorUtil;\r\n * ColorUtil.setColors(ColorUtil.echartColors);\r\n * graph.update();//必须刷新才能有效果\r\n * </pre>\r\n * @param value 颜色枚举序列数组，数组元素支持如\"#fff\",\"white\",\"rgb(255,255,255)\"等格式，若不传则使用defaultColors\r\n */\r\nColorUtil.setColors = function(colors) {\r\n    colorsFn = d3.scaleOrdinal(\r\n        (Object.prototype.toString.call(colors) === \"[object Array]\" && colors.length > 0) ? \r\n        colors : ColorUtil.defaultColors);\r\n};\r\n\r\n/**\r\n * 获取线性渐变定义\r\n * @param svgNode svg元素\r\n * @param colors 颜色数组\r\n * @param opacitys 透明度数组，默认[1, 1]\r\n * @param offsets 渐变偏移量数组，默认[\"0%\", \"100%\"]\r\n * @param isHor 渐变方向，默认true\r\n */\r\nColorUtil.getLinearGradientDef = function (svgNode, colors, opacitys, offsets, isHor) {\r\n    var UUIDUtil = ghca_charts.view.util.UUIDUtil;\r\n    var Constant = ghca_charts.view.util.constant;\r\n\r\n    var svg = d3.select(svgNode.ownerSVGElement);\r\n    var defs = svg.select(\"svg defs\");\r\n    if(defs.node() === null) {\r\n        defs = svg.append(\"defs\");\r\n    }\r\n    var length = colors.length,\r\n        rate = Math.floor(100/length),\r\n        id = UUIDUtil.generateUUID();\r\n    var lg = defs.append(\"svg:linearGradient\").attr(\"id\",id);\r\n    if(Constant.HOR_DRAG_TYPE === direction) {\r\n    \tlg.attr(\"y1\",1).attr(\"y2\",1).attr(\"x1\",0).attr(\"x2\",1);\r\n    } else {\r\n    \tlg.attr(\"y1\",0).attr(\"y2\",1).attr(\"x1\",1).attr(\"x2\",1);\r\n    }\r\n    colors.forEach(function (color, i){\r\n        var stop = lg.append(\"stop\").attr(\"stop-color\",color);\r\n        if(i==length-1)\r\n            stop.attr(\"offset\",\"100%\");\r\n        else\r\n            stop.attr(\"offset\",i*rate+\"%\");\r\n    });\r\n    return id;\r\n}\r\n\r\nmodule.exports = ColorUtil;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/colorUtil.js\n// module id = 116\n// module chunks = 0","// 一般工具类\r\n\r\nvar CommonUtil = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 获取当前浏览器类型\r\n * \r\n * @return 返回浏览器类型\r\n */\r\nCommonUtil.getBrowserType = function() {\r\n    var userAgent = navigator.userAgent; // 取得浏览器的userAgent字符串\r\n    // 判断是否Opera浏览器\r\n    var isOpera = userAgent.indexOf(\"Opera\") > -1;\r\n    if (isOpera) {\r\n        return \"Opera\"\r\n    }; \r\n    // 判断是否IE11以下浏览器\r\n    if (userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera) {\r\n        return \"IE\";\r\n    };\r\n    // 判断是否Edge浏览器\r\n    if (userAgent.indexOf(\"Edge\") > -1) {\r\n        return \"Edge\";\r\n    } \r\n    // 判断是否IE11浏览器\r\n    if (window.ActiveXObject || \"ActiveXObject\" in window) {\r\n        return \"IE\";\r\n    }\r\n    // 判断是否Firefox浏览器\r\n    if (userAgent.indexOf(\"Firefox\") > -1) {\r\n        return \"Firefox\";\r\n    } \r\n    // 判断是否Safari浏览器\r\n    if (userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1) {\r\n        return \"Safari\";\r\n    }\r\n    // 判断是否Chrome浏览器\r\n    if (userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1) {\r\n        return \"Chrome\";\r\n    }\r\n};\r\n\r\nCommonUtil.browserType = CommonUtil.getBrowserType();\r\n\r\nCommonUtil.isIE = function() {\r\n    return \"IE\" === CommonUtil.browserType;\r\n};\r\n\r\nCommonUtil.isFirefox = function() {\r\n    return \"Firefox\" === CommonUtil.browserType;\r\n};\r\n\r\nCommonUtil.isChrome = function() {\r\n    return \"Chrome\" === CommonUtil.browserType;\r\n};\r\n\r\nCommonUtil.isOpera = function() {\r\n    return \"Opera\" === CommonUtil.browserType;\r\n};\r\n\r\nCommonUtil.isSafari = function() {\r\n    return \"Safari\" === CommonUtil.browserType;\r\n};\r\n\r\nCommonUtil.isEdge = function() {\r\n    return \"Edge\" === CommonUtil.browserType;\r\n};\r\n\r\n/**\r\n * 根据读取的配置信息和默认配置信息创建新的配置信息\r\n * @param defaultConfig 默认配置对象\r\n * @param config 从配置文件中获取的配置对象\r\n */\r\nCommonUtil.createConfig = function(defaultConfig, config) {\r\n    if(!defaultConfig || !config) {\r\n        return null;\r\n    }\r\n    for(var k in config) {\r\n        if(k === \"style\") {\r\n            for(var m in config.style) {\r\n                if(!defaultConfig.style) {\r\n                    defaultConfig.style = {};\r\n                }\r\n                defaultConfig.style[m] = config.style[m];\r\n            }\r\n        } else {\r\n            defaultConfig[k] = config[k];\r\n        }\r\n    }\r\n    return defaultConfig;\r\n};\r\n\r\n/**\r\n * 设置d3元素集合样式\r\n * @param group d3元素集合，如d3.selectAll(\".className\")\r\n * @param styleConfig style配置对象\r\n */\r\nCommonUtil.setGroupStyle = function(group, styleConfig) {\r\n    if(!group||!group.node() || !styleConfig) {\r\n        return;\r\n    }\r\n    var obj;\r\n    group.each(function() {\r\n        obj = this;\r\n        //这样写兼容\"stroke-Width\"和\"strokeWidth\"写法\r\n        for(var k in styleConfig) {\r\n            obj.style[k] = styleConfig[k];\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 设置d3元素集合属性\r\n * @param group d3元素集合，如d3.selectAll(\".className\")\r\n * @param attrConfig attr配置对象\r\n */\r\nCommonUtil.setGroupAttr = function(group, attrConfig) {\r\n    if(!group||!group.node() || !attrConfig) {\r\n        return;\r\n    }\r\n    for(var k in attrConfig) {\r\n        group.attr(k, attrConfig[k]);\r\n    }\r\n};\r\n\r\nmodule.exports = CommonUtil;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/commonUtil.js\n// module id = 117\n// module chunks = 0","//常量类\r\nvar Const = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Const\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nConst.NO_SCALE_TYPE                 = -1;   //禁止缩放\r\nConst.COMPONENT_SCALE_TYPE          = 0;    //组件整体缩放\r\nConst.LAYOUT_SCALE_TYPE             = 1;    //布局关系缩放\r\nConst.LAYOUT_HOR_SCALE_TYPE         = 2;    //布局关系缩放，只对水平方向缩放\r\nConst.LAYOUT_VER_SCALE_TYPE         = 3;    //布局关系缩放，只对垂直方向缩放\r\n\r\nConst.HOR_DRAG_TYPE     = \"hor\";    //仅水平方向可拖动\r\nConst.VER_DRAG_TYPE     = \"ver\";    //仅垂直方向可拖动\r\nConst.FREE_DRAG_TYPE    = \"free\";   //任意方向拖动\r\nConst.FIX_DRAG_TYPE     = \"fix\";    //不能拖动\r\nConst.TREE_RADIAL_TYPE  = \"radial\";\r\nConst.TREE_HOR_TYPE     = \"hor\";\r\nConst.TREE_VER_TYPE     = \"ver\";\r\n\r\nConst.SORT_DESC = \"desc\";   //降序\r\nConst.SORT_ASC  = \"asc\";    //升序\r\nConst.SORT_NONE = \"none\";   //禁用排序\r\n\r\nmodule.exports = Const;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/constant.js\n// module id = 118\n// module chunks = 0","//数据解析器类\r\nvar DataParser = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 解析数据\r\n * @param data 数据对象\r\n * @param isSeries 是否是series元素\r\n * @param seriesConfig 图表序列对象统一的配置数据，若序列对象单独设置了自己的配置内容，则按序列自己的设置渲染\r\n */\r\nDataParser.parse = function(data, isSeries, seriesConfig) {\r\n\tif(!data) {\r\n\t\treturn;\r\n\t}\r\n\treplacePercentPosAndSize(data);\r\n\tparseSeriesConfig(data, isSeries, seriesConfig);\r\n\tparseChildrenOrSeries(data);\r\n};\r\n\r\n/**\r\n * 解析非图表子对象或者图表series子对象\r\n */\r\nconst parseChildrenOrSeries = function(data) {\r\n\tvar ObjectUtil = ghca_charts.view.util.objectUtil;\r\n\t//只有chart类型才有series\r\n\tvar isSeries = data.type === \"chart\";\r\n\tvar children = isSeries ? data.series : data.children;\r\n\tvar seriesConfig = isSeries ? data.seriesConfig : null;\r\n\tif(ObjectUtil.isArray(children)) {\r\n\t\tfor(var child, i = 0, len = children.length; i < len; i++) {\r\n\t\t\tchild = children[i];\r\n\t\t\t//seriesConfig图表补全series中二维数组中第一维元素的data结构,即series:[[],[]]变为series:[{data:[]},{data:[]}]\r\n\t\t\tif(isSeries && seriesConfig && !ObjectUtil.isArray(child.data)) {\r\n\t\t\t\tchildren[i] = {data:children[i]};\r\n\t\t\t}\r\n\t\t\tDataParser.parse(children[i], isSeries, seriesConfig);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * 解析配置中x、y、z、width、height属性中的百分比类型值\r\n */\r\nconst replacePercentPosAndSize = function(data) {\r\n\tvar ObjectUtil = ghca_charts.view.util.objectUtil;\r\n    var RegexUtil = ghca_charts.view.util.regexUtil;\r\n\tvar replaceFn = function(d, sourceKey, targetKey) {\r\n\t\tif(!d.hasOwnProperty(sourceKey)) {\r\n\t\t\treturn;\r\n\t\t}\r\n        var value = d[sourceKey];\r\n        if(!ObjectUtil.isString(value)) {\r\n        \treturn;\r\n        }\r\n        var result = value.match(RegexUtil.percentRegex);\r\n        if(result === null) {\r\n        \treturn;\r\n        }\r\n        var pv = parseFloat(result[1]);\r\n        if(isNaN(pv)) {\r\n        \treturn;\r\n        }\r\n        d[targetKey] = pv;\r\n\t};\r\n\treplaceFn(data, \"x\", \"percentX\");\r\n\treplaceFn(data, \"y\", \"percentY\");\r\n\treplaceFn(data, \"z\", \"percentZ\");\r\n\treplaceFn(data, \"width\", \"percentWidth\");\r\n\treplaceFn(data, \"height\", \"percentHeight\");\r\n};\r\n\r\n/**\r\n * 解析并补全设置配置中图表序列共用属性\r\n * @param data 数据对象\r\n * @param isSeries 是否是series元素\r\n * @param seriesConfig 若图表数据含有共享序列配置，则图表序列对象统一使用该共享配置数据\r\n */\r\nconst parseSeriesConfig = function(data, isSeries, seriesConfig) {\r\n\tif(!isSeries) {\r\n\t\treturn;\r\n\t}\r\n\t//复制seriesConfig到每个serie\r\n\tif(data.useSeriesConfig !== false && seriesConfig) {\r\n\t\tvar ObjectUtil = ghca_charts.view.util.objectUtil;\r\n\t\tvar config = ObjectUtil.cloneObj(seriesConfig);\r\n\t\t//复制属性\r\n\t\tfor(var key in config) {\r\n\t\t\tdata[key] = config[key];\r\n\t\t}\r\n\t\t//复制渲染器名称到对应数据项\r\n\t\tvar d = data.data;\r\n\t\tif(ObjectUtil.isArray(d) && d.length > 0 && data.renderers) {\r\n\t\t\tvar renderers = data.renderers;\r\n\t\t\tfor(var rendererName in renderers) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(rendererName) {\r\n\t\t\t\tfor(var i = 0, len = d.length; i < len; i++) {\r\n\t\t\t\t\td[i].renderer = rendererName;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//根据chart type补全默认布局\r\n\tif(!data.type) {\r\n\t\treturn;\r\n\t}\r\n\tvar layoutData = data.layout;\r\n    if(!layoutData || !layoutData.type) {\r\n    \tlayoutData = {};\r\n    \tdata.layout = layoutData;\r\n    \tvar type;\r\n        switch(data.type.toLowerCase()) {\r\n            case \"topo\":\r\n                type = \"topoLayout\";\r\n                break;\r\n            case \"tree\":\r\n                type = \"treeLayout\";\r\n                break;\r\n            case \"sankey\":\r\n                type = \"sankeyLayout\";\r\n                break;\r\n            case \"pie\":\r\n                type = \"pieLayout\";\r\n                break;\r\n            case \"sunburst\":\r\n                type = \"sunburstLayout\";\r\n                break;\r\n            case \"scatter\":\r\n            case \"line\":\r\n            case \"area\":\r\n                type = \"scatterLayout\";\r\n                break;\r\n             case \"bar\":\r\n                type = \"barLayout\";\r\n                break;\r\n            case \"treemap\":\r\n                type = \"treemapLayout\";\r\n                break;\r\n            case \"calendar\":\r\n                type = \"calendarLayout\";\r\n                break;\r\n            case \"pack\":\r\n                type = \"packLayout\";\r\n                break;\r\n            case \"progressBar\":\r\n                type = \"progressBarLayout\";\r\n                break;\r\n            default:\r\n                type = \"layout\";\r\n                break;\r\n        }\r\n        if(type) {\r\n        \tlayoutData.type = type;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * pie图表要组装的数据结构如下 \r\n * {\r\n *     type:\"pie\",\r\n *     data:[\r\n *         {renderer:'1', id:1, value:3},\r\n *         {renderer:'1', id:2, value:1}\r\n *     ]\r\n * }\r\n */\r\nDataParser.createPieData = function(chartData, itemData) {\r\n\tif(chartData.key && chartData.key !== \"\") {\r\n        var key = chartData.key;\r\n        var keyPath = chartData.keyPath;\r\n        var renderer = chartData.itemRenderer;\r\n        if(!renderer) {\r\n            for(var k in itemData.renderers) {\r\n                renderer = k;\r\n            }\r\n        }\r\n        if((keyPath === \"\" && itemData.hasOwnProperty(key)) || \r\n        (keyPath !== \"\" && eval(\"itemData.\" + keyPath) && eval(\"itemData.\" + keyPath)[key])) {\r\n            var keyPath;\r\n            if(chartData.keyPath && chartData !== \"\") {\r\n                keyPath = chartData.keyPath;\r\n            }\r\n            var data = keyPath ? itemData[keyPath][key] : itemData[key];\r\n            var result = [];\r\n            var i = 1;\r\n            //若value是一个对象，则把对象的所有属性打散设置的Pie的itemData里面，\r\n            //若不是，则直接在itemData里动态添加itemData.value = value\r\n            data.forEach(function(value) {\r\n            \tif(value !== null &&　value　!== undefined) {\r\n            \t\tvar hasPorperty = false, item = {};\r\n            \t\tfor(var k in value) {\r\n            \t\t\titem[k] = value[k];\r\n            \t\t\thasPorperty = true;\r\n            \t\t}\r\n            \t\tif(!hasPorperty) {\r\n            \t\t\titem.value = value;\r\n            \t\t}\r\n            \t\titem.id = i++;\r\n            \t\tif(renderer !== undefined) {\r\n            \t\t\titem.renderer = renderer;\r\n            \t\t}\r\n                    result.push(item);\r\n            \t}\r\n            });\r\n            chartData.data = result;\r\n        }\r\n    }\r\n    return chartData;\r\n}\r\n\r\n/**\r\n * 创建图表数据\r\n * @param chartData 配置中的图表原始数据\r\n * @param itemData 配置中的该图表的上一级图表作为子图表项的数据\r\n * @return 返回组装好的图表数据\r\n */\r\nDataParser.createChartData = function(chartData, itemData) {\r\n\tif(!chartData || !itemData) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\tswitch(chartData.type.toLowerCase()) {\r\n\t\tcase \"pie\":\r\n\t\tcase \"area\":\r\n\t\tcase \"line\":\r\n\t\tcase \"bar\":\r\n\t\tcase \"scatter\":\r\n            chartData = DataParser.createPieData(chartData, itemData);\r\n            break;\r\n\t\tdefault:\r\n            break;\r\n\t}\r\n\treturn chartData;\r\n};\r\n\r\nmodule.exports = DataParser;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/dataParser.js\n// module id = 119\n// module chunks = 0","var ElementUtil = {};\r\n\r\nElementUtil.setElementProperties = function(element,properties){\r\n    if(element && properties){\r\n        for (var key in properties) {\r\n            element.attr(key,properties[key]);\r\n        }\r\n    }\r\n};\r\nElementUtil.setElementStyles = function(element,properties){\r\n    if(element && properties){\r\n        for (var key in properties) {\r\n            element.style(key,properties[key]);\r\n        }\r\n    }\r\n};\r\nElementUtil.createText = function(element,properties){\r\n    var text = element.append(\"text\");\r\n    ElementUtil.setElementProperties(text,properties);\r\n    return text;\r\n};\r\n\r\nElementUtil.createRect = function(element,properties){\r\n    var text = element.append(\"rect\");\r\n    ElementUtil.setElementProperties(text,properties);\r\n    return text;\r\n};\r\nElementUtil.createCircle = function(element,properties){\r\n    var text = element.append(\"circle\");\r\n    ElementUtil.setElementProperties(text,properties);\r\n    return text;\r\n};\r\nElementUtil.createPath = function(element,properties){\r\n    var text = element.append(\"path\");\r\n    ElementUtil.setElementProperties(text,properties);\r\n    return text;\r\n};\r\n\r\nmodule.exports = ElementUtil;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/elementUtil.js\n// module id = 120\n// module chunks = 0","// 事件工具类\r\n\r\nvar EventUtil = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 获取自定义事件实例\r\n * 支持EventUtil.createCustomEvent(type, bubble, cancelable, detail)和\r\n * EventUtil.createCustomEvent(type, {bubble:bubble, cancelable:cancelable, detail:detail})参数传入模式\r\n * \r\n */\r\nEventUtil.createCustomEvent = function(type, bubble, cancelable, detail) {\r\n\tvar event;\r\n\tif(ghca_charts.view.util.commonUtil.isIE()) {\r\n        var event = document.createEvent(\"CustomEvent\");\r\n        if(arguments.length > 1 && Object.prototype.toString.call(arguments[1]) === \"[object Object]\") {\r\n        \tvar obj = arguments[1];\r\n            event.initCustomEvent(type, obj.bubble, obj.cancelable, obj.detail);\r\n        } else {\r\n            event.initCustomEvent(type, bubble, cancelable, detail);\r\n        }\r\n\t} else {\r\n\t\tif(arguments.length > 1 && Object.prototype.toString.call(arguments[1]) === \"[object Object]\") {\r\n            event = new CustomEvent(type, arguments[1]);\r\n        } else {\r\n            event = new CustomEvent(type, {bubbles:bubble, cancelable:cancelable, detail:detail});\r\n        }\r\n\t}\r\n\treturn event;\r\n};\r\n\r\n/**\r\n * 获取事件实例\r\n * 支持EventUtil.createEvent(type, bubble, cancelable)和\r\n * EventUtil.createEvent(type, {bubble:bubble, cancelable:cancelable})参数传入模式\r\n * \r\n */\r\nEventUtil.createEvent = function(type, bubble, cancelable) {\r\n    var event;\r\n    if(ghca_charts.view.util.commonUtil.isIE()) {\r\n        var event = document.createEvent(\"Event\");\r\n        if(arguments.length > 1 && Object.prototype.toString.call(arguments[1]) === \"[object Object]\") {\r\n            var obj = arguments[1];\r\n            event.initEvent(type, obj.bubble, obj.cancelable);\r\n        } else {\r\n            event.initEvent(type, bubble, cancelable);\r\n        }\r\n    } else {\r\n        if(arguments.length > 1 && Object.prototype.toString.call(arguments[1]) === \"[object Object]\") {\r\n            event = new Event(type, arguments[1]);\r\n        } else {\r\n            event = new Event(type, {bubbles:bubble, cancelable:cancelable});\r\n        }\r\n    }\r\n    return event;\r\n};\r\n\r\n/**\r\n * 抛出dom事件，要传自定义数据，写法如下：\r\n * var evt = EventUtil.createCustomEvent(\"event type\", true, true, your data);\r\n * EventUtil.dispatchEvent(node, evt);\r\n * function(e) {\r\n *     e.detail : your data,\r\n *     this : node,\r\n * }\r\n */\r\nEventUtil.dispatchEvent = function() {\r\n    var node = arguments[0];\r\n    if(!node){\r\n        return;\r\n    }\r\n    var fn = node.dispatchEvent;\r\n    if(fn && arguments.length > 1) {\r\n        var evt = arguments[1];\r\n        fn.apply(node, [evt]);\r\n    }\r\n};\r\n\r\nmodule.exports = EventUtil;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/eventUtil.js\n// module id = 121\n// module chunks = 0","var FileUtil={};\r\nvar fileID=0;\r\nvar loadMap={};//加载信息\r\nvar loadedMap={};//已加载\r\nvar loadingMap={};//正在加载\r\nvar errorMap={};//错误记录\r\n/**\r\n * 按配置顺序加载文件列表到dom上\r\n */\r\nFileUtil.loadFiles=function(files, callback) {\r\n    if(!files||!files.length){\r\n        callback&&callback();\r\n        return;\r\n    }\r\n    fileID++;\r\n    var loadInfo={\r\n        id:\"loadFile\"+fileID,\r\n        files:files,//加载列表\r\n        loadedNum:0,//已加载数量\r\n        targetNum:files.length,//目标数量\r\n        completeHandler:callback,//完成回调\r\n        isWaiting:false,//是否等待加载\r\n    }\r\n\r\n    loadMap[loadInfo.id]=loadInfo;\r\n    \r\n    loadFile(loadInfo);\r\n};\r\n\r\n/**\r\n * 按配置id替换dom上指定文件\r\n */\r\nFileUtil.replaceFile=function(id,file,callback){\r\n    if(file.indexOf(\".css\") !== -1) {\r\n        replaceCSS(id,file,callback);\r\n    } else if(file.indexOf(\".js\") !== -1) {\r\n        replaceJS(id,file,callback);\r\n    }\r\n}\r\n\r\nfunction replaceCSS(id,file,callback){\r\n    var css = document.createElement('link');\r\n    css.rel = 'stylesheet';\r\n    css.type = 'text/css';\r\n    css.href = file;\r\n    css.id=id;\r\n    var url=css.url;\r\n    css.onload=function(){\r\n        if(callback){\r\n            callback();\r\n        }\r\n        loadedMap[url]=true;\r\n    };\r\n    var target=document.getElementById(id);\r\n    if(target){\r\n        if(target.href===url){//一致\r\n            loadedMap[url]=true;\r\n            if(callback){\r\n                callback();\r\n            }\r\n        }else{\r\n            target.parentNode.replaceChild(css,target);\r\n        }\r\n    }else{\r\n        var head = getHead();\r\n        head.appendChild(css);\r\n    }\r\n}\r\n\r\nfunction replaceJS(id,file,callback){\r\n    var script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.charset = \"utf-8\"\r\n    script.src = file;\r\n    script.id=id;\r\n    script.onload=function(){\r\n        if(callback){\r\n            callback();\r\n        }\r\n        loadedMap[script.src]=true;\r\n    };\r\n    var target=document.getElementById(id);\r\n    if(target){\r\n        if(target.src===script.src){\r\n            loadedMap[script.src]=true;\r\n            if(callback){\r\n                callback();\r\n            }\r\n        }else{\r\n            target.parentNode.replaceChild(script,target);\r\n        }\r\n    }else{\r\n        var head = getHead();\r\n        head.appendChild(script);\r\n    }\r\n}\r\n\r\nfunction loadFile(loadInfo){\r\n    var file=loadInfo.files[loadInfo.loadedNum];\r\n    if(file.indexOf(\".css\") !== -1) {\r\n        loadCss(loadInfo);\r\n    } else if(file.indexOf(\".js\") !== -1) {\r\n        loadJs(loadInfo);\r\n    }\r\n}\r\n\r\nfunction loadCss(loadInfo){\r\n    var css = document.createElement('link');\r\n    css.rel = 'stylesheet';\r\n    css.type = 'text/css';\r\n    css.href=loadInfo.files[loadInfo.loadedNum];\r\n    addFileTag(css,css.href,loadInfo)\r\n}\r\n\r\nfunction loadJs(loadInfo){\r\n    var script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.charset = \"utf-8\"\r\n    script.src = loadInfo.files[loadInfo.loadedNum];\r\n    addFileTag(script,script.src,loadInfo)\r\n\r\n}\r\n\r\nfunction addFileTag(tag,url,loadInfo){\r\n    if(isLoaded(url)){\r\n        loadInfo.isWaiting=false;      \r\n        loadInfo.loadedNum=loadInfo.loadedNum+1;\r\n        completeByLoadInfo(loadInfo);\r\n\r\n    }else if(isLoading(url)){\r\n        loadInfo.isWaiting=true;        \r\n    }else{\r\n        loadInfo.isWaiting=false;  \r\n        addHandles(tag,loadInfo);\r\n        loadingMap[url]=true;\r\n        var head = getHead();\r\n        head.appendChild(tag);\r\n    }\r\n}\r\n\r\nfunction isLoaded(url){\r\n    return loadedMap[url];\r\n}\r\n\r\nfunction isLoading(url){\r\n    return loadingMap[url];\r\n}\r\n\r\nfunction getHead() {\r\n    var head = document.getElementsByTagName('head').item(0);\r\n    if(!head) {\r\n        head = document.createElement('head');\r\n        document.appendChild(head);\r\n    }\r\n    return head;\r\n};\r\n\r\nfunction addHandles(tag, loadInfo) {\r\n    var url;\r\n    if(tag.type===\"text/javascript\"){\r\n        url=tag.src;\r\n    }else if(tag.type===\"text/css\"){\r\n        url=tag.href;\r\n    }\r\n    tag.onload = function() {     \r\n    \tghca_charts.global.isDebug && console.log(\"onload:\",url);\r\n        loadedMap[url]=true;\r\n        delete loadingMap[url];\r\n        loadInfo.loadedNum=loadInfo.loadedNum+1;\r\n        completeByLoadInfo(loadInfo);\r\n        removeWaitingInfo();\r\n    };\r\n\r\n    var errorNum=errorMap[url]?errorMap[url]:0;\r\n    tag.onerror = function() {\r\n        errorNum++;\r\n        errorMap[url]=errorNum;\r\n        \r\n        if(errorNum >= 2) {//超过两次直接丢弃\r\n            delete loadingMap[url];            \r\n            delete  errorMap[url];            \r\n            loadInfo.loadedNum=loadInfo.loadedNum+1;\r\n            completeByLoadInfo(loadInfo);\r\n            removeWaitingInfo();\r\n        } else {//加载错误次数小于2次，则重新尝试加载            \r\n            loadFile(loadInfo);\r\n        }\r\n    };\r\n};\r\n\r\nfunction completeByLoadInfo(loadInfo){\r\n    if(loadInfo.loadedNum===loadInfo.targetNum){//所有加载完成并且无等待加载\r\n        delete loadMap[loadInfo.id];//删除记录\r\n        loadInfo.completeHandler();//执行回调\r\n    }\r\n    if(loadInfo.loadedNum<loadInfo.targetNum){\r\n        loadFile(loadInfo);\r\n    }\r\n}\r\n\r\nfunction removeWaitingInfo(){\r\n   for (var key in loadMap) {\r\n      var loadInfo=loadMap[key];      \r\n      if(loadInfo.isWaiting){//加载等待中的\r\n        loadFile(loadInfo);//重新加载\r\n      }\r\n   }\r\n}\r\n\r\nmodule.exports=FileUtil;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/fileUtil.js\n// module id = 122\n// module chunks = 0","/**\r\n * Contains a collection of mathematical functions with some additional data\r\n * used for WebVOWL.\r\n */\r\n\r\nvar math = {};\r\n\r\nmath.TWO_PI = Math.PI * 2;\r\n\r\n/**\r\n * 获取指定角度，及半径 坐标\r\n * @param radius\r\n * @param angle\r\n * @param point  中点坐标\r\n * @returns {*[]}\r\n */\r\nmath.circumferencePoint = function(radius,angle,point){\r\n\tif(arguments.length<3)point={x:0,y:0};\r\n\treturn [point.x+radius * Math.cos(angle), point.y+radius * Math.sin(angle)];\r\n}\r\n\r\nmath.radialLinkAngle = function(source,target){\r\n\tvar spoint = math.circumferencePoint(source.y,(source.x - 90) / 180 * Math.PI),\r\n\t\tepoint = math.circumferencePoint(target.y,(target.x - 90) / 180 * Math.PI);\r\n\treturn math.linkAngle({x:spoint[0],y:spoint[1]},{x:epoint[0],y:epoint[1]});\r\n}\r\n\r\nmath.radialCenterPoint = function(source,target){\r\n\tvar spoint = math.circumferencePoint(source.y,(source.x - 90) / 180 * Math.PI),\r\n\tepoint = math.circumferencePoint(target.y,(target.x - 90) / 180 * Math.PI);\r\n\treturn math.calculateCenter({x:spoint[0],y:spoint[1]},{x:epoint[0],y:epoint[1]});\r\n}\r\n\r\nmath.radialLinkPath = function(source,target){\r\n\t//以x坐标为角度，y坐标为半径获取坐标\r\n\tvar cxy = {x:source.cx,y:source.cy};\r\n\treturn \"M\" + math.circumferencePoint(source.r,source.angle,cxy)\r\n\t\t+ \"C\" + math.circumferencePoint((source.r + target.r) / 2,source.angle,cxy)\r\n\t\t+ \" \" + math.circumferencePoint((source.r + target.r) / 2,target.angle,cxy)\r\n\t\t+ \" \" + math.circumferencePoint(target.r,target.angle,cxy)\r\n\t// return \"M\" + math.circumferencePoint(source.y,(source.x - 90) / 180 * Math.PI)\r\n\t// \t+ \"C\" + math.circumferencePoint((source.y + target.y) / 2,(source.x - 90) / 180 * Math.PI)\r\n\t// \t+ \" \" + math.circumferencePoint((source.y + target.y) / 2,(target.x - 90) / 180 * Math.PI)\r\n\t// \t+ \" \" + math.circumferencePoint(target.y,(target.x - 90) / 180 * Math.PI)\r\n}\r\n\r\n/**\r\n * 获取折线路径\r\n * @param source 起点{x:x, y:y}\r\n * @param target 终点{x:x, y:y}\r\n * @param isVer  是否是垂直方向\r\n * @param addSize  折线中段两端额外伸出的线段长度\r\n */\r\nmath.polylinePath = function(source,target,isVer,addSize){\r\n\tvar dx = target.x - source.x;\r\n\tvar dy = target.y - source.y;\r\n\tif(dx === 0 || dy === 0) {\r\n\t\treturn \"M\" + [source.x, source.y] + \"L\" + [target.x, target.y];\r\n\t}\r\n\tvar halfX = source.x + dx/2;\r\n\tvar halfY = source.y + dy/2;\r\n\taddSize = isNaN(addSize) ? 0 : addSize;\r\n\tif(isVer) {\r\n\t\taddSize = source.x < target.x ? -addSize : addSize;\r\n\t\treturn \"M\" + [source.x, source.y] + \r\n           \"L\" + [source.x, halfY] + \r\n           \"L\" + [source.x+addSize, halfY] + \r\n           \"L\" + [target.x, halfY] + \r\n           \"L\" + [target.x, target.y];\r\n\t}\r\n\taddSize = source.y < target.y ? -addSize : addSize;\r\n    return \"M\" + [source.x, source.y] + \r\n           \"L\" + [halfX, source.y] + \r\n           \"L\" + [halfX, source.y+addSize] + \r\n           \"L\" + [halfX, target.y] + \r\n           \"L\" + [target.x, target.y];\r\n}\r\n\r\nmath.besselLinkPath = function(source,target,x){\r\n\tvar p0 = source,\r\n\t\tp3 = target,m;\r\n\tvar path = d3.path();\r\n\tpath.moveTo(p0.x,p0.y);\r\n\tif(x){\r\n\t\tm = (p0.x + p3.x) / 2;\r\n\t\tpath.bezierCurveTo(Math.round(m),Math.round(p0.y),Math.round(m),Math.round(p3.y),Math.round(p3.x),Math.round(p3.y));\r\n\t}else{\r\n\t\tm = (p0.y + p3.y) / 2;\r\n\t\tpath.bezierCurveTo(Math.round(p0.x),Math.round(m),Math.round(p3.x),Math.round(m),Math.round(p3.x),Math.round(p3.y));\r\n\t}\r\n\treturn path.toString();\r\n}\r\n\r\nmath.quadraticCurveLinkPath = function(source,target,offset,num,cx,cy){\r\n\tvar controlX, controlY;\r\n\tif(cx !== undefined && cy !== undefined) {\r\n\t\tcontrolX = cx;\r\n        controlY = cy;\r\n\t} else {\r\n\t\tvar array = math.parallelDeviationPoint(source,target,offset,num);\r\n        controlX = array[1].x;\r\n\t\tcontrolY = array[1].y;\r\n\t}\r\n\tvar path  = d3.path();\r\n\tpath.moveTo(Math.round(source.x),Math.round(source.y));\r\n\tpath.quadraticCurveTo(Math.round(controlX),Math.round(controlY),Math.round(target.x),Math.round(target.y));\r\n\treturn path.toString();\r\n};\r\n\r\nmath.quadraticCurveLinkPathWithControlPoint = function(source,target,cx,cy){\r\n    // var array = math.parallelDeviationPoint(source,target,offset,num);\r\n    var path  = d3.path();\r\n    path.moveTo(source.x,source.y);\r\n    path.quadraticCurveTo(cx,cy,target.x,target.y);\r\n    return path.toString();\r\n};\r\n\r\nmath.baseLinkPath = function(source,target){\r\n\tvar path  = d3.path();\r\n\tpath.moveTo(source.x,source.y);\r\n\tpath.lineTo(target.x,target.y);\r\n\treturn path.toString();\r\n};\r\n/**\r\n * Calculates the normal vector of the path between the two nodes.\r\n * @param source the first node\r\n * @param target the second node\r\n * @param length the length of the calculated normal vector\r\n * @returns {{x: number, y: number}}\r\n */\r\nmath.calculateNormalVector = function (source, target, length) {\r\n\tvar dx = target.x - source.x,\r\n\t\tdy = target.y - source.y;\r\n\r\n\tvar nx = -dy,\r\n\t\tny = dx;\r\n\r\n\tvar vlength = Math.sqrt(nx * nx + ny * ny);\r\n\r\n\tvar ratio = vlength !== 0 ? length / vlength : 0;\r\n\r\n\treturn {\"x\": nx * ratio, \"y\": ny * ratio};\r\n};\r\n\r\n/**\r\n * @param angle\r\n * @returns {number} the radian of the angle\r\n */\r\nfunction calculateRadian(angle) {\r\n\tangle = angle % 360;\r\n\tif (angle < 0) {\r\n\t\tangle = angle + 360;\r\n\t}\r\n\treturn (Math.PI * angle) / 180;\r\n}\r\n\r\n/**\r\n * @param radian\r\n * @returns {number} the angle of the radian\r\n */\r\nfunction calculateAngle(radian) {\r\n\treturn radian * (180 / Math.PI);\r\n}\r\n\r\n/**\r\n * Calculates the point where the link between the source and target node\r\n * intersects the border of the target node.\r\n * @param source the source node\r\n * @param target the target node\r\n * @param additionalDistance additional distance the\r\n * @returns {{x: number, y: number}}\r\n */\r\nmath.calculateIntersection = function (source, target, additionalDistance) {\r\n\tvar dx = target.x - source.x,\r\n\t\tdy = target.y - source.y,\r\n\t\tlength = Math.sqrt(dx * dx + dy * dy);\r\n\r\n\tconsole.info(\"length\"+length);\r\n\r\n\tif (length === 0) {\r\n\t\treturn {x: source.x, y: source.y};\r\n\t}\r\n\r\n\t// var innerDistance = target.distanceToBorder(dx, dy);\r\n\tinnerDistance = 188;\r\n\r\n\tvar ratio =2,//= (length - (innerDistance + additionalDistance)) / length,\r\n\t\tx = dx * ratio + source.x,\r\n\t\ty = dy * ratio + source.y;\r\n\r\n\treturn {x: x, y: y};\r\n};\r\n\r\n/**\r\n * Calculates the position between the two points.\r\n * @param firstPoint\r\n * @param secondPoint\r\n * @returns {{x: number, y: number}}\r\n */\r\nmath.calculateCenter = function (firstPoint, secondPoint) {\r\n\treturn {\r\n\t\tx: (firstPoint.x + secondPoint.x) / 2,\r\n\t\ty: (firstPoint.y + secondPoint.y) / 2\r\n\t};\r\n};\r\n/**\r\n * 获取两点连线的角度值\r\n * @param _source\r\n * @param _target\r\n * @returns {number}\r\n */\r\nmath.linkAngle = function(_source,_target){\r\n\tvar source = _target.y > _source.y?_target: _source;\r\n\tvar target = _target.y > _source.y?_source: _target;\r\n\t//计算直角三角形长度\r\n\tvar xylength = Math.sqrt(Math.pow(source.x-target.x,2)+Math.pow(source.y-target.y,2));\r\n\t//获取直角三角形x轴长度\r\n\tvar xlength  = source.x>target.x?source.x - target.x:target.x-source.x;\r\n\t//获取角度\r\n\tvar a = xylength === 0 ? 0 : Math.asin(xlength/xylength)/Math.PI*180;\r\n\tvar angle = 0;\r\n\tvar areaAngle = 90;\r\n\tsource.x>target.x? (angle = areaAngle-a):(angle=areaAngle+a);\r\n\t//计算位置时选择y值大的当做起始节点，so\r\n\tif(_source.x>_target.x && _source.y<_target.y)angle+=180;\r\n\tif(_source.x<_target.x && _source.y>_target.y)angle-=180;\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * 树形图的贝塞尔曲线\r\n * @param d\r\n * @param i\r\n * @returns {string}\r\n */\r\nmath.treeBessel = function diagonal(d, i,hlayout) {\r\n\tvar p0 = d,\r\n\t\tp3 = i,m,p;\r\n\tvar path = d3.path();\r\n\tpath.moveTo(p0.x,p0.y);\r\n\tif(hlayout){\r\n\t\tm = (p0.x + p3.x) / 2;\r\n\t\tpath.bezierCurveTo(m,p0.y,m,p3.y,p3.x,p3.y);\r\n\t}else{\r\n\t\tm = (p0.y + p3.y) / 2;\r\n\t\tpath.bezierCurveTo(p0.x,m,p3.x,m,p3.x,p3.y);\r\n\t}\r\n\treturn path.toString();\r\n}\r\n/**\r\n * 折线坐标\r\n * @param source\r\n * @param target\r\n * @param direction折线方向\r\n * @param offset\r\n * @param index\r\n * @returns {*[]}\r\n */\r\nmath.foldLinkPoint = function(source,target,direction,offset,index){\r\n\tif (source.x==target.x||source.y==target.y) return [source, target];\r\n\tvar Constant = ghca_charts.view.util.constant;\r\n\tvar points = [];\r\n\tvar level = index%2==0?Math.floor(index/2):Math.ceil(index/2);\r\n\tvar x, y,\r\n\t\tgap=index%2==0?level*offset:-level*offset;\r\n\treturn Constant.HOR_DRAG_TYPE == direction ? (x = target.x + gap, y = source.y - gap, points.push({\r\n\t\tx: source.x,\r\n\t\ty: y\r\n\t}), points.push({\r\n\t\tx: x,\r\n\t\ty: y\r\n\t}), points.push({\r\n\t\tx: x,\r\n\t\ty: target.y\r\n\t})) : (x = source.x + gap, y = target.y - gap, points.push({\r\n\t\tx: x,\r\n\t\ty: source.y\r\n\t}), points.push({\r\n\t\tx: x,\r\n\t\ty: y\r\n\t}), points.push({\r\n\t\tx: target.x,\r\n\t\ty: y\r\n\t})),points;\r\n}\r\n/**\r\n * @param source 源{x,t}\r\n * @param target  目标{x,t}\r\n * @param offset {偏移量} 默认5， 5的倍数\r\n * @param index  偏移计数\r\n * @returns {Array}\r\n */\r\nmath.parallelDeviationPoint = function(source,target,offset,index){\r\n\t//算出连线角度\r\n\tvar angle = math.linkAngle(source,target);\r\n\t//算出层级\r\n\tvar level = index%2==0?Math.floor(index/2):Math.ceil(index/2);\r\n\t//获取以连线角度为起始角度的两边直角的度数\r\n\tvar angle = index%2==0?angle+270:angle+90;\r\n\t//获得半径\r\n\tvar r = level*offset;\r\n\t//获得偏移的起始结束坐标\r\n\tvar sary = math.circumferencePoint(r,angle *   Math.PI   /180,source);\r\n\tvar eary = math.circumferencePoint(r,angle *   Math.PI   /180,target);\r\n\treturn [{\"x\":sary[0],\"y\":sary[1]},{\"x\":(sary[0]+eary[0])/2,\"y\":(sary[1]+eary[1])/2},{\"x\":eary[0],\"y\":eary[1]}];\r\n}\r\n\r\n/**\r\n * 求两条线段交点坐标，若相交返回[x,y],若不相交则返回null\r\n * @param x1,y1,x2,y2 一条线段的两个端点坐标\r\n * @param x3,y3,x4,y4 另外一条线段的两个端点坐标\r\n */\r\nmath.getCrossPointInTwoSegments = function(x1,y1,x2,y2,x3,y3,x4,y4) {\r\n    if(isRectCross(x1,y1,x2,y2,x3,y3,x4,y4)) {\r\n        if (isLineSegmentCross(x1,y1,x2,y2,x3,y3,x4,y4)) {\r\n            //求交点\r\n            var x,y,tmpLeft,tmpRight;\r\n            tmpLeft = (x4 - x3) * (y1 - y2) - (x2 - x1) * (y3 - y4);\r\n            tmpRight = (y1 - y3) * (x2 - x1) * (x4 - x3) + x3 * (y4 - y3) * (x2 - x1) - x1 * (y2 - y1) * (x4 - x3);\r\n\r\n            x = tmpRight/tmpLeft;\r\n\r\n            tmpLeft = (x1 - x2) * (y4 - y3) - (y2 - y1) * (x3 - x4);\r\n            tmpRight = y2 * (x1 - x2) * (y4 - y3) + (x4- x2) * (y4 - y3) * (y1 - y2) - y4 * (x3 - x4) * (y2 - y1); \r\n            y = tmpRight/tmpLeft;\r\n            return [x,y];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * 求矩形与一条线段从起点到终点的第一个交点坐标，若相交返回[x,y],若不相交则返回null\r\n * @param rx,ry,w,h 矩形数据\r\n * @param px1,py1,px2,py2 另外一条线段的两个端点坐标\r\n */\r\nmath.getCrossPointInRectAndSegment = function(rx,ry,w,h,px1,py1,px2,py2) {\r\n\tvar cp, \r\n\t    rx1 = rx, ry1 = ry, \r\n\t    rx2 = rx +　w, ry2 = ry1, \r\n\t    rx3 = rx2, ry3 = ry + h, \r\n\t    rx4 = rx1, ry4 = ry3,\r\n\t    //top\r\n\t    cp = math.getCrossPointInTwoSegments(rx1, ry1, rx2, ry2, px1, py1, px2, py2);\r\n\t    if(cp) {\r\n\t    \treturn cp;\r\n\t    }\r\n\t    //right\r\n        cp = math.getCrossPointInTwoSegments(rx2, ry2, rx3, ry3, px1, py1, px2, py2);\r\n        if(cp) {\r\n            return cp;\r\n        }\r\n        //bottom\r\n        cp = math.getCrossPointInTwoSegments(rx3, ry3, rx4, ry4, px1, py1, px2, py2);\r\n        if(cp) {\r\n            return cp;\r\n        }\r\n        //left\r\n        cp = math.getCrossPointInTwoSegments(rx4, ry4, rx1, ry1, px1, py1, px2, py2);\r\n        if(cp) {\r\n            return cp;\r\n        }\r\n        return null;\r\n};\r\n\r\n//排斥实验\r\nvar isRectCross = function(x1,y1,x2,y2,x3,y3,x4,y4) {\r\n    return Math.min(x1,x2) <= Math.max(x3,x4) &&\r\n           Math.min(x3,x4) <= Math.max(x1,x2) &&\r\n           Math.min(y1,y2) <= Math.max(y3,y4) &&\r\n           Math.min(y3,y4) <= Math.max(y1,y2);\r\n};\r\n\r\n//跨立判断\r\nvar isLineSegmentCross = function(x1,y1,x2,y2,x3,y3,x4,y4) {\r\n    var line1,line2;\r\n    line1 = x1 * (y3 - y2) + x2 * (y1 - y3) + x3 * (y2 - y1);\r\n    line2 = x1 * (y4 - y2) + x2 * (y1 - y4) + x4 * (y2 - y1);\r\n    if (((line1 ^ line2) >= 0) && !(line1 == 0 && line2 == 0))\r\n        return false;\r\n\r\n    line1 = x3 * (y1 - y4) + x4 * (y3 - y1) + x1 * (y4 - y3);\r\n    line2 = x3 * (y2 - y4) + x4 * (y3 - y2) + x2 * (y4 - y3);\r\n    if (((line1 ^ line2) >= 0) && !(line1 == 0 && line2 == 0))\r\n        return false;\r\n    return true;\r\n};\r\n\r\n/**\r\n * 判断某个点是否在矩形区域内\r\n * @param x 点x坐标\r\n * @param y 点y坐标\r\n * @param rect 矩形\r\n */\r\nmath.isPointInsideBBox = function(x, y, rect) {\r\n\treturn x >= rect.x && x <= (rect.x + rect.width) && \r\n\t       y >= rect.y && y <= (rect.y + rect.height);\r\n}\r\n\r\n/**\r\n * 判断两个矩形是否发生碰撞\r\n * @param rect1 矩形1 rect:{x, y, width, height}\r\n * @param rect2 矩形2\r\n */\r\nmath.isCollisionInTwoRects = function(rect1, rect2) {\r\n    return  rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.height + rect1.y > rect2.y;\r\n};\r\n\r\n/**\r\n * SVG Path rounding function. Takes an input path string and outputs a path\r\n * string where all line-line corners have been rounded. Only supports absolute\r\n * commands at the moment.\r\n * \r\n * @param pathString The SVG input path\r\n * @param radius The amount to round the corners, either a value in the SVG \r\n *               coordinate space, or, if useFractionalRadius is true, a value\r\n *               from 0 to 1, else 0 to 100.\r\n * @param useFractionalRadius If true, the curve radius is expressed as a\r\n *               fraction of the distance between the point being curved and\r\n *               the previous and next points.\r\n * @returns A new SVG path string with the rounding\r\n */\r\nmath.roundPathCorners = function(pathString, radius, useFractionalRadius) {\r\n  function moveTowardsLength(movingPoint, targetPoint, amount) {\r\n    var width = (targetPoint.x - movingPoint.x);\r\n    var height = (targetPoint.y - movingPoint.y);\r\n    \r\n    var distance = Math.sqrt(width*width + height*height);\r\n    \r\n    return moveTowardsFractional(movingPoint, targetPoint, Math.min(1, amount / distance));\r\n  }\r\n  function moveTowardsFractional(movingPoint, targetPoint, fraction) {\r\n    return {\r\n      x: movingPoint.x + (targetPoint.x - movingPoint.x)*fraction,\r\n      y: movingPoint.y + (targetPoint.y - movingPoint.y)*fraction\r\n    };\r\n  }\r\n  \r\n  // Adjusts the ending position of a command\r\n  function adjustCommand(cmd, newPoint) {\r\n    if (cmd.length > 2) {\r\n      cmd[cmd.length - 2] = newPoint.x;\r\n      cmd[cmd.length - 1] = newPoint.y;\r\n    }\r\n  }\r\n  \r\n  // Gives an {x, y} object for a command's ending position\r\n  function pointForCommand(cmd) {\r\n    return {\r\n      x: parseFloat(cmd[cmd.length - 2]),\r\n      y: parseFloat(cmd[cmd.length - 1])\r\n    };\r\n  }\r\n  \r\n  // Split apart the path, handing concatonated letters and numbers\r\n  var pathParts = pathString\r\n    .split(/[,\\s]/)\r\n    .reduce(function(parts, part){\r\n      var match = part.match(\"([a-zA-Z])(.+)\");\r\n      if (match) {\r\n        parts.push(match[1]);\r\n        parts.push(match[2]);\r\n      } else {\r\n        parts.push(part);\r\n      }\r\n      \r\n      return parts;\r\n    }, []);\r\n  \r\n  // Group the commands with their arguments for easier handling\r\n  var commands = pathParts.reduce(function(commands, part) {\r\n    if (parseFloat(part) == part && commands.length) {\r\n      commands[commands.length - 1].push(part);\r\n    } else {\r\n      commands.push([part]);\r\n    }\r\n    \r\n    return commands;\r\n  }, []);\r\n  \r\n  // The resulting commands, also grouped\r\n  var resultCommands = [];\r\n  \r\n  if (commands.length > 1) {\r\n    var startPoint = pointForCommand(commands[0]);\r\n    \r\n    // Handle the close path case with a \"virtual\" closing line\r\n    var virtualCloseLine = null;\r\n    if (commands[commands.length - 1][0] == \"Z\" && commands[0].length > 2) {\r\n      virtualCloseLine = [\"L\", startPoint.x, startPoint.y];\r\n      commands[commands.length - 1] = virtualCloseLine;\r\n    }\r\n    \r\n    // We always use the first command (but it may be mutated)\r\n    resultCommands.push(commands[0]);\r\n    \r\n    var prevCmd, curCmd, nextCmd, prevPoint, curPoint, nextPoint, curveStart, \r\n        curveEnd, startControl, endControl, curveCmd;\r\n    for (var cmdIndex = 1, len = commands.length; cmdIndex < len; cmdIndex++) {\r\n      prevCmd = resultCommands[resultCommands.length - 1];\r\n      curCmd = commands[cmdIndex];\r\n      \r\n      // Handle closing case\r\n      nextCmd = (curCmd == virtualCloseLine)\r\n        ? commands[1]\r\n        : commands[cmdIndex + 1];\r\n      \r\n      // Nasty logic to decide if this path is a candidite.\r\n      if (nextCmd && prevCmd && (prevCmd.length > 2) && curCmd[0] === \"L\" && nextCmd.length > 2 && nextCmd[0] === \"L\") {\r\n        // Calc the points we're dealing with\r\n        prevPoint = pointForCommand(prevCmd);\r\n        curPoint = pointForCommand(curCmd);\r\n        nextPoint = pointForCommand(nextCmd);\r\n        \r\n        // The start and end of the cuve are just our point moved towards the previous and next points, respectivly\r\n        if (useFractionalRadius) {\r\n          curveStart = moveTowardsFractional(curPoint, prevCmd.origPoint || prevPoint, radius);\r\n          curveEnd = moveTowardsFractional(curPoint, nextCmd.origPoint || nextPoint, radius);\r\n        } else {\r\n          curveStart = moveTowardsLength(curPoint, prevPoint, radius);\r\n          curveEnd = moveTowardsLength(curPoint, nextPoint, radius);\r\n        }\r\n        \r\n        // Adjust the current command and add it\r\n        adjustCommand(curCmd, curveStart);\r\n        curCmd.origPoint = curPoint;\r\n        resultCommands.push(curCmd);\r\n        \r\n        // The curve control points are halfway between the start/end of the curve and\r\n        // the original point\r\n        startControl = moveTowardsFractional(curveStart, curPoint, .5);\r\n        endControl = moveTowardsFractional(curPoint, curveEnd, .5);\r\n  \r\n        // Create the curve \r\n        curveCmd = [\"C\", startControl.x, startControl.y, endControl.x, endControl.y, curveEnd.x, curveEnd.y];\r\n        // Save the original point for fractional calculations\r\n        curveCmd.origPoint = curPoint;\r\n        resultCommands.push(curveCmd);\r\n      } else {\r\n        // Pass through commands that don't qualify\r\n        resultCommands.push(curCmd);\r\n      }\r\n    }\r\n    \r\n    // Fix up the starting point and restore the close path if the path was orignally closed\r\n    if (virtualCloseLine) {\r\n      var newStartPoint = pointForCommand(resultCommands[resultCommands.length-1]);\r\n      resultCommands.push([\"Z\"]);\r\n      adjustCommand(resultCommands[0], newStartPoint);\r\n    }\r\n  } else {\r\n    resultCommands = commands;\r\n  }\r\n  \r\n  return resultCommands.reduce(function(str, c){ return str + c.join(\" \") + \" \"; }, \"\");\r\n};\r\n\r\n/**\r\n * 根据提供的一些点，获取这些点中的顶点带圆角的凸包路径\r\n * @param points 点数组[[x,y],...,[x,y]]\r\n * @param radius 凸包路径圆角半径\r\n * @param useFractionalRadius 是否使用fractional radius,若使用则radius值范围[0,1],否则为[0,100]。\r\n *                            参考math.roundPathCorners注释\r\n * @return 凸包路径字符串\r\n */\r\nmath.pointsToPolygonHullRoundPath = function(points, radius, useFractionalRadius) {\r\n\tif(points.length < 2) {\r\n\t\treturn \"\";\r\n\t} else if(points.length === 2) {\r\n\t\treturn \"M\"+ points[0] + \" L\" + points[1];\r\n\t} else {\r\n        //获取凸包顶点数组\r\n\t\tpoints = d3.polygonHull(points);\r\n\t\tvar line = \" L\", space = \" \";\r\n\t\tvar pathString = \"M\" + points[0][0] + space + points[0][1];\r\n\t\tfor(var p, i = 1, len = points.length; i < len; i++) {\r\n            p = points[i];\r\n\t\t \tpathString += line + p[0] + space + p[1];\r\n\t\t}\r\n\t\tpathString += \" Z\";\r\n\t\t//获取顶点带圆角的凸包路径\r\n\t\tvar path = math.roundPathCorners(pathString, radius, useFractionalRadius);\r\n\t\treturn path;\r\n\t}\r\n};\r\n/**\r\n * 根据二次贝塞尔曲线信息获取指定时间刻度的坐标点\r\n * @param {*} cp 控制点\r\n * @param {*} sp 起点\r\n * @param {*} ep 结束点\r\n * @param {*} t 时间[0-1]\r\n */\r\nmath.calcBezCurvePointWithTime=function(cp,sp,ep,t){\r\n\tvar tp={x:0,y:0};\r\n\ttp.x=(1-t)*(1-t)*sp.x+2*t*(1-t)*cp.x+t*t*ep.x;\r\n\ttp.y=(1-t)*(1-t)*sp.y+2*t*(1-t)*cp.y+t*t*ep.y;\r\n\treturn tp;\r\n}\r\n\r\n\r\n\r\n/**\r\n * 获取二次贝塞尔曲线和一条线段的交点\r\n * @param p1 二次贝塞尔曲线起点，格式为{x:x, y:y}\r\n * @param p2 二次贝塞尔曲线控制点\r\n * @param p3 二次贝塞尔曲线终点\r\n * @param a1 线段起点\r\n * @param a2 线段终点\r\n * @return 返回交点，格式为[[x,y],...,[x,y]]，若没有交点，则返回空数组。\r\n */\r\nmath.calcQBezCurveAndLineIntersects = function(p1, p2, p3, a1, a2) {\r\n\t// linear interpolation utility\r\n    var lerp = function(a,b,x) { \r\n        return(a+x*(b-a)); \r\n    };\r\n    \r\n\tvar intersections = [];\r\n\r\n\t// inverse line normal\r\n\tvar normal = {\r\n\t\tx : a1.y - a2.y,\r\n\t\ty : a2.x - a1.x\r\n\t};\r\n\r\n\t// Q-coefficients\r\n\tvar c2 = {\r\n\t\tx : p1.x + p2.x * -2 + p3.x,\r\n\t\ty : p1.y + p2.y * -2 + p3.y\r\n\t};\r\n\r\n\tvar c1 = {\r\n\t\tx : p1.x * -2 + p2.x * 2,\r\n\t\ty : p1.y * -2 + p2.y * 2\r\n\t};\r\n\r\n\tvar c0 = {\r\n\t\tx : p1.x,\r\n\t\ty : p1.y\r\n\t};\r\n\r\n\t// Transform to line\r\n\tvar coefficient = a1.x * a2.y - a2.x * a1.y;\r\n\tvar a = normal.x * c2.x + normal.y * c2.y;\r\n\tvar b = (normal.x * c1.x + normal.y * c1.y) / a;\r\n\tvar c = (normal.x * c0.x + normal.y * c0.y + coefficient) / a;\r\n\r\n\t// solve the roots\r\n\tvar roots = [];\r\n\td = b * b - 4 * c;\r\n\tif (d > 0) {\r\n\t\tvar e = Math.sqrt(d);\r\n\t\troots.push((-b + Math.sqrt(d)) / 2);\r\n\t\troots.push((-b - Math.sqrt(d)) / 2);\r\n\t} else if (d == 0) {\r\n\t\troots.push(-b / 2);\r\n\t}\r\n\r\n\t// calc the solution points\r\n\tfor (var i = 0, len = roots.length; i < len; i++) {\r\n\t\tvar minX = Math.min(a1.x, a2.x);\r\n\t\tvar minY = Math.min(a1.y, a2.y);\r\n\t\tvar maxX = Math.max(a1.x, a2.x);\r\n\t\tvar maxY = Math.max(a1.y, a2.y);\r\n\t\tvar t = roots[i];\r\n\t\tif (t >= 0 && t <= 1) {\r\n\t\t\t// possible point -- pending bounds check\r\n\t\t\tvar point = [\r\n\t\t\t\tlerp(lerp(p1.x, p2.x, t), lerp(p2.x, p3.x, t), t),\r\n\t\t\t\tlerp(lerp(p1.y, p2.y, t), lerp(p2.y, p3.y, t), t)\r\n\t\t\t]\r\n\t\t\tvar x = point[0];\r\n\t\t\tvar y = point[1];\r\n\t\t\t// bounds checks\r\n\t\t\tif (a1.x == a2.x && y >= minY && y <= maxY) {\r\n\t\t\t\t// vertical line\r\n\t\t\t\tintersections.push(point);\r\n\t\t\t} else if (a1.y == a2.y && x >= minX && x <= maxX) {\r\n\t\t\t\t// horizontal line\r\n\t\t\t\tintersections.push(point);\r\n\t\t\t} else if (x >= minX && y >= minY && x <= maxX && y <= maxY) {\r\n\t\t\t\t// line passed bounds check\r\n\t\t\t\tintersections.push(point);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn intersections;\r\n};\r\n\r\n/**\r\n * 获取二次贝塞尔曲线和矩形的交点\r\n * @param p1 二次贝塞尔曲线起点，格式为{x:x, y:y}\r\n * @param p2 二次贝塞尔曲线控制点\r\n * @param p3 二次贝塞尔曲线终点\r\n * @param rect 矩形信息{x:x, y:y, width:width, height:height}\r\n * @return 返回交点，格式为[[x,y],...,[x,y]]，若没有交点，则返回空数组。\r\n */\r\nmath.calcQBezCurveAndRectIntersects = function(p1, p2, p3, rect) {\r\n\tvar add = function(points, result) {\r\n\t\tfor(var i = 0, len = points.length; i < len; i++) {\r\n\t\t\tresult.push(points[i]);\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar a1 = {x:rect.x, y:rect.y}, \r\n\t    a2 = {x:rect.x + rect.width, y:rect.y},\r\n\t    a3 = {x:rect.x + rect.width, y:rect.y + rect.height},\r\n\t    a4 = {x:rect.x, y:rect.y + rect.height};\r\n\tvar top = math.calcQBezCurveAndLineIntersects(p1, p2, p3, a1, a2);\r\n    var right = math.calcQBezCurveAndLineIntersects(p1, p2, p3, a2, a3);\r\n    var bottom = math.calcQBezCurveAndLineIntersects(p1, p2, p3, a3, a4);\r\n    var left = math.calcQBezCurveAndLineIntersects(p1, p2, p3, a4, a1);\r\n    \r\n    add(right, top);\r\n    add(bottom, top);\r\n    add(left, top);\r\n    \r\n    return top;\r\n};\r\n\r\nmodule.exports = math;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/math.js\n// module id = 123\n// module chunks = 0","// 鼠标工具类\r\n\r\nvar MouseUtil = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 获取当前鼠标相对某个元素的相对位置坐标数组,用d3.mouse()定位，chrome60以下getScreenCTM()方法返回矩阵不带额外的缩放系数，导致定位出错\r\n * \r\n * @param node 目标元素对象\r\n * @return 返回鼠标相对目标元素的相对位置坐标数组\r\n */\r\nMouseUtil.mouse = function(node) {\r\n    var event = sourceEvent();\r\n    if (event.changedTouches) \r\n        event = event.changedTouches[0];\r\n    return point(node, event);\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// private Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nvar sourceEvent = function() {\r\n\tvar current = d3.event, source;\r\n\twhile (source = current.sourceEvent)\r\n\t\tcurrent = source;\r\n\treturn current;\r\n};\r\n\r\nvar point = function(node, event) {\r\n\tvar svg = node.ownerSVGElement || node;\r\n\r\n\tif (svg.createSVGPoint) {\r\n\t\tvar point = svg.createSVGPoint();\r\n\t\tpoint.x = event.clientX; \r\n\t\tpoint.y = event.clientY;\r\n\t\t/*CTM矩阵是局部坐标系(即指定对象内部坐标系，只有svg支持改方法)到屏幕坐标系的转换系数矩阵\r\n\t\t局部坐标矩阵*CTM = 屏幕坐标矩阵\r\n\t\t屏幕坐标矩阵*CTM逆矩阵(即screenCTM.inverse()) = 局部坐标矩阵\r\n\t\t*/\r\n\t\tvar screenCTM = node.getScreenCTM();\r\n\t\t//根据屏幕坐标计算局部坐标\r\n\t\tpoint = point.matrixTransform(screenCTM.inverse());\r\n\t\treturn [point.x, point.y];\r\n\t}\r\n\r\n\tvar rect = node.getBoundingClientRect();\r\n\treturn [event.clientX - rect.left - node.clientLeft,\r\n\t\t\tevent.clientY - rect.top - node.clientTop];\r\n};\r\n\r\nmodule.exports = MouseUtil;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/mouseUtil.js\n// module id = 124\n// module chunks = 0","//对象工具类\r\n\r\nvar ObjectUtil = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\nObjectUtil.contains = function(array, object) {\r\n    var i = array.length;\r\n    while (i--) {\r\n        if (array[i] === object) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * 深度克隆对象\r\n * @param obj 要克隆的对象\r\n * @return 返回克隆对象\r\n */\r\nObjectUtil.cloneObj = function(obj) {\r\n    var str, newobj = obj.constructor === Array ? [] : {};\r\n    if(typeof obj !== 'object') {\r\n        return obj;\r\n    } else if(window.JSON) {\r\n        str = JSON.stringify(obj), //序列化对象\r\n        newobj = JSON.parse(str); //还原\r\n    } else {\r\n        for(var i in obj) {\r\n            newobj[i] = typeof obj[i] === 'object' ? cloneObj(obj[i]) : obj[i]; \r\n        }\r\n    }\r\n    return newobj;\r\n};\r\n\r\nObjectUtil.isObject = function(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Object]\";\r\n};\r\n\r\nObjectUtil.isString = function(obj) {\r\n\treturn Object.prototype.toString.call(obj) === \"[object String]\";\r\n};\r\n\r\nObjectUtil.isArray = function(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n};\r\n\r\nObjectUtil.isNumber = function(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Number]\";\r\n};\r\n\r\nObjectUtil.isBoolean = function(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Boolean]\";\r\n};\r\n\r\nObjectUtil.isFunction = function(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Function]\";\r\n};\r\n\r\nObjectUtil.isUndefined = function(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Undefined]\";\r\n};\r\n\r\nObjectUtil.isNull = function(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Null]\";\r\n};\r\n\r\n/** \r\n * 判断是否为dom实例。\r\n * 首先要对HTMLElement进行类型检查，因为即使在支持HTMLElement 的浏览器中，\r\n * 类型却是有差别的，在Chrome,Opera中HTMLElement的类型为function，此时就不能用它来判断了\r\n */\r\nObjectUtil.isDom = (typeof HTMLElement === 'object') ?\r\n    function(obj){\r\n        return obj instanceof HTMLElement;\r\n    } :\r\n    function(obj){\r\n        return obj && typeof obj === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string';\r\n    };\r\n\r\nObjectUtil.isDomByTagName = function(obj, tagName) {\r\n    return ObjectUtil.isDom(obj) && tagName && obj.tagName && \r\n        obj.tagName.toLowerCase() === tagName.toLowerCase();\r\n};\r\n\r\nmodule.exports = ObjectUtil;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/objectUtil.js\n// module id = 125\n// module chunks = 0","var RegexUtil = {};\r\n\r\nRegexUtil.dataRegex         = /\\{([\\w.]+)\\}/g;\r\nRegexUtil.jsRegex           = /{#(((?!#}).)*)#}/ig;     //匹配配置中可以运行的js脚本内容,即{#...#}中...部分\r\nRegexUtil.percentRegex      = /^([-+]?[0-9.]+)%$/;      //匹配百分比字符串\r\nRegexUtil.pxRegex           = /^([0-9.]+)px$/;          //匹配px字符串\r\nRegexUtil.whiteSpaceRegex   = /^[ ]*$/;                 //匹配多个空格或者空字符串\r\nRegexUtil.arrayFormatRegex  = /^([^.]+)\\[([^.]+)\\]$/;   //匹配数组表示字符串\r\nRegexUtil.translateRegex    = /translate\\((.*?)\\)/;     //匹配translate样式表示字符串\r\nRegexUtil.scaleRegex        = /scale\\((.*?)\\)/;         //匹配scale样式表示字符串\r\nRegexUtil.rotateRegex       = /rotate\\((.*?)\\)/;        //匹配rotate样式表示字符串\r\n\r\nRegexUtil.replace = function(regex,str,data){\r\n   /* var replace = function()  {\r\n        return function(match) {\r\n            var placeholder = arguments[1];\r\n            var result = placeholder.toString().split(\".\");\r\n            var count = !result ? 0 : result.length;\r\n            var data = d;\r\n            for(var i=0;i<count;i++){\r\n                if (data.hasOwnProperty(result[i])) {\r\n                    data = data[result[i]];\r\n                } else {\r\n                    data = arguments[0];\r\n                }\r\n            }\r\n            return data;\r\n        };\r\n    };*/\r\n    if(!str || !ghca_charts.view.util.objectUtil.isString(str))return str;\r\n    var matchAry = str.match(regex);\r\n    var object = null;\r\n    if(matchAry == null) {\r\n    \treturn str;\r\n//    \t//识别是否有js表达式字符串\r\n//        return str.replace(RegexUtil.jsRegex, function() {\r\n//            return arguments.length > 1 ? eval(arguments[1]) : \"\";\r\n//        });\r\n    }\r\n    matchAry.forEach(function(d){\r\n        var array = new RegExp(regex).exec(d);\r\n        var placeholder = array[1];\r\n        var da= data;\r\n        if(placeholder != \"this\"){\r\n            var result = placeholder.toString().split(\".\");\r\n            var count = !result ? 0 : result.length;\r\n            for(var i=0;i<count;i++){\r\n                if (da.hasOwnProperty(result[i])) {\r\n                    da = da[result[i]];\r\n                } else {\r\n                    da = array[0];\r\n                }\r\n            }\r\n        }\r\n        if(da instanceof Object)\r\n            object = da;\r\n        str = str.replace(array[0], da)\r\n    });\r\n    if(object)return object;\r\n    return str;\r\n    // return str.replace(regex, replace(d));\r\n};\r\n\r\nRegexUtil.translate = function(str) {\r\n\ttry {\r\n\t\tvar reg = RegexUtil.translateRegex;\r\n\t\tvar xy = str.match(reg)[1].split(\",\");\r\n\t\tif (xy.length < 2)//IE\r\n\t\t\txy = str.match(reg)[1].split(\" \");\r\n\t\treturn xy.length < 2 ? [xy[0], 0] : xy;\r\n\t} catch (e) {\r\n\t}\r\n\treturn [0, 0];\r\n};\r\n\r\nRegexUtil.scale = function(str) {\r\n\ttry {\r\n\t\t//IE\r\n\t\tvar scale = str.match(RegexUtil.scaleRegex)[1].split(\",\");\r\n\t\treturn scale.length < 2 ? [scale[0], scale[0]] : scale;\r\n\t} catch (e) {\r\n\t}\r\n\treturn [1, 1];\r\n};\r\n\r\nRegexUtil.rotate = function(str) {\r\n\ttry {\r\n\t\treturn str.match(RegexUtil.rotateRegex)[1];\r\n\t} catch (e) {\r\n\t}\r\n\treturn [0];\r\n};\r\n\r\nRegexUtil.px = function(str) {\r\n\ttry {\r\n\t\treturn parseInt(str.match(RegexUtil.pxRegex)[1]);\r\n\t} catch (e) {\r\n\t}\r\n\treturn 0;\r\n};\r\n\r\nmodule.exports = RegexUtil;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/regexUtil.js\n// module id = 126\n// module chunks = 0","// 选择控制工具类\r\n\r\nvar SelectUtil = {};\r\nvar childNodes = [];//当前画板内包含的dom图形节点数组\r\nvar selectedNodes = [];//当前画板内选中的dom图形节点数组\r\n\r\nvar controlCon, selectCon, moveArea, tlP, trP, brP, blP, tcP, rcP, bcP, lcP, rotateP, line, topLine, leftLine, bottomLine, rightLine,\r\n    r = 3.5, rotateGap = 20, lineGap = 1, pointStroke = \"#cc4c14\", pointFill = \"#ff7f00\", minWidth = 10, minHeight = 10,\r\n    fixedNum = 1,\r\n    resizeCursorList = [\"n-resize\", \"ne-resize\", \"e-resize\", \"se-resize\", \"s-resize\", \"sw-resize\", \"w-resize\", \"nw-resize\"];\r\n    \r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n    \r\n/**\r\n * 图标资源路径\r\n */\r\nvar iconPath = \"../image/svg_canvas/\";\r\nSelectUtil.iconPath = function(value) {\r\n    if (!arguments.length) \r\n        return iconPath;\r\n    iconPath = value;\r\n    return this;\r\n};\r\n\r\nSelectUtil.rotateUrl = function() {\r\n    return \"url(\" + SelectUtil.iconPath() + \"rotate_cursor.ico) 8 8,auto\";\r\n};\r\n\r\nSelectUtil.rotateCursor = function() {\r\n    return \"cursor:\" + SelectUtil.rotateUrl();\r\n};\r\n    \r\nSelectUtil.addNode = function(node, nodeData) {\r\n    if(!node || findNodeObjByNode(node)) {\r\n        return;\r\n    }\r\n    var box = node.getBBox();\r\n    //定义元素对应数据模型对象\r\n    if(nodeData) {\r\n    \tnodeData.path = getNodePath(node);\r\n    } else {\r\n    \tnodeData = {\r\n            x:box.x,                //当前x坐标\r\n            y:box.y,                //当前y坐标\r\n            width:box.width,        //元素外接矩形宽度\r\n            height:box.height,      //元素外接矩形高度\r\n            tx:0,                   //元素水平方向位移\r\n            ty:0,                   //元素垂直方向位移\r\n            rotate:0,               //元素外接矩形旋转角度\r\n            path:getNodePath(node)  //元素路径\r\n        };\r\n    }\r\n    d3.select(node).datum(nodeData);\r\n    node.setAttribute(\"z-index\", childNodes.length);\r\n    childNodes.push(node);\r\n};\r\n\r\nSelectUtil.removeSelectedNodes = function() {\r\n\twhile(selectedNodes.length > 0) {\r\n        SelectUtil.removeNode(selectedNodes[0]);\r\n\t}\r\n};\r\n\r\nSelectUtil.removeNode = function(node) {\r\n     if(!node) {\r\n        return;\r\n     }\r\n     var index = getIndexByNode(node, childNodes);\r\n     if(index !== -1) {\r\n        childNodes.splice(index, 1);\r\n     }\r\n     index = getIndexByNode(node, selectedNodes);\r\n     if(index !== -1) {\r\n        selectedNodes.splice(index, 1);\r\n     }\r\n     d3.select(node).remove();\r\n};\r\n\r\nSelectUtil.removeAllNodes = function() {\r\n    childNodes.length = 0;\r\n    selectedNodes.length = 0;\r\n};\r\n\r\nSelectUtil.getAllNodes = function() {\r\n    return childNodes;\r\n};\r\n\r\nSelectUtil.getSelectedNodes = function() {\r\n\treturn selectedNodes;\r\n};\r\n\r\nSelectUtil.getSelectedNodesInBBox = function(box) {\r\n    var result = [];\r\n    if(!box || childNodes.length === 0) {\r\n        return result;\r\n    }\r\n    var x = box.x,\r\n        y = box.y,\r\n        width = box.width,\r\n        height = box.height;\r\n    for(var i = 0, len = childNodes.length; i < len; i++) {\r\n        var node = childNodes[i];\r\n        var data = node.__data__;\r\n        if(isContain(box, data)) {\r\n            result.push(node);\r\n        } else {\r\n            var rectPath = \"M\"+x+\",\"+y +\r\n                \" L\"+(x+width)+\",\"+y+\r\n                \" L\"+(x+width)+\",\"+(y+height)+\r\n                \" L\"+(x)+\",\"+(y+height) + \"Z\";\r\n            var intersections = Raphael.pathIntersection(data.path, rectPath);\r\n            if(intersections.length > 0) {\r\n                result.push(node);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nSelectUtil.showControlPoints = function(con, nodes, graph) {\r\n    if(!con ||　nodes.length === 0) {\r\n        return;\r\n    }\r\n    selectedNodes = nodes;\r\n    initControlPoints(con, nodes, graph);\r\n    updateNodesProperies(nodes);\r\n    \r\n    //translate\r\n    addTranslateListeners(nodes, graph);\r\n    //resize\r\n    addResizeListeners(nodes, graph);\r\n    //rotate\r\n    addRotateListeners(con, nodes, graph);\r\n}\r\n\r\nSelectUtil.removeControlPoints = function(con) {\r\n\tupdateNodesProperies();\r\n    if(con) {\r\n        d3.select(con).selectAll(\"*\").remove();\r\n    }\r\n    if(controlCon) {\r\n        controlCon.remove();\r\n    }\r\n    selectedNodes.length = 0;\r\n}\r\n\r\nSelectUtil.validateNodes = function(nodes, oldRects) {\r\n\tfor(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n        node = nodes[i];\r\n        d = node.__data__;\r\n        var oldRect = (oldRects && i < oldRects.length) ? oldRects[i] : getRect(d);\r\n        //把tx/ty转移到dx/dy中\r\n        d.x += d.tx;\r\n        d.y += d.ty;\r\n        d.tx = 0;\r\n        d.ty = 0;\r\n        redrawNode(node, oldRect);\r\n    }\r\n    updateNodes(nodes);\r\n};\r\n\r\n/**\r\n * 移动选中的元素\r\n * @param direction 移动方向0.up;1.right;2.down;3.left;\r\n */\r\nSelectUtil.moveNodes = function(direction, moveStep) {\r\n\tif(selectedNodes.length === 0) {\r\n\t\treturn;\r\n\t}\r\n    var dx = 0, dy = 0, moveStep = moveStep === undefined ? 5 : moveStep;\r\n    if(direction === 0) {//up\r\n        dy = -moveStep;\r\n    } else if(direction === 1) {//right\r\n        dx = moveStep;\r\n    } else if(direction === 2) {//down\r\n        dy = moveStep;\r\n    } else if(direction === 3) {//left\r\n        dx = -moveStep;\r\n    }\r\n    var cd = controlCon.datum();\r\n    cd.tlX += dx;\r\n    cd.tlY += dy;\r\n    cd.brX += dx;\r\n    cd.brY += dy;\r\n    refreshControlPoints(selectedNodes, cd, false);\r\n    for(var node, d, i = 0, len = selectedNodes.length; i < len; i++) {\r\n        node = selectedNodes[i];\r\n        d = node.__data__;\r\n        var oldRect = getRect(d);\r\n        d.x += dx;\r\n        d.y += dy;\r\n        redrawNode(node, oldRect);\r\n    }\r\n    updateNodes(selectedNodes);\r\n}\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// private Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n//获取resize相关光标,type为resizeCursorList中定义的值\r\nvar getResizeCursor = function(type) {\r\n    if(type === undefined || !controlCon) {\r\n        return null;\r\n    }\r\n    var index = resizeCursorList.indexOf(type);\r\n    if(index === -1) {\r\n        return null;\r\n    }\r\n    var cd = controlCon.datum();\r\n    var n = Math.floor(((cd.rotate % 360 + 360) % 360 + 27.5) / 45);\r\n    index = (index + n) % 8;\r\n    return resizeCursorList[index];\r\n};\r\n\r\nvar updateNodes = function(nodes) {\r\n\tupdateNodesPath(nodes);\r\n\tupdateNodesProperies(nodes);\r\n};\r\n    \r\nvar updateNodesPath = function(nodes) {\r\n    if(!nodes || nodes.length === 0) {\r\n    \treturn;\r\n    }\r\n    for(var i = 0, len = nodes.length; i < len; i++) {\r\n        updateNodePath(nodes[i]);\r\n    }\r\n};\r\n\r\nvar updateNodesProperies = function(nodes) {\r\n\tif(!selectCon) {\r\n\t\treturn;\r\n\t}\r\n\tvar EventUtil = ghca_charts.view.util.eventUtil;\r\n    var BaseEvent = ghca_charts.events.BaseEvent;\r\n    var evt = (nodes && nodes.length === 1) ? \r\n        EventUtil.createCustomEvent(BaseEvent.UPDATE_PROPERTIES, true, true, nodes[0]) : \r\n        EventUtil.createCustomEvent(BaseEvent.HIDDEN_PROPERTIES, true, true);\r\n    selectCon.ownerSVGElement.dispatchEvent(evt);\r\n};\r\n\r\nvar updateNodePath = function(node) {\r\n\tif(!node) {\r\n        return;\r\n    }\r\n    var node = findNodeObjByNode(node);\r\n    if(node) {\r\n        var data = node.__data__;\r\n        data.x = toFixed(data.x);\r\n        data.y = toFixed(data.y);\r\n        data.width = toFixed(data.width);\r\n        data.height = toFixed(data.height);\r\n        data.rotate = toFixed(data.rotate);\r\n        data.path = getNodePath(node);\r\n    } else {\r\n        SelectUtil.addNode(node);\r\n    }\r\n};\r\n\r\n//获取元素路径的方法，若该元素还包括变换(transform)，则把该变换也转换到路径中\r\nvar getNodePath = function(node) {\r\n\tvar tagName = node.tagName;\r\n\tvar path = null;\r\n\tif(tagName === \"circle\") {\r\n\t\tvar r = parseFloat(node.getAttribute(\"r\"));\r\n\t\tpath = \"M \" + node.getAttribute(\"cx\") + \" \" + node.getAttribute(\"cy\") + \r\n\t\t  \"m \" + (-r) + \" \" + 0 + \r\n\t\t  \"a \" + r + \",\" + r + \" 0 1,0 \" + (r * 2) + \",0\" + \r\n\t\t  \"a \" + r + \",\" + r + \" 0 1,0 \" + (-r * 2) + \",0\";\r\n\t} else if(tagName === \"ellipse\") {\r\n        var k = .5522848,\r\n            x = parseFloat(node.getAttribute(\"cx\"));\r\n            y = parseFloat(node.getAttribute(\"cy\"));\r\n            a = parseFloat(node.getAttribute(\"rx\"));\r\n            b = parseFloat(node.getAttribute(\"ry\"));\r\n            ox = a * k, // 水平控制点偏移量\r\n            oy = b * k; // 垂直控制点偏移量\r\n    \r\n       //从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线\r\n       var p = d3.path();\r\n       p.moveTo(x - a, y);\r\n       p.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b);\r\n       p.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y);\r\n       p.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b);\r\n       p.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y);\r\n       p.closePath();\r\n       path = p.toString();\r\n\t} else if(tagName === \"line\") {\r\n        var x1 = parseFloat(node.getAttribute(\"x1\")),\r\n            y1 = parseFloat(node.getAttribute(\"y1\")),\r\n            x2 = parseFloat(node.getAttribute(\"x2\")),\r\n            y2 = parseFloat(node.getAttribute(\"y2\"));\r\n        path = \"M\"+x1+\",\"+y1+\" L\"+x2+\",\"+y2;\r\n    } else if(tagName === \"polyline\" || tagName === \"polygon\") {\r\n        var points = node.getAttribute('points').split(/\\s+|,/);\r\n        var x0 = points.shift(), \r\n            y0 = points.shift();\r\n        path = 'M'+x0+','+y0+'L'+points.join(' ');\r\n        if(tagName === \"polygon\") {\r\n            path += 'Z';\r\n        }\r\n    } else if(tagName === \"path\") {\r\n\t\tpath = node.getAttribute(\"d\");\r\n\t} else {//其他类型都当做矩形处理\r\n        var x = parseFloat(node.getAttribute(\"x\")),\r\n            y = parseFloat(node.getAttribute(\"y\")),\r\n            width = parseFloat(node.getAttribute(\"width\")),\r\n            height = parseFloat(node.getAttribute(\"height\"));\r\n        path =  \"M\"+x+\",\"+y +\r\n                \" L\"+(x+width)+\",\"+y+\r\n                \" L\"+(x+width)+\",\"+(y+height)+\r\n                \" L\"+(x)+\",\"+(y+height) + \"Z\";\r\n    } \r\n    //若该元素还包括变换，则把该变换也转换到路径中\r\n    var transformArray = node.__data__ ? node.__data__.transformArray : null;\r\n    if (transformArray && transformArray.length > 0) {\r\n        path = Raphael.transformPath(path, transformArray).join(\" \");\r\n    }\r\n\treturn path;\r\n};\r\n\r\nvar redrawNode = function(node, oldRect) {\r\n    var tagName = node.tagName;\r\n    var d = node.__data__;\r\n    var halfW = toFixed(d.width / 2);\r\n    var halfH = toFixed(d.height / 2);\r\n    var cx = toFixed(d.x + halfW);\r\n    var cy = toFixed(d.y + halfH);\r\n    if(tagName === \"circle\") {\r\n\t\tvar r = toFixed((d.width < d.height ? d.width : d.height) / 2);\r\n\t\tnode.setAttribute(\"cx\", cx);\r\n\t\tnode.setAttribute(\"cy\", cy);\r\n\t\tnode.setAttribute(\"r\", r);\r\n    } else if(tagName === \"ellipse\") {\r\n\t\tnode.setAttribute(\"cx\", cx);\r\n\t\tnode.setAttribute(\"cy\", cy);\r\n\t\tnode.setAttribute(\"rx\", halfW);\r\n\t\tnode.setAttribute(\"ry\", halfH);\r\n    } else if(tagName === \"line\") {\r\n        var x1 = parseFloat(node.getAttribute(\"x1\")),\r\n            y1 = parseFloat(node.getAttribute(\"y1\")),\r\n            x2 = parseFloat(node.getAttribute(\"x2\")),\r\n            y2 = parseFloat(node.getAttribute(\"y2\"));\r\n            points = getRedrawPoints([x1,y1,x2,y2], d, oldRect);\r\n        node.setAttribute(\"x1\", points[0]);\r\n        node.setAttribute(\"y1\", points[1]);\r\n        node.setAttribute(\"x2\", points[2]);\r\n        node.setAttribute(\"y2\", points[3]);\r\n    } else if(tagName === \"polyline\" || tagName === \"polygon\") {\r\n       var points = node.getAttribute('points').split(/\\s+|,/);\r\n       points = getRedrawPoints(points, d, oldRect);\r\n       node.setAttribute(\"points\", points);\r\n    } else if(tagName === \"path\") {\r\n    \tvar points = node.getAttribute(\"d\").split(/[^0-9.-]+/);\r\n    \tpoints.shift();\r\n    \tpoints = getRedrawPoints(points, d, oldRect);\r\n    \tvar x0 = points.shift(), \r\n            y0 = points.shift();\r\n        for(var i = 0, len = points.length; i < len; i+=2) {\r\n        \tpoints[i] = \" L \"+points[i]+\" \";\r\n        }\r\n        var path = 'M '+x0+' '+y0+points.join('');\r\n    \tnode.setAttribute(\"d\", path);\r\n    } else {//其他类型都当做矩形处理\r\n    \tnode.setAttribute(\"x\", d.x);\r\n        node.setAttribute(\"y\", d.y);\r\n        node.setAttribute(\"width\", d.width);\r\n        node.setAttribute(\"height\", d.height);\r\n    }\r\n    //svg不支持transform-origin,且为了兼容ie,所以在rotate(degree transform-origin-x, transform-origin-y)中设置\r\n    d3.select(node).attr(\"transform\", \"translate(\"+d.tx+\",\"+d.ty+\")rotate(\"+d.rotate+\" \"+cx+\" \"+cy+\")\");\r\n    d.transformArray = [\"t\", d.tx, d.ty, \"r\", d.rotate, cx, cy];\r\n};\r\n\r\n//points = [x1,y1,...,xn,yn]\r\nvar getRedrawPoints = function(points, newRect, oldRect) {\r\n\tvar x = newRect.x,\r\n        y = newRect.y,\r\n        width = newRect.width,\r\n        height = newRect.height,\r\n        ox = oldRect.x,\r\n        oy = oldRect.y,\r\n        oWidth = oldRect.width,\r\n        oHeight = oldRect.height;\r\n        sx = width/oWidth;\r\n        sy = height/oHeight;\r\n    for(var i = 0, len = points.length; i < len; i++) {\r\n    \tpoints[i] = toFixed((points[i]-ox)*sx + x);\r\n    \ti++;\r\n    \tpoints[i] = toFixed((points[i]-oy)*sy + y);\r\n    }\r\n    return points;\r\n};\r\n\r\nvar initControlPoints = function(con, nodes, graph) {\r\n    var node, data, boundRect, boundX, boundY, boundW, boundH,\r\n        tlX = NaN,\r\n        tlY = NaN,\r\n        brX = NaN,\r\n        brY = NaN,\r\n        tx = 0,\r\n        ty = 0,\r\n        rotate = 0,\r\n        len = nodes.length;\r\n    selectCon = con,\r\n    con = d3.select(con);\r\n    //若只有一个元素，则直接使用元素的矩形数据；若有多个元素，找出所有元素共有的最小外接矩形\r\n    if(len === 1) {\r\n    \t//若选中单个图形，则从该图形相关联的数据中取出已经记录的数据；若选中多个图形，则控制点数据使用初始化数据\r\n    \tnode = nodes[0];\r\n        data = node.__data__;\r\n        boundX = data.x;\r\n        boundY = data.y;\r\n        boundW = data.width;\r\n        boundH = data.height;\r\n        if(isNaN(tlX) ||　boundX < tlX) {\r\n            tlX = boundX;\r\n        }\r\n        if(isNaN(tlY) ||　boundY < tlY) {\r\n            tlY = boundY;\r\n        }\r\n        if(isNaN(brX) ||　boundX + boundW > brX) {\r\n            brX = boundX + boundW;\r\n        }\r\n        if(isNaN(brY) ||　boundY + boundH > brY) {\r\n            brY = boundY +　boundH;\r\n        }\r\n        tx = data.tx;\r\n        ty = data.ty;\r\n        rotate = data.rotate;\r\n    } else {\r\n    \tvar scaleX = graph.scaleX();\r\n    \tvar scaleY = graph.scaleY();\r\n    \t//用于获得DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）\r\n    \tconst SvgUtil = ghca_charts.view.util.svgUtil;\r\n    \tconRect = SvgUtil.getBoundingClientRect(con.node(), scaleX, scaleY);\r\n\t    for(var i = 0; i < len; i++) {\r\n            node = nodes[i];\r\n            data = node.__data__;\r\n            boundRect = SvgUtil.getBoundingClientRect(node, scaleX, scaleY);\r\n            boundX = boundRect.left - conRect.left;\r\n            boundY = boundRect.top - conRect.top;\r\n            boundW = boundRect.right - boundRect.left;\r\n            boundH = boundRect.bottom - boundRect.top;\r\n            if(isNaN(tlX) ||　boundX < tlX) {\r\n                tlX = boundX;\r\n            }\r\n            if(isNaN(tlY) ||　boundY < tlY) {\r\n                tlY = boundY;\r\n            }\r\n            if(isNaN(brX) ||　boundX + boundW > brX) {\r\n                brX = boundX + boundW;\r\n            }\r\n            if(isNaN(brY) ||　boundY + boundH > brY) {\r\n                brY = boundY +　boundH;\r\n            }\r\n//            //画元素外接矩形(测试用)\r\n//            con.append(\"rect\")\r\n//                .attr(\"x\", boundX).attr(\"y\", boundY)\r\n//                .attr(\"width\", boundW).attr(\"height\", boundH)\r\n//                .attr(\"stroke\", \"blue\").attr(\"fill\", \"none\");\r\n        }\r\n    }\r\n    //添加控制点和移动区域\r\n    var selectRectData = {\r\n        tlX:tlX,        //矩形左上角x坐标\r\n        tlY:tlY,        //矩形左上角y坐标\r\n        brX:brX,        //矩形右下角x坐标\r\n        brY:brY,        //矩形右下角y坐标\r\n        tx:tx,          //矩形水平方向位移\r\n        ty:ty,          //矩形垂直方向位移\r\n        rotate:rotate   //矩形旋转角度\r\n    };\r\n    controlCon = con.append(\"g\").datum(selectRectData);\r\n    moveArea = controlCon.append(\"rect\").attr(\"class\", \"moveArea\").attr(\"x\", tlX).attr(\"y\", tlY).attr(\"width\", brX-tlX)\r\n       .attr(\"height\", brY-tlY).attr(\"stroke\", \"none\").attr(\"fill\", pointFill).attr(\"fill-opacity\", \"0\").attr(\"cursor\", \"move\");//move area\r\n    var isShowPoints = (nodes.length === 1 && nodes[0].tagName === \"text\") ? \"none\" : \"block\";\r\n    tlP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", tlX).attr(\"cy\", tlY).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"nw-resize\"));//top left\r\n    trP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", brX).attr(\"cy\", tlY).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"ne-resize\"));//top right\r\n    brP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", brX).attr(\"cy\", brY).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"se-resize\"));//bottom right\r\n    blP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", tlX).attr(\"cy\", brY).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"sw-resize\"));//bottom left\r\n    tcP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", tlX+(brX-tlX)/2).attr(\"cy\", tlY).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"n-resize\"));//top center\r\n    rcP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", brX).attr(\"cy\", tlY+(brY-tlY)/2).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"e-resize\"));//right center\r\n    bcP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", tlX+(brX-tlX)/2).attr(\"cy\", brY).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"s-resize\"));//bottom center\r\n    lcP = controlCon.append(\"circle\").attr(\"display\", isShowPoints).attr(\"cx\", tlX).attr(\"cy\", tlY+(brY-tlY)/2).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", pointFill).attr(\"cursor\", getResizeCursor(\"w-resize\"));//left center\r\n    rotateP = controlCon.append(\"circle\").attr(\"cx\", tlX+(brX-tlX)/2).attr(\"cy\", tlY-rotateGap).attr(\"r\", r).attr(\"stroke\", pointStroke).attr(\"fill\", \"yellow\").attr(\"style\", SelectUtil.rotateCursor());//rotate\r\n    line = controlCon.insert(\"line\", \"*\").attr(\"x1\", tlX+(brX-tlX)/2).attr(\"y1\", tlY).attr(\"x2\", tlX+(brX-tlX)/2).attr(\"y2\", tlY-rotateGap).attr(\"stroke\", pointStroke);\r\n    topLine = controlCon.insert(\"line\", \"*\").attr(\"x1\", tlX-lineGap).attr(\"y1\", tlY-lineGap).attr(\"x2\", brX+lineGap).attr(\"y2\", tlY-lineGap).attr(\"stroke\", pointStroke).attr(\"stroke-dasharray\", \"4,4\");\r\n    leftLine = controlCon.insert(\"line\", \"*\").attr(\"x1\", tlX-lineGap).attr(\"y1\", tlY-lineGap).attr(\"x2\", tlX-lineGap).attr(\"y2\", brY+lineGap).attr(\"stroke\", pointStroke).attr(\"stroke-dasharray\", \"4,4\");\r\n    bottomLine = controlCon.insert(\"line\", \"*\").attr(\"x1\", tlX-lineGap).attr(\"y1\", brY+lineGap).attr(\"x2\", brX+lineGap).attr(\"y2\", brY+lineGap).attr(\"stroke\", pointStroke).attr(\"stroke-dasharray\", \"4,4\");\r\n    rightLine = controlCon.insert(\"line\", \"*\").attr(\"x1\", brX+lineGap).attr(\"y1\", tlY-lineGap).attr(\"x2\", brX+lineGap).attr(\"y2\", brY+lineGap).attr(\"stroke\", pointStroke).attr(\"stroke-dasharray\", \"4,4\");\r\n    refreshControlPoints(nodes, selectRectData, false);\r\n};\r\n\r\nvar refreshResizeCursor = function() {\r\n\ttlP.attr(\"cursor\", getResizeCursor(\"nw-resize\"));//top left\r\n    trP.attr(\"cursor\", getResizeCursor(\"ne-resize\"));//top right\r\n    brP.attr(\"cursor\", getResizeCursor(\"se-resize\"));//bottom right\r\n    blP.attr(\"cursor\", getResizeCursor(\"sw-resize\"));//bottom left\r\n    tcP.attr(\"cursor\", getResizeCursor(\"n-resize\"));//top center\r\n    rcP.attr(\"cursor\", getResizeCursor(\"e-resize\"));//right center\r\n    bcP.attr(\"cursor\", getResizeCursor(\"s-resize\"));//bottom center\r\n    lcP.attr(\"cursor\", getResizeCursor(\"w-resize\"));//left center\r\n};\r\n\r\nvar setAllCursor = function(type) {\r\n\tif(!type) {//default cursor\r\n\t\trefreshResizeCursor();\r\n\t\trotateP.attr(\"style\", SelectUtil.rotateCursor());\r\n        moveArea.attr(\"cursor\", \"move\");\r\n        line.attr(\"cursor\", \"\");\r\n        topLine.attr(\"cursor\", \"\");\r\n        leftLine.attr(\"cursor\", \"\");\r\n        bottomLine.attr(\"cursor\", \"\");\r\n        rightLine.attr(\"cursor\", \"\");\r\n        document.body.style.cursor = \"\";\r\n\t} else {\r\n\t\ttlP.attr(\"cursor\", type)\r\n        trP.attr(\"cursor\", type);\r\n        brP.attr(\"cursor\", type);\r\n        blP.attr(\"cursor\", type);\r\n        tcP.attr(\"cursor\", type);\r\n        rcP.attr(\"cursor\", type);\r\n        bcP.attr(\"cursor\", type);\r\n        lcP.attr(\"cursor\", type);\r\n        rotateP.attr(\"style\", \"cursor:\"+type);\r\n        moveArea.attr(\"cursor\", type);\r\n        line.attr(\"cursor\", type);\r\n        topLine.attr(\"cursor\", type);\r\n        leftLine.attr(\"cursor\", type);\r\n        bottomLine.attr(\"cursor\", type);\r\n        rightLine.attr(\"cursor\", type);\r\n        document.body.style.cursor = type;\r\n\t}\r\n};\r\n\r\nvar refreshControlPoints = function(nodes, d, isUpdateTranslate, cx, cy, isSaveTranslate) {\r\n\tvar rotate = d.rotate;\r\n    var tlX = d.tlX;\r\n    var tlY = d.tlY;\r\n    var brX = d.brX;\r\n    var brY = d.brY;\r\n    moveArea.attr(\"x\", tlX).attr(\"y\", tlY).attr(\"width\", brX-tlX).attr(\"height\", brY-tlY);//move area\r\n    tlP.attr(\"cx\", tlX).attr(\"cy\", tlY).attr(\"r\", r);//top left\r\n    trP.attr(\"cx\", brX).attr(\"cy\", tlY).attr(\"r\", r);//top right\r\n    brP.attr(\"cx\", brX).attr(\"cy\", brY).attr(\"r\", r);//bottom right\r\n    blP.attr(\"cx\", tlX).attr(\"cy\", brY).attr(\"r\", r);//bottom left\r\n    tcP.attr(\"cx\", tlX+(brX-tlX)/2).attr(\"cy\", tlY).attr(\"r\", r);//top center\r\n    rcP.attr(\"cx\", brX).attr(\"cy\", tlY+(brY-tlY)/2).attr(\"r\", r);//right center\r\n    bcP.attr(\"cx\", tlX+(brX-tlX)/2).attr(\"cy\", brY).attr(\"r\", r);//bottom center\r\n    lcP.attr(\"cx\", tlX).attr(\"cy\", tlY+(brY-tlY)/2).attr(\"r\", r);//left center\r\n    rotateP.attr(\"cx\", tlX+(brX-tlX)/2).attr(\"cy\", tlY-rotateGap).attr(\"r\", r);//rotate\r\n    line.attr(\"x1\", tlX+(brX-tlX)/2).attr(\"y1\", tlY).attr(\"x2\", tlX+(brX-tlX)/2).attr(\"y2\", tlY-rotateGap);\r\n    topLine.attr(\"x1\", tlX-lineGap).attr(\"y1\", tlY-lineGap).attr(\"x2\", brX+lineGap).attr(\"y2\", tlY-lineGap);\r\n    leftLine.attr(\"x1\", tlX-lineGap).attr(\"y1\", tlY-lineGap).attr(\"x2\", tlX-lineGap).attr(\"y2\", brY+lineGap);\r\n    bottomLine.attr(\"x1\", tlX-lineGap).attr(\"y1\", brY+lineGap).attr(\"x2\", brX+lineGap).attr(\"y2\", brY+lineGap);\r\n    rightLine.attr(\"x1\", brX+lineGap).attr(\"y1\", tlY-lineGap).attr(\"x2\", brX+lineGap).attr(\"y2\", brY+lineGap);\r\n    \r\n    var newCx = d.tlX + (d.brX-d.tlX)/2;\r\n    var newCy = d.tlY + (d.brY-d.tlY)/2;\r\n    var tx = d.tx;\r\n    var ty = d.ty;\r\n    if(isUpdateTranslate && cx !== undefined && cy !== undefined) {\r\n    \tvar dx = newCx - cx;\r\n    \tvar dy = newCy - cy;\r\n    \tvar l = Math.sqrt(dx*dx+dy*dy);\r\n    \tvar origRad = Math.atan2(dy, dx);\r\n    \tvar rad = origRad + rotate*Math.PI/180;\r\n    \tdx = (cx + Math.round(l*Math.cos(rad))) - newCx;\r\n    \tdy = (cy + Math.round(l*Math.sin(rad))) - newCy;\r\n    \ttx += dx;\r\n    \tty += dy;\r\n    \t//记录位移数据到相关选中的对象对应的data\r\n    \tfor(var node, data, i = 0, len = nodes.length; i < len; i++) {\r\n            node = nodes[i];\r\n            data = node.__data__;\r\n            data.tx = dx;\r\n            data.ty = dy;\r\n        }\r\n    \t//记录位移数据到控制点数据\r\n    \tif(isSaveTranslate) {\r\n            d.tx = tx;\r\n            d.ty = ty;\r\n            \r\n            //元素旋转完毕后，把本次旋转产生的tx/ty转移到dx/dy中\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                d.x += d.tx;\r\n                d.y += d.ty;\r\n                d.tx = 0;\r\n                d.ty = 0;\r\n                redrawNode(node, oldRect);\r\n            }\r\n        }\r\n    }\r\n    controlCon.attr(\"transform\", \"translate(\"+tx+\",\"+ty+\")rotate(\"+rotate+\" \"+newCx+\" \"+newCy+\")\");\r\n};\r\n\r\nvar getRect = function(d) {\r\n\treturn {x:d.x, y:d.y, width:d.width, height:d.height};\r\n};\r\n\r\nvar toFixed = function(n, f) {\r\n\tif(f === undefined) {\r\n\t\tf = fixedNum;\r\n\t}\r\n\treturn parseFloat(n.toFixed(f));\r\n};\r\n\r\nvar addTranslateListeners = function(nodes, graph) {\r\n\tvar w = d3.select(window);\r\n\tvar cd = controlCon.datum();\r\n    moveArea.on(\"mousedown.translate\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(\"move\");\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.translate\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var dx = toFixed((d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX());//chrome/firefox||兼容ie\r\n            var dy = toFixed((d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleX());\r\n            previousEvent = d3.event;\r\n            cd.tlX += dx;\r\n            cd.tlY += dy;\r\n            cd.brX += dx;\r\n            cd.brY += dy;\r\n            refreshControlPoints(nodes, cd, false);\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                d.x += dx;\r\n                d.y += dy;\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.translate\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.translate\", null);\r\n            w.on(\"mouseup.translate\", null);\r\n            setAllCursor();\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n};\r\n\r\nvar addRotateListeners = function(con, nodes, graph) {\r\n    var w = d3.select(window);\r\n    var cd = controlCon.datum();\r\n    rotateP.on(\"mousedown.rotate\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(SelectUtil.rotateUrl());\r\n        var cx = cd.tlX + (cd.brX-cd.tlX)/2 + cd.tx;\r\n        var cy = cd.tlY + (cd.brY-cd.tlY)/2 + cd.ty;\r\n        var oldRotate = cd.rotate;\r\n        var oldR = cd.rotate;\r\n        var cp = controlCon.append(\"circle\").attr(\"r\", 2).attr(\"cx\", cx - cd.tx).attr(\"cy\", cy - cd.ty).attr(\"fill\", \"black\");\r\n        w.on(\"mousemove.rotate\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n        \tconst MouseUtil = ghca_charts.view.util.mouseUtil;\r\n            var m = MouseUtil.mouse(con, graph);\r\n            var rotate = toFixed(Math.atan2(m[1]-cy, m[0]-cx)*180/Math.PI+90);\r\n            cd.rotate = rotate;\r\n            refreshControlPoints(nodes, cd, false);\r\n            cp.attr(\"cx\", cx - cd.tx).attr(\"cy\", cy - cd.ty);\r\n            var len = nodes.length;\r\n            if(len === 1) {\r\n            \tfor(var node, d, i = 0, len; i < len; i++) {\r\n                    node = nodes[i];\r\n                    d = node.__data__;\r\n                    var oldRect = getRect(d);\r\n                    d.rotate = rotate;\r\n                    redrawNode(node, oldRect);\r\n                }\r\n            } else if(len > 1) {\r\n            \tvar deltaRotate = cd.rotate - oldRotate;\r\n            \toldRotate = cd.rotate;\r\n            \tvar rad1 = (cd.rotate - oldR)/180*Math.PI;\r\n                for(var node, d, i = 0; i < len; i++) {\r\n                    node = nodes[i];\r\n                    d = node.__data__;\r\n                    d.rotate += deltaRotate;\r\n                    var x1 = d.x + d.width/2 - cx;\r\n                    var y1 = d.y + d.height/2 - cy;\r\n                    var rad2 = Math.atan2(y1,x1);\r\n                    var rad = rad1 + rad2;\r\n                    var l = Math.sqrt(x1*x1+y1*y1);\r\n                    var x2 = l*Math.cos(rad);\r\n                    var y2 = l*Math.sin(rad);\r\n                    var tx = x2 - x1;\r\n                    var ty = y2 - y1;\r\n                    var deltaTx = tx - (d.oldTx === undefined ? 0 : d.oldTx);\r\n                    var deltaTy = ty - (d.oldTy === undefined ? 0 : d.oldTy);\r\n                    d.oldTx = tx;\r\n                    d.oldTy = ty;\r\n                    d.tx += deltaTx;\r\n                    d.ty += deltaTy;\r\n                    redrawNode(node, getRect(d));\r\n                }\r\n            }\r\n        });\r\n        w.on(\"mouseup.rotate\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.rotate\", null);\r\n            w.on(\"mouseup.rotate\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, false);\r\n            refreshResizeCursor();\r\n            //多个元素旋转完毕后，把本次旋转产生的tx/ty转移到dx/dy中\r\n            if(nodes.length > 1) {\r\n            \tfor(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                    node = nodes[i];\r\n                    d = node.__data__;\r\n                    var deltaTx = d.oldTx === undefined ? 0 : d.oldTx;\r\n                    var deltaTy = d.oldTy === undefined ? 0 : d.oldTy;\r\n                    d.tx -= deltaTx;\r\n                    d.ty -= deltaTy;\r\n                    var oldRect = getRect(d);\r\n                    d.x += deltaTx;\r\n                    d.y += deltaTy;\r\n                    redrawNode(node, oldRect);\r\n                    delete d.oldTx;\r\n                    delete d.oldTy;\r\n                }\r\n            }\r\n            updateNodes(nodes);\r\n            cp.remove();\r\n        });\r\n    });\r\n};\r\n\r\nvar addResizeListeners = function(nodes, graph) {\r\n\tvar w = d3.select(window);\r\n\tvar cd = controlCon.datum();\r\n    //等比缩放\r\n    tlP.on(\"mousedown.tlP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"nw-resize\"));\r\n        var dw = cd.brX-cd.tlX;\r\n        var dh = cd.brY-cd.tlY;\r\n        var ratio = dw/dh;\r\n        var cx = cd.tlX + dw/2;\r\n        var cy = cd.tlY + dh/2;\r\n        var rad = cd.rotate/180*Math.PI;\r\n        var dx,dy;\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.tlP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var l = Math.sqrt(mx*mx+my*my);\r\n            var theta = Math.atan2(my,mx) - rad;\r\n            var fx = Math.round(l*Math.cos(theta));\r\n            var fy = Math.round(l*Math.sin(theta));\r\n            if(fx === 0 || fy === 0 || fx*fy < 0) {//xy同号\r\n                return;\r\n            } else if(fx/fy > ratio) {\r\n                dx = fy*ratio;\r\n                dy = fy;\r\n            } else {\r\n                dx = fx;\r\n                dy = fx/ratio;\r\n            }\r\n            //整体最小尺寸判断\r\n            if (cd.brX - cd.tlX - dx <= minWidth || cd.brY - cd.tlY - dy <= minHeight) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdw = cd.brX-cd.tlX;\r\n            var cdh = cd.brY-cd.tlY;\r\n            if(nodes.length > 1) {\r\n            \tfor(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDx = dx * d.width/cdw;\r\n                    var nodeDy = dy * d.height/cdh;\r\n                    if(d.width - nodeDx <= minWidth || d.height - nodeDy <= minHeight) {\r\n                    \treturn;\r\n                    }\r\n                }   \r\n            }\r\n            cd.tlX += dx;\r\n            cd.tlY += dy;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //每个元素进行等比缩放,缩放中心点为右下角\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n\t\t\t\t\td.x += dx;\r\n                \td.y += dy;\r\n                \td.width -= dx;\r\n                \td.height -= dy;\r\n                } else {\r\n                \tvar nodeDx = dx * d.width/cdw;\r\n                \tvar nodeDy = dy * d.height/cdh;\r\n                \td.x = (d.x-cd.brX)*(cdw-dx)/cdw+cd.brX;\r\n                \td.y = (d.y-cd.brY)*(cdh-dy)/cdh+cd.brY;\r\n                \td.width -= nodeDx;\r\n                \td.height -= nodeDy;\r\n                }\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.tlP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.tlP\", null);\r\n            w.on(\"mouseup.tlP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n    \r\n    trP.on(\"mousedown.trP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"ne-resize\"));\r\n        var dw = cd.brX-cd.tlX;\r\n        var dh = cd.brY-cd.tlY;\r\n        var ratio = dw/dh;\r\n        var cx = cd.tlX + dw/2;\r\n        var cy = cd.tlY + dh/2;\r\n        var rad = cd.rotate/180*Math.PI;\r\n        var dx,dy;\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.trP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var l = Math.sqrt(mx*mx+my*my);\r\n            var theta = Math.atan2(my,mx) - rad;\r\n            var fx = Math.round(l*Math.cos(theta));\r\n            var fy = Math.round(l*Math.sin(theta));\r\n            if(fx === 0 || fy === 0 || fx*fy > 0) {//xy反号\r\n                return;\r\n            } else if(-fx/fy > ratio) {\r\n                dx = -fy*ratio;\r\n                dy = fy;\r\n            } else {\r\n            \tdx = fx;\r\n                dy = -fx/ratio;\r\n            }\r\n            //整体最小尺寸判断\r\n            if(cd.brX - cd.tlX + dx <= minWidth || cd.brY - cd.tlY - dy <= minHeight) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdw = cd.brX-cd.tlX;\r\n            var cdh = cd.brY-cd.tlY;\r\n            if(nodes.length > 1) {\r\n                for(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDx = dx * d.width/cdw;\r\n                    var nodeDy = dy * d.height/cdh;\r\n                    if(d.width + nodeDx <= minWidth || d.height - nodeDy <= minHeight) {\r\n                        return;\r\n                    }\r\n                }   \r\n            }\r\n            cd.brX += dx;\r\n            cd.tlY += dy;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //每个元素进行等比缩放,缩放中心点为左下角\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n                \td.y += dy;\r\n                \td.width += dx;\r\n                \td.height -= dy;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar nodeDx = dx * d.width/cdw;\r\n                \tvar nodeDy = dy * d.height/cdh;\r\n                \td.x = (d.x-cd.tlX)*(cdw+dx)/cdw+cd.tlX;\r\n                \td.y = (d.y-cd.brY)*(cdh-dy)/cdh+cd.brY;\r\n                \td.width += nodeDx;\r\n                \td.height -= nodeDy;\r\n\t\t\t\t}\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.trP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.trP\", null);\r\n            w.on(\"mouseup.trP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n    \r\n    brP.on(\"mousedown.brP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"se-resize\"));\r\n        var dw = cd.brX-cd.tlX;\r\n        var dh = cd.brY-cd.tlY;\r\n        var ratio = dw/dh;\r\n        var cx = cd.tlX + dw/2;\r\n        var cy = cd.tlY + dh/2;\r\n        var rad = cd.rotate/180*Math.PI;\r\n        var dx,dy;\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.brP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var l = Math.sqrt(mx*mx+my*my);\r\n            var theta = Math.atan2(my,mx) - rad;\r\n            var fx = Math.round(l*Math.cos(theta));\r\n            var fy = Math.round(l*Math.sin(theta));\r\n            if(fx === 0 || fy === 0 || fx*fy < 0) {//xy同号\r\n                return;\r\n            } else if(fx/fy > ratio) {\r\n                dx = fy*ratio;\r\n                dy = fy;\r\n            } else {\r\n                dx = fx;\r\n                dy = fx/ratio;\r\n            }\r\n            //整体最小尺寸判断\r\n            if (cd.brX - cd.tlX + dx <= minWidth || cd.brY - cd.tlY + dy <= minHeight) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdw = cd.brX-cd.tlX;\r\n            var cdh = cd.brY-cd.tlY;\r\n            if(nodes.length > 1) {\r\n                for(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDx = dx * d.width/cdw;\r\n                    var nodeDy = dy * d.height/cdh;\r\n                    if(d.width + nodeDx <= minWidth || d.height + nodeDy <= minHeight) {\r\n                        return;\r\n                    }\r\n                }   \r\n            }\r\n            cd.brX += dx;\r\n            cd.brY += dy;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //每个元素进行等比缩放,缩放中心点为左上角\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n                \td.width += dx;\r\n                \td.height += dy;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar nodeDx = dx * d.width/cdw;\r\n                \tvar nodeDy = dy * d.height/cdh;\r\n                \td.x = (d.x-cd.tlX)*(cdw+dx)/cdw+cd.tlX;\r\n                \td.y = (d.y-cd.tlY)*(cdh+dy)/cdh+cd.tlY;\r\n                \td.width += nodeDx;\r\n                \td.height += nodeDy;\r\n\t\t\t\t}\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.brP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.brP\", null);\r\n            w.on(\"mouseup.brP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n    \r\n    blP.on(\"mousedown.blP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"sw-resize\"));\r\n        var dw = cd.brX-cd.tlX;\r\n        var dh = cd.brY-cd.tlY;\r\n        var ratio = dw/dh;\r\n        var cx = cd.tlX + dw/2;\r\n        var cy = cd.tlY + dh/2;\r\n        var rad = cd.rotate/180*Math.PI;\r\n        var dx,dy;\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.blP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var l = Math.sqrt(mx*mx+my*my);\r\n            var theta = Math.atan2(my,mx) - rad;\r\n            var fx = Math.round(l*Math.cos(theta));\r\n            var fy = Math.round(l*Math.sin(theta));\r\n            if(fx === 0 || fy === 0 || fx*fy > 0) {//xy反号\r\n                return;\r\n            } else if(-fx/fy > ratio) {\r\n                dx = -fy*ratio;\r\n                dy = fy;\r\n            } else {\r\n                dx = fx;\r\n                dy = -fx/ratio;\r\n            }\r\n            //整体最小尺寸判断\r\n            if (cd.brX - cd.tlX - dx <= minWidth || cd.brY - cd.tlY + dy <= minHeight) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdw = cd.brX-cd.tlX;\r\n            var cdh = cd.brY-cd.tlY;\r\n            if(nodes.length > 1) {\r\n                for(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDx = dx * d.width/cdw;\r\n                    var nodeDy = dy * d.height/cdh;\r\n                    if(d.width - nodeDx <= minWidth || d.height + nodeDy <= minHeight) {\r\n                        return;\r\n                    }\r\n                }   \r\n            }\r\n            cd.tlX += dx;\r\n            cd.brY += dy;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //每个元素进行等比缩放,缩放中心点为右上角\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n                \td.x += dx;\r\n                \td.width -= dx;\r\n                \td.height += dy\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar nodeDx = dx * d.width/cdw;\r\n                \tvar nodeDy = dy * d.height/cdh;\r\n                \td.x = (d.x-cd.brX)*(cdw-dx)/cdw+cd.brX;\r\n                \td.y = (d.y-cd.tlY)*(cdh+dy)/cdh+cd.tlY;\r\n                \td.width -= nodeDx;\r\n                \td.height += nodeDy;\r\n\t\t\t\t}\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.blP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.blP\", null);\r\n            w.on(\"mouseup.blP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n    \r\n    //非等比缩放\r\n    tcP.on(\"mousedown.tcP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"n-resize\"));\r\n        var cx = cd.tlX + (cd.brX-cd.tlX)/2;\r\n        var cy = cd.tlY + (cd.brY-cd.tlY)/2;\r\n        var rad = -cd.rotate/180*Math.PI;\r\n        var cosRad = Math.cos(rad);\r\n        var sinRad = Math.sin(rad);\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.tcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var dx = Math.round(mx*cosRad + my*sinRad);\r\n            var dy = Math.round(my*cosRad + mx*sinRad);\r\n            //整体最小尺寸判断\r\n            if (cd.brY - cd.tlY - dy <= minHeight) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdh = cd.brY-cd.tlY;\r\n            if(nodes.length > 1) {\r\n                for(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDy = dy * d.height/cdh;\r\n                    if(d.height - nodeDy <= minHeight) {\r\n                        return;\r\n                    }\r\n                }   \r\n            }\r\n            cd.tlY += dy;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //对每个元素除底边外的部分进行缩放\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n                \td.y += dy;\r\n                \td.height -= dy;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar nodeDy = dy * d.height/cdh;\r\n                \td.y = (d.y-cd.brY)*(cdh-dy)/cdh+cd.brY;\r\n                \td.height -= nodeDy;\r\n\t\t\t\t}\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.tcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.tcP\", null);\r\n            w.on(\"mouseup.tcP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n    \r\n    rcP.on(\"mousedown.rcP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"e-resize\"));\r\n        var cx = cd.tlX + (cd.brX-cd.tlX)/2;\r\n        var cy = cd.tlY + (cd.brY-cd.tlY)/2;\r\n        var rad = cd.rotate/180*Math.PI;\r\n        var cosRad = Math.cos(rad);\r\n        var sinRad = Math.sin(rad);\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.rcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var dx = Math.round(mx*cosRad + my*sinRad);\r\n            var dy = Math.round(my*cosRad + mx*sinRad);\r\n            //整体最小尺寸判断\r\n            if (cd.brX - cd.tlX + dx <= minWidth) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdw = cd.brX-cd.tlX;\r\n            var cdh = cd.brY-cd.tlY;\r\n            if(nodes.length > 1) {\r\n                for(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDx = dx * d.width/cdw;\r\n                    if(d.width + nodeDx <= minWidth) {\r\n                        return;\r\n                    }\r\n                }   \r\n            }\r\n            cd.brX += dx;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //对每个元素除左边外的部分进行缩放\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n                \td.width += dx;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar nodeDx = dx * d.width/cdw;\r\n                \td.x = (d.x-cd.tlX)*(cdw+dx)/cdw+cd.tlX;\r\n                \td.width += nodeDx;\r\n\t\t\t\t}\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.rcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.rcP\", null);\r\n            w.on(\"mouseup.rcP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n    \r\n    bcP.on(\"mousedown.bcP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"s-resize\"));\r\n        var cx = cd.tlX + (cd.brX-cd.tlX)/2;\r\n        var cy = cd.tlY + (cd.brY-cd.tlY)/2;\r\n        var rad = -cd.rotate/180*Math.PI;\r\n        var cosRad = Math.cos(rad);\r\n        var sinRad = Math.sin(rad);\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.bcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var dx = Math.round(mx*cosRad + my*sinRad);\r\n            var dy = Math.round(my*cosRad + mx*sinRad);\r\n            //整体最小尺寸判断\r\n            if (cd.brY - cd.tlY + dy <= minHeight) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdh = cd.brY-cd.tlY;\r\n            if(nodes.length > 1) {\r\n                for(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDy = dy * d.height/cdh;\r\n                    if(d.height + nodeDy <= minHeight) {\r\n                        return;\r\n                    }\r\n                }   \r\n            }\r\n            cd.brY += dy;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //对每个元素除顶边外的部分进行缩放\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n                \td.height += dy;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar nodeDy = dy * d.height/cdh;\r\n                \td.y = (d.y-cd.tlY)*(cdh+dy)/cdh+cd.tlY;\r\n                \td.height += nodeDy;\r\n\t\t\t\t}\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.bcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.bcP\", null);\r\n            w.on(\"mouseup.bcP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n    \r\n    lcP.on(\"mousedown.lcP\", function() {\r\n        d3.event.stopImmediatePropagation();\r\n        setAllCursor(getResizeCursor(\"w-resize\"));\r\n        var cx = cd.tlX + (cd.brX-cd.tlX)/2;\r\n        var cy = cd.tlY + (cd.brY-cd.tlY)/2;\r\n        var rad = cd.rotate/180*Math.PI;\r\n        var cosRad = Math.cos(rad);\r\n        var sinRad = Math.sin(rad);\r\n        var previousEvent = d3.event;\r\n        w.on(\"mousemove.lcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            var mx = (d3.event.movementX||(d3.event.screenX - previousEvent.screenX))/graph.scaleX();//chrome/firefox||兼容ie\r\n            var my = (d3.event.movementY||(d3.event.screenY - previousEvent.screenY))/graph.scaleY();\r\n            previousEvent = d3.event;\r\n            var dx = Math.round(mx*cosRad + my*sinRad);\r\n            var dy = Math.round(my*cosRad + mx*sinRad);\r\n            //整体最小尺寸判断\r\n            if (cd.brX - cd.tlX - dx <= minWidth) {\r\n                return;\r\n            }\r\n            //每个元素最小尺寸判断\r\n            var cdw = cd.brX-cd.tlX;\r\n            if(nodes.length > 1) {\r\n                for(var d, i = 0, len = nodes.length; i < len; i++) {\r\n                    d = nodes[i].__data__;\r\n                    var nodeDx = dx * d.width/cdw;\r\n                    if(d.width - nodeDx <= minWidth) {\r\n                        return;\r\n                    }\r\n                }   \r\n            }\r\n            cd.tlX += dx;\r\n            refreshControlPoints(nodes, cd, true, cx, cy);\r\n            //对每个元素除右边外的部分进行缩放\r\n            for(var node, d, i = 0, len = nodes.length; i < len; i++) {\r\n                node = nodes[i];\r\n                d = node.__data__;\r\n                var oldRect = getRect(d);\r\n                if(len === 1) {\r\n                \td.x += dx;\r\n                \td.width -= dx;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar nodeDx = dx * d.width/cdw;\r\n                \td.x = (d.x-cd.brX)*(cdw-dx)/cdw+cd.brX;\r\n                \td.width -= nodeDx;\r\n\t\t\t\t}\r\n                redrawNode(node, oldRect);\r\n            }\r\n        });\r\n        w.on(\"mouseup.lcP\", function() {\r\n        \td3.event.stopImmediatePropagation();\r\n            w.on(\"mousemove.lcP\", null);\r\n            w.on(\"mouseup.lcP\", null);\r\n            setAllCursor();\r\n            refreshControlPoints(nodes, cd, true, cx, cy, true);\r\n            updateNodes(nodes);\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * 判断一个矩形rect1是否包含另外一个矩形rect2\r\n * @param rect1 矩形1 rect:{x, y, width, height}\r\n * @param rect2 矩形2\r\n */\r\nvar isContain = function(rect1, rect2) {\r\n\tvar rect2X = rect2.hasOwnProperty(\"tx\") ? rect2.x + rect2.tx : rect2.x;\r\n\tvar rect2Y = rect2.hasOwnProperty(\"ty\") ? rect2.y + rect2.ty : rect2.y;\r\n    return  rect1.x < rect2X &&\r\n            rect1.y < rect2Y &&\r\n            rect1.x + rect1.width > rect2X +　rect2.width &&\r\n            rect1.y + rect1.height > rect2Y +　rect2.height;\r\n};\r\n\r\nvar findNodeObjByNode = function(node) {\r\n\tfor(var i = 0, len = childNodes.length; i < len; i++) {\r\n        if(childNodes[i] === node) {\r\n        \treturn childNodes[i];\r\n        }\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nvar getIndexByNode = function(node, source) {\r\n    for(var i = 0, len = source.length; i < len; i++) {\r\n        if(source[i] === node) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nmodule.exports = SelectUtil;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/selectUtil.js\n// module id = 127\n// module chunks = 0","// 字符串工具类\r\n\r\nvar StringUtil = {};\r\n\r\nvar canvas = document.createElement(\"canvas\");//用于字体尺寸度量\r\nvar ctx = canvas.getContext(\"2d\");\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 根据行数切割文本\r\n * @param text 文本内容\r\n * @param width 行宽度(px)\r\n * @param fontsize 文本字号(px)\r\n * @param textLine 文本行数\r\n * @return 返回切割后的文本数组，每个元素代表一行内容\r\n */\r\nStringUtil.splitByLine = function(text, width, fontsize, textLine) {\r\n    if (width == 0 || text == undefined)\r\n        return [text];\r\n    var curLen = 0, line = 1;\r\n    var result = [];\r\n    var start = 0, end = 0;\r\n    for (var i = 0; i < text.length; i++) {\r\n        var code = text.charCodeAt(i);\r\n        var pixelLen = code > 255 ? fontsize : fontsize / 2;\r\n        curLen += pixelLen;\r\n        if (curLen > width) {\r\n            end = i;\r\n            if (line === textLine) {\r\n                end > 1 ? end -= 2 : end = 1;\r\n                result.push(text.substring(start, end) + \"...\");\r\n                break;\r\n            }\r\n            result.push(text.substring(start, end));\r\n            start = i;\r\n            curLen = 0;\r\n            line++;\r\n        }\r\n        if (i === text.length - 1) {\r\n            result.push(text.substring(start, text.length));\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\n/**\r\n * 测量文本尺寸\r\n * @param texts 文本字符串内容或者多行文本字符串内容，多行文本用数组[line1String,...,linenString]这种形式，\r\n *              不支持\"\\n\"形式换行的多行文本测量。\r\n * @param fontSize 文本字号(px)\r\n * @param fontFamily 文本字体\r\n * @param isBold 是否粗体（默认false）\r\n * @param isItalic 是否斜体（默认false）\r\n * @return 返回文本尺寸,格式为{width:width, height:height}\r\n */\r\nStringUtil.measureText = function(texts, fontSize, fontFamily, isBold, isItalic) {\r\n\tfontSize = !isNaN(fontSize) ? parseInt(fontSize) : ghca_charts.view.util.regexUtil.px(fontSize);\r\n\tctx.font = (isItalic ? \"italic \" : \"\") + (isBold ? \"bold \" : \"\") + fontSize + \"px \" + fontFamily;\r\n\tctx.textBaseline = 'top';\r\n\tvar width = 0, height;\r\n\tif(texts.length) {\r\n\t\tfor(var w, i = 0, len = texts.length; i < len; i++) {\r\n\t\t\tw = Math.round(ctx.measureText(texts[i]).width);\r\n\t\t\tif(w > width) {\r\n\t\t\t\twidth = w;\r\n\t\t\t}\r\n\t\t}\r\n        heigth = Math.round(fontSize * texts.length * 1.25);\r\n\t} else {\r\n\t\twidth = Math.round(ctx.measureText(texts).width);\r\n        heigth = Math.round(fontSize * 1.25);\r\n\t}\r\n\treturn {width:width, height:heigth};\r\n}\r\n\r\n/**\r\n * 保留svg text元素中文本的空格显示(默认会把多个连续空格合并成一个空格显示)\r\n * @param ele svg text元素\r\n * @param spaceWidth 空格宽度(em)，默认0.5em\r\n */\r\nStringUtil.fixTextSpace = function(ele, spaceWidth) {\r\n    var content = ele.textContent;\r\n    var dx = [];\r\n    var i = -1;\r\n    var counter = 0;\r\n    spaceWidth = spaceWidth || 0.5;\r\n    while(++i < content.length) {\r\n        if (content[i] === ' ') {\r\n            //空格判断\r\n            counter++;\r\n        } else {\r\n            dx.push(counter * spaceWidth + 'em');\r\n            counter = 0;\r\n        }\r\n    }\r\n    ele.textContent = content.replace(/ /g, '');    //空格字符排除掉\r\n    ele.setAttribute('dx', dx.join(','));           //设置字符水平偏移量\r\n};\r\n\r\n/**\r\n * 解析百分比字符串\r\n * @param value 要解析的字符串\r\n * @return 返回解析出的百分比数字部分，若格式错误，则返回value\r\n */\r\nStringUtil.parsePercent = function(value) {\r\n\tif(!ghca_charts.view.util.objectUtil.isString(value)) {\r\n        return value;\r\n    }\r\n    var result = value.match(ghca_charts.view.util.regexUtil.percentRegex);\r\n    if(result === null) {\r\n        return value;\r\n    }\r\n    var pv = parseFloat(result[1]);\r\n    if(isNaN(pv)) {\r\n        return value;\r\n    }\r\n    return pv;\r\n};\r\n\r\n/**\r\n * 解析数组字符串\r\n * @param value 要解析的字符串\r\n * @return 返回解析出的数组，若格式错误，则返回value\r\n */\r\nStringUtil.parseArray = function(value) {\r\n\tif(!ghca_charts.view.util.objectUtil.isString(value)) {\r\n        return value;\r\n    }\r\n    var result;\r\n    try {\r\n    \tresult = eval(value);\r\n    } catch(e) {\r\n    \treturn value;\r\n    }\r\n    return ghca_charts.view.util.objectUtil.isArray(result) ? result : value;\r\n};\r\n\r\nmodule.exports = StringUtil;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/stringUtil.js\n// module id = 128\n// module chunks = 0","// svg工具类\r\nvar SvgUtil = {};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// static public Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\n/**\r\n * 移除某个dom元素的所有子元素\r\n * \r\n * @param {elements} elements 一个DOM节点对象\r\n */\r\nSvgUtil.removeAllChildren = function(element) {\r\n\t//element.innerHTML = \"\"这样的写法ie与非ie执行效果不一致\r\n\tif(element) {\r\n\t\twhile(element.hasChildNodes()) {  \r\n            element.removeChild(element.firstChild);  \r\n        }  \r\n\t}\r\n};\r\n\r\n/**\r\n * 解析SVG元素z-index属性，并根据其值定义元素的层级 规则：z-index越大，层级越高\r\n * \r\n * @param {elements} elements 一个包含DOM节点的类数组对象或者数组\r\n * @param {isIterator} isIterator 是否递归子节点排序\r\n * @return {void}\r\n */\r\nSvgUtil.sortByZIndex = function(elements, isIterator) {\r\n\tvar elements_arr = [];\r\n\t// 遍历节点列表，初始化一些设置\r\n\tfor (var i = 0, len = elements.length; i < len; i++) {\r\n\t\tvar elem = elements[i];\r\n\t\t// 某些类型的节点可能没有getAttribute属性，你也可以根据nodeType属性来判断\r\n\t\tif (!elem.getAttribute)\r\n\t\t\tcontinue;\r\n\r\n\t\t// 递归子节点\r\n\t\tif (isIterator && elem.childNodes) {\r\n\t\t\tSvgUtil.sortByZIndex(elem.childNodes);\r\n\t\t}\r\n\t\t// 默认所有元素都处于第0级\r\n\t\tif (!elem.getAttribute(\"z-index\")) {\r\n\t\t\telem.setAttribute(\"z-index\", 0);\r\n\t\t}\r\n\t\telements_arr.push(elem);\r\n\t}\r\n\r\n\tif (elements_arr.length === 0) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// 根据z-index属性进行排序\r\n\telements_arr.sort(function(e1, e2) {\r\n\t\tvar z1 = parseInt(e1.getAttribute(\"z-index\"));\r\n\t\tvar z2 = parseInt(e2.getAttribute(\"z-index\"));\r\n\t\tif (z1 === z2) {\r\n\t\t\treturn 0;\r\n\t\t} else if (z1 < z2) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t});\r\n\t// 排序完成后，按顺序移动这些元素\r\n\tvar parent = elements_arr[0] && elements_arr[0].parentNode;\r\n\tfor (var i = 0, len = elements_arr.length; i < len; i++) {\r\n\t\tvar elem = elements_arr[i];\r\n\t\t// 提示：appendChild里的elem节点如果在页面中已经存在\r\n\t\t// 那么表示这个节点从原来的地方移动到parent最后的地方，而不是以一个新节点插入\r\n\t\tparent.appendChild(elem);\r\n\t}\r\n};\r\n\r\nSvgUtil.hasElementInDefs = function (svg, id) {\r\n    if(!svg) {\r\n        return false;\r\n    }\r\n    var defs = getDefs(svg);\r\n    if(!defs) {\r\n        return false;\r\n    }\r\n    return defs.select(\"#\" + id).node() !== null;\r\n};\r\n\r\nSvgUtil.createDefElement = function(svg,data){\r\n\tif(SvgUtil.hasElementInDefs(svg, data.id)) {\r\n\t\tSvgUtil.deleteDefsElement(svg, data.id);\r\n\t}\r\n    var defs = getDefs(svg);\r\n    if(!defs) {\r\n    \tdefs = createDefs(svg);\r\n    }\r\n    switch(data.clazz){\r\n        case \"image\":{\r\n            var config = data.config;\r\n            var g = defs.append(\"g\").attr(\"id\",data.id);\r\n            g.append(\"image\").attr(\"width\",config.imageWidth)\r\n                .attr(\"height\",config.imageHeight)\r\n                .attr(\"xlink:href\",config.url)\r\n                .attr(\"x\",-config.imageWidth/2)\r\n                .attr(\"y\",-config.imageHeight/2);\r\n            break;\r\n        }\r\n        case \"ref\":{\r\n            var config = data.config;\r\n            var defsNode = defs.node();\r\n            var html = config && config.html;\r\n            if(Object.prototype.toString.call(html) === \"[object String]\") {\r\n            \thtml = html.replace(\" \", \" id='\" + data.id + \"' \");\r\n            \tdefsNode.innerHTML += html;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nSvgUtil.createRectMask = function(svg, id, x, y, width, height, rx, ry) {\r\n\tif(isNaN(rx) && isNaN(ry)) {\r\n\t\trx = 0;\r\n\t\try = 0;\r\n\t} else if(!isNaN(rx) && isNaN(ry)) {\r\n        ry = rx;\r\n    } else if(isNaN(rx) && !isNaN(ry)) {\r\n        rx = ry;\r\n    }\r\n\t\r\n\tif(SvgUtil.hasElementInDefs(svg, id)) {\r\n\t\tsvg.select(\"#\" + id + \" rect\")\r\n\t\t\t.attr(\"x\", x)\r\n            .attr(\"y\", y)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .attr(\"rx\", rx)\r\n            .attr(\"ry\", ry);\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\tvar defs = createDefs(svg);\r\n\tvar mask = defs.append(\"mask\")\r\n        .attr(\"id\", id)\r\n        .attr(\"maskUnits\", \"userSpaceOnUse\")\r\n        .append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"ry\", ry)\r\n        .attr(\"fill\", \"#fff\");\r\n        \r\n    return mask;\r\n};\r\n\r\nSvgUtil.deleteDefsElement = function(svg, id) {\r\n    var defs = getDefs(svg);\r\n    if(defs) {\r\n    \tdefs.select(\"#\" + id).remove();\r\n    }\r\n};\r\n\r\n/**\r\n * 用于获得DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）\r\n * \r\n * @param {node} DOM元素\r\n * @param {scaleX} 当前水平缩放值\r\n * @param {scaleY} 当前垂直缩放值\r\n * @return 返回DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）\r\n */\r\nSvgUtil.getBoundingClientRect = function(node, scaleX, scaleY) {\r\n    var rect = node.getBoundingClientRect();\r\n    //这样设置是因为rect属性为只读\r\n    return {\r\n    \tleft:   rect.left/scaleX,\r\n        right:  rect.right/scaleX,\r\n        top:    rect.top/scaleY,\r\n        bottom: rect.bottom /scaleY\r\n    };\r\n};\r\n\r\n/**\r\n * 用于获得全局坐标到SVG元素本地坐标值\r\n * \r\n * @param {node} SVG元素\r\n * @param {x} 全局x坐标\r\n * @param {y} 全局y坐标\r\n * @return 返回SVG元素本地坐标值{x:x, y:y}\r\n */\r\nSvgUtil.globalToLocal = function(node, x, y) {\r\n\tvar svg = node.ownerSVGElement || node;\r\n    if (svg.createSVGPoint) {\r\n        var point = svg.createSVGPoint();\r\n        point.x = x; \r\n        point.y = x;\r\n        /*CTM矩阵是局部坐标系(即指定对象内部坐标系，只有svg支持改方法)到屏幕坐标系的转换系数矩阵\r\n                                局部坐标矩阵*CTM = 屏幕坐标矩阵\r\n                                屏幕坐标矩阵*CTM逆矩阵(即screenCTM.inverse()) = 局部坐标矩阵\r\n        */\r\n        var screenCTM = node.getScreenCTM();\r\n        //根据屏幕坐标计算局部坐标\r\n        point = point.matrixTransform(screenCTM.inverse());\r\n        return {x:point.x, x:point.y};\r\n    }\r\n    return {x:x, y:y};\r\n};\r\n\r\n/**\r\n * 用于获得SVG元素本地坐标带到全局坐标值\r\n * \r\n * @param {node} SVG元素\r\n * @param {x} SVG元素本地x坐标\r\n * @param {y} SVG元素本地y坐标\r\n * @return 返回全局坐标值{x:x, y:y}\r\n */\r\nSvgUtil.localToGlobal = function(node, x, y) {\r\n    var svg = node.ownerSVGElement || node;\r\n    if (svg.createSVGPoint) {\r\n        var point = svg.createSVGPoint();\r\n        point.x = x; \r\n        point.y = x;\r\n        /*CTM矩阵是局部坐标系(即指定对象内部坐标系，只有svg支持改方法)到屏幕坐标系的转换系数矩阵\r\n                                局部坐标矩阵*CTM = 屏幕坐标矩阵\r\n                                屏幕坐标矩阵*CTM逆矩阵(即screenCTM.inverse()) = 局部坐标矩阵\r\n        */\r\n        var screenCTM = node.getScreenCTM();\r\n        //根据屏幕坐标计算局部坐标\r\n        point = point.matrixTransform(screenCTM);\r\n        return {x:point.x, x:point.y};\r\n    }\r\n    return {x:x, y:y};\r\n};\r\n\r\n// --------------------------------------------------------------------------\r\n//\r\n// private Methods\r\n//\r\n// --------------------------------------------------------------------------\r\n\r\nconst getDefs = function(svg) {\r\n    if(!svg) {\r\n        return null;\r\n    }\r\n    var defs = svg.select(\"defs\");\r\n    if(defs.node() === null) {\r\n        return null;\r\n    }\r\n    return defs;\r\n}\r\n\r\nconst createDefs = function(svg) {\r\n    var defs = getDefs(svg);\r\n    if(!defs) {\r\n        defs = svg.insert(\"defs\", \"svg.svgContainer g.bgContainer\");\r\n    }\r\n    return defs;\r\n}\r\n\r\nconst deleteDefs = function(svg) {\r\n    var defs = getDefs(svg);\r\n    if(defs) {\r\n        defs.remove();\r\n    }\r\n}\r\n\r\nmodule.exports = SvgUtil;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/svgUtil.js\n// module id = 129\n// module chunks = 0","//表格的格式化\r\nvar TableColFormatterUtil = {};\r\n\r\nTableColFormatterUtil.parseFormatter=function(data,colFormatter){  \r\n    var cols=data.columns;\r\n    if(!cols){\r\n        return;\r\n    }\r\n    var len=cols.length;\r\n    for(var i=0;i<len;i++){\r\n        var colData=cols[i];\r\n        setColFormatter(colData,colFormatter);\r\n    }\r\n}\r\n\r\n//custom progressbar formatter\r\nconst customPbFormatter = function(cell, formatterParams, onRendered) {\r\n    //cell - the cell component\r\n    //formatterParams - parameters set for the column\r\n    //onRendered - function to call when the formatter has been rendered\r\n\r\n\t//create and style render\r\n\tvar pbStyle = formatterParams ? formatterParams.pbStyle : '';\r\n\tvar pbBgStyle = formatterParams ? formatterParams.pbBgStyle : '';\r\n\tvar valueTextStyle = formatterParams ? formatterParams.valueTextStyle : '';\r\n\tvar percentTextStyle = formatterParams ? formatterParams.percentTextStyle : '';\r\n\tvar value = cell.getValue();\r\n\tvar min = isNaN(formatterParams.min) ? 0 : parseFloat(formatterParams.min);\r\n\tvar max = isNaN(formatterParams.max) ? value : parseFloat(formatterParams.max);\r\n\tmax < min && (max = min);\r\n\tisNaN(value) && (value = 0);\r\n\tvalue = parseFloat(value);\r\n\tvalue < min && (value = min);\r\n\tvalue > max && (value = max);\r\n\tvar pbBgWidthPercent = 100;\r\n\tvar pbWidthPercent = value / max * pbBgWidthPercent;\r\n\tvar percentLabel = Math.round(value / max * 100) + \"%\";\r\n\tpbStyle += \"width:\" + pbWidthPercent + \"%;\";\r\n\tpbBgStyle += \"width:\" + pbBgWidthPercent + \"%;\";\r\n    var render = $(\"<div>\" +\r\n\t\t    \t\t\t\"<div style='\" + pbBgStyle + \"'>\" +\r\n\t\t    \t\t\t\t\"<div style='\" + pbStyle + \"'/>\" +\r\n\t\t    \t\t\t\t\"<div style='\" + valueTextStyle + \"'>\" + value + \"</div>\" +\r\n\t\t    \t\t\t\t\"<div style='\" + percentTextStyle + \"'>\" + percentLabel + \"</div>\" +\r\n\t\t\t\t\t\t\"</div>\" +\r\n\t\t\t\t\t\"</div>\");\r\n    render.css({\r\n        \"padding\":\"3px\",\r\n        \"width\":\"100%\",\r\n        \"box-sizing\":\"border-box\"\r\n    });\r\n\r\n    //Set value of render to the current value of the cell\r\n    render.val(cell.getValue());\r\n    \r\n    //return the editor element\r\n    return render;\r\n};\r\n\r\nconst setColFormatter=function (colData,colFormatter){\r\n    var len=colFormatter.length;\r\n    if(colData.field){\r\n        for(var i=0;i<len;i++){\r\n            var formatter=colFormatter[i];\r\n            if(formatter.field===colData.field){\r\n                if(TableColFormatterUtil.Formatter[formatter.formatter]){//设置为配置的格式器\r\n                    colData.formatter=TableColFormatterUtil.Formatter[formatter.formatter];\r\n                    colData.customeFormatter=formatter.formatter;\r\n                    if(formatter.formatterParams){\r\n                        colData.formatterParams=formatter.formatterParams;\r\n                    }\r\n                    return;\r\n                }else if(colData.customeFormatter){\r\n                    colData.formatter=null;\r\n                    colData.customeFormatter=null;\r\n                }\r\n            }\r\n        }\r\n    }else if(colData.columns){\r\n        TableColFormatterUtil.parseFormatter(colData,colFormatter);\r\n    }\r\n}\r\n\r\nTableColFormatterUtil.Formatter={\r\n    cssFormater:function(cell, formatterParams) {//css格式化\r\n              cell.getElement().css(formatterParams);\r\n        return cell.getValue();\r\n    },\r\n    customPbFormatter:customPbFormatter//自定义进度条\r\n}\r\n\r\nmodule.exports = TableColFormatterUtil;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/tableColFormatterUtil.js\n// module id = 130\n// module chunks = 0","var UUID = {};\r\nvar reg = /[xy]/g;\r\nvar templete = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx-xxxx';\r\nUUID.generateUUID = function () {\r\n    var d = new Date().getTime();\r\n    var uuid = templete.replace(reg, function(c) {\r\n        var r = (d + Math.random()*16)%16 | 0;\r\n        d = Math.floor(d/16);\r\n        return (c==='x' ? r : (r&0x3|0x8)).toString(16);\r\n    });\r\n    // var uuid = 'xxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    //     var r = (d + Math.random()*16)%16 | 0;\r\n    //     d = Math.floor(d/16);\r\n    //     return (c=='x' ? r : (r&0x3|0x8)).toString(16);\r\n    // });\r\n    return uuid;\r\n};\r\nmodule.exports = UUID;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/util/UUIDUtil.js\n// module id = 131\n// module chunks = 0"],"sourceRoot":""}